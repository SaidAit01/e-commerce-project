// src/ecom-v1-fulfillments-order-fulfillments.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/fulfillments",
        destPath: "/v1/fulfillments"
      }
    ],
    _: [
      {
        srcPath: "/_api/fulfillments",
        destPath: ""
      },
      {
        srcPath: "/_api/ecom-fulfillments",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/fulfillments/v1/fulfillments",
        destPath: "/v1/fulfillments"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-fulfillments";
function listFulfillmentsForSingleOrder(payload) {
  function __listFulfillmentsForSingleOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/{orderId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __listFulfillmentsForSingleOrder;
}
function listFulfillmentsForMultipleOrders(payload) {
  function __listFulfillmentsForMultipleOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/list-by-ids",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ordersWithFulfillments.fulfillments.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listFulfillmentsForMultipleOrders;
}
function createFulfillment(payload) {
  function __createFulfillment({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "fulfillment.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/{orderId}/create-fulfillment",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createFulfillment;
}
function updateFulfillment(payload) {
  function __updateFulfillment({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "fulfillment.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/{fulfillment.id}/orders/{orderId}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __updateFulfillment;
}
function deleteFulfillment(payload) {
  function __deleteFulfillment({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "DELETE",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/{fulfillmentId}/orders/{orderId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __deleteFulfillment;
}
function bulkCreateFulfillment(payload) {
  function __bulkCreateFulfillment({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ordersWithFulfillments.fulfillments.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/bulk/create-fulfillments",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            {
              path: "results.ordersWithFulfillments.fulfillments.createdDate"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateFulfillment;
}

// src/ecom-v1-fulfillments-order-fulfillments.meta.ts
function listFulfillmentsForSingleOrder2() {
  const payload = { orderId: ":orderId" };
  const getRequestOptions = listFulfillmentsForSingleOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/fulfillments/orders/{orderId}",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function listFulfillmentsForMultipleOrders2() {
  const payload = {};
  const getRequestOptions = listFulfillmentsForMultipleOrders(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/fulfillments/list-by-ids",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createFulfillment2() {
  const payload = { orderId: ":orderId" };
  const getRequestOptions = createFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/fulfillments/orders/{orderId}/create-fulfillment",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateFulfillment2() {
  const payload = {
    fulfillment: { id: ":fulfillmentId" },
    orderId: ":orderId"
  };
  const getRequestOptions = updateFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/fulfillments/{fulfillment.id}/orders/{orderId}",
    pathParams: { fulfillmentId: "fulfillmentId", orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteFulfillment2() {
  const payload = {
    fulfillmentId: ":fulfillmentId",
    orderId: ":orderId"
  };
  const getRequestOptions = deleteFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/fulfillments/{fulfillmentId}/orders/{orderId}",
    pathParams: { fulfillmentId: "fulfillmentId", orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkCreateFulfillments() {
  const payload = {};
  const getRequestOptions = bulkCreateFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/fulfillments/orders/bulk/create-fulfillments",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
export {
  bulkCreateFulfillments,
  createFulfillment2 as createFulfillment,
  deleteFulfillment2 as deleteFulfillment,
  listFulfillmentsForMultipleOrders2 as listFulfillmentsForMultipleOrders,
  listFulfillmentsForSingleOrder2 as listFulfillmentsForSingleOrder,
  updateFulfillment2 as updateFulfillment
};
//# sourceMappingURL=meta.mjs.map