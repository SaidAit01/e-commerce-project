// src/ecom-v1-fulfillments-order-fulfillments.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-fulfillments-order-fulfillments.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/fulfillments",
        destPath: "/v1/fulfillments"
      }
    ],
    _: [
      {
        srcPath: "/_api/fulfillments",
        destPath: ""
      },
      {
        srcPath: "/_api/ecom-fulfillments",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/fulfillments/v1/fulfillments",
        destPath: "/v1/fulfillments"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-fulfillments";
function listFulfillmentsForSingleOrder(payload) {
  function __listFulfillmentsForSingleOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/{orderId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __listFulfillmentsForSingleOrder;
}
function listFulfillmentsForMultipleOrders(payload) {
  function __listFulfillmentsForMultipleOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/list-by-ids",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ordersWithFulfillments.fulfillments.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listFulfillmentsForMultipleOrders;
}
function createFulfillment(payload) {
  function __createFulfillment({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "fulfillment.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/{orderId}/create-fulfillment",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createFulfillment;
}
function updateFulfillment(payload) {
  function __updateFulfillment({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "fulfillment.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/{fulfillment.id}/orders/{orderId}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __updateFulfillment;
}
function deleteFulfillment(payload) {
  function __deleteFulfillment({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "DELETE",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/{fulfillmentId}/orders/{orderId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __deleteFulfillment;
}
function bulkCreateFulfillment(payload) {
  function __bulkCreateFulfillment({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ordersWithFulfillments.fulfillments.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/bulk/create-fulfillments",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            {
              path: "results.ordersWithFulfillments.fulfillments.createdDate"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateFulfillment;
}

// src/ecom-v1-fulfillments-order-fulfillments.universal.ts
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["CONTACT"] = "CONTACT";
  return IdentityType2;
})(IdentityType || {});
var FulfillmentStatus = /* @__PURE__ */ ((FulfillmentStatus2) => {
  FulfillmentStatus2["NOT_FULFILLED"] = "NOT_FULFILLED";
  FulfillmentStatus2["FULFILLED"] = "FULFILLED";
  FulfillmentStatus2["CANCELED"] = "CANCELED";
  FulfillmentStatus2["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
  return FulfillmentStatus2;
})(FulfillmentStatus || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function listFulfillmentsForSingleOrder2(orderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId });
  const reqOpts = listFulfillmentsForSingleOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listFulfillmentsForMultipleOrders2(orderIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ orderIds });
  const reqOpts = listFulfillmentsForMultipleOrders(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createFulfillment2(orderId, fulfillment) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    fulfillment
  });
  const reqOpts = createFulfillment(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]", fulfillment: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["orderId", "fulfillment"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateFulfillment2(identifiers, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    fulfillment: { ...options?.fulfillment, id: identifiers?.fulfillmentId },
    orderId: identifiers?.orderId
  });
  const reqOpts = updateFulfillment(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.orderWithFulfillments;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { fulfillment: "$[1].fulfillment" },
        explicitPathsToArguments: {
          "fulfillment.id": "$[0].fulfillmentId",
          orderId: "$[0].orderId"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteFulfillment2(identifiers) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    fulfillmentId: identifiers?.fulfillmentId,
    orderId: identifiers?.orderId
  });
  const reqOpts = deleteFulfillment(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          fulfillmentId: "$[0].fulfillmentId",
          orderId: "$[0].orderId"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkCreateFulfillments(ordersWithFulfillments) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ordersWithFulfillments
  });
  const reqOpts = bulkCreateFulfillment(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ordersWithFulfillments: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ordersWithFulfillments"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  FulfillmentStatus,
  IdentityType,
  WebhookIdentityType,
  bulkCreateFulfillments,
  createFulfillment2 as createFulfillment,
  deleteFulfillment2 as deleteFulfillment,
  listFulfillmentsForMultipleOrders2 as listFulfillmentsForMultipleOrders,
  listFulfillmentsForSingleOrder2 as listFulfillmentsForSingleOrder,
  updateFulfillment2 as updateFulfillment
};
//# sourceMappingURL=index.typings.mjs.map