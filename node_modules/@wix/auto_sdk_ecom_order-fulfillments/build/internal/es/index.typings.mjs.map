{"version":3,"sources":["../../../src/ecom-v1-fulfillments-order-fulfillments.universal.ts","../../../src/ecom-v1-fulfillments-order-fulfillments.http.ts"],"sourcesContent":["import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixEcomV1Fulfillments from './ecom-v1-fulfillments-order-fulfillments.http.js';\n\nexport interface OrderWithFulfillments {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /** Fulfillments associated with the order. */\n  fulfillments?: Fulfillment[];\n}\n\n/** for now, this is a sub-object of Orders, so can refer to order line items by id. */\nexport interface Fulfillment extends FulfillmentFulfillmentInfoOneOf {\n  /** Tracking info. */\n  trackingInfo?: FulfillmentTrackingInfo;\n  /** Custom fulfillment info. */\n  customInfo?: CustomFulfillmentInfo;\n  /**\n   * Fulfillment ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Line items being fulfilled.\n   * @maxSize 300\n   */\n  lineItems?: FulfillmentLineItem[];\n  /**\n   * The current status of the fulfillment process.\n   *\n   * Supported values:\n   * + `\"Pending\"` - Initial state when fulfillment is created but processing hasn't started.\n   * + `\"Accepted\"` - Order has been received and validated for fulfillment.\n   * + `\"Ready\"` - Items have been picked and packed, ready for shipping.\n   * + `\"In_Delivery\"` - Items have been handed over to the shipping carrier.\n   * + `\"Fulfilled\"` - Delivery has been completed successfully.\n   *\n   * The status typically progresses from Pending → Accepted → Ready → In_Delivery → Fulfilled.\n   * Status can be updated manually or automatically depending on your fulfillment workflow.\n   * @minLength 1\n   * @maxLength 100\n   */\n  status?: string | null;\n  /** Fulfillment handling complete. */\n  completed?: boolean | null;\n}\n\n/** @oneof */\nexport interface FulfillmentFulfillmentInfoOneOf {\n  /** Tracking info. */\n  trackingInfo?: FulfillmentTrackingInfo;\n  /** Custom fulfillment info. */\n  customInfo?: CustomFulfillmentInfo;\n}\n\nexport interface FulfillmentLineItem {\n  /**\n   * Line item ID (mirrors the ID of the order line item).\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * Line item quantity.\n   *\n   * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.\n   * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number | null;\n}\n\nexport interface FulfillmentTrackingInfo {\n  /**\n   * Shipping/delivery tracking number.\n   * @minLength 1\n   * @maxLength 100\n   */\n  trackingNumber?: string | null;\n  /**\n   * Shipping provider name. Can be either a predefined provider for automatic tracking link generation,\n   * or a custom provider name for manual tracking link management.\n   *\n   * Predefined providers that support automatic tracking link generation:\n   * `\"fedex\"` - FedEx shipping services\n   * `\"ups\"` - UPS shipping services\n   * `\"usps\"` - United States Postal Service\n   * `\"dhl\"` - DHL shipping services\n   * `\"canadaPost\"` - Canada Post shipping services\n   *\n   * For predefined providers:\n   * - The `trackingLink` field will be automatically populated based on the `trackingNumber`\n   * - Standard tracking URL formats are used for each carrier\n   * - No additional configuration is needed\n   *\n   * For custom shipping providers:\n   * - Use any string value to identify your provider\n   * - You must manually provide the `trackingLink`\n   * - Useful for local carriers or specialized shipping services\n   * @minLength 1\n   * @maxLength 100\n   */\n  shippingProvider?: string | null;\n  /**\n   * URL where customers can track their shipment status.\n   *\n   * For predefined shipping providers:\n   * - Automatically generated based on the `trackingNumber`\n   * - Uses the carrier's official tracking URL format\n   * - No manual input required\n   *\n   * For custom shipping providers:\n   * - Must be provided when creating the fulfillment\n   * - Should be a valid URL to the carrier's tracking page\n   * - Can include the tracking number as a parameter if needed\n   * @minLength 1\n   * @maxLength 2048\n   * @format WEB_URL\n   */\n  trackingLink?: string | null;\n}\n\nexport interface CustomFulfillmentInfo {\n  /**\n   * Custom fulfillment info in key:value form.\n   * @maxSize 100\n   */\n  fieldsData?: Record<string, string>;\n}\n\nexport interface FulfillmentCreated {\n  /**\n   * Order ID (auto generated upon order creation).\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * ID of the newly created fulfillment.\n   * @format GUID\n   */\n  fulfillmentId?: string;\n  /** Fulfillment creation date and time. */\n  dateCreated?: Date | null;\n  /** Buyer information. */\n  buyerInfo?: BuyerInfo;\n  /** Order fulfillment status. */\n  fulfillmentStatus?: FulfillmentStatusWithLiterals;\n  /** Fulfillment tracking information. */\n  trackingInfo?: V2FulfillmentTrackingInfo;\n}\n\n/** Buyer Info */\nexport interface BuyerInfo {\n  /**\n   * Wix customer ID\n   * @format GUID\n   */\n  _id?: string | null;\n  /**\n   * Deprecated (use identityType instead)\n   * @readonly\n   * @deprecated\n   */\n  type?: IdentityTypeWithLiterals;\n  /** Customer type */\n  identityType?: IdentityTypeWithLiterals;\n  /**\n   * Customer's first name\n   * @readonly\n   */\n  firstName?: string;\n  /**\n   * Customer's last name\n   * @readonly\n   */\n  lastName?: string;\n  /**\n   * Customer's phone number\n   * @readonly\n   */\n  phone?: string | null;\n  /**\n   * Customer's email address\n   * @readonly\n   */\n  email?: string;\n}\n\nexport enum IdentityType {\n  UNSPECIFIED_IDENTITY_TYPE = 'UNSPECIFIED_IDENTITY_TYPE',\n  /** Site member */\n  MEMBER = 'MEMBER',\n  /** Contact */\n  CONTACT = 'CONTACT',\n}\n\n/** @enumType */\nexport type IdentityTypeWithLiterals =\n  | IdentityType\n  | 'UNSPECIFIED_IDENTITY_TYPE'\n  | 'MEMBER'\n  | 'CONTACT';\n\nexport enum FulfillmentStatus {\n  /** None of the order items are fulfilled */\n  NOT_FULFILLED = 'NOT_FULFILLED',\n  /**\n   * All of the order items are fulfilled\n   * Orders without shipping info are fulfilled automatically\n   */\n  FULFILLED = 'FULFILLED',\n  /** Order is canceled */\n  CANCELED = 'CANCELED',\n  /** Some, but not all of the order items are fulfilled */\n  PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',\n}\n\n/** @enumType */\nexport type FulfillmentStatusWithLiterals =\n  | FulfillmentStatus\n  | 'NOT_FULFILLED'\n  | 'FULFILLED'\n  | 'CANCELED'\n  | 'PARTIALLY_FULFILLED';\n\nexport interface V2FulfillmentTrackingInfo {\n  /**\n   * Tracking number.\n   * @minLength 1\n   * @maxLength 100\n   */\n  trackingNumber?: string;\n  /**\n   * Shipping provider. Using the following shipping providers will allow for autofilling the tracking link:\n   * * `fedex`\n   * * `ups`\n   * * `usps`\n   * * `dhl`\n   * * `canadaPost`\n   * @minLength 1\n   * @maxLength 100\n   */\n  shippingProvider?: string;\n  /**\n   * Tracking link - autofilled if using a predefined shipping provider, otherwise provided on creation.\n   * @minLength 1\n   * @maxLength 2048\n   * @format WEB_URL\n   */\n  trackingLink?: string | null;\n}\n\nexport interface FulfillmentUpdated {\n  /**\n   * Order ID (auto generated upon order creation).\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * ID of the updated fulfillment.\n   * @format GUID\n   */\n  fulfillmentId?: string;\n  /** Fulfillment tracking information. */\n  trackingInfo?: V2FulfillmentTrackingInfo;\n}\n\nexport interface FulfillmentDeleted {\n  /**\n   * Order ID (auto generated upon order creation).\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * ID of the deleted fulfillment.\n   * @format GUID\n   */\n  fulfillmentId?: string;\n  /** Order fulfillment status. */\n  fulfillmentStatus?: FulfillmentStatusWithLiterals;\n}\n\nexport interface ListFulfillmentsForSingleOrderRequest {\n  /**\n   * Order ID for which to retrieve fulfillments.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId: string;\n}\n\nexport interface ListFulfillmentsForSingleOrderResponse {\n  /** List of fulfillments associated with the order. */\n  orderWithFulfillments?: OrderWithFulfillments;\n}\n\nexport interface ListFulfillmentsForMultipleOrdersRequest {\n  /**\n   * List of order IDs for which to retrieve fulfillments.\n   * @minSize 1\n   * @maxSize 100\n   */\n  orderIds: string[];\n}\n\nexport interface ListFulfillmentsForMultipleOrdersResponse {\n  /** List of order IDs and their associated fulfillments. */\n  ordersWithFulfillments?: OrderWithFulfillments[];\n}\n\nexport interface CreateFulfillmentRequest {\n  /** Order ID. */\n  orderId: string;\n  /** Fulfillment info. */\n  fulfillment: Fulfillment;\n}\n\nexport interface CreateFulfillmentResponse {\n  /** Order ID and the orders' fulfillments. */\n  orderWithFulfillments?: OrderWithFulfillments;\n  /** ID of created fulfillment. */\n  fulfillmentId?: string;\n}\n\nexport interface UpdateFulfillmentRequest {\n  /** Order ID. */\n  orderId: string;\n  /** Fulfillment info to update. */\n  fulfillment?: Fulfillment;\n}\n\nexport interface UpdateFulfillmentResponse {\n  /** Order ID and the orders' associated fulfillments after update. */\n  orderWithFulfillments?: OrderWithFulfillments;\n}\n\nexport interface DeleteFulfillmentRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId: string;\n  /**\n   * ID of the fulfillment to delete.\n   * @format GUID\n   */\n  fulfillmentId: string;\n}\n\nexport interface DeleteFulfillmentResponse {\n  /** Order ID and the order's associated fulfillments after deletion. */\n  orderWithFulfillments?: OrderWithFulfillments;\n}\n\nexport interface BulkCreateFulfillmentRequest {\n  /**\n   * List of order IDs and their associated fulfillments' info.\n   * @minSize 1\n   * @maxSize 100\n   */\n  ordersWithFulfillments: BulkCreateOrderWithFulfillments[];\n}\n\nexport interface BulkCreateOrderWithFulfillments {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Fulfillments associated with the order.\n   * @minSize 1\n   */\n  fulfillments?: Fulfillment[];\n}\n\nexport interface BulkCreateFulfillmentResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderFulfillmentsResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkOrderFulfillmentsResult {\n  /** Item metadata. */\n  itemMetadata?: ItemMetadata;\n  /** List of order IDs and their associated fulfillments. */\n  ordersWithFulfillments?: OrderWithFulfillments;\n}\n\nexport interface ItemMetadata {\n  /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n/** @docsIgnore */\nexport type CreateFulfillmentApplicationErrors = {\n  code?: 'TRACKING_NUMBER_ALREADY_EXISTS';\n  description?: string;\n  data?: Record<string, any>;\n};\n/** @docsIgnore */\nexport type UpdateFulfillmentApplicationErrors = {\n  code?: 'TRACKING_NUMBER_ALREADY_EXISTS';\n  description?: string;\n  data?: Record<string, any>;\n};\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface FulfillmentsUpdatedEnvelope {\n  entity: OrderWithFulfillments;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when one or more of an order's fulfillments are created, updated, or deleted.\n *\n * The response contains the order's ID and details about all of its fulfillments following the change.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_FULFILLMENTS\n * @webhook\n * @eventType wix.ecom.v1.fulfillments_updated\n * @serviceIdentifier com.wix.ecom.orders.fulfillments.v1.Fulfillments\n * @slug updated\n */\nexport declare function onFulfillmentsUpdated(\n  handler: (event: FulfillmentsUpdatedEnvelope) => void | Promise<void>\n): void;\n\n/**\n * Retrieves fulfillments associated with a specified order.\n *\n *\n * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.\n * @param orderId - Order ID for which to retrieve fulfillments.\n * @public\n * @requiredField orderId\n * @permissionId ECOM.READ_FULFILLMENTS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder\n */\nexport async function listFulfillmentsForSingleOrder(\n  orderId: string\n): Promise<\n  NonNullablePaths<\n    ListFulfillmentsForSingleOrderResponse,\n    `orderWithFulfillments.orderId` | `orderWithFulfillments.fulfillments`,\n    3\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });\n\n  const reqOpts =\n    ambassadorWixEcomV1Fulfillments.listFulfillmentsForSingleOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves fulfillments associated with multiple specified orders.\n *\n *\n * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.\n * @param orderIds - List of order IDs for which to retrieve fulfillments.\n * @public\n * @requiredField orderIds\n * @permissionId ECOM.READ_FULFILLMENTS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders\n */\nexport async function listFulfillmentsForMultipleOrders(\n  orderIds: string[]\n): Promise<\n  NonNullablePaths<\n    ListFulfillmentsForMultipleOrdersResponse,\n    `ordersWithFulfillments` | `ordersWithFulfillments.${number}.orderId`,\n    4\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ orderIds: orderIds });\n\n  const reqOpts =\n    ambassadorWixEcomV1Fulfillments.listFulfillmentsForMultipleOrders(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Creates an order fulfillment.\n *\n *\n * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.\n * @param orderId - Order ID.\n * @param fulfillment - Fulfillment info.\n * @public\n * @requiredField fulfillment\n * @requiredField fulfillment.lineItems\n * @requiredField fulfillment.lineItems._id\n * @requiredField orderId\n * @permissionId ECOM.MODIFY_FULFILLMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment\n */\nexport async function createFulfillment(\n  orderId: string,\n  fulfillment: NonNullablePaths<\n    Fulfillment,\n    `lineItems` | `lineItems.${number}._id`,\n    4\n  >\n): Promise<\n  NonNullablePaths<\n    CreateFulfillmentResponse,\n    | `orderWithFulfillments.orderId`\n    | `orderWithFulfillments.fulfillments`\n    | `fulfillmentId`,\n    3\n  > & {\n    __applicationErrorsType?: CreateFulfillmentApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    fulfillment: fulfillment,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Fulfillments.createFulfillment(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]', fulfillment: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'fulfillment']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates a fulfillment's properties.\n * To update a field's value, include the new value in the `fulfillment` field in the body params.\n * To remove a field's value, pass `null`.\n *\n *\n * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.\n *\n * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.\n * @public\n * @requiredField identifiers\n * @requiredField identifiers.fulfillmentId\n * @requiredField identifiers.orderId\n * @param identifiers - Order and fulfillment IDs to be updated.\n * @param options - Available options to use when updating a fulfillment.\n * @permissionId ECOM.MODIFY_FULFILLMENTS\n * @applicableIdentity APP\n * @returns Order ID and the orders' associated fulfillments after update.\n * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment\n */\nexport async function updateFulfillment(\n  identifiers: NonNullablePaths<\n    UpdateFulfillmentIdentifiers,\n    `fulfillmentId` | `orderId`,\n    2\n  >,\n  options?: UpdateFulfillmentOptions\n): Promise<\n  NonNullablePaths<OrderWithFulfillments, `orderId` | `fulfillments`, 2> & {\n    __applicationErrorsType?: UpdateFulfillmentApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    fulfillment: { ...options?.fulfillment, id: identifiers?.fulfillmentId },\n    orderId: identifiers?.orderId,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Fulfillments.updateFulfillment(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)\n      ?.orderWithFulfillments!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { fulfillment: '$[1].fulfillment' },\n        explicitPathsToArguments: {\n          'fulfillment.id': '$[0].fulfillmentId',\n          orderId: '$[0].orderId',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateFulfillmentOptions {\n  /** Fulfillment info. */\n  fulfillment: {\n    /** Tracking info. */\n    trackingInfo?: FulfillmentTrackingInfo;\n    /** Custom fulfillment info. */\n    customInfo?: CustomFulfillmentInfo;\n    /**\n     * Fulfillment ID.\n     * @format GUID\n     * @readonly\n     */\n    _id?: string | null;\n    /**\n     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n     * @readonly\n     */\n    _createdDate?: Date | null;\n    /**\n     * Line items being fulfilled.\n     * @maxSize 300\n     */\n    lineItems?: FulfillmentLineItem[];\n    /**\n     * The current status of the fulfillment process.\n     *\n     * Supported values:\n     * + `\"Pending\"` - Initial state when fulfillment is created but processing hasn't started.\n     * + `\"Accepted\"` - Order has been received and validated for fulfillment.\n     * + `\"Ready\"` - Items have been picked and packed, ready for shipping.\n     * + `\"In_Delivery\"` - Items have been handed over to the shipping carrier.\n     * + `\"Fulfilled\"` - Delivery has been completed successfully.\n     *\n     * The status typically progresses from Pending → Accepted → Ready → In_Delivery → Fulfilled.\n     * Status can be updated manually or automatically depending on your fulfillment workflow.\n     * @minLength 1\n     * @maxLength 100\n     */\n    status?: string | null;\n    /** Fulfillment handling complete. */\n    completed?: boolean | null;\n  };\n}\n\nexport interface UpdateFulfillmentIdentifiers {\n  /**\n   * ID of the fulfillment to be updated.\n   * @format GUID\n   * @readonly\n   */\n  fulfillmentId?: string | null;\n  /** Order ID. */\n  orderId: string;\n}\n\n/**\n * Deletes an existing order fulfillment.\n *\n *\n * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.\n * @public\n * @requiredField identifiers\n * @requiredField identifiers.fulfillmentId\n * @requiredField identifiers.orderId\n * @param identifiers - Order and fulfillment IDs.\n * @permissionId ECOM.MODIFY_FULFILLMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment\n */\nexport async function deleteFulfillment(\n  identifiers: NonNullablePaths<\n    DeleteFulfillmentIdentifiers,\n    `fulfillmentId` | `orderId`,\n    2\n  >\n): Promise<\n  NonNullablePaths<\n    DeleteFulfillmentResponse,\n    `orderWithFulfillments.orderId` | `orderWithFulfillments.fulfillments`,\n    3\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    fulfillmentId: identifiers?.fulfillmentId,\n    orderId: identifiers?.orderId,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Fulfillments.deleteFulfillment(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          fulfillmentId: '$[0].fulfillmentId',\n          orderId: '$[0].orderId',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface DeleteFulfillmentIdentifiers {\n  /**\n   * ID of the fulfillment to delete.\n   * @format GUID\n   */\n  fulfillmentId: string;\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId: string;\n}\n\n/**\n * Creates multiple fulfillments for one or more orders.\n *\n *\n * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.\n * @param ordersWithFulfillments - List of order IDs and their associated fulfillments' info.\n * @public\n * @requiredField ordersWithFulfillments\n * @requiredField ordersWithFulfillments.fulfillments\n * @requiredField ordersWithFulfillments.fulfillments.lineItems\n * @requiredField ordersWithFulfillments.fulfillments.lineItems._id\n * @requiredField ordersWithFulfillments.orderId\n * @permissionId ECOM.MODIFY_FULFILLMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment\n */\nexport async function bulkCreateFulfillments(\n  ordersWithFulfillments: NonNullablePaths<\n    BulkCreateOrderWithFulfillments,\n    | `fulfillments`\n    | `fulfillments.${number}.lineItems`\n    | `fulfillments.${number}.lineItems.${number}._id`\n    | `orderId`,\n    6\n  >[]\n): Promise<\n  NonNullablePaths<\n    BulkCreateFulfillmentResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.ordersWithFulfillments.orderId`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ordersWithFulfillments: ordersWithFulfillments,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1Fulfillments.bulkCreateFulfillment(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ordersWithFulfillments: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ordersWithFulfillments']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/fulfillments',\n        destPath: '/v1/fulfillments',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/fulfillments',\n        destPath: '',\n      },\n      {\n        srcPath: '/_api/ecom-fulfillments',\n        destPath: '',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/fulfillments/v1/fulfillments',\n        destPath: '/v1/fulfillments',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_order-fulfillments';\n\n/**\n * Retrieves fulfillments associated with a specified order.\n *\n *\n * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.\n */\nexport function listFulfillmentsForSingleOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listFulfillmentsForSingleOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/orders/{orderId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listFulfillmentsForSingleOrder;\n}\n\n/**\n * Retrieves fulfillments associated with multiple specified orders.\n *\n *\n * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.\n */\nexport function listFulfillmentsForMultipleOrders(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listFulfillmentsForMultipleOrders({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/list-by-ids',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ordersWithFulfillments.fulfillments.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listFulfillmentsForMultipleOrders;\n}\n\n/**\n * Creates an order fulfillment.\n *\n *\n * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.\n */\nexport function createFulfillment(payload: object): RequestOptionsFactory<any> {\n  function __createFulfillment({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'fulfillment.createdDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/orders/{orderId}/create-fulfillment',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createFulfillment;\n}\n\n/**\n * Updates a fulfillment's properties.\n * To update a field's value, include the new value in the `fulfillment` field in the body params.\n * To remove a field's value, pass `null`.\n *\n *\n * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.\n *\n * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.\n */\nexport function updateFulfillment(payload: object): RequestOptionsFactory<any> {\n  function __updateFulfillment({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'fulfillment.createdDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'PATCH' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/{fulfillment.id}/orders/{orderId}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateFulfillment;\n}\n\n/**\n * Deletes an existing order fulfillment.\n *\n *\n * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.\n */\nexport function deleteFulfillment(payload: object): RequestOptionsFactory<any> {\n  function __deleteFulfillment({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'DELETE' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/{fulfillmentId}/orders/{orderId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __deleteFulfillment;\n}\n\n/**\n * Creates multiple fulfillments for one or more orders.\n *\n *\n * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.\n */\nexport function bulkCreateFulfillment(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkCreateFulfillment({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'ordersWithFulfillments.fulfillments.createdDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/orders/bulk/create-fulfillments',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              {\n                path: 'results.ordersWithFulfillments.fulfillments.createdDate',\n              },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkCreateFulfillment;\n}\n"],"mappings":"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","names":["payload","IdentityType","FulfillmentStatus","WebhookIdentityType","listFulfillmentsForSingleOrder","listFulfillmentsForMultipleOrders","createFulfillment","updateFulfillment","deleteFulfillment"]}