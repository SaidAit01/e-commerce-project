import { ListFulfillmentsForSingleOrderRequest as ListFulfillmentsForSingleOrderRequest$1, ListFulfillmentsForSingleOrderResponse as ListFulfillmentsForSingleOrderResponse$1, ListFulfillmentsForMultipleOrdersRequest as ListFulfillmentsForMultipleOrdersRequest$1, ListFulfillmentsForMultipleOrdersResponse as ListFulfillmentsForMultipleOrdersResponse$1, CreateFulfillmentRequest as CreateFulfillmentRequest$1, CreateFulfillmentResponse as CreateFulfillmentResponse$1, UpdateFulfillmentRequest as UpdateFulfillmentRequest$1, UpdateFulfillmentResponse as UpdateFulfillmentResponse$1, DeleteFulfillmentRequest as DeleteFulfillmentRequest$1, DeleteFulfillmentResponse as DeleteFulfillmentResponse$1, BulkCreateFulfillmentRequest as BulkCreateFulfillmentRequest$1, BulkCreateFulfillmentResponse as BulkCreateFulfillmentResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

interface OrderWithFulfillments {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
interface Fulfillment extends FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
    /**
     * Fulfillment ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Line items being fulfilled.
     * @maxSize 300
     */
    lineItems?: FulfillmentLineItem[];
    /**
     * The current status of the fulfillment process.
     *
     * Supported values:
     * + `"Pending"` - Initial state when fulfillment is created but processing hasn't started.
     * + `"Accepted"` - Order has been received and validated for fulfillment.
     * + `"Ready"` - Items have been picked and packed, ready for shipping.
     * + `"In_Delivery"` - Items have been handed over to the shipping carrier.
     * + `"Fulfilled"` - Delivery has been completed successfully.
     *
     * The status typically progresses from Pending → Accepted → Ready → In_Delivery → Fulfilled.
     * Status can be updated manually or automatically depending on your fulfillment workflow.
     * @minLength 1
     * @maxLength 100
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
interface FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
}
interface FulfillmentLineItem {
    /**
     * Line item ID (mirrors the ID of the order line item).
     * @format GUID
     */
    id?: string;
    /**
     * Line item quantity.
     *
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
}
interface FulfillmentTrackingInfo {
    /**
     * Shipping/delivery tracking number.
     * @minLength 1
     * @maxLength 100
     */
    trackingNumber?: string | null;
    /**
     * Shipping provider name. Can be either a predefined provider for automatic tracking link generation,
     * or a custom provider name for manual tracking link management.
     *
     * Predefined providers that support automatic tracking link generation:
     * `"fedex"` - FedEx shipping services
     * `"ups"` - UPS shipping services
     * `"usps"` - United States Postal Service
     * `"dhl"` - DHL shipping services
     * `"canadaPost"` - Canada Post shipping services
     *
     * For predefined providers:
     * - The `trackingLink` field will be automatically populated based on the `trackingNumber`
     * - Standard tracking URL formats are used for each carrier
     * - No additional configuration is needed
     *
     * For custom shipping providers:
     * - Use any string value to identify your provider
     * - You must manually provide the `trackingLink`
     * - Useful for local carriers or specialized shipping services
     * @minLength 1
     * @maxLength 100
     */
    shippingProvider?: string | null;
    /**
     * URL where customers can track their shipment status.
     *
     * For predefined shipping providers:
     * - Automatically generated based on the `trackingNumber`
     * - Uses the carrier's official tracking URL format
     * - No manual input required
     *
     * For custom shipping providers:
     * - Must be provided when creating the fulfillment
     * - Should be a valid URL to the carrier's tracking page
     * - Can include the tracking number as a parameter if needed
     * @minLength 1
     * @maxLength 2048
     * @format WEB_URL
     */
    trackingLink?: string | null;
}
interface CustomFulfillmentInfo {
    /**
     * Custom fulfillment info in key:value form.
     * @maxSize 100
     */
    fieldsData?: Record<string, string>;
}
interface ListFulfillmentsForSingleOrderRequest {
    /**
     * Order ID for which to retrieve fulfillments.
     * @minLength 1
     * @maxLength 100
     */
    orderId: string;
}
interface ListFulfillmentsForSingleOrderResponse {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface ListFulfillmentsForMultipleOrdersRequest {
    /**
     * List of order IDs for which to retrieve fulfillments.
     * @minSize 1
     * @maxSize 100
     */
    orderIds: string[];
}
interface ListFulfillmentsForMultipleOrdersResponse {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments[];
}
interface CreateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment;
}
interface CreateFulfillmentResponse {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
interface UpdateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment;
}
interface UpdateFulfillmentResponse {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface DeleteFulfillmentRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    orderId: string;
    /**
     * ID of the fulfillment to delete.
     * @format GUID
     */
    fulfillmentId: string;
}
interface DeleteFulfillmentResponse {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments;
}
interface BulkCreateFulfillmentRequest {
    /**
     * List of order IDs and their associated fulfillments.
     * @minSize 1
     * @maxSize 100
     */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments[];
}
interface BulkCreateOrderWithFulfillments {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /**
     * Fulfillments associated with the order.
     * @minSize 1
     */
    fulfillments?: Fulfillment[];
}
interface BulkCreateFulfillmentResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkOrderFulfillmentsResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    ordersWithFulfillments?: OrderWithFulfillments;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listFulfillmentsForSingleOrder(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, ListFulfillmentsForSingleOrderRequest$1, ListFulfillmentsForSingleOrderRequest, ListFulfillmentsForSingleOrderResponse$1, ListFulfillmentsForSingleOrderResponse>;
declare function listFulfillmentsForMultipleOrders(): __PublicMethodMetaInfo<'POST', {}, ListFulfillmentsForMultipleOrdersRequest$1, ListFulfillmentsForMultipleOrdersRequest, ListFulfillmentsForMultipleOrdersResponse$1, ListFulfillmentsForMultipleOrdersResponse>;
declare function createFulfillment(): __PublicMethodMetaInfo<'POST', {
    orderId: string;
}, CreateFulfillmentRequest$1, CreateFulfillmentRequest, CreateFulfillmentResponse$1, CreateFulfillmentResponse>;
declare function updateFulfillment(): __PublicMethodMetaInfo<'PATCH', {
    fulfillmentId: string;
    orderId: string;
}, UpdateFulfillmentRequest$1, UpdateFulfillmentRequest, UpdateFulfillmentResponse$1, UpdateFulfillmentResponse>;
declare function deleteFulfillment(): __PublicMethodMetaInfo<'DELETE', {
    fulfillmentId: string;
    orderId: string;
}, DeleteFulfillmentRequest$1, DeleteFulfillmentRequest, DeleteFulfillmentResponse$1, DeleteFulfillmentResponse>;
declare function bulkCreateFulfillments(): __PublicMethodMetaInfo<'POST', {}, BulkCreateFulfillmentRequest$1, BulkCreateFulfillmentRequest, BulkCreateFulfillmentResponse$1, BulkCreateFulfillmentResponse>;

export { type __PublicMethodMetaInfo, bulkCreateFulfillments, createFulfillment, deleteFulfillment, listFulfillmentsForMultipleOrders, listFulfillmentsForSingleOrder, updateFulfillment };
