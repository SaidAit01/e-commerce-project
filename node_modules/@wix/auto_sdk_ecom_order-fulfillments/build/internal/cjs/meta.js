"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// meta.ts
var meta_exports = {};
__export(meta_exports, {
  bulkCreateFulfillments: () => bulkCreateFulfillments,
  createFulfillment: () => createFulfillment2,
  deleteFulfillment: () => deleteFulfillment2,
  listFulfillmentsForMultipleOrders: () => listFulfillmentsForMultipleOrders2,
  listFulfillmentsForSingleOrder: () => listFulfillmentsForSingleOrder2,
  updateFulfillment: () => updateFulfillment2
});
module.exports = __toCommonJS(meta_exports);

// src/ecom-v1-fulfillments-order-fulfillments.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/fulfillments",
        destPath: "/v1/fulfillments"
      }
    ],
    _: [
      {
        srcPath: "/_api/fulfillments",
        destPath: ""
      },
      {
        srcPath: "/_api/ecom-fulfillments",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/fulfillments/v1/fulfillments",
        destPath: "/v1/fulfillments"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-fulfillments";
function listFulfillmentsForSingleOrder(payload) {
  function __listFulfillmentsForSingleOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/{orderId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __listFulfillmentsForSingleOrder;
}
function listFulfillmentsForMultipleOrders(payload) {
  function __listFulfillmentsForMultipleOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/list-by-ids",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ordersWithFulfillments.fulfillments.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listFulfillmentsForMultipleOrders;
}
function createFulfillment(payload) {
  function __createFulfillment({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "fulfillment.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/{orderId}/create-fulfillment",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createFulfillment;
}
function updateFulfillment(payload) {
  function __updateFulfillment({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "fulfillment.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/{fulfillment.id}/orders/{orderId}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __updateFulfillment;
}
function deleteFulfillment(payload) {
  function __deleteFulfillment({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "DELETE",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/{fulfillmentId}/orders/{orderId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "orderWithFulfillments.fulfillments.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __deleteFulfillment;
}
function bulkCreateFulfillment(payload) {
  function __bulkCreateFulfillment({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ordersWithFulfillments.fulfillments.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.fulfillments",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({
        protoPath: "/v1/fulfillments/orders/bulk/create-fulfillments",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            {
              path: "results.ordersWithFulfillments.fulfillments.createdDate"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateFulfillment;
}

// src/ecom-v1-fulfillments-order-fulfillments.meta.ts
function listFulfillmentsForSingleOrder2() {
  const payload = { orderId: ":orderId" };
  const getRequestOptions = listFulfillmentsForSingleOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/fulfillments/orders/{orderId}",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function listFulfillmentsForMultipleOrders2() {
  const payload = {};
  const getRequestOptions = listFulfillmentsForMultipleOrders(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/fulfillments/list-by-ids",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createFulfillment2() {
  const payload = { orderId: ":orderId" };
  const getRequestOptions = createFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/fulfillments/orders/{orderId}/create-fulfillment",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateFulfillment2() {
  const payload = {
    fulfillment: { id: ":fulfillmentId" },
    orderId: ":orderId"
  };
  const getRequestOptions = updateFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/fulfillments/{fulfillment.id}/orders/{orderId}",
    pathParams: { fulfillmentId: "fulfillmentId", orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteFulfillment2() {
  const payload = {
    fulfillmentId: ":fulfillmentId",
    orderId: ":orderId"
  };
  const getRequestOptions = deleteFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/fulfillments/{fulfillmentId}/orders/{orderId}",
    pathParams: { fulfillmentId: "fulfillmentId", orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkCreateFulfillments() {
  const payload = {};
  const getRequestOptions = bulkCreateFulfillment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/fulfillments/orders/bulk/create-fulfillments",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bulkCreateFulfillments,
  createFulfillment,
  deleteFulfillment,
  listFulfillmentsForMultipleOrders,
  listFulfillmentsForSingleOrder,
  updateFulfillment
});
//# sourceMappingURL=meta.js.map