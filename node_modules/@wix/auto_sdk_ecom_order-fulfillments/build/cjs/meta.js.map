{"version":3,"sources":["../../meta.ts","../../src/ecom-v1-fulfillments-order-fulfillments.http.ts","../../src/ecom-v1-fulfillments-order-fulfillments.meta.ts"],"sourcesContent":["export * from './src/ecom-v1-fulfillments-order-fulfillments.meta.js';\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/fulfillments',\n        destPath: '/v1/fulfillments',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/fulfillments',\n        destPath: '',\n      },\n      {\n        srcPath: '/_api/ecom-fulfillments',\n        destPath: '',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/fulfillments/v1/fulfillments',\n        destPath: '/v1/fulfillments',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_order-fulfillments';\n\n/**\n * Retrieves fulfillments associated with a specified order.\n *\n *\n * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.\n */\nexport function listFulfillmentsForSingleOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listFulfillmentsForSingleOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/orders/{orderId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listFulfillmentsForSingleOrder;\n}\n\n/**\n * Retrieves fulfillments associated with multiple specified orders.\n *\n *\n * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.\n */\nexport function listFulfillmentsForMultipleOrders(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listFulfillmentsForMultipleOrders({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/list-by-ids',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ordersWithFulfillments.fulfillments.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listFulfillmentsForMultipleOrders;\n}\n\n/**\n * Creates an order fulfillment.\n *\n *\n * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.\n */\nexport function createFulfillment(payload: object): RequestOptionsFactory<any> {\n  function __createFulfillment({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'fulfillment.createdDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/orders/{orderId}/create-fulfillment',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createFulfillment;\n}\n\n/**\n * Updates a fulfillment's properties.\n * To update a field's value, include the new value in the `fulfillment` field in the body params.\n * To remove a field's value, pass `null`.\n *\n *\n * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.\n *\n * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.\n */\nexport function updateFulfillment(payload: object): RequestOptionsFactory<any> {\n  function __updateFulfillment({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'fulfillment.createdDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'PATCH' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/{fulfillment.id}/orders/{orderId}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateFulfillment;\n}\n\n/**\n * Deletes an existing order fulfillment.\n *\n *\n * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.\n */\nexport function deleteFulfillment(payload: object): RequestOptionsFactory<any> {\n  function __deleteFulfillment({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'DELETE' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/{fulfillmentId}/orders/{orderId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'orderWithFulfillments.fulfillments.createdDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __deleteFulfillment;\n}\n\n/**\n * Creates multiple fulfillments for one or more orders.\n *\n *\n * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.\n */\nexport function bulkCreateFulfillment(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkCreateFulfillment({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'ordersWithFulfillments.fulfillments.createdDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.fulfillments',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersFulfillmentsV1FulfillmentsUrl({\n        protoPath: '/v1/fulfillments/orders/bulk/create-fulfillments',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              {\n                path: 'results.ordersWithFulfillments.fulfillments.createdDate',\n              },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkCreateFulfillment;\n}\n","import * as ambassadorWixEcomV1Fulfillments from './ecom-v1-fulfillments-order-fulfillments.http.js';\nimport * as ambassadorWixEcomV1FulfillmentsTypes from './ecom-v1-fulfillments-order-fulfillments.types.js';\nimport * as ambassadorWixEcomV1FulfillmentsUniversalTypes from './ecom-v1-fulfillments-order-fulfillments.universal.js';\n\nexport type __PublicMethodMetaInfo<\n  K = string,\n  M = unknown,\n  T = unknown,\n  S = unknown,\n  Q = unknown,\n  R = unknown\n> = {\n  getUrl: (context: any) => string;\n  httpMethod: K;\n  path: string;\n  pathParams: M;\n  __requestType: T;\n  __originalRequestType: S;\n  __responseType: Q;\n  __originalResponseType: R;\n};\n\nexport function listFulfillmentsForSingleOrder(): __PublicMethodMetaInfo<\n  'GET',\n  { orderId: string },\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.ListFulfillmentsForSingleOrderRequest,\n  ambassadorWixEcomV1FulfillmentsTypes.ListFulfillmentsForSingleOrderRequest,\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.ListFulfillmentsForSingleOrderResponse,\n  ambassadorWixEcomV1FulfillmentsTypes.ListFulfillmentsForSingleOrderResponse\n> {\n  const payload = { orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1Fulfillments.listFulfillmentsForSingleOrder(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v1/fulfillments/orders/{orderId}',\n    pathParams: { orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function listFulfillmentsForMultipleOrders(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.ListFulfillmentsForMultipleOrdersRequest,\n  ambassadorWixEcomV1FulfillmentsTypes.ListFulfillmentsForMultipleOrdersRequest,\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.ListFulfillmentsForMultipleOrdersResponse,\n  ambassadorWixEcomV1FulfillmentsTypes.ListFulfillmentsForMultipleOrdersResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1Fulfillments.listFulfillmentsForMultipleOrders(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/fulfillments/list-by-ids',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function createFulfillment(): __PublicMethodMetaInfo<\n  'POST',\n  { orderId: string },\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.CreateFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsTypes.CreateFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.CreateFulfillmentResponse,\n  ambassadorWixEcomV1FulfillmentsTypes.CreateFulfillmentResponse\n> {\n  const payload = { orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1Fulfillments.createFulfillment(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/fulfillments/orders/{orderId}/create-fulfillment',\n    pathParams: { orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updateFulfillment(): __PublicMethodMetaInfo<\n  'PATCH',\n  { fulfillmentId: string; orderId: string },\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.UpdateFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsTypes.UpdateFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.UpdateFulfillmentResponse,\n  ambassadorWixEcomV1FulfillmentsTypes.UpdateFulfillmentResponse\n> {\n  const payload = {\n    fulfillment: { id: ':fulfillmentId' },\n    orderId: ':orderId',\n  } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1Fulfillments.updateFulfillment(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'PATCH',\n    path: '/v1/fulfillments/{fulfillment.id}/orders/{orderId}',\n    pathParams: { fulfillmentId: 'fulfillmentId', orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function deleteFulfillment(): __PublicMethodMetaInfo<\n  'DELETE',\n  { fulfillmentId: string; orderId: string },\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.DeleteFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsTypes.DeleteFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.DeleteFulfillmentResponse,\n  ambassadorWixEcomV1FulfillmentsTypes.DeleteFulfillmentResponse\n> {\n  const payload = {\n    fulfillmentId: ':fulfillmentId',\n    orderId: ':orderId',\n  } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1Fulfillments.deleteFulfillment(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'DELETE',\n    path: '/v1/fulfillments/{fulfillmentId}/orders/{orderId}',\n    pathParams: { fulfillmentId: 'fulfillmentId', orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function bulkCreateFulfillments(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.BulkCreateFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsTypes.BulkCreateFulfillmentRequest,\n  ambassadorWixEcomV1FulfillmentsUniversalTypes.BulkCreateFulfillmentResponse,\n  ambassadorWixEcomV1FulfillmentsTypes.BulkCreateFulfillmentResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1Fulfillments.bulkCreateFulfillment(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/fulfillments/orders/bulk/create-fulfillments',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n"],"mappings":"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","names":["createFulfillment","deleteFulfillment","listFulfillmentsForMultipleOrders","listFulfillmentsForSingleOrder","updateFulfillment","import_timestamp","import_rest_modules","payload","listFulfillmentsForSingleOrder","listFulfillmentsForMultipleOrders","createFulfillment","updateFulfillment","deleteFulfillment"]}