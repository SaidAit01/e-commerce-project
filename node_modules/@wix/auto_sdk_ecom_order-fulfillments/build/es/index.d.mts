import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { ListFulfillmentsForSingleOrderResponse, ListFulfillmentsForMultipleOrdersResponse, Fulfillment, CreateFulfillmentResponse, CreateFulfillmentApplicationErrors, UpdateFulfillmentIdentifiers, UpdateFulfillmentOptions, OrderWithFulfillments, UpdateFulfillmentApplicationErrors, DeleteFulfillmentIdentifiers, DeleteFulfillmentResponse, BulkCreateOrderWithFulfillments, BulkCreateFulfillmentResponse, FulfillmentsUpdatedEnvelope } from './index.typings.mjs';
export { ActionEvent, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkCreateFulfillmentRequest, BulkOrderFulfillmentsResult, BuyerInfo, CreateFulfillmentRequest, CustomFulfillmentInfo, DeleteFulfillmentRequest, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, FulfillmentCreated, FulfillmentDeleted, FulfillmentFulfillmentInfoOneOf, FulfillmentLineItem, FulfillmentStatus, FulfillmentStatusWithLiterals, FulfillmentTrackingInfo, FulfillmentUpdated, IdentificationData, IdentificationDataIdOneOf, IdentityType, IdentityTypeWithLiterals, ItemMetadata, ListFulfillmentsForMultipleOrdersRequest, ListFulfillmentsForSingleOrderRequest, MessageEnvelope, RestoreInfo, UpdateFulfillmentRequest, UpdateFulfillmentResponse, V2FulfillmentTrackingInfo, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function listFulfillmentsForSingleOrder$1(httpClient: HttpClient): ListFulfillmentsForSingleOrderSignature;
interface ListFulfillmentsForSingleOrderSignature {
    /**
     * Retrieves fulfillments associated with a specified order.
     *
     *
     * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.
     * @param - Order ID for which to retrieve fulfillments.
     */
    (orderId: string): Promise<NonNullablePaths<ListFulfillmentsForSingleOrderResponse, `orderWithFulfillments.orderId` | `orderWithFulfillments.fulfillments`, 3>>;
}
declare function listFulfillmentsForMultipleOrders$1(httpClient: HttpClient): ListFulfillmentsForMultipleOrdersSignature;
interface ListFulfillmentsForMultipleOrdersSignature {
    /**
     * Retrieves fulfillments associated with multiple specified orders.
     *
     *
     * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.
     * @param - List of order IDs for which to retrieve fulfillments.
     */
    (orderIds: string[]): Promise<NonNullablePaths<ListFulfillmentsForMultipleOrdersResponse, `ordersWithFulfillments` | `ordersWithFulfillments.${number}.orderId`, 4>>;
}
declare function createFulfillment$1(httpClient: HttpClient): CreateFulfillmentSignature;
interface CreateFulfillmentSignature {
    /**
     * Creates an order fulfillment.
     *
     *
     * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.
     * @param - Order ID.
     * @param - Fulfillment info.
     */
    (orderId: string, fulfillment: NonNullablePaths<Fulfillment, `lineItems` | `lineItems.${number}._id`, 4>): Promise<NonNullablePaths<CreateFulfillmentResponse, `orderWithFulfillments.orderId` | `orderWithFulfillments.fulfillments` | `fulfillmentId`, 3> & {
        __applicationErrorsType?: CreateFulfillmentApplicationErrors;
    }>;
}
declare function updateFulfillment$1(httpClient: HttpClient): UpdateFulfillmentSignature;
interface UpdateFulfillmentSignature {
    /**
     * Updates a fulfillment's properties.
     * To update a field's value, include the new value in the `fulfillment` field in the body params.
     * To remove a field's value, pass `null`.
     *
     *
     * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.
     *
     * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.
     * @param - Order and fulfillment IDs to be updated.
     * @param - Available options to use when updating a fulfillment.
     * @returns Order ID and the orders' associated fulfillments after update.
     */
    (identifiers: NonNullablePaths<UpdateFulfillmentIdentifiers, `fulfillmentId` | `orderId`, 2>, options?: UpdateFulfillmentOptions): Promise<NonNullablePaths<OrderWithFulfillments, `orderId` | `fulfillments`, 2> & {
        __applicationErrorsType?: UpdateFulfillmentApplicationErrors;
    }>;
}
declare function deleteFulfillment$1(httpClient: HttpClient): DeleteFulfillmentSignature;
interface DeleteFulfillmentSignature {
    /**
     * Deletes an existing order fulfillment.
     *
     *
     * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.
     * @param - Order and fulfillment IDs.
     */
    (identifiers: NonNullablePaths<DeleteFulfillmentIdentifiers, `fulfillmentId` | `orderId`, 2>): Promise<NonNullablePaths<DeleteFulfillmentResponse, `orderWithFulfillments.orderId` | `orderWithFulfillments.fulfillments`, 3>>;
}
declare function bulkCreateFulfillments$1(httpClient: HttpClient): BulkCreateFulfillmentsSignature;
interface BulkCreateFulfillmentsSignature {
    /**
     * Creates multiple fulfillments for one or more orders.
     *
     *
     * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.
     * @param - List of order IDs and their associated fulfillments' info.
     */
    (ordersWithFulfillments: NonNullablePaths<BulkCreateOrderWithFulfillments, `fulfillments` | `fulfillments.${number}.lineItems` | `fulfillments.${number}.lineItems.${number}._id` | `orderId`, 6>[]): Promise<NonNullablePaths<BulkCreateFulfillmentResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.ordersWithFulfillments.orderId` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onFulfillmentsUpdated$1: EventDefinition<FulfillmentsUpdatedEnvelope, "wix.ecom.v1.fulfillments_updated">;

declare const listFulfillmentsForSingleOrder: MaybeContext<BuildRESTFunction<typeof listFulfillmentsForSingleOrder$1> & typeof listFulfillmentsForSingleOrder$1>;
declare const listFulfillmentsForMultipleOrders: MaybeContext<BuildRESTFunction<typeof listFulfillmentsForMultipleOrders$1> & typeof listFulfillmentsForMultipleOrders$1>;
declare const createFulfillment: MaybeContext<BuildRESTFunction<typeof createFulfillment$1> & typeof createFulfillment$1>;
declare const updateFulfillment: MaybeContext<BuildRESTFunction<typeof updateFulfillment$1> & typeof updateFulfillment$1>;
declare const deleteFulfillment: MaybeContext<BuildRESTFunction<typeof deleteFulfillment$1> & typeof deleteFulfillment$1>;
declare const bulkCreateFulfillments: MaybeContext<BuildRESTFunction<typeof bulkCreateFulfillments$1> & typeof bulkCreateFulfillments$1>;
/**
 * Triggered when one or more of an order's fulfillments are created, updated, or deleted.
 *
 * The response contains the order's ID and details about all of its fulfillments following the change.
 */
declare const onFulfillmentsUpdated: BuildEventDefinition<typeof onFulfillmentsUpdated$1> & typeof onFulfillmentsUpdated$1;

export { BulkCreateFulfillmentResponse, BulkCreateOrderWithFulfillments, CreateFulfillmentApplicationErrors, CreateFulfillmentResponse, DeleteFulfillmentIdentifiers, DeleteFulfillmentResponse, Fulfillment, FulfillmentsUpdatedEnvelope, ListFulfillmentsForMultipleOrdersResponse, ListFulfillmentsForSingleOrderResponse, OrderWithFulfillments, UpdateFulfillmentApplicationErrors, UpdateFulfillmentIdentifiers, UpdateFulfillmentOptions, bulkCreateFulfillments, createFulfillment, deleteFulfillment, listFulfillmentsForMultipleOrders, listFulfillmentsForSingleOrder, onFulfillmentsUpdated, updateFulfillment };
