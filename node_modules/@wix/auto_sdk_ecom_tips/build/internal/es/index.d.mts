import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { LineItemInfo, PreviewTipOptions, PreviewTipResponse, PreviewTipApplicationErrors, GetTipByOrderIdResponse, GetTipByOrderIdApplicationErrors, GetTipByDraftOrderIdResponse, GetTipByDraftOrderIdApplicationErrors, GetTipChoiceResponse, GetTipChoiceApplicationErrors, TipChoice, UpdateTipChoiceOptions, UpdateTipChoiceResponse, UpdateTipChoiceApplicationErrors, SetTipOnOrderOptions, SetTipOnOrderResponse, SetTipOnOrderApplicationErrors, RemoveTipFromOrderOptions, RemoveTipFromOrderResponse, RemoveTipFromOrderApplicationErrors, AddTipDistributionsToOrderOptions, AddTipDistributionsToOrderResponse, AddTipDistributionsToOrderApplicationErrors, TipDistributionsQueryBuilder, SumTipDistributionAmountsResponse } from './index.typings.mjs';
export { ActionEvent, AddTipDistributionsToOrderOptionsIdentifierOneOf, AddTipDistributionsToOrderRequest, AddTipDistributionsToOrderRequestIdentifierOneOf, ApplyTipDistributionsRequest, ApplyTipDistributionsResponse, CatalogReference, CommonIdentificationData, CommonIdentificationDataIdOneOf, CreateTipDistributionsRequest, CreateTipDistributionsResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteTipDistributionsRequest, DeleteTipDistributionsRequestDeleteByOneOf, DeleteTipDistributionsResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, GetTipByDraftOrderIdRequest, GetTipByOrderIdRequest, GetTipChoiceRequest, IdentificationData, IdentificationDataIdOneOf, IdentityType, IdentityTypeWithLiterals, MessageEnvelope, OrderInfo, OrderInfoIdentifierOneOf, PreviewTipRequest, Price, PublishTipDistributionsCreatedEventRequest, PublishTipDistributionsCreatedEventResponse, QueryBy, QueryByWithLiterals, QueryTipDistributionsRequest, QueryTipDistributionsResponse, RemoveTipFromOrderOptionsIdentifierOneOf, RemoveTipFromOrderRequest, RemoveTipFromOrderRequestIdentifierOneOf, RestoreInfo, SetTipOnOrderOptionsIdentifierOneOf, SetTipOnOrderRequest, SetTipOnOrderRequestIdentifierOneOf, SortOrder, SortOrderWithLiterals, Sorting, Source, SourceWithLiterals, Staff, SumTipDistributionAmountsRequest, Tip, TipDistribution, TipDistributionsCreated, TipDistributionsQueryResult, TipType, TipTypeWithLiterals, Transaction, UpdateTipChoiceRequest, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function previewTip$1(httpClient: HttpClient): PreviewTipSignature;
interface PreviewTipSignature {
    /**
     * Previews a tip for a list of line items.
     *
     *
     * If you provide the Wix Bookings app ID ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/apps-created-by-wix) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/apps-created-by-wix))
     * as `lineItemInfo.catalogReference.appId`, the response includes tip
     * distributions for each associated
     * Bookings staff member ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
     *
     * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
     * based on the site's default tip settings.
     * @param - Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     * @param - Options to use when previewing a tip.
     */
    (lineItemInfo: NonNullablePaths<LineItemInfo, `catalogReference.appId` | `catalogReference.catalogItemId` | `price`, 3>[], options?: NonNullablePaths<PreviewTipOptions, `tipChoice` | `tipChoice.tipType` | `tipChoice.value`, 3>): Promise<NonNullablePaths<PreviewTipResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source`, 7> & {
        __applicationErrorsType?: PreviewTipApplicationErrors;
    }>;
}
declare function getTipByOrderId$1(httpClient: HttpClient): GetTipByOrderIdSignature;
interface GetTipByOrderIdSignature {
    /**
     * Retrieves the tip that's associated with an
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     * @param - ID of the order to retrieve the tip for.
     */
    (orderId: string): Promise<NonNullablePaths<GetTipByOrderIdResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source`, 7> & {
        __applicationErrorsType?: GetTipByOrderIdApplicationErrors;
    }>;
}
declare function getTipByDraftOrderId$1(httpClient: HttpClient): GetTipByDraftOrderIdSignature;
interface GetTipByDraftOrderIdSignature {
    /**
     * Retrieves the tip that's associated with an eCommerce draft order.
     *
     *
     * <blockquote class="important">
     *
     * __Important:__
     * The eCommerce Draft Orders API is currently under development and not yet available to users.
     *
     * </blockquote>
     * @param - ID of the draft order to retrieve the tip for.
     */
    (draftOrderId: string): Promise<NonNullablePaths<GetTipByDraftOrderIdResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source`, 7> & {
        __applicationErrorsType?: GetTipByDraftOrderIdApplicationErrors;
    }>;
}
declare function getTipChoice$1(httpClient: HttpClient): GetTipChoiceSignature;
interface GetTipChoiceSignature {
    /**
     * Retrieves the tip choice that's currently selected by the customer for a specific eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
     * If the customer hasn't yet selected a tip choice, the response is empty.
     *
     * Please refer to the Sample Flows for more information.
     * @param - ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     */
    (purchaseFlowId: string): Promise<NonNullablePaths<GetTipChoiceResponse, `tipChoice.tipType`, 3> & {
        __applicationErrorsType?: GetTipChoiceApplicationErrors;
    }>;
}
declare function updateTipChoice$1(httpClient: HttpClient): UpdateTipChoiceSignature;
interface UpdateTipChoiceSignature {
    /**
     * Updates the tip choice that's currently selected by the customer for a specific eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
     *
     * Please refer to the Sample Flows for more information.
     * @param - Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     * @param - Options to use when updating a tip choice.
     */
    (tipChoice: TipChoice, options: NonNullablePaths<UpdateTipChoiceOptions, `purchaseFlowId`, 2>): Promise<NonNullablePaths<UpdateTipChoiceResponse, `tipChoice.tipType`, 3> & {
        __applicationErrorsType?: UpdateTipChoiceApplicationErrors;
    }>;
}
declare function setTipOnOrder$1(httpClient: HttpClient): SetTipOnOrderSignature;
interface SetTipOnOrderSignature {
    /**
     * Creates or updates a tip on an
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * If no tip exists on the order, an `additionalFee` is added. If a tip is already
     * present, the existing `additionalFee` is replaced.
     *
     * If you specify `tip.distributions.transaction`, that distribution
     * amount can't be changed in the future. Then, you also can't remove any of the
     * other distributions.
     *
     * The call fails if:
     * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
     * + The total tip amount is zero or negative.
     * + The sum of all tip distribution amounts and `undistributedAmount` doesn't match the total tip amount.
     * + You omit `tip.distributions` with an existing `transaction`.
     * @param - Options to use when setting a tip on an order.
     */
    (options: NonNullablePaths<SetTipOnOrderOptions, `tip` | `tip.distributions.${number}.transaction._id` | `tip.distributions.${number}.transaction.date`, 6>): Promise<NonNullablePaths<SetTipOnOrderResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source` | `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`, 7> & {
        __applicationErrorsType?: SetTipOnOrderApplicationErrors;
    }>;
}
declare function removeTipFromOrder$1(httpClient: HttpClient): RemoveTipFromOrderSignature;
interface RemoveTipFromOrderSignature {
    /**
     * Removes a tip from an
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * If no tip exists on the order, the call succeeds and the response contains an
     * empty `OrderInfo` object.
     *
     * The call fails if the customer has already been charged for at least one of
     * the associated tip distributions.
     * @param - Options to use when removing a tip from an order.
     */
    (options: RemoveTipFromOrderOptions): Promise<NonNullablePaths<RemoveTipFromOrderResponse, `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`, 4> & {
        __applicationErrorsType?: RemoveTipFromOrderApplicationErrors;
    }>;
}
declare function addTipDistributionsToOrder$1(httpClient: HttpClient): AddTipDistributionsToOrderSignature;
interface AddTipDistributionsToOrderSignature {
    /**
     * Adds tip distributions to an
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * If no tip exists on the order, an `additionalFee` is added and the total tip
     * amount is equal to the sum of all distribution amounts. If a tip is already
     * present, the existing `additionalFee` is replaced and the total tip amount is
     * increased by the sum of the new tip distributions.
     *
     * The call fails if:
     * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
     * + Any of the tip distribution amounts is zero or negative.
     * @param - Options to use when adding tip distributions to an order.
     */
    (options: NonNullablePaths<AddTipDistributionsToOrderOptions, `tipDistributions` | `tipDistributions.${number}.transaction._id` | `tipDistributions.${number}.transaction.date`, 5>): Promise<NonNullablePaths<AddTipDistributionsToOrderResponse, `tipDistributions` | `tipDistributions.${number}.staff.identificationData.anonymousVisitorId` | `tipDistributions.${number}.staff.identificationData.memberId` | `tipDistributions.${number}.staff.identificationData.wixUserId` | `tipDistributions.${number}.staff.identificationData.appId` | `tipDistributions.${number}.source` | `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`, 6> & {
        __applicationErrorsType?: AddTipDistributionsToOrderApplicationErrors;
    }>;
}
declare function queryTipDistributions$1(httpClient: HttpClient): QueryTipDistributionsSignature;
interface QueryTipDistributionsSignature {
    /**
     * Creates a query to retrieve a list of tip distributions.
     *
     * The `queryTipDistributions()` function builds a query to retrieve a list of tip distributions and returns a `TipDistributionsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-builder/find) function.
     *
     * You can refine the query by chaining `TipDistributionsQueryBuilder` functions onto the query. `TipDistributionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipDistributions()` returns.
     *
     * `queryTipDistributions()` runs with the following `TipDistributionsQueryBuilder` default that you can override:
     *
     * + `limit` is `50`
     *
     * The functions that are chained to `queryTipDistributions()` are applied in the order they are called. For example, if you apply `ascending("transaction.transactionDate")` and then `ascending("staff.id")`, the results are sorted first by the `"transaction.transactionDate"`, and then, if there are multiple results with the same `"transaction.transactionDate"`, the items are sorted by `"staff.id"`.
     *
     * When setting a date filter remember to use
     * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
     *
     * The following `TipDistributionsQueryBuilder` functions are supported for the `queryTipDistributions()` function. For a full description of the tip distributions object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-result/items) property in `TipDistributionsQueryResult`.
     *
     */
    (): TipDistributionsQueryBuilder;
}
declare function sumTipDistributionAmounts$1(httpClient: HttpClient): SumTipDistributionAmountsSignature;
interface SumTipDistributionAmountsSignature {
    /**
     * Sums tip distribution amounts, given the provided filtering.
     * @param - Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    (filter: Record<string, any>): Promise<SumTipDistributionAmountsResponse>;
}

declare const previewTip: MaybeContext<BuildRESTFunction<typeof previewTip$1> & typeof previewTip$1>;
declare const getTipByOrderId: MaybeContext<BuildRESTFunction<typeof getTipByOrderId$1> & typeof getTipByOrderId$1>;
declare const getTipByDraftOrderId: MaybeContext<BuildRESTFunction<typeof getTipByDraftOrderId$1> & typeof getTipByDraftOrderId$1>;
declare const getTipChoice: MaybeContext<BuildRESTFunction<typeof getTipChoice$1> & typeof getTipChoice$1>;
declare const updateTipChoice: MaybeContext<BuildRESTFunction<typeof updateTipChoice$1> & typeof updateTipChoice$1>;
declare const setTipOnOrder: MaybeContext<BuildRESTFunction<typeof setTipOnOrder$1> & typeof setTipOnOrder$1>;
declare const removeTipFromOrder: MaybeContext<BuildRESTFunction<typeof removeTipFromOrder$1> & typeof removeTipFromOrder$1>;
declare const addTipDistributionsToOrder: MaybeContext<BuildRESTFunction<typeof addTipDistributionsToOrder$1> & typeof addTipDistributionsToOrder$1>;
declare const queryTipDistributions: MaybeContext<BuildRESTFunction<typeof queryTipDistributions$1> & typeof queryTipDistributions$1>;
declare const sumTipDistributionAmounts: MaybeContext<BuildRESTFunction<typeof sumTipDistributionAmounts$1> & typeof sumTipDistributionAmounts$1>;

export { AddTipDistributionsToOrderApplicationErrors, AddTipDistributionsToOrderOptions, AddTipDistributionsToOrderResponse, GetTipByDraftOrderIdApplicationErrors, GetTipByDraftOrderIdResponse, GetTipByOrderIdApplicationErrors, GetTipByOrderIdResponse, GetTipChoiceApplicationErrors, GetTipChoiceResponse, LineItemInfo, PreviewTipApplicationErrors, PreviewTipOptions, PreviewTipResponse, RemoveTipFromOrderApplicationErrors, RemoveTipFromOrderOptions, RemoveTipFromOrderResponse, SetTipOnOrderApplicationErrors, SetTipOnOrderOptions, SetTipOnOrderResponse, SumTipDistributionAmountsResponse, TipChoice, TipDistributionsQueryBuilder, UpdateTipChoiceApplicationErrors, UpdateTipChoiceOptions, UpdateTipChoiceResponse, addTipDistributionsToOrder, getTipByDraftOrderId, getTipByOrderId, getTipChoice, previewTip, queryTipDistributions, removeTipFromOrder, setTipOnOrder, sumTipDistributionAmounts, updateTipChoice };
