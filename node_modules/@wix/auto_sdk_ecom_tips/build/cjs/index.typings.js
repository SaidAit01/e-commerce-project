"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  IdentityType: () => IdentityType,
  QueryBy: () => QueryBy,
  SortOrder: () => SortOrder,
  Source: () => Source,
  TipType: () => TipType,
  WebhookIdentityType: () => WebhookIdentityType,
  addTipDistributionsToOrder: () => addTipDistributionsToOrder2,
  getTipByDraftOrderId: () => getTipByDraftOrderId2,
  getTipByOrderId: () => getTipByOrderId2,
  getTipChoice: () => getTipChoice2,
  previewTip: () => previewTip2,
  queryTipDistributions: () => queryTipDistributions2,
  removeTipFromOrder: () => removeTipFromOrder2,
  setTipOnOrder: () => setTipOnOrder2,
  sumTipDistributionAmounts: () => sumTipDistributionAmounts2,
  updateTipChoice: () => updateTipChoice2
});
module.exports = __toCommonJS(index_typings_exports);

// src/tips-v1-tip-tips.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/tips-v1-tip-tips.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixTipsTipV1TipsServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/tips-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/tips-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/tips",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tips";
function previewTip(payload) {
  function __previewTip({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "POST",
      methodFqn: "wix.tips.tip.v1.TipsService.PreviewTip",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/preview",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tip.distributions.createdDate" },
            { path: "tip.distributions.transaction.date" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __previewTip;
}
function getTipByOrderId(payload) {
  function __getTipByOrderId({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "GET",
      methodFqn: "wix.tips.tip.v1.TipsService.GetTipByOrderId",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/order/{orderId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tip.distributions.createdDate" },
            { path: "tip.distributions.transaction.date" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTipByOrderId;
}
function getTipByDraftOrderId(payload) {
  function __getTipByDraftOrderId({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "GET",
      methodFqn: "wix.tips.tip.v1.TipsService.GetTipByDraftOrderId",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/draft-order/{draftOrderId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tip.distributions.createdDate" },
            { path: "tip.distributions.transaction.date" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTipByDraftOrderId;
}
function getTipChoice(payload) {
  function __getTipChoice({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "GET",
      methodFqn: "wix.tips.tip.v1.TipsService.GetTipChoice",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/choice/{purchaseFlowId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getTipChoice;
}
function updateTipChoice(payload) {
  function __updateTipChoice({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "PATCH",
      methodFqn: "wix.tips.tip.v1.TipsService.UpdateTipChoice",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/choice",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __updateTipChoice;
}
function setTipOnOrder(payload) {
  function __setTipOnOrder({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tip.distributions.createdDate" },
          { path: "tip.distributions.transaction.date" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "POST",
      methodFqn: "wix.tips.tip.v1.TipsService.SetTipOnOrder",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/set",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tip.distributions.createdDate" },
            { path: "tip.distributions.transaction.date" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setTipOnOrder;
}
function removeTipFromOrder(payload) {
  function __removeTipFromOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "POST",
      methodFqn: "wix.tips.tip.v1.TipsService.RemoveTipFromOrder",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/remove",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeTipFromOrder;
}
function addTipDistributionsToOrder(payload) {
  function __addTipDistributionsToOrder({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipDistributions.createdDate" },
          { path: "tipDistributions.transaction.date" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "POST",
      methodFqn: "wix.tips.tip.v1.TipsService.AddTipDistributionsToOrder",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/tip-distributions/add",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipDistributions.createdDate" },
            { path: "tipDistributions.transaction.date" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addTipDistributionsToOrder;
}
function queryTipDistributions(payload) {
  function __queryTipDistributions({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "POST",
      methodFqn: "wix.tips.tip.v1.TipsService.QueryTipDistributions",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/tip-distributions/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipDistributions.createdDate" },
            { path: "tipDistributions.transaction.date" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryTipDistributions;
}
function sumTipDistributionAmounts(payload) {
  function __sumTipDistributionAmounts({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.v1.tip",
      method: "POST",
      methodFqn: "wix.tips.tip.v1.TipsService.SumTipDistributionAmounts",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsTipV1TipsServiceUrl({
        protoPath: "/v1/tips/tip-distributions/sum-amounts",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __sumTipDistributionAmounts;
}

// src/tips-v1-tip-tips.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNKNOWN"] = "UNKNOWN";
  IdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["WIX_USER"] = "WIX_USER";
  IdentityType2["APP"] = "APP";
  return IdentityType2;
})(IdentityType || {});
var Source = /* @__PURE__ */ ((Source2) => {
  Source2["UNKNOWN_SOURCE"] = "UNKNOWN_SOURCE";
  Source2["POS"] = "POS";
  Source2["WEB"] = "WEB";
  Source2["DASHBOARD"] = "DASHBOARD";
  return Source2;
})(Source || {});
var TipType = /* @__PURE__ */ ((TipType2) => {
  TipType2["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
  TipType2["PERCENTAGE"] = "PERCENTAGE";
  TipType2["AMOUNT"] = "AMOUNT";
  TipType2["CUSTOM"] = "CUSTOM";
  return TipType2;
})(TipType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var QueryBy = /* @__PURE__ */ ((QueryBy2) => {
  QueryBy2["UNKNOWN_QUERY_BY"] = "UNKNOWN_QUERY_BY";
  QueryBy2["ORDER"] = "ORDER";
  QueryBy2["TIP"] = "TIP";
  return QueryBy2;
})(QueryBy || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function previewTip2(lineItemInfo, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    lineItemInfo,
    tipChoice: options?.tipChoice,
    tipSettingsId: options?.tipSettingsId
  });
  const reqOpts = previewTip(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          lineItemInfo: "$[0]",
          tipChoice: "$[1].tipChoice",
          tipSettingsId: "$[1].tipSettingsId"
        },
        singleArgumentUnchanged: false
      },
      ["lineItemInfo", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTipByOrderId2(orderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ orderId });
  const reqOpts = getTipByOrderId(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTipByDraftOrderId2(draftOrderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    draftOrderId
  });
  const reqOpts = getTipByDraftOrderId(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { draftOrderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["draftOrderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTipChoice2(purchaseFlowId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    purchaseFlowId
  });
  const reqOpts = getTipChoice(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { purchaseFlowId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["purchaseFlowId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateTipChoice2(tipChoice, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    tipChoice,
    purchaseFlowId: options?.purchaseFlowId
  });
  const reqOpts = updateTipChoice(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          tipChoice: "$[0]",
          purchaseFlowId: "$[1].purchaseFlowId"
        },
        singleArgumentUnchanged: false
      },
      ["tipChoice", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setTipOnOrder2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderId: options?.orderId,
    tip: options?.tip
  });
  const reqOpts = setTipOnOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0].orderId", tip: "$[0].tip" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeTipFromOrder2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderId: options?.orderId
  });
  const reqOpts = removeTipFromOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0].orderId" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addTipDistributionsToOrder2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderId: options?.orderId,
    tipDistributions: options?.tipDistributions
  });
  const reqOpts = addTipDistributionsToOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0].orderId",
          tipDistributions: "$[0].tipDistributions"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryTipDistributions2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryTipDistributions(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.tipDistributions,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function sumTipDistributionAmounts2(filter) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ filter });
  const reqOpts = sumTipDistributionAmounts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { filter: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["filter"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IdentityType,
  QueryBy,
  SortOrder,
  Source,
  TipType,
  WebhookIdentityType,
  addTipDistributionsToOrder,
  getTipByDraftOrderId,
  getTipByOrderId,
  getTipChoice,
  previewTip,
  queryTipDistributions,
  removeTipFromOrder,
  setTipOnOrder,
  sumTipDistributionAmounts,
  updateTipChoice
});
//# sourceMappingURL=index.typings.js.map