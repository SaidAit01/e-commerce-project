import { NonNullablePaths } from '@wix/sdk-types';

/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated orderâ€™s line item subtotal.
 */
interface Tip {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Subtotal of all line items from the eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object))
     * that's related to the tip. In the response of
     * Preview Tip, there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     * @maxSize 50
     */
    distributions?: TipDistribution[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, maxScale:2 }
     */
    undistributedAmount?: string | null;
}
interface TipDistribution {
    /**
     * ID of the tip distribution.
     * @readonly
     * @format GUID
     */
    _id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     * @format GUID
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     * Max: 10 `lineItemInfo` objects
     * @maxSize 10
     */
    lineItemInfo?: LineItemInfo[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * transaction ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/order-transactions/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order-transactions/order-transactions-object))
     * has been created.
     */
    transaction?: Transaction;
    /**
     * ID of the eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object))
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Information about who created the tip distributions. */
    source?: SourceWithLiterals;
}
interface CommonIdentificationData extends CommonIdentificationDataIdOneOf {
    /**
     * ID of a site visitor who hasn't logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor who has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /**
     * ID of the contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     * See the Contacts API for additional details.
     * @format GUID
     */
    contactId?: string | null;
}
/** @oneof */
interface CommonIdentificationDataIdOneOf {
    /**
     * ID of a site visitor who hasn't logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor who has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type IdentityTypeWithLiterals = IdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface Staff {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * Bookings staff member,
     * or the contact's
     * `info.name` if not. See the Bookings Staff Members API and the Contacts API for additional details.
     *
     * Max: 500 characters
     * @maxLength 500
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the staff member ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     * @format GUID
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * contact on the Wix site. See the Contacts API for additional details.
     *
     * Note that not all site collaborators qualify as
     * staff members ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
     */
    identificationData?: CommonIdentificationData;
}
interface LineItemInfo {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character <br/>
     * Max: 100 characters
     * @minLength 1
     * @maxLength 100
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for Stores ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores)).
     * + `service.name` for Bookings ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings)).
     *
     * Min: 1 character  <br/>
     * Max: 200 characters
     * @minLength 1
     * @maxLength 200
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1` <br/>
     * Max: `100000` (one hundred thousand)
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
}
interface CatalogReference {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.name` for Stores ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores)).
     * + `service.name` for Bookings ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings)).
     * @format GUID
     */
    catalogItemId?: string | null;
    /**
     * ID of the app ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/apps-created-by-wix) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/apps-created-by-wix))
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     * @format GUID
     */
    appId?: string | null;
}
interface Transaction {
    /**
     * ID of the transaction that's associated with the tip distribution.
     * @format GUID
     */
    _id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
declare enum Source {
    /** There is no information about who created the tip distributions. */
    UNKNOWN_SOURCE = "UNKNOWN_SOURCE",
    /** The customer added the tip distributions via an external payment terminal. */
    POS = "POS",
    /** The customer added the tip distributions during an online eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)). */
    WEB = "WEB",
    /** The business added the tip distributions on behalf of the customer in the site's dashboard. */
    DASHBOARD = "DASHBOARD"
}
/** @enumType */
type SourceWithLiterals = Source | 'UNKNOWN_SOURCE' | 'POS' | 'WEB' | 'DASHBOARD';
interface PreviewTipRequest {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     * @minSize 1
     * @maxSize 50
     */
    lineItemInfo: LineItemInfo[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     * @format GUID
     */
    tipSettingsId?: string | null;
}
interface TipChoice {
    /**
     * Value of the tip choice.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    value?: string | null;
    /** Type of the tip choice. */
    tipType?: TipTypeWithLiterals;
}
declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
/** @enumType */
type TipTypeWithLiterals = TipType | 'UNKNOWN_TIP_TYPE' | 'PERCENTAGE' | 'AMOUNT' | 'CUSTOM';
interface PreviewTipResponse {
    /** Tip. */
    tip?: Tip;
}
interface GetTipByOrderIdRequest {
    /**
     * ID of the order to retrieve the tip for.
     * @format GUID
     */
    orderId: string | null;
}
interface GetTipByOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipByDraftOrderIdRequest {
    /**
     * ID of the draft order to retrieve the tip for.
     * @format GUID
     */
    draftOrderId: string | null;
}
interface GetTipByDraftOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
interface GetTipChoiceRequest {
    /**
     * ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId: string | null;
}
interface GetTipChoiceResponse {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice;
}
interface UpdateTipChoiceRequest {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice;
    /**
     * ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId: string | null;
}
interface UpdateTipChoiceResponse {
    /**
     * Tip choice currently selected in the
     * eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction))
     * for the given purchase flow.
     */
    tipChoice?: TipChoice;
}
interface SetTipOnOrderRequest extends SetTipOnOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
interface SetTipOnOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
}
interface SetTipOnOrderResponse {
    /** Set tip. */
    tip?: Tip;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo;
}
interface OrderInfo extends OrderInfoIdentifierOneOf {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * ID of the order's additional fee that's associated with the tip.
     * @format GUID
     */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price;
}
/** @oneof */
interface OrderInfoIdentifierOneOf {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string | null;
}
interface Price {
    /**
     * Amount of the additional fee that's associated with the tip.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:2 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     * @maxLength 100
     */
    formattedAmount?: string;
}
interface RemoveTipFromOrderRequest extends RemoveTipFromOrderRequestIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderRequestIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
interface RemoveTipFromOrderResponse {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo;
}
interface CreateTipDistributionsRequest {
    /**
     * Tip distributions to create.
     *
     * Min: 1 distribution <br/>
     * Max: 50 distributions
     * @minSize 1
     * @maxSize 50
     */
    tipDistributions?: TipDistribution[];
    /**
     * ID of the tip for which to create distributions.
     * @format GUID
     */
    tipId?: string | null;
}
interface CreateTipDistributionsResponse {
    /**
     * ID of the tip for which the distributions were created.
     * @format GUID
     * @readonly
     */
    tipId?: string | null;
    /** Created tip distributions. */
    tipDistributions?: TipDistribution[];
}
interface DeleteTipDistributionsRequest extends DeleteTipDistributionsRequestDeleteByOneOf {
    /**
     * ID of the tip for which to delete all associated tip distributions.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * ID of the order for which to delete all associated tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
/** @oneof */
interface DeleteTipDistributionsRequestDeleteByOneOf {
    /**
     * ID of the tip for which to delete all associated tip distributions.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * ID of the order for which to delete all associated tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
interface DeleteTipDistributionsResponse {
}
interface AddTipDistributionsToOrderRequest extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Tip distributions to add to the order.
     * @minSize 1
     * @maxSize 50
     */
    tipDistributions: TipDistribution[];
}
/** @oneof */
interface AddTipDistributionsToOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
interface AddTipDistributionsToOrderResponse {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo;
}
interface QueryTipDistributionsRequest {
    /** WQL expression. */
    query: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 4
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 50
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryTipDistributionsResponse {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor pointing to next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SumTipDistributionAmountsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
interface SumTipDistributionAmountsResponse {
    /**
     * Total amount of tip distributions matching the filter.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    totalAmount?: string | null;
}
interface ApplyTipDistributionsRequest {
    /**
     * ID of the tip for which all tip distributions are applied to the order.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * ID of the order for which to apply all tip distributions.
     * @format GUID
     */
    orderId?: string | null;
    /** Whether to query by order ID or tip ID. */
    queryBy?: QueryByWithLiterals;
}
declare enum QueryBy {
    UNKNOWN_QUERY_BY = "UNKNOWN_QUERY_BY",
    ORDER = "ORDER",
    TIP = "TIP"
}
/** @enumType */
type QueryByWithLiterals = QueryBy | 'UNKNOWN_QUERY_BY' | 'ORDER' | 'TIP';
interface ApplyTipDistributionsResponse {
    /** Applied tip distributions. */
    tipDistributions?: TipDistribution[];
}
interface PublishTipDistributionsCreatedEventRequest {
    /**
     * The tip distributions that will be published on the event.
     * @maxSize 100
     */
    tipDistributions?: TipDistribution[];
    /**
     * The tip ID of the distributions
     * @format GUID
     */
    tipId?: string | null;
    /**
     * The order ID that the tip is connected to
     * @format GUID
     */
    orderId?: string | null;
}
interface PublishTipDistributionsCreatedEventResponse {
}
interface TipDistributionsCreated {
    /**
     * ID of the tip to which the distribution belongs.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * Created tip distributions.
     *
     * Min: 1 tip distribution
     * Max: 100 tip distributions
     * @maxSize 100
     */
    tipDistributions?: TipDistribution[];
    /**
     * The order ID that the tip is connected to.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * The undistributed tip amount.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, maxScale:2 }
     */
    undistributedAmount?: string | null;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
/** @docsIgnore */
type PreviewTipApplicationErrors = {
    code?: 'TIP_SETTINGS_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CATALOG_ITEMS_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type GetTipByOrderIdApplicationErrors = {
    code?: 'ORDER_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TIP_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type GetTipByDraftOrderIdApplicationErrors = {
    code?: 'DRAFT_ORDER_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TIP_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type GetTipChoiceApplicationErrors = {
    code?: 'PERSON_IDENTITY_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type UpdateTipChoiceApplicationErrors = {
    code?: 'PERSON_IDENTITY_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type SetTipOnOrderApplicationErrors = {
    code?: 'INVALID_TIP';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type RemoveTipFromOrderApplicationErrors = {
    code?: 'CANNOT_REMOVE_PAID_TIP_DISTRIBUTION';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type AddTipDistributionsToOrderApplicationErrors = {
    code?: 'ORDER_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DRAFT_ORDER_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_IS_ALREADY_EDITED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_CANNOT_BE_EDITED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PARTIALLY_OR_FULLY_REFUNDED_ORDER_CANNOT_BE_EDITED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FAILED_SETTING_TIP_ON_ORDER';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FAILED_DELETING_TIP_FROM_ORDER';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FAILED_COMMITING_TIP_ON_ORDER';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_TIP_DISTRIBUTION';
    description?: string;
    data?: Record<string, any>;
};
/**
 * Previews a tip for a list of line items.
 *
 *
 * If you provide the Wix Bookings app ID ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/apps-created-by-wix) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/apps-created-by-wix))
 * as `lineItemInfo.catalogReference.appId`, the response includes tip
 * distributions for each associated
 * Bookings staff member ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
 *
 * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
 * based on the site's default tip settings.
 * @param lineItemInfo - Information about the line items to preview the tip for.
 *
 * Min: 1 line item
 * Max: 50 line items
 * @public
 * @documentationMaturity preview
 * @requiredField lineItemInfo
 * @requiredField lineItemInfo.catalogReference.appId
 * @requiredField lineItemInfo.catalogReference.catalogItemId
 * @requiredField lineItemInfo.price
 * @requiredField options.tipChoice
 * @requiredField options.tipChoice.tipType
 * @requiredField options.tipChoice.value
 * @param options - Options to use when previewing a tip.
 * @permissionId WIX_TIPS.TIP_PREVIEW
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.PreviewTip
 */
declare function previewTip(lineItemInfo: NonNullablePaths<LineItemInfo, `catalogReference.appId` | `catalogReference.catalogItemId` | `price`, 3>[], options?: NonNullablePaths<PreviewTipOptions, `tipChoice` | `tipChoice.tipType` | `tipChoice.value`, 3>): Promise<NonNullablePaths<PreviewTipResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source`, 7> & {
    __applicationErrorsType?: PreviewTipApplicationErrors;
}>;
interface PreviewTipOptions {
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     * @format GUID
     */
    tipSettingsId?: string | null;
}
/**
 * Retrieves the tip that's associated with an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 * @param orderId - ID of the order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId WIX_TIPS.TIP_READ
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipByOrderId
 */
declare function getTipByOrderId(orderId: string): Promise<NonNullablePaths<GetTipByOrderIdResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source`, 7> & {
    __applicationErrorsType?: GetTipByOrderIdApplicationErrors;
}>;
/**
 * Retrieves the tip that's associated with an eCommerce draft order.
 *
 *
 * <blockquote class="important">
 *
 * __Important:__
 * The eCommerce Draft Orders API is currently under development and not yet available to users.
 *
 * </blockquote>
 * @param draftOrderId - ID of the draft order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId WIX_TIPS.TIP_READ
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipByDraftOrderId
 */
declare function getTipByDraftOrderId(draftOrderId: string): Promise<NonNullablePaths<GetTipByDraftOrderIdResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source`, 7> & {
    __applicationErrorsType?: GetTipByDraftOrderIdApplicationErrors;
}>;
/**
 * Retrieves the tip choice that's currently selected by the customer for a specific eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
 * If the customer hasn't yet selected a tip choice, the response is empty.
 *
 * Please refer to the Sample Flows for more information.
 * @param purchaseFlowId - ID of the purchase flow that's associated with the
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
 * @public
 * @documentationMaturity preview
 * @requiredField purchaseFlowId
 * @permissionId WIX_TIPS.TIP_GET_CHOICE
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipChoice
 */
declare function getTipChoice(purchaseFlowId: string): Promise<NonNullablePaths<GetTipChoiceResponse, `tipChoice.tipType`, 3> & {
    __applicationErrorsType?: GetTipChoiceApplicationErrors;
}>;
/**
 * Updates the tip choice that's currently selected by the customer for a specific eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
 *
 * Please refer to the Sample Flows for more information.
 * @param tipChoice - Tip choice to select for the purchase flow. The call fails if you provide a
 * value for `tipChoice.tipType` that doesn't match the relevant tip settings
 * configuration. For example:
 * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
 * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
 * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.purchaseFlowId
 * @requiredField tipChoice
 * @param options - Options to use when updating a tip choice.
 * @permissionId WIX_TIPS.TIP_UPDATE_CHOICE
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.UpdateTipChoice
 */
declare function updateTipChoice(tipChoice: TipChoice, options: NonNullablePaths<UpdateTipChoiceOptions, `purchaseFlowId`, 2>): Promise<NonNullablePaths<UpdateTipChoiceResponse, `tipChoice.tipType`, 3> & {
    __applicationErrorsType?: UpdateTipChoiceApplicationErrors;
}>;
interface UpdateTipChoiceOptions {
    /**
     * ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId: string | null;
}
/**
 * Creates or updates a tip on an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added. If a tip is already
 * present, the existing `additionalFee` is replaced.
 *
 * If you specify `tip.distributions.transaction`, that distribution
 * amount can't be changed in the future. Then, you also can't remove any of the
 * other distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + The total tip amount is zero or negative.
 * + The sum of all tip distribution amounts and `undistributedAmount` doesn't match the total tip amount.
 * + You omit `tip.distributions` with an existing `transaction`.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.identifier
 * @requiredField options.tip
 * @requiredField options.tip.distributions.transaction._id
 * @requiredField options.tip.distributions.transaction.date
 * @param options - Options to use when setting a tip on an order.
 * @permissionId WIX_TIPS.TIP_SET
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.SetTipOnOrder
 */
declare function setTipOnOrder(options: NonNullablePaths<SetTipOnOrderOptions, `tip` | `tip.distributions.${number}.transaction._id` | `tip.distributions.${number}.transaction.date`, 6>): Promise<NonNullablePaths<SetTipOnOrderResponse, `tip.distributions` | `tip.distributions.${number}.staff.identificationData.anonymousVisitorId` | `tip.distributions.${number}.staff.identificationData.memberId` | `tip.distributions.${number}.staff.identificationData.wixUserId` | `tip.distributions.${number}.staff.identificationData.appId` | `tip.distributions.${number}.source` | `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`, 7> & {
    __applicationErrorsType?: SetTipOnOrderApplicationErrors;
}>;
interface SetTipOnOrderOptions extends SetTipOnOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
interface SetTipOnOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/**
 * Removes a tip from an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 *
 * If no tip exists on the order, the call succeeds and the response contains an
 * empty `OrderInfo` object.
 *
 * The call fails if the customer has already been charged for at least one of
 * the associated tip distributions.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.identifier
 * @param options - Options to use when removing a tip from an order.
 * @permissionId WIX_TIPS.TIP_REMOVE
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.RemoveTipFromOrder
 */
declare function removeTipFromOrder(options: RemoveTipFromOrderOptions): Promise<NonNullablePaths<RemoveTipFromOrderResponse, `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`, 4> & {
    __applicationErrorsType?: RemoveTipFromOrderApplicationErrors;
}>;
interface RemoveTipFromOrderOptions extends RemoveTipFromOrderOptionsIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/** @oneof */
interface RemoveTipFromOrderOptionsIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/**
 * Adds tip distributions to an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added and the total tip
 * amount is equal to the sum of all distribution amounts. If a tip is already
 * present, the existing `additionalFee` is replaced and the total tip amount is
 * increased by the sum of the new tip distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + Any of the tip distribution amounts is zero or negative.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.identifier
 * @requiredField options.tipDistributions
 * @requiredField options.tipDistributions.transaction._id
 * @requiredField options.tipDistributions.transaction.date
 * @param options - Options to use when adding tip distributions to an order.
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_ADD
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.AddTipDistributionsToOrder
 */
declare function addTipDistributionsToOrder(options: NonNullablePaths<AddTipDistributionsToOrderOptions, `tipDistributions` | `tipDistributions.${number}.transaction._id` | `tipDistributions.${number}.transaction.date`, 5>): Promise<NonNullablePaths<AddTipDistributionsToOrderResponse, `tipDistributions` | `tipDistributions.${number}.staff.identificationData.anonymousVisitorId` | `tipDistributions.${number}.staff.identificationData.memberId` | `tipDistributions.${number}.staff.identificationData.wixUserId` | `tipDistributions.${number}.staff.identificationData.appId` | `tipDistributions.${number}.source` | `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`, 6> & {
    __applicationErrorsType?: AddTipDistributionsToOrderApplicationErrors;
}>;
interface AddTipDistributionsToOrderOptions extends AddTipDistributionsToOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Tip distributions to add to the order.
     * @minSize 1
     * @maxSize 50
     */
    tipDistributions: TipDistribution[];
}
/** @oneof */
interface AddTipDistributionsToOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
/**
 * Creates a query to retrieve a list of tip distributions.
 *
 * The `queryTipDistributions()` function builds a query to retrieve a list of tip distributions and returns a `TipDistributionsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-builder/find) function.
 *
 * You can refine the query by chaining `TipDistributionsQueryBuilder` functions onto the query. `TipDistributionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipDistributions()` returns.
 *
 * `queryTipDistributions()` runs with the following `TipDistributionsQueryBuilder` default that you can override:
 *
 * + `limit` is `50`
 *
 * The functions that are chained to `queryTipDistributions()` are applied in the order they are called. For example, if you apply `ascending("transaction.transactionDate")` and then `ascending("staff.id")`, the results are sorted first by the `"transaction.transactionDate"`, and then, if there are multiple results with the same `"transaction.transactionDate"`, the items are sorted by `"staff.id"`.
 *
 * When setting a date filter remember to use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * The following `TipDistributionsQueryBuilder` functions are supported for the `queryTipDistributions()` function. For a full description of the tip distributions object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-result/items) property in `TipDistributionsQueryResult`.
 *
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.QueryTipDistributions
 */
declare function queryTipDistributions(): TipDistributionsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface TipDistributionsQueryResult extends QueryCursorResult {
    items: TipDistribution[];
    query: TipDistributionsQueryBuilder;
    next: () => Promise<TipDistributionsQueryResult>;
    prev: () => Promise<TipDistributionsQueryResult>;
}
interface TipDistributionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id', value: string) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id', value: any[]) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id', value: boolean) => TipDistributionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id'>) => TipDistributionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id'>) => TipDistributionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => TipDistributionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<TipDistributionsQueryResult>;
}
/**
 * Sums tip distribution amounts, given the provided filtering.
 * @param filter - Filter object in the following format:
 * `"filter" : {
 * "fieldName1": "value1",
 * "fieldName2":{"$operator":"value2"}
 * }`
 * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.SumTipDistributionAmounts
 */
declare function sumTipDistributionAmounts(filter: Record<string, any>): Promise<SumTipDistributionAmountsResponse>;

export { type ActionEvent, type AddTipDistributionsToOrderApplicationErrors, type AddTipDistributionsToOrderOptions, type AddTipDistributionsToOrderOptionsIdentifierOneOf, type AddTipDistributionsToOrderRequest, type AddTipDistributionsToOrderRequestIdentifierOneOf, type AddTipDistributionsToOrderResponse, type ApplyTipDistributionsRequest, type ApplyTipDistributionsResponse, type CatalogReference, type CommonIdentificationData, type CommonIdentificationDataIdOneOf, type CreateTipDistributionsRequest, type CreateTipDistributionsResponse, type CursorPaging, type CursorPagingMetadata, type CursorQuery, type CursorQueryPagingMethodOneOf, type Cursors, type DeleteTipDistributionsRequest, type DeleteTipDistributionsRequestDeleteByOneOf, type DeleteTipDistributionsResponse, type DomainEvent, type DomainEventBodyOneOf, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type GetTipByDraftOrderIdApplicationErrors, type GetTipByDraftOrderIdRequest, type GetTipByDraftOrderIdResponse, type GetTipByOrderIdApplicationErrors, type GetTipByOrderIdRequest, type GetTipByOrderIdResponse, type GetTipChoiceApplicationErrors, type GetTipChoiceRequest, type GetTipChoiceResponse, type IdentificationData, type IdentificationDataIdOneOf, IdentityType, type IdentityTypeWithLiterals, type LineItemInfo, type MessageEnvelope, type OrderInfo, type OrderInfoIdentifierOneOf, type PreviewTipApplicationErrors, type PreviewTipOptions, type PreviewTipRequest, type PreviewTipResponse, type Price, type PublishTipDistributionsCreatedEventRequest, type PublishTipDistributionsCreatedEventResponse, QueryBy, type QueryByWithLiterals, type QueryTipDistributionsRequest, type QueryTipDistributionsResponse, type RemoveTipFromOrderApplicationErrors, type RemoveTipFromOrderOptions, type RemoveTipFromOrderOptionsIdentifierOneOf, type RemoveTipFromOrderRequest, type RemoveTipFromOrderRequestIdentifierOneOf, type RemoveTipFromOrderResponse, type RestoreInfo, type SetTipOnOrderApplicationErrors, type SetTipOnOrderOptions, type SetTipOnOrderOptionsIdentifierOneOf, type SetTipOnOrderRequest, type SetTipOnOrderRequestIdentifierOneOf, type SetTipOnOrderResponse, SortOrder, type SortOrderWithLiterals, type Sorting, Source, type SourceWithLiterals, type Staff, type SumTipDistributionAmountsRequest, type SumTipDistributionAmountsResponse, type Tip, type TipChoice, type TipDistribution, type TipDistributionsCreated, type TipDistributionsQueryBuilder, type TipDistributionsQueryResult, TipType, type TipTypeWithLiterals, type Transaction, type UpdateTipChoiceApplicationErrors, type UpdateTipChoiceOptions, type UpdateTipChoiceRequest, type UpdateTipChoiceResponse, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, addTipDistributionsToOrder, getTipByDraftOrderId, getTipByOrderId, getTipChoice, previewTip, queryTipDistributions, removeTipFromOrder, setTipOnOrder, sumTipDistributionAmounts, updateTipChoice };
