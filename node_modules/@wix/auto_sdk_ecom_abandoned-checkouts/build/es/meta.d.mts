import { G as GetAbandonedCheckoutRequest$1, r as GetAbandonedCheckoutResponse$1, D as DeleteAbandonedCheckoutRequest$1, s as DeleteAbandonedCheckoutResponse$1, Q as QueryAbandonedCheckoutsRequest$1, x as QueryAbandonedCheckoutsResponse$1, E as SearchAbandonedCheckoutsRequest$1, S as SearchAbandonedCheckoutsResponse$1, Y as AddAbandonedCheckoutActivityRequest$1, Z as AddAbandonedCheckoutActivityResponse$1, a5 as RedirectToCheckoutRequest$1, R as RawHttpResponse$1 } from './ecom-v1-abandoned-checkout-abandoned-checkouts.universal-DYTDdTC1.mjs';
import '@wix/sdk-types';

interface AbandonedCheckout {
    /**
     * Abandoned checkout ID.
     * @format GUID
     */
    id?: string;
    /** Date and time the abandoned checkout was created. */
    createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    updatedDate?: Date | null;
    /**
     * The associated checkout ID.
     * @format GUID
     */
    checkoutId?: string | null;
    /**
     * The associated cart ID.
     * @format GUID
     */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: StatusWithLiterals;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
    /**
     * The store's currency.
     * @format CURRENCY
     */
    currency?: string;
    /**
     * Currency the buyer used in checkout.
     * @format CURRENCY
     */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice;
    /**
     * List of all automation activities performed by Wix Automations ([SDK](https://dev.wix.com/docs/sdk/backend-modules/automations/) | [REST](https://dev.wix.com/docs/rest/business-management/automations/introduction)) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each activity in the automation flow. Only relevant if the site owner set up
     * [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-an-automation-with-the-new-builder#step-1-create-a-new-automation). Read more about `activities` in
     * the Abandoned Checkouts introduction.
     */
    activities?: Activity[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /**
     * Checkout URL.
     * @format WEB_URL
     */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice;
}
declare enum ActivityType {
    /** Not implemented. */
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    /** Scheduled. */
    SCHEDULED = "SCHEDULED",
    /** Email sent. */
    EMAIL_SENT = "EMAIL_SENT",
    /** Email not sent. */
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    /** Notification sent. */
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    /** Task created. */
    TASK_CREATED = "TASK_CREATED"
}
/** @enumType */
type ActivityTypeWithLiterals = ActivityType | 'UNKNOWN_TYPE' | 'SCHEDULED' | 'EMAIL_SENT' | 'EMAIL_NOT_SENT' | 'NOTIFICATION_SENT' | 'TASK_CREATED';
/** Status of the abandoned checkout. */
declare enum Status {
    /** Abandoned. */
    ABANDONED = "ABANDONED",
    /** Recovered. */
    RECOVERED = "RECOVERED"
}
/** @enumType */
type StatusWithLiterals = Status | 'ABANDONED' | 'RECOVERED';
/** Buyer information. */
interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /**
     * Visitor ID (if the site visitor is **not** a site member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if the site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * User ID (if the site visitor is a site owner or collaborator).
     * @format GUID
     */
    userId?: string;
    /**
     * Contact ID. For more information, see the Contacts API.
     * @format GUID
     * @readonly
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * @maxLength 50
     * @format EMAIL
     */
    email?: string | null;
}
/** @oneof */
interface V1BuyerInfoIdOneOf {
    /**
     * Visitor ID (if the site visitor is **not** a site member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if the site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * User ID (if the site visitor is a site owner or collaborator).
     * @format GUID
     */
    userId?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatTypeWithLiterals;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
/** @enumType */
type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';
interface MultiCurrencyPrice {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface Activity {
    /** Date and time the automation activity was created. */
    createdDate?: Date | null;
    /** Automation activity type. */
    type?: ActivityTypeWithLiterals;
}
interface GetAbandonedCheckoutRequest {
    /**
     * Abandoned checkout ID.
     * @format GUID
     */
    abandonedCheckoutId: string;
}
interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
interface DeleteAbandonedCheckoutRequest {
    /**
     * Id of the abandoned checkout to delete
     * @format GUID
     */
    abandonedCheckoutId: string;
}
interface DeleteAbandonedCheckoutResponse {
}
interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SearchAbandonedCheckoutsRequest {
    /** Search options. */
    search?: Search;
}
interface Search extends SearchPagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not filter or sort. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 4
     */
    sort?: CommonSorting[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
}
/** @oneof */
interface SearchPagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not filter or sort. */
    cursorPaging?: CommonCursorPaging;
}
interface CommonSorting {
    /**
     * Name of the field to sort by.
     * @maxLength 40
     */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrderWithLiterals;
}
declare enum CommonSortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type CommonSortOrderWithLiterals = CommonSortOrder | 'ASC' | 'DESC';
interface SearchDetails {
    /** Search mode. Defines the search logic for combining multiple terms in the `expression`. */
    mode?: ModeWithLiterals;
    /**
     * Search term or expression.
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If the array is empty, all searchable fields are searched. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 100
     * @maxSize 20
     */
    fields?: string[];
    /** Whether to enable the search function to use an algorithm to automatically find results that are close to the search expression, such as typos and declensions. */
    fuzzy?: boolean;
}
declare enum Mode {
    /** At least one of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
/** @enumType */
type ModeWithLiterals = Mode | 'OR' | 'AND';
interface CommonPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AddAbandonedCheckoutActivityRequest {
    /**
     * Id of the abandoned checkout to update
     * @format GUID
     */
    abandonedCheckoutId: string | null;
    /** The type of the activity to add */
    activityType?: ActivityTypeWithLiterals;
}
interface AddAbandonedCheckoutActivityResponse {
    /** The updated abandoned checkout with the added activity */
    abandonedCheckout?: AbandonedCheckout;
}
interface RedirectToCheckoutRequest {
    /**
     * ID of the abandoned checkout.
     * @format GUID
     */
    abandonedCheckoutId: string;
    /**
     * Metasite ID of the site associated with the abandoned checkout.
     * @format GUID
     */
    metasiteId: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getAbandonedCheckout(): __PublicMethodMetaInfo<'GET', {
    abandonedCheckoutId: string;
}, GetAbandonedCheckoutRequest$1, GetAbandonedCheckoutRequest, GetAbandonedCheckoutResponse$1, GetAbandonedCheckoutResponse>;
declare function deleteAbandonedCheckout(): __PublicMethodMetaInfo<'DELETE', {
    abandonedCheckoutId: string;
}, DeleteAbandonedCheckoutRequest$1, DeleteAbandonedCheckoutRequest, DeleteAbandonedCheckoutResponse$1, DeleteAbandonedCheckoutResponse>;
declare function queryAbandonedCheckouts(): __PublicMethodMetaInfo<'POST', {}, QueryAbandonedCheckoutsRequest$1, QueryAbandonedCheckoutsRequest, QueryAbandonedCheckoutsResponse$1, QueryAbandonedCheckoutsResponse>;
declare function searchAbandonedCheckouts(): __PublicMethodMetaInfo<'POST', {}, SearchAbandonedCheckoutsRequest$1, SearchAbandonedCheckoutsRequest, SearchAbandonedCheckoutsResponse$1, SearchAbandonedCheckoutsResponse>;
declare function addAbandonedCheckoutActivity(): __PublicMethodMetaInfo<'POST', {
    abandonedCheckoutId: string;
}, AddAbandonedCheckoutActivityRequest$1, AddAbandonedCheckoutActivityRequest, AddAbandonedCheckoutActivityResponse$1, AddAbandonedCheckoutActivityResponse>;
declare function redirectToCheckout(): __PublicMethodMetaInfo<'GET', {
    abandonedCheckoutId: string;
}, RedirectToCheckoutRequest$1, RedirectToCheckoutRequest, RawHttpResponse$1, RawHttpResponse>;

export { type __PublicMethodMetaInfo, addAbandonedCheckoutActivity, deleteAbandonedCheckout, getAbandonedCheckout, queryAbandonedCheckouts, redirectToCheckout, searchAbandonedCheckouts };
