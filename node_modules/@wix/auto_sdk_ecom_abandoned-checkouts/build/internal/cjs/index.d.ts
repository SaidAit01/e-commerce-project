import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { A as AbandonedCheckout, a as AbandonedCheckoutsQueryBuilder, b as AbandonedCheckoutSearch, S as SearchAbandonedCheckoutsResponse, c as AddAbandonedCheckoutActivityOptions, d as AddAbandonedCheckoutActivityResponse, R as RawHttpResponse, e as AbandonedCheckoutCreatedEnvelope, f as AbandonedCheckoutDeletedEnvelope, g as AbandonedCheckoutRecoveredEnvelope, h as AbandonedCheckoutUpdatedEnvelope } from './ecom-v1-abandoned-checkout-abandoned-checkouts.universal-BAXrS7lF.js';
export { s as AbandonedCheckoutRecovered, am as AbandonedCheckoutSearchSpec, al as AbandonedCheckoutsQueryResult, ae as ActionEvent, p as Activity, i as ActivityType, an as ActivityTypeWithLiterals, _ as AddAbandonedCheckoutActivityRequest, aj as BaseEventMetadata, B as BuyerInfo, a4 as Cancel, q as CartAbandonedEvent, r as CartRecoveredEvent, X as CommonCursorPaging, Z as CommonCursors, U as CommonPaging, Y as CommonPagingMetadataV2, av as CommonSearchWithEntityContext, C as CommonSortOrder, as as CommonSortOrderWithLiterals, N as CommonSorting, a3 as Complete, y as CursorPaging, H as Cursors, D as DeleteAbandonedCheckoutRequest, u as DeleteAbandonedCheckoutResponse, a8 as DomainEvent, a9 as DomainEventBodyOneOf, af as Empty, aa as EntityCreatedEvent, ad as EntityDeletedEvent, ac as EntityUpdatedEvent, ak as EventMetadata, F as FullAddressContactDetails, G as GetAbandonedCheckoutRequest, t as GetAbandonedCheckoutResponse, a7 as HeadersEntry, ah as IdentificationData, ai as IdentificationDataIdOneOf, I as Identity, aq as IdentityWithLiterals, ag as MessageEnvelope, M as Mode, at as ModeWithLiterals, o as MultiCurrencyPrice, P as Paging, E as PagingMetadataV2, Q as QueryAbandonedCheckoutsRequest, z as QueryAbandonedCheckoutsResponse, v as QueryV2, w as QueryV2PagingMethodOneOf, a6 as RedirectToCheckoutRequest, a5 as Reschedule, ab as RestoreInfo, K as Search, J as SearchAbandonedCheckoutsRequest, O as SearchDetails, L as SearchPagingMethodOneOf, k as SortOrder, ar as SortOrderWithLiterals, x as Sorting, j as Status, ao as StatusWithLiterals, $ as Task, a1 as TaskAction, a2 as TaskActionActionOneOf, a0 as TaskKey, T as Totals, l as V1BuyerInfo, m as V1BuyerInfoIdOneOf, n as VatId, V as VatType, ap as VatTypeWithLiterals, W as WebhookIdentityType, au as WebhookIdentityTypeWithLiterals } from './ecom-v1-abandoned-checkout-abandoned-checkouts.universal-BAXrS7lF.js';

declare function getAbandonedCheckout$1(httpClient: HttpClient): GetAbandonedCheckoutSignature;
interface GetAbandonedCheckoutSignature {
    /**
     * Retrieves an abandoned checkout.
     * @param - Abandoned checkout ID.
     * @returns The requested abandoned checkout.
     */
    (abandonedCheckoutId: string): Promise<NonNullablePaths<AbandonedCheckout, `_id` | `status` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `buyerInfo.userId` | `contactDetails.vatId._id` | `contactDetails.vatId.type` | `currency` | `totalPrice.amount` | `totalPrice.convertedAmount` | `totalPrice.formattedAmount` | `totalPrice.formattedConvertedAmount` | `activities` | `activities.${number}.type` | `checkoutUrl`, 4>>;
}
declare function deleteAbandonedCheckout$1(httpClient: HttpClient): DeleteAbandonedCheckoutSignature;
interface DeleteAbandonedCheckoutSignature {
    /**
     * Deletes an abandoned checkout.
     * @param - Id of the abandoned checkout to delete
     */
    (abandonedCheckoutId: string): Promise<void>;
}
declare function queryAbandonedCheckouts$1(httpClient: HttpClient): QueryAbandonedCheckoutsSignature;
interface QueryAbandonedCheckoutsSignature {
    /**
     * Creates a query to retrieve a list of abandoned checkouts.
     *
     * The `queryAbandonedCheckouts()` function builds a query to retrieve a list of abandoned checkouts and returns a `ResultsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `ResultsQueryBuilder` functions onto the query. `ResultsQueryBuilder` functions enable you to sort, filter, and control the results `queryAbandonedCheckouts()` returns.
     */
    (): AbandonedCheckoutsQueryBuilder;
}
declare function searchAbandonedCheckouts$1(httpClient: HttpClient): SearchAbandonedCheckoutsSignature;
interface SearchAbandonedCheckoutsSignature {
    /**
     * Retrieves a list of abandoned checkouts, given the provided paging, filtering, search details and sorting. Up to 100 abandoned checkouts can be returned per request.
     * @param - Search options.
     */
    (search: AbandonedCheckoutSearch): Promise<NonNullablePaths<SearchAbandonedCheckoutsResponse, `abandonedCheckouts` | `abandonedCheckouts.${number}._id` | `abandonedCheckouts.${number}.status` | `abandonedCheckouts.${number}.buyerInfo.visitorId` | `abandonedCheckouts.${number}.buyerInfo.memberId` | `abandonedCheckouts.${number}.buyerInfo.userId` | `abandonedCheckouts.${number}.contactDetails.vatId._id` | `abandonedCheckouts.${number}.contactDetails.vatId.type` | `abandonedCheckouts.${number}.currency` | `abandonedCheckouts.${number}.totalPrice.amount` | `abandonedCheckouts.${number}.totalPrice.convertedAmount` | `abandonedCheckouts.${number}.totalPrice.formattedAmount` | `abandonedCheckouts.${number}.totalPrice.formattedConvertedAmount` | `abandonedCheckouts.${number}.checkoutUrl`, 6>>;
}
/** @internal */
declare function addAbandonedCheckoutActivity$1(httpClient: HttpClient): AddAbandonedCheckoutActivitySignature;
interface AddAbandonedCheckoutActivitySignature {
    /**
     * Adds a new abandoned checkout activity.
     * @param - Id of the abandoned checkout to update
     */
    (abandonedCheckoutId: string, options?: AddAbandonedCheckoutActivityOptions): Promise<NonNullablePaths<AddAbandonedCheckoutActivityResponse, `abandonedCheckout._id` | `abandonedCheckout.status` | `abandonedCheckout.buyerInfo.visitorId` | `abandonedCheckout.buyerInfo.memberId` | `abandonedCheckout.buyerInfo.userId` | `abandonedCheckout.contactDetails.vatId._id` | `abandonedCheckout.contactDetails.vatId.type` | `abandonedCheckout.currency` | `abandonedCheckout.totalPrice.amount` | `abandonedCheckout.totalPrice.convertedAmount` | `abandonedCheckout.totalPrice.formattedAmount` | `abandonedCheckout.totalPrice.formattedConvertedAmount` | `abandonedCheckout.activities` | `abandonedCheckout.activities.${number}.type` | `abandonedCheckout.checkoutUrl`, 5>>;
}
declare function redirectToCheckout$1(httpClient: HttpClient): RedirectToCheckoutSignature;
interface RedirectToCheckoutSignature {
    /**
     * Redirects an abandoned checkout to its checkout page.
     * @param - ID of the abandoned checkout.
     * @param - Metasite ID of the site associated with the abandoned checkout.
     */
    (abandonedCheckoutId: string, metasiteId: string): Promise<NonNullablePaths<RawHttpResponse, `body` | `headers` | `headers.${number}.key` | `headers.${number}.value`, 4>>;
}
declare const onAbandonedCheckoutCreated$1: EventDefinition<AbandonedCheckoutCreatedEnvelope, "wix.ecom.v1.abandoned_checkout_created">;
declare const onAbandonedCheckoutDeleted$1: EventDefinition<AbandonedCheckoutDeletedEnvelope, "wix.ecom.v1.abandoned_checkout_deleted">;
declare const onAbandonedCheckoutRecovered$1: EventDefinition<AbandonedCheckoutRecoveredEnvelope, "wix.ecom.v1.abandoned_checkout_recovered">;
declare const onAbandonedCheckoutUpdated$1: EventDefinition<AbandonedCheckoutUpdatedEnvelope, "wix.ecom.v1.abandoned_checkout_updated">;

declare const getAbandonedCheckout: MaybeContext<BuildRESTFunction<typeof getAbandonedCheckout$1> & typeof getAbandonedCheckout$1>;
declare const deleteAbandonedCheckout: MaybeContext<BuildRESTFunction<typeof deleteAbandonedCheckout$1> & typeof deleteAbandonedCheckout$1>;
declare const queryAbandonedCheckouts: MaybeContext<BuildRESTFunction<typeof queryAbandonedCheckouts$1> & typeof queryAbandonedCheckouts$1>;
declare const searchAbandonedCheckouts: MaybeContext<BuildRESTFunction<typeof searchAbandonedCheckouts$1> & typeof searchAbandonedCheckouts$1>;
/** @internal */
declare const addAbandonedCheckoutActivity: MaybeContext<BuildRESTFunction<typeof addAbandonedCheckoutActivity$1> & typeof addAbandonedCheckoutActivity$1>;
declare const redirectToCheckout: MaybeContext<BuildRESTFunction<typeof redirectToCheckout$1> & typeof redirectToCheckout$1>;
/**
 * Triggered when an abandoned checkout is created.
 */
declare const onAbandonedCheckoutCreated: BuildEventDefinition<typeof onAbandonedCheckoutCreated$1> & typeof onAbandonedCheckoutCreated$1;
/**
 * Triggerred when an abandoned checkout is deleted.
 */
declare const onAbandonedCheckoutDeleted: BuildEventDefinition<typeof onAbandonedCheckoutDeleted$1> & typeof onAbandonedCheckoutDeleted$1;
/**
 * Triggered when an abandoned checkout is recovered.
 */
declare const onAbandonedCheckoutRecovered: BuildEventDefinition<typeof onAbandonedCheckoutRecovered$1> & typeof onAbandonedCheckoutRecovered$1;
/**
 * Triggered when an abandoned checkout is updated.
 */
declare const onAbandonedCheckoutUpdated: BuildEventDefinition<typeof onAbandonedCheckoutUpdated$1> & typeof onAbandonedCheckoutUpdated$1;

export { AbandonedCheckout, AbandonedCheckoutCreatedEnvelope, AbandonedCheckoutDeletedEnvelope, AbandonedCheckoutRecoveredEnvelope, AbandonedCheckoutSearch, AbandonedCheckoutUpdatedEnvelope, AbandonedCheckoutsQueryBuilder, AddAbandonedCheckoutActivityOptions, AddAbandonedCheckoutActivityResponse, RawHttpResponse, SearchAbandonedCheckoutsResponse, addAbandonedCheckoutActivity, deleteAbandonedCheckout, getAbandonedCheckout, onAbandonedCheckoutCreated, onAbandonedCheckoutDeleted, onAbandonedCheckoutRecovered, onAbandonedCheckoutUpdated, queryAbandonedCheckouts, redirectToCheckout, searchAbandonedCheckouts };
