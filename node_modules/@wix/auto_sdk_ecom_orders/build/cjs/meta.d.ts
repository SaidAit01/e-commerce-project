import { dg as PreparePaymentCollectionRequest$1, b as PreparePaymentCollectionResponse$1, dk as GetPaymentCollectabilityStatusRequest$1, G as GetPaymentCollectabilityStatusResponse$1, dl as RecordManuallyCollectedPaymentRequest$1, dm as RecordManuallyCollectedPaymentResponse$1, dn as MarkOrderAsPaidRequest$1, dp as MarkOrderAsPaidResponse$1, dq as BulkMarkOrdersAsPaidRequest$1, dr as BulkMarkOrdersAsPaidResponse$1, dw as GetRefundabilityStatusRequest$1, dx as GetRefundabilityStatusResponse$1, dA as CreatePaymentGatewayOrderRequest$1, dC as CreatePaymentGatewayOrderResponse$1, dD as ChargeMembershipsRequest$1, dH as ChargeMembershipsResponse$1, dI as TriggerRefundRequest$1, dN as TriggerRefundResponse$1, ed as VoidAuthorizedPaymentsRequest$1, V as VoidAuthorizedPaymentsResponse$1, ee as CaptureAuthorizedPaymentsRequest$1, C as CaptureAuthorizedPaymentsResponse$1, eB as GetOrderRequest$1, eC as GetOrderResponse$1, eO as SearchOrdersRequest$1, S as SearchOrdersResponse$1, eS as CreateOrderRequest$1, eV as CreateOrderResponse$1, eW as UpdateOrderRequest$1, eX as UpdateOrderResponse$1, eY as BulkUpdateOrdersRequest$1, l as BulkUpdateOrdersResponse$1, eZ as CommitDeltasRequest$1, fd as CommitDeltasResponse$1, fE as UpdateOrderLineItemRequest$1, fF as UpdateOrderLineItemResponse$1, g4 as AddActivityRequest$1, g7 as AddActivityResponse$1, ga as UpdateActivityRequest$1, gb as UpdateActivityResponse$1, gc as DeleteActivityRequest$1, gd as DeleteActivityResponse$1, gj as CancelOrderRequest$1, n as CancelOrderResponse$1, gl as UpdateOrderStatusRequest$1, gm as UpdateOrderStatusResponse$1, gM as AggregateOrdersRequest$1, gN as AggregateOrdersResponse$1, gR as BulkUpdateOrderTagsRequest$1, q as BulkUpdateOrderTagsResponse$1 } from './ecom-v1-order-orders.universal-Bcw6NjJM.js';
import '@wix/sdk-types';

interface Order {
    /**
     * Order ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     * @immutable
     */
    createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Order line items.
     * @minSize 1
     * @maxSize 300
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order payment status. */
    paymentStatus?: PaymentStatusWithLiterals;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatusWithLiterals;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     * @format CURRENCY
     */
    currency?: string | null;
    /** Currency conversion details. For use with multi-currency sites. */
    currencyConversionDetails?: CurrencyConversionDetails;
    /**
     * Whether tax is included in line item prices.
     * @immutable
     */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     * @immutable
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /**
     * [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer.
     * @maxLength 1000
     */
    buyerNote?: string | null;
    /** Order status. */
    status?: OrderStatusWithLiterals;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /**
     * Applied discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscount[];
    /**
     * Order activities.
     * @readonly
     * @maxSize 1000
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSourceWithLiterals;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /**
     * Checkout ID.
     * @format GUID
     */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /**
     * Additional fees applied to the order.
     * @maxSize 100
     */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Order tags.
     *
     * [Tags](https://dev.wix.com/docs/rest/business-management/tags/introduction) are labels attached to entities, allowing for flexible categorization and data management.
     */
    tags?: Tags;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     * @immutable
     */
    purchasedDate?: Date | null;
    /** Order Location */
    businessLocation?: Location;
    /**
     * Pay after free trial price summary. Price summary that should be paid for subscriptions after free trial period.
     * @readonly
     */
    payAfterFreeTrial?: PriceSummary;
}
interface OrderLineItem {
    /**
     * Line item ID.
     * @immutable
     */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /**
     * Line item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     * @format GUID
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @max 100000
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @max 100000
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
    /** Address used for tax calculation. */
    taxableAddress?: TaxableAddress;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 10
     */
    modifierGroups?: ModifierGroup[];
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface Price {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /**
     * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 100
     */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 200
     */
    translated?: string | null;
}
interface PlainTextValue {
    /**
     * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 600
     */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 600
     */
    translated?: string | null;
}
interface Color {
    /**
     * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 500
     */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 500
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** @enumType */
type ItemTypeItemTypeWithLiterals = ItemTypeItemType | 'UNRECOGNISED' | 'PHYSICAL' | 'DIGITAL' | 'GIFT_CARD' | 'SERVICE';
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE",
    /**
     * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.
     * @documentationMaturity preview
     */
    MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"
}
/** @enumType */
type PaymentOptionTypeWithLiterals = PaymentOptionType | 'FULL_PAYMENT_ONLINE' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP' | 'DEPOSIT_ONLINE' | 'MEMBERSHIP_OFFLINE' | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';
interface ItemTaxFullDetails {
    /** Taxable amount of this line item. */
    taxableAmount?: Price;
    /**
     * Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`.
     * @decimalValue options { gte:0, maxScale:6 }
     */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price;
    /**
     * Tax rate %, as a decimal point.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /**
     * Tax information for a line item.
     * @maxSize 7
     */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /**
     * Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec".
     * @maxLength 200
     */
    jurisdiction?: string | null;
    /**
     * Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price;
    /**
     * The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc.
     * @maxLength 200
     */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     * @maxLength 200
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionTypeWithLiterals;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
/** @enumType */
type JurisdictionTypeWithLiterals = JurisdictionType | 'UNDEFINED' | 'COUNTRY' | 'STATE' | 'COUNTY' | 'CITY' | 'SPECIAL';
interface DigitalFile {
    /**
     * ID of the secure file in media.
     * @minLength 1
     * @maxLength 100
     */
    fileId?: string;
    /**
     * Link will exist after the digital links have been generated on the order.
     * @format WEB_URL
     * @minLength 1
     * @maxLength 2000
     */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo {
    /**
     * Subscription ID.
     * @format GUID
     */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /**
     * Subscription option title. For example, `"Monthly coffee Subscription"`.
     * @maxLength 150
     * @deprecated Subscription option title. For example, `"Monthly coffee Subscription"`.
     * @replacedBy title
     * @targetRemovalDate 2025-10-01
     */
    subscriptionOptionTitle?: string;
    /**
     * Subscription option description. For example, `"1kg of selected coffee, once a month"`.
     * @maxLength 500
     * @deprecated Subscription option description. For example, `"1kg of selected coffee, once a month"`.
     * @replacedBy description
     * @targetRemovalDate 2025-10-01
     */
    subscriptionOptionDescription?: string | null;
    /**
     * Subscription detailed information.
     * @immutable
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Description of the charges that will be applied for subscription.
     * @maxLength 1000
     */
    chargesDescription?: string | null;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * Interval of recurring payment.
     * @min 1
     * @max 3650
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.
     * @min 1
     */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription. */
    enableCustomerCancellation?: boolean;
    /** Period until first cycle starts. If None => no free trial */
    freeTrialPeriod?: FreeTrialPeriod;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface FreeTrialPeriod {
    /** Frequency of period. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * interval of period
     * @min 1
     * @max 3650
     */
    interval?: number;
}
interface PriceDescription {
    /**
     * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 100
     */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 100
     */
    translated?: string | null;
}
interface LocationAndQuantity {
    /**
     * Location id in the associated owner app.
     * @format GUID
     */
    id?: string;
    /**
     * Location owner app, if not provided then the site business info locations will be used.
     * @format GUID
     * @deprecated Location owner app, if not provided then the site business info locations will be used.
     * @targetRemovalDate 2025-03-01
     */
    appId?: string | null;
    /**
     * Quantity for specific location.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Location name.
     * @maxLength 500
     * @readonly
     */
    name?: string | null;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type TaxableAddressTypeWithLiterals = TaxableAddressType | 'UNKNOWN_TAXABLE_ADDRESS' | 'BUSINESS' | 'BILLING' | 'SHIPPING';
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 10
     */
    modifiers?: ItemModifier[];
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /** The price of the modifier. */
    price?: Price;
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is not a member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * @format EMAIL
     */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is not a member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
}
declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /**
     * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     */
    NOT_PAID = "NOT_PAID",
    /** All required payments associated with this order are paid. */
    PAID = "PAID",
    /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /**
     * All payments pending.
     *
     * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.
     * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).
     */
    PENDING = "PENDING",
    /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_PAID = "PARTIALLY_PAID",
    /**
     * Payment received, but not yet confirmed by the payment provider.
     *
     * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.
     * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.
     * @documentationMaturity preview
     */
    PENDING_MERCHANT = "PENDING_MERCHANT",
    /**
     * One or more payments canceled.
     * @documentationMaturity preview
     */
    CANCELED = "CANCELED",
    /**
     * One or more payments declined.
     * @documentationMaturity preview
     */
    DECLINED = "DECLINED"
}
/** @enumType */
type PaymentStatusWithLiterals = PaymentStatus | 'UNSPECIFIED' | 'NOT_PAID' | 'PAID' | 'PARTIALLY_REFUNDED' | 'FULLY_REFUNDED' | 'PENDING' | 'PARTIALLY_PAID' | 'PENDING_MERCHANT' | 'CANCELED' | 'DECLINED';
declare enum FulfillmentStatus {
    /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or the order was manually marked as fulfilled.
     * Orders without shipping info are fulfilled automatically.
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all, of the order items are fulfilled. */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
/** @enumType */
type FulfillmentStatusWithLiterals = FulfillmentStatus | 'NOT_FULFILLED' | 'FULFILLED' | 'PARTIALLY_FULFILLED';
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface CurrencyConversionDetails {
    /**
     * Currency used for the pricing of this order, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * This currency is used to calculate the pricing before conversion to the buyer's payment currency.
     * @readonly
     * @immutable
     * @format CURRENCY
     */
    originalCurrency?: string | null;
    /**
     * The rate used for converting the original currency to the currency used for payment.
     * @readonly
     * @immutable
     * @decimalValue options { gt:0, lte:1000000000000000 }
     */
    conversionRate?: string | null;
}
interface PriceSummary {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price;
    /** Total tax on this order. */
    tax?: Price;
    /** Total calculated discount value. */
    discount?: Price;
    /** Order’s total price after discounts and tax. */
    total?: Price;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatTypeWithLiterals;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
/** @enumType */
type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';
interface V1ShippingInformation {
    /**
     * App Def Id of external provider which was a source of shipping info
     * @minLength 1
     * @maxLength 100
     */
    carrierId?: string | null;
    /**
     * Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"`.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     * @maxLength 250
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics;
    /** Shipping costs. */
    cost?: ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion;
}
interface DeliveryLogistics extends DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
    /**
     * Expected delivery time in free text. For example, `"3-5 business days"`.
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`.
     * @maxLength 1000
     */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupMethodWithLiterals;
}
/** Physical address */
interface PickupAddress {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 1000
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 1000
     */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 1000
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 1000
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
/** @enumType */
type PickupMethodWithLiterals = PickupMethod | 'UNKNOWN_METHOD' | 'STORE_PICKUP' | 'PICKUP_POINT';
interface DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price;
}
interface ShippingRegion {
    /**
     * Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`.
     * @maxLength 100
     */
    name?: string | null;
}
declare enum OrderStatus {
    /** Order created, but not yet approved or canceled. */
    INITIALIZED = "INITIALIZED",
    /**
     * Order approved.
     *
     * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).
     * Offline orders (cash payment) are automatically approved.
     */
    APPROVED = "APPROVED",
    /** Order canceled by the user. */
    CANCELED = "CANCELED",
    /**
     * Order pending.
     * @documentationMaturity preview
     */
    PENDING = "PENDING",
    /**
     * Order rejected.
     *
     * This happens when pending payments fail.
     * @documentationMaturity preview
     */
    REJECTED = "REJECTED"
}
/** @enumType */
type OrderStatusWithLiterals = OrderStatus | 'INITIALIZED' | 'APPROVED' | 'CANCELED' | 'PENDING' | 'REJECTED';
interface TaxSummary {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price;
    /**
     * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
     * @maxSize 50
     */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /**
     * The name of the tax against which this tax amount was calculated.
     * @maxLength 200
     */
    taxName?: string;
    /**
     * The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws.
     * @maxLength 200
     */
    taxType?: string;
    /**
     * The name of the jurisdiction in which this tax detail applies.
     * @maxLength 200
     */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionTypeWithLiterals;
    /**
     * The rate at which this tax detail was calculated.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountTypeWithLiterals;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @format GUID
     * @maxSize 1
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /**
     * Discount id.
     * @format GUID
     * @immutable
     */
    id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'GLOBAL' | 'SPECIFIC_ITEMS' | 'SHIPPING';
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price;
}
interface MerchantDiscount extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReasonWithLiterals;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
    /** Discount amount. */
    amount?: Price;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReasonWithLiterals;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS",
    BILLING_ADJUSTMENT = "BILLING_ADJUSTMENT"
}
/** @enumType */
type DiscountReasonWithLiterals = DiscountReason | 'UNSPECIFIED' | 'EXCHANGED_ITEMS' | 'BILLING_ADJUSTMENT';
interface DiscountRule {
    /**
     * Discount rule ID
     * @format GUID
     */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: Price;
}
interface DiscountRuleName {
    /**
     * Original discount rule name (in site's default language).
     * @minLength 1
     * @maxLength 256
     */
    original?: string;
    /**
     * Translated discount rule name according to buyer language. Defaults to `original` when not provided.
     * @minLength 1
     * @maxLength 500
     */
    translated?: string | null;
}
interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Activity author's email.
     * @format EMAIL
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityTypeWithLiterals;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
interface CustomActivity {
    /**
     * ID of the app that created the custom activity.
     * @format GUID
     */
    appId?: string;
    /**
     * Custom activity type. For example, `"Ticket number set"`.
     * @maxLength 100
     */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /**
     * Merchant comment message.
     * @minLength 1
     * @maxLength 5000
     */
    message?: string;
}
interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price;
    /**
     * Reason for refund.
     * @maxLength 200
     */
    reason?: string;
}
declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD",
    /** @documentationMaturity preview */
    PAYMENT_PENDING = "PAYMENT_PENDING",
    /** @documentationMaturity preview */
    PAYMENT_CANCELED = "PAYMENT_CANCELED",
    /** @documentationMaturity preview */
    PAYMENT_DECLINED = "PAYMENT_DECLINED",
    /** @documentationMaturity preview */
    ORDER_PENDING = "ORDER_PENDING",
    /** @documentationMaturity preview */
    ORDER_REJECTED = "ORDER_REJECTED"
}
/** @enumType */
type ActivityTypeWithLiterals = ActivityType | 'ORDER_REFUNDED' | 'ORDER_PLACED' | 'ORDER_PAID' | 'ORDER_FULFILLED' | 'ORDER_NOT_FULFILLED' | 'ORDER_CANCELED' | 'DOWNLOAD_LINK_SENT' | 'TRACKING_NUMBER_ADDED' | 'TRACKING_NUMBER_EDITED' | 'TRACKING_LINK_ADDED' | 'SHIPPING_CONFIRMATION_EMAIL_SENT' | 'INVOICE_ADDED' | 'INVOICE_REMOVED' | 'INVOICE_SENT' | 'FULFILLER_EMAIL_SENT' | 'SHIPPING_ADDRESS_EDITED' | 'EMAIL_EDITED' | 'PICKUP_READY_EMAIL_SENT' | 'CUSTOM_ACTIVITY' | 'MERCHANT_COMMENT' | 'ORDER_CREATED_FROM_EXCHANGE' | 'NEW_EXCHANGE_ORDER_CREATED' | 'ORDER_PARTIALLY_PAID' | 'DRAFT_ORDER_CHANGES_APPLIED' | 'SAVED_PAYMENT_METHOD' | 'PAYMENT_PENDING' | 'PAYMENT_CANCELED' | 'PAYMENT_DECLINED' | 'ORDER_PENDING' | 'ORDER_REJECTED';
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
/** @enumType */
type AttributionSourceWithLiterals = AttributionSource | 'UNSPECIFIED' | 'FACEBOOK_ADS';
interface CreatedBy extends CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * Member ID - when the order was created by a **logged in** site visitor.
     * @format GUID
     */
    memberId?: string;
    /**
     * Visitor ID - when the order was created by a site visitor that was **not** logged in.
     * @format GUID
     */
    visitorId?: string;
    /**
     * App ID - when the order was created by an external application.
     * @format GUID
     */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * Member ID - when the order was created by a **logged in** site visitor.
     * @format GUID
     */
    memberId?: string;
    /**
     * Visitor ID - when the order was created by a site visitor that was **not** logged in.
     * @format GUID
     */
    visitorId?: string;
    /**
     * App ID - when the order was created by an external application.
     * @format GUID
     */
    appId?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelTypeWithLiterals;
    /**
     * Reference to an order ID from an external system.
     * @maxLength 100
     */
    externalOrderId?: string | null;
    /**
     * URL to the order in the external system.
     * @maxLength 300
     */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM",
    /** PayPal Agentic Checkout sales channel. */
    PAYPAL_AGENTIC_CHECKOUT = "PAYPAL_AGENTIC_CHECKOUT"
}
/** @enumType */
type ChannelTypeWithLiterals = ChannelType | 'UNSPECIFIED' | 'WEB' | 'POS' | 'EBAY' | 'AMAZON' | 'OTHER_PLATFORM' | 'WIX_APP_STORE' | 'WIX_INVOICES' | 'BACKOFFICE_MERCHANT' | 'WISH' | 'CLASS_PASS' | 'GLOBAL_E' | 'FACEBOOK' | 'ETSY' | 'TIKTOK' | 'FAIRE_COM' | 'PAYPAL_AGENTIC_CHECKOUT';
interface CustomField {
    /** Custom field value. */
    value?: any;
    /**
     * Custom field title.
     * @minLength 1
     * @maxLength 500
     */
    title?: string;
    /**
     * Translated custom field title.
     * @minLength 1
     * @maxLength 500
     */
    translatedTitle?: string | null;
}
interface BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
    /**
     * Sum of all pending transactions.
     * @readonly
     */
    pending?: Price;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @decimalValue options { }
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AdditionalFee {
    /**
     * Additional fee's unique code for future processing.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Name of additional fee.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /** Additional fee's price. */
    price?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * SPI implementer's `appId`.
     * @format GUID
     */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price;
    /**
     * Additional fee's id.
     * @format GUID
     * @immutable
     */
    id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
interface TagList {
    /**
     * List of tag IDs
     * @maxSize 100
     * @maxLength 5
     */
    tagIds?: string[];
}
interface Location {
    /**
     * Location ID.
     * Learn more about the [Wix Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     * @format GUID
     */
    id?: string;
    /**
     * Location name.
     * @minLength 1
     * @maxLength 500
     * @readonly
     */
    name?: string;
}
/** Business model of a refund request */
interface RefundDetails {
    /**
     * Order line item IDs and quantities that were refunded.
     * @maxSize 300
     */
    items?: RefundItem[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /**
     * Reason for the refund, provided by customer (optional).
     * @maxLength 200
     */
    reason?: string | null;
    /**
     * Line items that were refunded.
     * @maxSize 300
     */
    lineItems?: LineItemRefund[];
    /**
     * Additional fees that were refunded.
     * @maxSize 100
     */
    additionalFees?: AdditionalFeeRefund[];
    /** Shipping amount that was refunded. */
    shipping?: ShippingRefund;
}
interface RefundItem {
    /**
     * Line item ID the refunded line item.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity refunded.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface LineItemRefund {
    /**
     * Line item ID.
     * @format GUID
     * @immutable
     */
    lineItemId?: string;
    /**
     * Refund quantity.
     * @min 1
     * @max 100000
     * @immutable
     */
    quantity?: number;
}
interface AdditionalFeeRefund {
    /**
     * Additional fee ID.
     * @format GUID
     * @immutable
     */
    additionalFeeId?: string;
    /**
     * Refund amount.
     * @immutable
     */
    amount?: Price;
}
interface ShippingRefund {
    /**
     * Refund amount.
     * @immutable
     */
    amount?: Price;
}
interface PreparePaymentCollectionRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /** Amount to collect */
    amount: Price;
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
interface DelayedCaptureSettings {
    /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */
    scheduledAction?: ScheduledActionWithLiterals;
    /** Delay duration before execution. Optional - if not set, providers default period will be used */
    delayDuration?: Duration;
}
declare enum ScheduledAction {
    UNSPECIFIED = "UNSPECIFIED",
    /** Whether payment will be auto-voided when duration passes */
    VOID = "VOID",
    /** Whether payment will be auto-captured when duration passes */
    CAPTURE = "CAPTURE"
}
/** @enumType */
type ScheduledActionWithLiterals = ScheduledAction | 'UNSPECIFIED' | 'VOID' | 'CAPTURE';
interface Duration {
    /**
     * Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc
     * @min 1
     */
    count?: number;
    /** Duration unit: MINUTES, HOURS and DAYS */
    unit?: DurationUnitWithLiterals;
}
declare enum DurationUnit {
    UNKNOWN_DURATION_UNIT = "UNKNOWN_DURATION_UNIT",
    MINUTES = "MINUTES",
    HOURS = "HOURS",
    DAYS = "DAYS"
}
/** @enumType */
type DurationUnitWithLiterals = DurationUnit | 'UNKNOWN_DURATION_UNIT' | 'MINUTES' | 'HOURS' | 'DAYS';
interface PreparePaymentCollectionResponse {
    /** Payment gateway order id which is associated with given payment */
    paymentGatewayOrderId?: string;
}
interface GetPaymentCollectabilityStatusRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
}
interface GetPaymentCollectabilityStatusResponse {
    /** Payment collectability status */
    status?: PaymentCollectabilityStatusWithLiterals;
    /** Collectable order amount */
    amount?: Price;
}
declare enum PaymentCollectabilityStatus {
    UNKNOWN = "UNKNOWN",
    COLLECTABLE = "COLLECTABLE",
    NONCOLLECTABLE_ORDER_IS_CANCELLED = "NONCOLLECTABLE_ORDER_IS_CANCELLED",
    NONCOLLECTABLE_ORDER_IS_PAID = "NONCOLLECTABLE_ORDER_IS_PAID",
    NONCOLLECTABLE_MISSING_PAYMENT_METHOD = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD",
    NONCOLLECTABLE_ORDER_IS_PENDING = "NONCOLLECTABLE_ORDER_IS_PENDING",
    NONCOLLECTABLE_ORDER_IS_REJECTED = "NONCOLLECTABLE_ORDER_IS_REJECTED",
    NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS = "NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS",
    NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS = "NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS"
}
/** @enumType */
type PaymentCollectabilityStatusWithLiterals = PaymentCollectabilityStatus | 'UNKNOWN' | 'COLLECTABLE' | 'NONCOLLECTABLE_ORDER_IS_CANCELLED' | 'NONCOLLECTABLE_ORDER_IS_PAID' | 'NONCOLLECTABLE_MISSING_PAYMENT_METHOD' | 'NONCOLLECTABLE_ORDER_IS_PENDING' | 'NONCOLLECTABLE_ORDER_IS_REJECTED' | 'NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS' | 'NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS';
interface RecordManuallyCollectedPaymentRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    orderId: string;
    /** Amount to be recorded as approved manual payment for given order */
    amount: Price;
}
interface RecordManuallyCollectedPaymentResponse {
}
interface MarkOrderAsPaidRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
}
interface MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order;
}
interface BulkMarkOrdersAsPaidRequest {
    /**
     * IDs of orders to mark as paid.
     * @minSize 1
     * @maxSize 100
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderIds: string[];
}
interface BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkOrderResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /**
     * Updated order.
     *
     * Returned when `returnFullEntity = true`.
     */
    item?: Order;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetRefundabilityStatusRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
}
interface GetRefundabilityStatusResponse {
    /**
     * Refundability details.
     * @maxSize 300
     */
    refundabilities?: Refundability[];
    /**
     * Whether the order supports refunding per item.
     * @deprecated
     */
    refundablePerItem?: boolean;
}
interface Refundability extends RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReasonWithLiterals;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;
    /** Payment ID. */
    paymentId?: string;
    /** Payment refundability status. */
    refundabilityStatus?: RefundableStatusWithLiterals;
    /** Link to payment provider dashboard. */
    providerLink?: string | null;
}
/** @oneof */
interface RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReasonWithLiterals;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;
}
declare enum RefundableStatus {
    NOT_REFUNDABLE = "NOT_REFUNDABLE",
    MANUAL = "MANUAL",
    REFUNDABLE = "REFUNDABLE"
}
/** @enumType */
type RefundableStatusWithLiterals = RefundableStatus | 'NOT_REFUNDABLE' | 'MANUAL' | 'REFUNDABLE';
declare enum NonRefundableReason {
    NONE = "NONE",
    ALREADY_REFUNDED = "ALREADY_REFUNDED",
    PROVIDER_IS_DOWN = "PROVIDER_IS_DOWN",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NOT_PAID = "NOT_PAID",
    ACCESS_DENIED = "ACCESS_DENIED",
    ZERO_PRICE = "ZERO_PRICE",
    DISABLED_BY_PROVIDER = "DISABLED_BY_PROVIDER",
    PENDING_REFUND = "PENDING_REFUND",
    FORBIDDEN = "FORBIDDEN",
    TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND",
    ORDER_IS_PENDING = "ORDER_IS_PENDING",
    ORDER_IS_REJECTED = "ORDER_IS_REJECTED"
}
/** @enumType */
type NonRefundableReasonWithLiterals = NonRefundableReason | 'NONE' | 'ALREADY_REFUNDED' | 'PROVIDER_IS_DOWN' | 'INTERNAL_ERROR' | 'NOT_PAID' | 'ACCESS_DENIED' | 'ZERO_PRICE' | 'DISABLED_BY_PROVIDER' | 'PENDING_REFUND' | 'FORBIDDEN' | 'TRANSACTION_NOT_FOUND' | 'ORDER_IS_PENDING' | 'ORDER_IS_REJECTED';
declare enum ManuallyRefundableReason {
    EXPIRED = "EXPIRED",
    NOT_SUPPORTED = "NOT_SUPPORTED",
    OFFLINE = "OFFLINE",
    REQUIRES_CARD_READER = "REQUIRES_CARD_READER"
}
/** @enumType */
type ManuallyRefundableReasonWithLiterals = ManuallyRefundableReason | 'EXPIRED' | 'NOT_SUPPORTED' | 'OFFLINE' | 'REQUIRES_CARD_READER';
interface CreatePaymentGatewayOrderRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /** Information about the user who initiated the payment. */
    chargedBy?: ChargedBy;
}
interface ChargedBy {
    /**
     * ID - id of the user who initiated the payment
     * @format GUID
     */
    id?: string;
    /**
     * Full name - name of the user who initiated the payment
     * @minLength 1
     * @maxLength 200
     */
    fullName?: string | null;
}
interface CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
interface ChargeMembershipsRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member
     * but a user which is using the membership on behalf of the a member
     * @format GUID
     */
    memberId: string;
    /**
     * List of items to be paid by memberships
     * @minSize 1
     * @maxSize 300
     */
    membershipCharges?: MembershipChargeItem[];
}
interface MembershipChargeItem {
    /**
     * The id of used membership
     * @minLength 1
     * @maxLength 100
     */
    membershipId?: string;
    /**
     * ID of the application providing this payment option
     * @format GUID
     */
    appId?: string;
    /** The name of used membership */
    membershipName?: MembershipName;
    /** Additional data about this membership */
    membershipAdditionalData?: Record<string, any> | null;
    /** Catalog and item reference info. */
    catalogReference?: CatalogReference;
    /** Properties of the service. When relevant, contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * Usually would be the same as catalogReference.catalogItemId
     * For cases when these are not the same, this field would return the actual id of the item in the catalog
     * For example, for Wix bookings, catalogReference.catalogItemId is the booking id, and this value is being set to be the service id
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * line item id of Checkout/Order line item
     * @minLength 1
     * @maxLength 100
     */
    lineItemId?: string;
}
interface MembershipName {
    /**
     * Membership name.
     * @maxLength 100
     */
    original?: string;
    /**
     * Translated membership name. Defaults to `original` when not provided.
     * @maxLength 100
     */
    translated?: string | null;
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /**
     * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.
     * @min 1
     * @max 10000
     */
    numberOfParticipants?: number | null;
}
interface ChargeMembershipsResponse {
}
interface TriggerRefundRequest {
    /**
     * The order this refund related to
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * Refund operations information
     * @minSize 1
     * @maxSize 1
     */
    payments: PaymentRefund[];
    /** Business model of a refund */
    details?: RefundDetails;
    /** Side effect details related to refund */
    sideEffects?: RefundSideEffects;
}
interface PaymentRefund {
    /**
     * Specific payment within the order to refund
     * @format GUID
     */
    paymentId?: string;
    /** Refund amount. Not relevant for membership and gift card refunds. */
    amount?: Price;
    /**
     * Whether refund is made externally and manually (on the payment provider's side)
     * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.
     * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.
     */
    externalRefund?: boolean;
}
interface RefundSideEffects {
    /** Inventory restock details as part of this refund. */
    restockInfo?: RestockInfo;
    /** Whether to send a refund confirmation email to the customer. */
    sendOrderRefundedEmail?: boolean;
    /**
     * Custom message added to the refund confirmation email.
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
}
interface RestockInfo {
    /** Restock type. */
    type?: RestockTypeWithLiterals;
    /**
     * Restocked line items and quantities. Only relevant for `{"type": "SOME_ITEMS"}`.
     * @maxSize 300
     */
    items?: RestockItem[];
}
declare enum RestockType {
    NO_ITEMS = "NO_ITEMS",
    ALL_ITEMS = "ALL_ITEMS",
    SOME_ITEMS = "SOME_ITEMS"
}
/** @enumType */
type RestockTypeWithLiterals = RestockType | 'NO_ITEMS' | 'ALL_ITEMS' | 'SOME_ITEMS';
interface RestockItem {
    /**
     * ID of the line item being restocked.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity being restocked.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface TriggerRefundResponse {
    /** All order's transactions after the refunds were added */
    orderTransactions?: OrderTransactions;
    /** Created refund ID */
    refundId?: string | null;
    /** Payment ID's that the refund execution had failed for */
    failedPaymentIds?: ItemMetadata[];
}
interface OrderTransactions {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string;
    /**
     * Record of payments made to the merchant.
     * @maxSize 100
     */
    payments?: Payment[];
    /**
     * Record of refunds made to the buyer.
     * @maxSize 300
     */
    refunds?: Refund[];
}
interface Payment extends PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
    /**
     * Payment ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
}
/** @oneof */
interface PaymentReceiptInfoOneOf {
}
interface RegularPaymentDetails extends RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
    /**
     * Wix Payments order ID.
     * @maxLength 100
     */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID.
     * This field is only returned when the value of `offline_payment` is `false`.
     * @maxLength 100
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     * @maxLength 100
     */
    paymentMethod?: string | null;
    /**
     * Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments.
     * @maxLength 100
     */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatusWithLiterals;
    /**
     * Whether there is a payment agreement that allows for future charges.
     * @immutable
     */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails;
    /**
     * Record of chargebacks made by the buyer.
     * @maxSize 6
     */
    chargebacks?: Chargeback[];
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
}
declare enum TransactionStatus {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
/** @enumType */
type TransactionStatusWithLiterals = TransactionStatus | 'UNDEFINED' | 'APPROVED' | 'PENDING' | 'PENDING_MERCHANT' | 'CANCELED' | 'DECLINED' | 'REFUNDED' | 'PARTIALLY_REFUNDED' | 'AUTHORIZED' | 'VOIDED';
interface CreditCardPaymentMethodDetails {
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface AuthorizationDetails {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     * @maxSize 1
     */
    captures?: AuthorizationCapture[];
    /** Void associated with payment */
    void?: AuthorizationVoid;
    /** Scheduled action for this transaction */
    scheduledAction?: V1ScheduledAction;
}
interface AuthorizationCapture {
    /**
     * Capture ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatusWithLiterals;
    /**
     * Amount of this capture
     * @immutable
     */
    amount?: Price;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
}
declare enum AuthorizationCaptureStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Capture operation still in progress. */
    PENDING = "PENDING",
    /** Capture operation succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Capture operation failed. */
    FAILED = "FAILED"
}
/** @enumType */
type AuthorizationCaptureStatusWithLiterals = AuthorizationCaptureStatus | 'UNKNOWN_STATUS' | 'PENDING' | 'SUCCEEDED' | 'FAILED';
interface AuthorizationActionFailureDetails {
    /** @maxLength 100 */
    failureCode?: string;
}
interface AuthorizationVoid {
    /** Status of this void action */
    status?: AuthorizationVoidStatusWithLiterals;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
    /** Reason of void action */
    reason?: ReasonWithLiterals;
}
declare enum AuthorizationVoidStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Void operation still in progress. */
    PENDING = "PENDING",
    /** Void operation succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Void operation failed. */
    FAILED = "FAILED"
}
/** @enumType */
type AuthorizationVoidStatusWithLiterals = AuthorizationVoidStatus | 'UNKNOWN_STATUS' | 'PENDING' | 'SUCCEEDED' | 'FAILED';
/** Reason the authorization was voided. */
declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    /** Authorization was voided by user. */
    MANUAL = "MANUAL",
    /** Authorization passed execution date. */
    SCHEDULED = "SCHEDULED"
}
/** @enumType */
type ReasonWithLiterals = Reason | 'UNKNOWN_REASON' | 'MANUAL' | 'SCHEDULED';
interface V1ScheduledAction {
    /** Type of the action. */
    actionType?: ActionTypeWithLiterals;
    /** The date and time of the action. */
    executionDate?: Date | null;
}
declare enum ActionType {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
/** @enumType */
type ActionTypeWithLiterals = ActionType | 'UNKNOWN_ACTION_TYPE' | 'VOID' | 'CAPTURE';
interface Chargeback {
    /**
     * Chargeback ID.
     * @format GUID
     * @readonly
     * @immutable
     */
    id?: string;
    /**
     * Date and time the chargeback was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     * @immutable
     */
    createdDate?: Date | null;
    /**
     * Date and time the chargeback was updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Amount.
     * @readonly
     * @immutable
     */
    amount?: Price;
    /**
     * Reversal amount. Present only when status is REVERSED.
     * @readonly
     */
    reversalAmount?: Price;
    /**
     * Status.
     *
     * Default: `"APPROVED"`.
     */
    status?: ChargebackStatusWithLiterals;
    /**
     * External chargeback ID.
     * @format GUID
     * @readonly
     * @immutable
     */
    externalId?: string | null;
}
declare enum ChargebackStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /** Chargeback was approved. */
    APPROVED = "APPROVED",
    /** Chargeback was reversed. */
    REVERSED = "REVERSED"
}
/** @enumType */
type ChargebackStatusWithLiterals = ChargebackStatus | 'UNSPECIFIED' | 'APPROVED' | 'REVERSED';
interface GiftCardPaymentDetails {
    /**
     * Gift card payment ID.
     * @minLength 1
     * @maxLength 100
     */
    giftCardPaymentId?: string;
    /**
     * ID of the app that created the gift card.
     * @format GUID
     */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
interface Refund {
    /**
     * Refund ID.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * List of transactions.
     * @maxSize 50
     */
    transactions?: RefundTransaction[];
    /** Refund business details. */
    details?: RefundDetails;
    /**
     * Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     * @immutable
     */
    createdDate?: Date | null;
    /**
     * Aggregated refund summary.
     * @readonly
     */
    summary?: AggregatedRefundSummary;
    /**
     * ID of the app that initiated this refund.
     * @format GUID
     * @readonly
     * @immutable
     */
    requestingServiceAppId?: string | null;
}
interface RefundTransaction {
    /**
     * ID of the payment associated with this refund.
     * @format GUID
     * @immutable
     */
    paymentId?: string;
    /**
     * Refund amount.
     * @immutable
     */
    amount?: Price;
    /** Refund status. */
    refundStatus?: RefundStatusWithLiterals;
    /** Optional details of current refund status. */
    refundStatusInfo?: RefundStatusInfo;
    /**
     * Payment gateway's refund ID.
     * This field is only returned when the value of `external_refund` is `false`.
     * @format GUID
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /**
     * Whether refund was made externally and manually on the payment provider's side.
     * @immutable
     */
    externalRefund?: boolean;
}
/** Refund transaction status. */
declare enum RefundStatus {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    PENDING = "PENDING",
    /** Refund transaction succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Refund transaction failed. */
    FAILED = "FAILED",
    /** Refund request acknowledged, and will be executed soon. */
    SCHEDULED = "SCHEDULED",
    /** Refund was initiated on payment provider side. */
    STARTED = "STARTED"
}
/** @enumType */
type RefundStatusWithLiterals = RefundStatus | 'PENDING' | 'SUCCEEDED' | 'FAILED' | 'SCHEDULED' | 'STARTED';
interface RefundStatusInfo {
    /**
     * Reason code for the refund's current status.
     *
     * Learn more about [reason codes](https://dev.wix.com/docs/rest/business-management/payments/service-plugins/payment-service-provider-service-plugin/reason-codes).
     * @minLength 1
     * @maxLength 10
     */
    paymentGatewayReasonCode?: string | null;
    /**
     * Free text explanation of current refund status.
     * @minLength 1
     * @maxLength 1000
     */
    description?: string | null;
}
interface AggregatedRefundSummary {
    /** Total amount requested for refund. */
    requestedRefund?: Price;
    /** Pending refund amount - the portion of `requestedRefund` that is still pending. */
    pendingRefund?: Price;
    /** Refunded amount - the portion of `requestedRefund` that refunded successfully. */
    refunded?: Price;
    /** Failed refund amount - the portion of `requestedRefund` that failed. */
    failedRefundAmount?: Price;
    /** Whether at least one refund transaction is still in `"PENDING"` status. */
    pending?: boolean;
    /** Breakdown of refunded items. Available only after refund is complete. */
    breakdown?: RefundItemsBreakdown;
}
interface RefundItemsBreakdown {
    /**
     * Refunded line items and the amount refunded for each.
     * @maxSize 300
     */
    lineItems?: LineItemRefundSummary[];
}
interface LineItemRefundSummary {
    /**
     * ID of the refunded line item.
     * @format GUID
     */
    lineItemId?: string;
    /** Total refunded amount for the line item. */
    totalRefundedAmount?: Price;
}
interface VoidAuthorizedPaymentsRequest {
    /**
     * Wix eCommerce order ID
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * Payment IDs
     * @minSize 1
     * @maxSize 100
     * @format GUID
     */
    paymentIds: string[];
}
interface VoidAuthorizedPaymentsResponse {
    /** All order's transactions after the void was triggered */
    orderTransactions?: OrderTransactions;
}
interface CaptureAuthorizedPaymentsRequest {
    /**
     * Wix eCommerce order ID
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * Capture payments information
     * @minSize 1
     * @maxSize 100
     */
    payments: PaymentCapture[];
}
interface PaymentCapture {
    /**
     * Payment ID
     * @format GUID
     */
    paymentId?: string | null;
    /**
     * Capture amount.
     * If not provided - full authorized amount will be captured.
     */
    amount?: Price;
}
interface CaptureAuthorizedPaymentsResponse {
    /** All order's transactions after the capture was triggered */
    orderTransactions?: OrderTransactions;
}
interface GetOrderRequest {
    /**
     * ID of the order to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    id: string;
}
interface GetOrderResponse {
    /** The requested order. */
    order?: Order;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SearchOrdersRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 4
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface SearchOrdersResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CreateOrderRequest {
    /** Order info. */
    order: Order;
    /** Determine order lifecycle */
    settings?: OrderCreationSettings;
}
interface OrderCreationSettings {
    /**
     * Condition for the order to be approved.
     * Default: `DEFAULT`
     */
    orderApprovalStrategy?: OrderApprovalStrategyWithLiterals;
    /** Notification settings to be applied on order creation */
    notifications?: OrderCreateNotifications;
}
declare enum OrderApprovalStrategy {
    /** Order is automatically approved when `order.priceSummary.total = 0`, **or** after receiving payment. */
    DEFAULT = "DEFAULT",
    /** Order is automatically approved **only** after receiving payment. */
    PAYMENT_RECEIVED = "PAYMENT_RECEIVED",
    /** Order is automatically approved when payment method is saved for it. */
    PAYMENT_METHOD_SAVED = "PAYMENT_METHOD_SAVED"
}
/** @enumType */
type OrderApprovalStrategyWithLiterals = OrderApprovalStrategy | 'DEFAULT' | 'PAYMENT_RECEIVED' | 'PAYMENT_METHOD_SAVED';
interface OrderCreateNotifications {
    /**
     * Whether to send notification to the buyer.
     *
     * Default: `true`
     */
    sendNotificationToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
}
interface CreateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
interface UpdateOrderRequest {
    /** Order to be updated. */
    order: Order;
}
interface UpdateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
interface BulkUpdateOrdersRequest {
    /**
     * Orders to update.
     * @minSize 1
     * @maxSize 100
     */
    orders: MaskedOrder[];
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface MaskedOrder {
    /** Order to be updated. */
    order?: Order;
}
interface BulkUpdateOrdersResponse {
    /**
     * Bulk action results.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface CommitDeltasRequest {
    /** Order id to be updated */
    id: string;
    /**
     * Draft order Id representing this change.
     * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get
     * @format GUID
     */
    draftOrderId?: string;
    /** Draft order changes to be applied */
    changes: DraftOrderDiffs;
    /** Side-effects to happen after order is updated */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Reason for edit, given by user (optional).
     * @maxLength 200
     */
    reason?: string | null;
}
interface DraftOrderDiffs extends DraftOrderDiffsShippingUpdateInfoOneOf, DraftOrderDiffsBuyerUpdateInfoOneOf, DraftOrderDiffsBillingUpdateInfoOneOf, DraftOrderDiffsRecipientUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /**
     * Added/updated/removed order line items.
     * @maxSize 300
     */
    lineItems?: V1LineItemDelta[];
    /**
     * Added/updated/removed discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscountDelta[];
    /**
     * Added/updated/removed additional fee.
     * @maxSize 100
     */
    additionalFees?: AdditionalFeeDelta[];
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /**
     * Updated order price summary. overwrites existing price summary.
     * balance will be updated automatically.
     */
    priceSummary?: PriceSummary;
}
/** @oneof */
interface DraftOrderDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
/** @oneof */
interface DraftOrderDiffsBuyerUpdateInfoOneOf {
}
/** @oneof */
interface DraftOrderDiffsBillingUpdateInfoOneOf {
}
/** @oneof */
interface DraftOrderDiffsRecipientUpdateInfoOneOf {
}
interface V1LineItemDelta extends V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
    lineItem?: OrderLineItemChangedDetails;
}
/** @oneof */
interface V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
}
interface OrderLineItemChangedDetails {
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /**
     * Line item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Total discount for this line item's entire quantity. */
    totalDiscount?: Price;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass this order's ID to [List Fulfillments For Single Order](https://bo.wix.com/wix-docs/rest/ecommerce/order-fulfillments/list-fulfillments-for-single-order).
     * @format GUID
     */
    fulfillerId?: string | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /** Line item price before line item discounts for display purposes. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price;
    /** Total price after all discounts and tax. */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     */
    paymentOption?: DeltaPaymentOptionTypeWithLiterals;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price;
    /** Total price after all discounts excluding tax. */
    totalPriceBeforeTax?: Price;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 10
     */
    modifierGroups?: ModifierGroup[];
}
/** Type of selected payment option for catalog item */
declare enum DeltaPaymentOptionType {
    /** Irrelevant */
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    /** The entire payment for the given item will happen after checkout. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /**
     * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.
     * Note: when this option is used, the price will be 0.
     */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
/** @enumType */
type DeltaPaymentOptionTypeWithLiterals = DeltaPaymentOptionType | 'UNKNOWN_PAYMENT_OPTION' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP_OFFLINE';
interface ItemChangedDetails {
    /**
     * The quantity before the change.
     * @min 1
     * @max 1000000
     */
    quantityBeforeChange?: number | null;
    /** The price before the change. */
    priceBeforeChange?: Price;
    /** The price description before the change */
    priceDescriptionBeforeChange?: PriceDescription;
}
interface AppliedDiscountDelta extends AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount;
    discountRemoved?: boolean;
    /**
     * Discount id.
     * @format GUID
     */
    discountId?: string;
}
/** @oneof */
interface AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount;
    discountRemoved?: boolean;
}
interface AdditionalFeeDelta extends AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee;
    additionalFeeRemoved?: boolean;
    /**
     * Additional fee id.
     * @format GUID
     */
    additionalFeeId?: string;
}
/** @oneof */
interface AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee;
    additionalFeeRemoved?: boolean;
}
interface DraftOrderCommitSettings {
    /** If false, do not send notifications to buyer. Default is true. */
    sendNotificationsToBuyer?: boolean | null;
    /** If false, do not send notifications to business. Default is true. */
    sendNotificationsToBusiness?: boolean | null;
    /** If false, do not add activities to the order. Default is true. */
    addActivitiesToOrder?: boolean | null;
    /** If false, do not send mails to custom fulfillers in case of a change of shippable items fulfilled by custom fulfillers. Default is true. */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Inventory changes to be applied. Either to restock, or decrease.
     * @maxSize 300
     */
    inventoryUpdates?: InventoryUpdateDetails[];
}
interface InventoryUpdateDetails {
    /** Action to be applied - decrease or restock */
    actionType?: InventoryActionWithLiterals;
    /** Order line item id */
    lineItemId?: string;
    /** The amount to be increased or restocked */
    quantityChange?: number;
}
declare enum InventoryAction {
    /** Restock inventory */
    RESTOCK = "RESTOCK",
    /** Decrease inventory. Without failing on negative inventory. */
    DECREASE = "DECREASE"
}
/** @enumType */
type InventoryActionWithLiterals = InventoryAction | 'RESTOCK' | 'DECREASE';
interface CommitDeltasResponse {
    /** Order after deltas are applied */
    order?: Order;
}
interface UpdateOrderLineItemRequest {
    /**
     * Order ID
     * @minLength 1
     * @maxLength 100
     */
    id: string;
    /** Order line item to update */
    lineItem: OrderLineItem;
}
interface UpdateOrderLineItemResponse {
    /** Updated order data */
    order?: Order;
}
interface AddActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    id: string;
    /** Activity info. */
    activity: PublicActivity;
}
interface PublicActivity extends PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
/** @oneof */
interface PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
interface AddActivityResponse {
    /** Updated order. */
    order?: Order;
    /**
     * ID of the added activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     * @format GUID
     */
    activityId?: string;
}
interface UpdateActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    id: string;
    /**
     * ID of the activity to update.
     * @format GUID
     */
    activityId: string;
    /** Activity info. */
    activity: PublicActivity;
}
interface UpdateActivityResponse {
    /** Updated order. */
    order?: Order;
}
interface DeleteActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    id: string;
    /**
     * ID of the activity to delete.
     * @format GUID
     */
    activityId: string;
}
interface DeleteActivityResponse {
    /** Updated order. */
    order?: Order;
}
interface CancelOrderRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    id: string;
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /**
     * Custom note to be added to the email (optional).
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface CancelOrderResponse {
    /** Canceled order. */
    order?: Order;
}
interface UpdateOrderStatusRequest {
    /**
     * Order ID.
     * @format GUID
     */
    orderId: string;
    /** New order status. */
    status: OrderStatusWithLiterals;
}
interface UpdateOrderStatusResponse {
    /** Updated order. */
    order?: Order;
}
interface AggregateOrdersRequest {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation: Record<string, any> | null;
    /**
     * Optional custom separator string that can be used to override default separator value '|'
     * for hierarchical responses of multifaceted aggregation requests like:
     * '{"aggregation": {"example_request_key": {"$count" : ["deliveryMethod", "shippingRegion"]}}}'
     * with example response for default '|' separator like:
     * '{"aggregates" :{"example_request_key": {"(Mail|Region 1)": 5, "(Pickup|Region 2)": 10}}}'
     * @minLength 1
     * @maxLength 100
     */
    hierarchySeparatorOverride?: string | null;
}
interface AggregateOrdersResponse {
    aggregates?: Record<string, any> | null;
}
interface BulkUpdateOrderTagsRequest {
    /**
     * IDs of orders to update tags for.
     * @minSize 1
     * @maxSize 100
     * @format GUID
     */
    orderIds: string[];
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}
interface BulkUpdateOrderTagsResponse {
    /**
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkUpdateOrderTagsResult[];
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateOrderTagsResult {
    itemMetadata?: ItemMetadata;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function preparePaymentCollection(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, PreparePaymentCollectionRequest$1, PreparePaymentCollectionRequest, PreparePaymentCollectionResponse$1, PreparePaymentCollectionResponse>;
declare function getPaymentCollectabilityStatus(): __PublicMethodMetaInfo<'GET', {
    ecomOrderId: string;
}, GetPaymentCollectabilityStatusRequest$1, GetPaymentCollectabilityStatusRequest, GetPaymentCollectabilityStatusResponse$1, GetPaymentCollectabilityStatusResponse>;
declare function recordManuallyCollectedPayment(): __PublicMethodMetaInfo<'POST', {
    orderId: string;
}, RecordManuallyCollectedPaymentRequest$1, RecordManuallyCollectedPaymentRequest, RecordManuallyCollectedPaymentResponse$1, RecordManuallyCollectedPaymentResponse>;
declare function paymentCollectionMarkOrderAsPaid(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, MarkOrderAsPaidRequest$1, MarkOrderAsPaidRequest, MarkOrderAsPaidResponse$1, MarkOrderAsPaidResponse>;
declare function paymentCollectionBulkMarkOrdersAsPaid(): __PublicMethodMetaInfo<'POST', {}, BulkMarkOrdersAsPaidRequest$1, BulkMarkOrdersAsPaidRequest, BulkMarkOrdersAsPaidResponse$1, BulkMarkOrdersAsPaidResponse>;
declare function getRefundabilityStatus(): __PublicMethodMetaInfo<'GET', {
    ecomOrderId: string;
}, GetRefundabilityStatusRequest$1, GetRefundabilityStatusRequest, GetRefundabilityStatusResponse$1, GetRefundabilityStatusResponse>;
declare function paymentCollectionCreatePaymentGatewayOrder(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, CreatePaymentGatewayOrderRequest$1, CreatePaymentGatewayOrderRequest, CreatePaymentGatewayOrderResponse$1, CreatePaymentGatewayOrderResponse>;
declare function chargeMemberships(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, ChargeMembershipsRequest$1, ChargeMembershipsRequest, ChargeMembershipsResponse$1, ChargeMembershipsResponse>;
declare function triggerRefund(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, TriggerRefundRequest$1, TriggerRefundRequest, TriggerRefundResponse$1, TriggerRefundResponse>;
declare function voidAuthorizedPayments(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, VoidAuthorizedPaymentsRequest$1, VoidAuthorizedPaymentsRequest, VoidAuthorizedPaymentsResponse$1, VoidAuthorizedPaymentsResponse>;
declare function captureAuthorizedPayments(): __PublicMethodMetaInfo<'POST', {
    ecomOrderId: string;
}, CaptureAuthorizedPaymentsRequest$1, CaptureAuthorizedPaymentsRequest, CaptureAuthorizedPaymentsResponse$1, CaptureAuthorizedPaymentsResponse>;
declare function getOrder(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetOrderRequest$1, GetOrderRequest, GetOrderResponse$1, GetOrderResponse>;
declare function searchOrders(): __PublicMethodMetaInfo<'POST', {}, SearchOrdersRequest$1, SearchOrdersRequest, SearchOrdersResponse$1, SearchOrdersResponse>;
declare function createOrder(): __PublicMethodMetaInfo<'POST', {}, CreateOrderRequest$1, CreateOrderRequest, CreateOrderResponse$1, CreateOrderResponse>;
declare function updateOrder(): __PublicMethodMetaInfo<'PATCH', {
    orderId: string;
}, UpdateOrderRequest$1, UpdateOrderRequest, UpdateOrderResponse$1, UpdateOrderResponse>;
declare function bulkUpdateOrders(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateOrdersRequest$1, BulkUpdateOrdersRequest, BulkUpdateOrdersResponse$1, BulkUpdateOrdersResponse>;
declare function commitDeltas(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, CommitDeltasRequest$1, CommitDeltasRequest, CommitDeltasResponse$1, CommitDeltasResponse>;
declare function updateOrderLineItem(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
    lineItemId: string;
}, UpdateOrderLineItemRequest$1, UpdateOrderLineItemRequest, UpdateOrderLineItemResponse$1, UpdateOrderLineItemResponse>;
declare function addActivity(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddActivityRequest$1, AddActivityRequest, AddActivityResponse$1, AddActivityResponse>;
declare function updateActivity(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
    activityId: string;
}, UpdateActivityRequest$1, UpdateActivityRequest, UpdateActivityResponse$1, UpdateActivityResponse>;
declare function deleteActivity(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
    activityId: string;
}, DeleteActivityRequest$1, DeleteActivityRequest, DeleteActivityResponse$1, DeleteActivityResponse>;
declare function cancelOrder(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, CancelOrderRequest$1, CancelOrderRequest, CancelOrderResponse$1, CancelOrderResponse>;
declare function updateOrderStatus(): __PublicMethodMetaInfo<'POST', {
    orderId: string;
}, UpdateOrderStatusRequest$1, UpdateOrderStatusRequest, UpdateOrderStatusResponse$1, UpdateOrderStatusResponse>;
declare function aggregateOrders(): __PublicMethodMetaInfo<'POST', {}, AggregateOrdersRequest$1, AggregateOrdersRequest, AggregateOrdersResponse$1, AggregateOrdersResponse>;
declare function bulkUpdateOrderTags(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateOrderTagsRequest$1, BulkUpdateOrderTagsRequest, BulkUpdateOrderTagsResponse$1, BulkUpdateOrderTagsResponse>;

export { type __PublicMethodMetaInfo, addActivity, aggregateOrders, bulkUpdateOrderTags, bulkUpdateOrders, cancelOrder, captureAuthorizedPayments, chargeMemberships, commitDeltas, createOrder, deleteActivity, getOrder, getPaymentCollectabilityStatus, getRefundabilityStatus, paymentCollectionBulkMarkOrdersAsPaid, paymentCollectionCreatePaymentGatewayOrder, paymentCollectionMarkOrderAsPaid, preparePaymentCollection, recordManuallyCollectedPayment, searchOrders, triggerRefund, updateActivity, updateOrder, updateOrderLineItem, updateOrderStatus, voidAuthorizedPayments };
