import { SearchSpec, Search, NonNullablePaths } from '@wix/sdk-types';

interface Order {
    /**
     * Order ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created.
     * @readonly
     * @immutable
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @minSize 1
     * @maxSize 300
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order payment status. */
    paymentStatus?: PaymentStatusWithLiterals;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatusWithLiterals;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     * @format CURRENCY
     */
    currency?: string | null;
    /** Currency conversion details. For use with multi-currency sites. */
    currencyConversionDetails?: CurrencyConversionDetails;
    /**
     * Whether tax is included in line item prices.
     * @immutable
     */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     * @immutable
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /**
     * [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer.
     * @maxLength 1000
     */
    buyerNote?: string | null;
    /** Order status. */
    status?: OrderStatusWithLiterals;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /**
     * Applied discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscount[];
    /**
     * Order activities.
     * @readonly
     * @maxSize 1000
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSourceWithLiterals;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /**
     * Checkout ID.
     * @format GUID
     */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /**
     * Additional fees applied to the order.
     * @maxSize 100
     */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Order tags.
     *
     * [Tags](https://dev.wix.com/docs/rest/business-management/tags/introduction) are labels attached to entities, allowing for flexible categorization and data management.
     */
    tags?: Tags;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     * @immutable
     */
    purchasedDate?: Date | null;
    /** Order Location */
    businessLocation?: Location;
    /**
     * Pay after free trial price summary. Price summary that should be paid for subscriptions after free trial period.
     * @readonly
     */
    payAfterFreeTrial?: PriceSummary;
}
interface OrderLineItem {
    /**
     * Line item ID.
     * @immutable
     */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Line item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     *
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).
     * @format GUID
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @max 100000
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @max 100000
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
    /** Address used for tax calculation. */
    taxableAddress?: TaxableAddress;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 10
     */
    modifierGroups?: ModifierGroup[];
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
interface Price {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /**
     * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 100
     */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 200
     */
    translated?: string | null;
}
interface PlainTextValue {
    /**
     * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 600
     */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 600
     */
    translated?: string | null;
}
interface Color {
    /**
     * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 500
     */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 500
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
declare enum DescriptionLineType {
    /** Unrecognized type. */
    UNRECOGNISED = "UNRECOGNISED",
    /** Plain text type. */
    PLAIN_TEXT = "PLAIN_TEXT",
    /** Color type. */
    COLOR = "COLOR"
}
/** @enumType */
type DescriptionLineTypeWithLiterals = DescriptionLineType | 'UNRECOGNISED' | 'PLAIN_TEXT' | 'COLOR';
interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** @enumType */
type ItemTypeItemTypeWithLiterals = ItemTypeItemType | 'UNRECOGNISED' | 'PHYSICAL' | 'DIGITAL' | 'GIFT_CARD' | 'SERVICE';
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE",
    /**
     * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.
     * @documentationMaturity preview
     */
    MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"
}
/** @enumType */
type PaymentOptionTypeWithLiterals = PaymentOptionType | 'FULL_PAYMENT_ONLINE' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP' | 'DEPOSIT_ONLINE' | 'MEMBERSHIP_OFFLINE' | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';
interface ItemTaxFullDetails {
    /** Taxable amount of this line item. */
    taxableAmount?: Price;
    /**
     * Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`.
     * @decimalValue options { gte:0, maxScale:6 }
     */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price;
    /**
     * Tax rate %, as a decimal point.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /**
     * Tax information for a line item.
     * @maxSize 7
     */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /**
     * Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec".
     * @maxLength 200
     */
    jurisdiction?: string | null;
    /**
     * Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price;
    /**
     * The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc.
     * @maxLength 200
     */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     * @maxLength 200
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionTypeWithLiterals;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
/** @enumType */
type JurisdictionTypeWithLiterals = JurisdictionType | 'UNDEFINED' | 'COUNTRY' | 'STATE' | 'COUNTY' | 'CITY' | 'SPECIAL';
interface DigitalFile {
    /**
     * ID of the secure file in media.
     * @minLength 1
     * @maxLength 100
     */
    fileId?: string;
    /**
     * Link will exist after the digital links have been generated on the order.
     * @format WEB_URL
     * @minLength 1
     * @maxLength 2000
     */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo {
    /**
     * Subscription ID.
     * @format GUID
     */
    _id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /**
     * Subscription option title. For example, `"Monthly coffee Subscription"`.
     * @maxLength 150
     * @deprecated Subscription option title. For example, `"Monthly coffee Subscription"`.
     * @replacedBy title
     * @targetRemovalDate 2025-10-01
     */
    subscriptionOptionTitle?: string;
    /**
     * Subscription option description. For example, `"1kg of selected coffee, once a month"`.
     * @maxLength 500
     * @deprecated Subscription option description. For example, `"1kg of selected coffee, once a month"`.
     * @replacedBy description
     * @targetRemovalDate 2025-10-01
     */
    subscriptionOptionDescription?: string | null;
    /**
     * Subscription detailed information.
     * @immutable
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Description of the charges that will be applied for subscription.
     * @maxLength 1000
     */
    chargesDescription?: string | null;
}
interface SubscriptionTitle {
    /**
     * Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 150
     */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 150
     */
    translated?: string | null;
}
interface SubscriptionDescription {
    /**
     * Subscription option description.
     * @maxLength 500
     */
    original?: string;
    /**
     * Translated subscription option description.
     * @maxLength 500
     */
    translated?: string | null;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * Interval of recurring payment.
     * @min 1
     * @max 3650
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.
     * @min 1
     */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription. */
    enableCustomerCancellation?: boolean;
    /** Period until first cycle starts. If None => no free trial */
    freeTrialPeriod?: FreeTrialPeriod;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface FreeTrialPeriod {
    /** Frequency of period. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * interval of period
     * @min 1
     * @max 3650
     */
    interval?: number;
}
interface BillingAdjustment {
    /** The type of adjustment. */
    type?: AdjustmentTypeWithLiterals;
    /** Summary of the prorated adjustment amount. */
    priceSummary?: BillingAdjustmentPriceSummary;
}
declare enum AdjustmentType {
    UNKNOWN_ADJUSTMENT_TYPE = "UNKNOWN_ADJUSTMENT_TYPE",
    /** Adjustment increases the total amount due to changes like covering extra billing days. Typically results in an additional fee. */
    EXTRA_CHARGE = "EXTRA_CHARGE",
    /** Adjustment reduces the total amount due to changes like covering fewer billing days. Typically results in a credit or discount. */
    CREDIT = "CREDIT"
}
/** @enumType */
type AdjustmentTypeWithLiterals = AdjustmentType | 'UNKNOWN_ADJUSTMENT_TYPE' | 'EXTRA_CHARGE' | 'CREDIT';
interface BillingAdjustmentPriceSummary {
    /** Subtotal of adjustment, before tax. */
    subtotal?: Price;
    /** Tax on adjustment. */
    tax?: Price;
    /** Total price after tax. */
    total?: Price;
}
interface PriceDescription {
    /**
     * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 100
     */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 100
     */
    translated?: string | null;
}
interface LocationAndQuantity {
    /**
     * Location id in the associated owner app.
     * @format GUID
     */
    _id?: string;
    /**
     * Location owner app, if not provided then the site business info locations will be used.
     * @format GUID
     * @deprecated Location owner app, if not provided then the site business info locations will be used.
     * @targetRemovalDate 2025-03-01
     */
    appId?: string | null;
    /**
     * Quantity for specific location.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Location name.
     * @maxLength 500
     * @readonly
     */
    name?: string | null;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type TaxableAddressTypeWithLiterals = TaxableAddressType | 'UNKNOWN_TAXABLE_ADDRESS' | 'BUSINESS' | 'BILLING' | 'SHIPPING';
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 10
     */
    modifiers?: ItemModifier[];
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /** The price of the modifier. */
    price?: Price;
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is not a member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://www.wix.com/velo/reference/wix-crm-backend/contacts/introduction).
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * @format EMAIL
     */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is not a member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
}
declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /**
     * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     */
    NOT_PAID = "NOT_PAID",
    /** All required payments associated with this order are paid. */
    PAID = "PAID",
    /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /**
     * All payments pending.
     *
     * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.
     * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).
     */
    PENDING = "PENDING",
    /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_PAID = "PARTIALLY_PAID",
    /**
     * Payment received, but not yet confirmed by the payment provider.
     *
     * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.
     * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.
     * @documentationMaturity preview
     */
    PENDING_MERCHANT = "PENDING_MERCHANT",
    /**
     * One or more payments canceled.
     * @documentationMaturity preview
     */
    CANCELED = "CANCELED",
    /**
     * One or more payments declined.
     * @documentationMaturity preview
     */
    DECLINED = "DECLINED"
}
/** @enumType */
type PaymentStatusWithLiterals = PaymentStatus | 'UNSPECIFIED' | 'NOT_PAID' | 'PAID' | 'PARTIALLY_REFUNDED' | 'FULLY_REFUNDED' | 'PENDING' | 'PARTIALLY_PAID' | 'PENDING_MERCHANT' | 'CANCELED' | 'DECLINED';
declare enum FulfillmentStatus {
    /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or the order was manually marked as fulfilled.
     * Orders without shipping info are fulfilled automatically.
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all, of the order items are fulfilled. */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
/** @enumType */
type FulfillmentStatusWithLiterals = FulfillmentStatus | 'NOT_FULFILLED' | 'FULFILLED' | 'PARTIALLY_FULFILLED';
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface CurrencyConversionDetails {
    /**
     * Currency used for the pricing of this order, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * This currency is used to calculate the pricing before conversion to the buyer's payment currency.
     * @readonly
     * @immutable
     * @format CURRENCY
     */
    originalCurrency?: string | null;
    /**
     * The rate used for converting the original currency to the currency used for payment.
     * @readonly
     * @immutable
     * @decimalValue options { gt:0, lte:1000000000000000 }
     */
    conversionRate?: string | null;
}
interface PriceSummary {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price;
    /** Total tax on this order. */
    tax?: Price;
    /** Total calculated discount value. */
    discount?: Price;
    /** Order’s total price after discounts and tax. */
    total?: Price;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine1?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatTypeWithLiterals;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
/** @enumType */
type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';
interface V1ShippingInformation {
    /**
     * App Def Id of external provider which was a source of shipping info
     * @minLength 1
     * @maxLength 100
     */
    carrierId?: string | null;
    /**
     * Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"`.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     * @maxLength 250
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics;
    /** Shipping costs. */
    cost?: ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion;
}
interface DeliveryLogistics extends DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
    /**
     * Expected delivery time in free text. For example, `"3-5 business days"`.
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`.
     * @maxLength 1000
     */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
/** @oneof */
interface DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupMethodWithLiterals;
}
/** Physical address */
interface PickupAddress {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 1000
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 1000
     */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 1000
     */
    addressLine1?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 1000
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
/** @enumType */
type PickupMethodWithLiterals = PickupMethod | 'UNKNOWN_METHOD' | 'STORE_PICKUP' | 'PICKUP_POINT';
interface DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price;
}
interface ShippingRegion {
    /**
     * Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`.
     * @maxLength 100
     */
    name?: string | null;
}
declare enum OrderStatus {
    /** Order created, but not yet approved or canceled. */
    INITIALIZED = "INITIALIZED",
    /**
     * Order approved.
     *
     * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).
     * Offline orders (cash payment) are automatically approved.
     */
    APPROVED = "APPROVED",
    /** Order canceled by the user. */
    CANCELED = "CANCELED",
    /**
     * Order pending.
     * @documentationMaturity preview
     */
    PENDING = "PENDING",
    /**
     * Order rejected.
     *
     * This happens when pending payments fail.
     * @documentationMaturity preview
     */
    REJECTED = "REJECTED"
}
/** @enumType */
type OrderStatusWithLiterals = OrderStatus | 'INITIALIZED' | 'APPROVED' | 'CANCELED' | 'PENDING' | 'REJECTED';
interface TaxSummary {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price;
    /**
     * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
     * @maxSize 50
     */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /**
     * The name of the tax against which this tax amount was calculated.
     * @maxLength 200
     */
    taxName?: string;
    /**
     * The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws.
     * @maxLength 200
     */
    taxType?: string;
    /**
     * The name of the jurisdiction in which this tax detail applies.
     * @maxLength 200
     */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionTypeWithLiterals;
    /**
     * The rate at which this tax detail was calculated.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountTypeWithLiterals;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @format GUID
     * @maxSize 1
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /**
     * Discount id.
     * @format GUID
     * @immutable
     */
    _id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'GLOBAL' | 'SPECIFIC_ITEMS' | 'SHIPPING';
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price;
}
interface MerchantDiscount extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReasonWithLiterals;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
    /** Discount amount. */
    amount?: Price;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReasonWithLiterals;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS",
    BILLING_ADJUSTMENT = "BILLING_ADJUSTMENT"
}
/** @enumType */
type DiscountReasonWithLiterals = DiscountReason | 'UNSPECIFIED' | 'EXCHANGED_ITEMS' | 'BILLING_ADJUSTMENT';
interface DiscountRule {
    /**
     * Discount rule ID
     * @format GUID
     */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: Price;
}
interface DiscountRuleName {
    /**
     * Original discount rule name (in site's default language).
     * @minLength 1
     * @maxLength 256
     */
    original?: string;
    /**
     * Translated discount rule name according to buyer language. Defaults to `original` when not provided.
     * @minLength 1
     * @maxLength 500
     */
    translated?: string | null;
}
interface LineItemDiscount {
    /**
     * ID of line item the discount applies to.
     * @format GUID
     */
    _id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price;
}
interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Activity author's email.
     * @format EMAIL
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityTypeWithLiterals;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
interface CustomActivity {
    /**
     * ID of the app that created the custom activity.
     * @format GUID
     */
    appId?: string;
    /**
     * Custom activity type. For example, `"Ticket number set"`.
     * @maxLength 100
     */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /**
     * Merchant comment message.
     * @minLength 1
     * @maxLength 5000
     */
    message?: string;
}
interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price;
    /**
     * Reason for refund.
     * @maxLength 200
     */
    reason?: string;
}
interface OrderCreatedFromExchange {
    /**
     * ID of the original order for which the exchange happened.
     * @format GUID
     */
    originalOrderId?: string;
}
interface NewExchangeOrderCreated {
    /**
     * ID of the new order created as a result of an exchange of items.
     * @format GUID
     */
    exchangeOrderId?: string;
    /**
     * IDs of the items that were exchanged.
     * @minSize 1
     * @maxSize 300
     */
    lineItems?: LineItemExchangeData[];
}
interface LineItemExchangeData {
    /**
     * ID of the exchanged line item.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity being exchanged.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface DraftOrderChangesApplied {
    /** Draft order id. */
    draftOrderId?: string;
    /**
     * Reason for edit, given by user (optional).
     * @maxLength 200
     */
    reason?: string | null;
    /** Changes applied to order. */
    changes?: OrderChange[];
}
interface OrderChange extends OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
/** @oneof */
interface OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
interface LineItemChanges {
    /**
     * Line item ID.
     * @format GUID
     */
    _id?: string;
    /** Item name. */
    name?: ProductName;
    /** Item quantity change. */
    quantity?: LineItemQuantityChange;
    /** Item price change. */
    price?: LineItemPriceChange;
}
interface LineItemQuantityChange {
    /**
     * Item quantity before update.
     * @max 1000000
     */
    originalQuantity?: number;
    /**
     * Item quantity after update.
     * @max 1000000
     */
    newQuantity?: number;
    /**
     * Difference between original and new quantity. Absolute value.
     * @min 1
     * @max 1000000
     */
    diff?: number;
    /** Type of quantity change: increase or decrease. */
    deltaType?: LineItemQuantityChangeTypeWithLiterals;
}
declare enum LineItemQuantityChangeType {
    /** Quantity increased. */
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    /** Quantity decreased. */
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
/** @enumType */
type LineItemQuantityChangeTypeWithLiterals = LineItemQuantityChangeType | 'QUANTITY_INCREASED' | 'QUANTITY_DECREASED';
interface LineItemPriceChange {
    /** Item price before update. */
    originalPrice?: Price;
    /** Item price after update. */
    newPrice?: Price;
}
interface ManagedLineItem {
    /**
     * Line item ID.
     * @format GUID
     */
    _id?: string;
    /** Item name. */
    name?: ProductName;
    /**
     * Added or removed item quantity.
     * @min 1
     * @max 1000000
     */
    quantity?: number;
}
interface ManagedDiscount {
    /**
     * Discount id.
     * @format GUID
     */
    _id?: string;
    /** Discount name: coupon name / discount rule name / merchant discount description. */
    name?: TranslatedValue;
    /** Line items discount applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Discount amount. */
    totalAmount?: Price;
}
interface TranslatedValue {
    /**
     * Value in site default language.
     * @minLength 1
     */
    original?: string;
    /**
     * Translated value.
     * @minLength 1
     */
    translated?: string | null;
}
interface LineItemAmount {
    /**
     * Order line item id
     * @format GUID
     */
    _id?: string;
    /** Item name. */
    name?: ProductName;
    /** Amount associated with this item. (Discount amount for item / additional fee amount for item) */
    amount?: Price;
}
interface ManagedAdditionalFee {
    /**
     * Additional fee id.
     * @format GUID
     */
    _id?: string;
    /** Additional fee name. */
    name?: TranslatedValue;
    /** Line items additional fee applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Additional fee amount. */
    totalAmount?: Price;
}
interface TotalPriceChange {
    /** Order’s total price after discounts and tax. Before update */
    originalTotal?: Price;
    /** Order’s total price after discounts and tax. After update */
    newTotal?: Price;
}
interface ShippingInformationChange {
    /** Order’s Shipping Information. Before update */
    originalShippingInfo?: ShippingInformation;
    /** Order’s Shipping Information. After update */
    newShippingInfo?: ShippingInformation;
}
interface ShippingInformation {
    /** Order’s shipping price. */
    total?: Price;
    /**
     * Order’s shipping title.
     * @maxLength 250
     */
    shippingTitle?: string;
}
/** Payment method is saved for order */
interface SavedPaymentMethod {
    /**
     * Payment method name
     * @minLength 1
     * @maxLength 100
     */
    name?: string;
    /**
     * Payment method description
     * @minLength 1
     * @maxLength 100
     */
    description?: string | null;
}
interface AuthorizedPaymentCreated {
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface AuthorizedPaymentCaptured {
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface AuthorizedPaymentVoided {
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface RefundInitiated {
    /**
     * Refund ID.
     * @format GUID
     */
    refundId?: string;
    /** Refund amount. */
    amount?: Price;
    /**
     * Details about the payments being refunded.
     * @minSize 1
     * @maxSize 50
     */
    payments?: RefundedPayment[];
    /**
     * Reason for refund.
     * @maxLength 200
     */
    reason?: string | null;
}
interface RefundedPayment extends RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
    /**
     * Payment ID.
     * @format GUID
     */
    paymentId?: string;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/** @oneof */
interface RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
}
interface RegularPaymentRefund {
    /** Refund amount */
    amount?: Price;
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface GiftCardPaymentRefund {
    /**
     * Gift card payment ID
     * @minLength 1
     * @maxLength 100
     */
    giftCardPaymentId?: string | null;
    /** Refund amount */
    amount?: Price;
}
interface MembershipPaymentRefund {
    /**
     * Membership ID
     * @minLength 1
     * @maxLength 100
     */
    membershipId?: string | null;
}
interface PaymentRefunded {
    /**
     * Refund ID.
     * @format GUID
     */
    refundId?: string;
    /** Details about the refunded payment. */
    payment?: RefundedPayment;
}
interface PaymentRefundFailed {
    /**
     * Refund ID.
     * @format GUID
     */
    refundId?: string;
    /** Details about the failed payment refund. */
    payment?: RefundedPayment;
}
interface RefundedAsStoreCredit {
    /** Refund amount */
    amount?: Price;
    /**
     * Reason for refund
     * @maxLength 100
     */
    reason?: string | null;
}
interface PaymentPending extends PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
}
/** @oneof */
interface PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface RegularPayment extends RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
    /** Payment amount */
    amount?: Price;
}
/** @oneof */
interface RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
}
interface CreditCardDetails {
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface PaymentCanceled extends PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
}
/** @oneof */
interface PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface PaymentDeclined extends PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
}
/** @oneof */
interface PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
interface ReceiptCreated extends ReceiptCreatedReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
}
/** @oneof */
interface ReceiptCreatedReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
}
interface WixReceipt {
    /**
     * Receipt ID
     * @format GUID
     */
    receiptId?: string;
    /**
     * Display number of receipt
     * @minLength 1
     * @maxLength 40
     */
    displayNumber?: string | null;
}
interface ExternalReceipt {
    /**
     * Receipt ID
     * @maxLength 100
     */
    receiptId?: string | null;
    /**
     * Display number of receipt
     * @minLength 1
     * @maxLength 40
     */
    displayNumber?: string | null;
}
interface ReceiptSent extends ReceiptSentReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
    /**
     * Payment ID of payment associated with this activity
     * @format GUID
     */
    paymentId?: string;
}
/** @oneof */
interface ReceiptSentReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
}
interface ChargebackCreated {
    /**
     * ID of the payment that received a chargeback.
     * @format GUID
     */
    paymentId?: string;
    /**
     * Chargeback ID.
     * @format GUID
     */
    chargebackId?: string;
    /** Chargeback amount. */
    amount?: Price;
    /** Payment details. */
    paymentDetails?: RegularPayment;
}
interface ChargebackReversed {
    /**
     * ID of the payment involved with the chargeback.
     * @format GUID
     */
    paymentId?: string;
    /**
     * Chargeback ID.
     * @format GUID
     */
    chargebackId?: string;
    /** Chargeback amount. */
    amount?: Price;
    /** Chargeback reversal amount. */
    reversalAmount?: Price;
    /** Payment details. */
    paymentDetails?: RegularPayment;
}
declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD",
    /** @documentationMaturity preview */
    PAYMENT_PENDING = "PAYMENT_PENDING",
    /** @documentationMaturity preview */
    PAYMENT_CANCELED = "PAYMENT_CANCELED",
    /** @documentationMaturity preview */
    PAYMENT_DECLINED = "PAYMENT_DECLINED",
    /** @documentationMaturity preview */
    ORDER_PENDING = "ORDER_PENDING",
    /** @documentationMaturity preview */
    ORDER_REJECTED = "ORDER_REJECTED"
}
/** @enumType */
type ActivityTypeWithLiterals = ActivityType | 'ORDER_REFUNDED' | 'ORDER_PLACED' | 'ORDER_PAID' | 'ORDER_FULFILLED' | 'ORDER_NOT_FULFILLED' | 'ORDER_CANCELED' | 'DOWNLOAD_LINK_SENT' | 'TRACKING_NUMBER_ADDED' | 'TRACKING_NUMBER_EDITED' | 'TRACKING_LINK_ADDED' | 'SHIPPING_CONFIRMATION_EMAIL_SENT' | 'INVOICE_ADDED' | 'INVOICE_REMOVED' | 'INVOICE_SENT' | 'FULFILLER_EMAIL_SENT' | 'SHIPPING_ADDRESS_EDITED' | 'EMAIL_EDITED' | 'PICKUP_READY_EMAIL_SENT' | 'CUSTOM_ACTIVITY' | 'MERCHANT_COMMENT' | 'ORDER_CREATED_FROM_EXCHANGE' | 'NEW_EXCHANGE_ORDER_CREATED' | 'ORDER_PARTIALLY_PAID' | 'DRAFT_ORDER_CHANGES_APPLIED' | 'SAVED_PAYMENT_METHOD' | 'PAYMENT_PENDING' | 'PAYMENT_CANCELED' | 'PAYMENT_DECLINED' | 'ORDER_PENDING' | 'ORDER_REJECTED';
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
/** @enumType */
type AttributionSourceWithLiterals = AttributionSource | 'UNSPECIFIED' | 'FACEBOOK_ADS';
interface CreatedBy extends CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * Member ID - when the order was created by a **logged in** site visitor.
     * @format GUID
     */
    memberId?: string;
    /**
     * Visitor ID - when the order was created by a site visitor that was **not** logged in.
     * @format GUID
     */
    visitorId?: string;
    /**
     * App ID - when the order was created by an external application.
     * @format GUID
     */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * Member ID - when the order was created by a **logged in** site visitor.
     * @format GUID
     */
    memberId?: string;
    /**
     * Visitor ID - when the order was created by a site visitor that was **not** logged in.
     * @format GUID
     */
    visitorId?: string;
    /**
     * App ID - when the order was created by an external application.
     * @format GUID
     */
    appId?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelTypeWithLiterals;
    /**
     * Reference to an order ID from an external system.
     * @maxLength 100
     */
    externalOrderId?: string | null;
    /**
     * URL to the order in the external system.
     * @maxLength 300
     */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM",
    /** PayPal Agentic Checkout sales channel. */
    PAYPAL_AGENTIC_CHECKOUT = "PAYPAL_AGENTIC_CHECKOUT"
}
/** @enumType */
type ChannelTypeWithLiterals = ChannelType | 'UNSPECIFIED' | 'WEB' | 'POS' | 'EBAY' | 'AMAZON' | 'OTHER_PLATFORM' | 'WIX_APP_STORE' | 'WIX_INVOICES' | 'BACKOFFICE_MERCHANT' | 'WISH' | 'CLASS_PASS' | 'GLOBAL_E' | 'FACEBOOK' | 'ETSY' | 'TIKTOK' | 'FAIRE_COM' | 'PAYPAL_AGENTIC_CHECKOUT';
interface CustomField {
    /** Custom field value. */
    value?: any;
    /**
     * Custom field title.
     * @minLength 1
     * @maxLength 500
     */
    title?: string;
    /**
     * Translated custom field title.
     * @minLength 1
     * @maxLength 500
     */
    translatedTitle?: string | null;
}
interface BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
    /**
     * Sum of all pending transactions.
     * @readonly
     */
    pending?: Price;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @decimalValue options { }
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface AdditionalFee {
    /**
     * Additional fee's unique code for future processing.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Name of additional fee.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /** Additional fee's price. */
    price?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * SPI implementer's `appId`.
     * @format GUID
     */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price;
    /**
     * Additional fee's id.
     * @format GUID
     * @immutable
     */
    _id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
}
interface FulfillmentStatusesAggregate {
    /** Unique string values based on Fulfillment entities statuses */
    statuses?: string[] | null;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
interface TagList {
    /**
     * List of tag IDs
     * @maxSize 100
     * @maxLength 5
     */
    tagIds?: string[];
}
interface Location {
    /**
     * Location ID.
     * Learn more about the [Wix Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     * @format GUID
     */
    _id?: string;
    /**
     * Location name.
     * @minLength 1
     * @maxLength 500
     * @readonly
     */
    name?: string;
}
/** Triggered when the order status changes to approved */
interface OrderApproved {
    /** The order that was updated */
    order?: Order;
}
interface OrdersExperiments {
    epCommitTax?: boolean;
    moveMerchantEmailToEp?: boolean;
    moveBuyerOrderConfirmationEmailToEp?: boolean;
    producedByEpBridge?: boolean;
    enableRewrittenSideEffects?: boolean;
}
interface OrderRejectedEventOrderRejected {
    /** The order that was rejected */
    order?: Order;
}
/** Triggered when order items are marked as restocked */
interface OrderItemsRestocked {
    /** The order which items were restocked */
    order?: Order;
    /** Restocked items and quantities */
    restockItems?: V1RestockItem[];
}
interface V1RestockItem {
    /**
     * ID of the line item being restocked.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity being restocked.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface SendBuyerConfirmationEmailRequest {
    /** @format GUID */
    orderId?: string;
}
interface SendBuyerConfirmationEmailResponse {
}
interface SendBuyerPaymentsReceivedEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
}
interface SendBuyerPaymentsReceivedEmailResponse {
}
interface SendBuyerPickupConfirmationEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
}
interface SendBuyerPickupConfirmationEmailResponse {
}
interface BulkSendBuyerPickupConfirmationEmailsRequest {
    /**
     * IDs of orders to send pickup emails for.
     * @minSize 1
     * @maxSize 300
     */
    orderIds?: string[];
}
interface BulkSendBuyerPickupConfirmationEmailsResponse {
}
interface SendBuyerShippingConfirmationEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
}
interface SendBuyerShippingConfirmationEmailResponse {
}
interface BulkSendBuyerShippingConfirmationEmailsRequest {
    /**
     * IDs of orders to send pickup emails for.
     * @minSize 1
     * @maxSize 300
     */
    orderIds?: string[];
}
interface BulkSendBuyerShippingConfirmationEmailsResponse {
}
interface SendMerchantOrderReceivedNotificationRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
}
interface SendMerchantOrderReceivedNotificationResponse {
}
interface SendCancelRefundEmailRequest {
    /**
     * The ID of order that is canceled/refunded
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /**
     * Personal note added to the email (optional)
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
    /** Refund amount */
    refundAmount?: Price;
    /**
     * Refund ID. (Optional)
     * @format GUID
     */
    refundId?: string | null;
}
interface SendCancelRefundEmailResponse {
}
interface SendRefundEmailRequest {
    /**
     * The ID of order that is refunded
     * @format GUID
     */
    orderId?: string;
    /**
     * Refund ID
     * @format GUID
     */
    refundId?: string;
    /**
     * Personal note added to the email (optional)
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
}
interface SendRefundEmailResponse {
}
interface SendMerchantOrderReceivedPushRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
}
interface SendMerchantOrderReceivedPushResponse {
}
interface PreviewEmailByTypeRequest {
    emailType?: PreviewEmailTypeWithLiterals;
}
declare enum PreviewEmailType {
    ORDER_PLACED = "ORDER_PLACED",
    DOWNLOAD_LINKS = "DOWNLOAD_LINKS",
    ORDER_SHIPPED = "ORDER_SHIPPED",
    ORDER_READY_FOR_PICKUP = "ORDER_READY_FOR_PICKUP"
}
/** @enumType */
type PreviewEmailTypeWithLiterals = PreviewEmailType | 'ORDER_PLACED' | 'DOWNLOAD_LINKS' | 'ORDER_SHIPPED' | 'ORDER_READY_FOR_PICKUP';
interface PreviewEmailByTypeResponse {
    emailPreview?: string;
}
interface PreviewRefundEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /** Refund amount */
    refundAmount?: Price;
    /** Refund business details */
    details?: RefundDetails;
    /**
     * Personal note added to the email (optional)
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
    /**
     * Refund ID. (Optional)
     * @format GUID
     */
    refundId?: string | null;
}
/** Business model of a refund request */
interface RefundDetails {
    /**
     * Order line item IDs and quantities that were refunded.
     * @maxSize 300
     */
    items?: RefundItem[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /**
     * Reason for the refund, provided by customer (optional).
     * @maxLength 200
     */
    reason?: string | null;
    /**
     * Line items that were refunded.
     * @maxSize 300
     */
    lineItems?: LineItemRefund[];
    /**
     * Additional fees that were refunded.
     * @maxSize 100
     */
    additionalFees?: AdditionalFeeRefund[];
    /** Shipping amount that was refunded. */
    shipping?: ShippingRefund;
}
interface RefundItem {
    /**
     * Line item ID the refunded line item.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity refunded.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface LineItemRefund {
    /**
     * Line item ID.
     * @format GUID
     * @immutable
     */
    lineItemId?: string;
    /**
     * Refund quantity.
     * @min 1
     * @max 100000
     * @immutable
     */
    quantity?: number;
}
interface AdditionalFeeRefund {
    /**
     * Additional fee ID.
     * @format GUID
     * @immutable
     */
    additionalFeeId?: string;
    /**
     * Refund amount.
     * @immutable
     */
    amount?: Price;
}
interface ShippingRefund {
    /**
     * Refund amount.
     * @immutable
     */
    amount?: Price;
}
interface PreviewRefundEmailResponse {
    emailPreview?: string;
}
interface PreviewCancelEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /**
     * Personal note added to the email (optional)
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
}
interface PreviewCancelEmailResponse {
    emailPreview?: string;
}
interface PreviewCancelRefundEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /**
     * Personal note added to the email (optional)
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
    /** Refund amount */
    refundAmount?: Price;
    /**
     * Refund ID. (Optional)
     * @format GUID
     */
    refundId?: string | null;
}
interface PreviewCancelRefundEmailResponse {
    emailPreview?: string;
}
interface PreviewBuyerPaymentsReceivedEmailRequest {
}
interface PreviewBuyerPaymentsReceivedEmailResponse {
    emailPreview?: string;
}
interface PreviewBuyerConfirmationEmailRequest {
}
interface PreviewBuyerConfirmationEmailResponse {
    emailPreview?: string;
}
interface PreviewBuyerPickupConfirmationEmailRequest {
}
interface PreviewBuyerPickupConfirmationEmailResponse {
    emailPreview?: string;
}
interface PreviewShippingConfirmationEmailRequest {
}
interface PreviewShippingConfirmationEmailResponse {
    emailPreview?: string;
}
interface PreviewResendDownloadLinksEmailRequest {
}
interface PreviewResendDownloadLinksEmailResponse {
    emailPreview?: string;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface PreparePaymentCollectionRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /** Amount to collect */
    amount: Price;
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
interface RedirectUrls {
    /**
     * URL to redirect buyer in case of approved (successful) transaction
     * @format WEB_URL
     */
    successUrl?: string | null;
    /**
     * URL to redirect buyer in case of buyer canceled the transaction
     * @format WEB_URL
     */
    cancelUrl?: string | null;
    /**
     * URL to redirect buyer in case of failed/rejected transaction
     * @format WEB_URL
     */
    errorUrl?: string | null;
    /**
     * URL to redirect buyer in case of pending transaction (that might take some time to process)
     * @format WEB_URL
     */
    pendingUrl?: string | null;
}
interface DelayedCaptureSettings {
    /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */
    scheduledAction?: ScheduledActionWithLiterals;
    /** Delay duration before execution. Optional - if not set, providers default period will be used */
    delayDuration?: Duration;
}
declare enum ScheduledAction {
    UNSPECIFIED = "UNSPECIFIED",
    /** Whether payment will be auto-voided when duration passes */
    VOID = "VOID",
    /** Whether payment will be auto-captured when duration passes */
    CAPTURE = "CAPTURE"
}
/** @enumType */
type ScheduledActionWithLiterals = ScheduledAction | 'UNSPECIFIED' | 'VOID' | 'CAPTURE';
interface Duration {
    /**
     * Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc
     * @min 1
     */
    count?: number;
    /** Duration unit: MINUTES, HOURS and DAYS */
    unit?: DurationUnitWithLiterals;
}
declare enum DurationUnit {
    UNKNOWN_DURATION_UNIT = "UNKNOWN_DURATION_UNIT",
    MINUTES = "MINUTES",
    HOURS = "HOURS",
    DAYS = "DAYS"
}
/** @enumType */
type DurationUnitWithLiterals = DurationUnit | 'UNKNOWN_DURATION_UNIT' | 'MINUTES' | 'HOURS' | 'DAYS';
interface PreparePaymentCollectionResponse {
    /** Payment gateway order id which is associated with given payment */
    paymentGatewayOrderId?: string;
}
interface GetPaymentCollectabilityStatusRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
}
interface GetPaymentCollectabilityStatusResponse {
    /** Payment collectability status */
    status?: PaymentCollectabilityStatusWithLiterals;
    /** Collectable order amount */
    amount?: Price;
}
declare enum PaymentCollectabilityStatus {
    UNKNOWN = "UNKNOWN",
    COLLECTABLE = "COLLECTABLE",
    NONCOLLECTABLE_ORDER_IS_CANCELLED = "NONCOLLECTABLE_ORDER_IS_CANCELLED",
    NONCOLLECTABLE_ORDER_IS_PAID = "NONCOLLECTABLE_ORDER_IS_PAID",
    NONCOLLECTABLE_MISSING_PAYMENT_METHOD = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD",
    NONCOLLECTABLE_ORDER_IS_PENDING = "NONCOLLECTABLE_ORDER_IS_PENDING",
    NONCOLLECTABLE_ORDER_IS_REJECTED = "NONCOLLECTABLE_ORDER_IS_REJECTED",
    NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS = "NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS",
    NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS = "NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS"
}
/** @enumType */
type PaymentCollectabilityStatusWithLiterals = PaymentCollectabilityStatus | 'UNKNOWN' | 'COLLECTABLE' | 'NONCOLLECTABLE_ORDER_IS_CANCELLED' | 'NONCOLLECTABLE_ORDER_IS_PAID' | 'NONCOLLECTABLE_MISSING_PAYMENT_METHOD' | 'NONCOLLECTABLE_ORDER_IS_PENDING' | 'NONCOLLECTABLE_ORDER_IS_REJECTED' | 'NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS' | 'NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS';
interface RecordManuallyCollectedPaymentRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    orderId: string;
    /** Amount to be recorded as approved manual payment for given order */
    amount: Price;
}
interface RecordManuallyCollectedPaymentResponse {
}
interface MarkOrderAsPaidRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
}
interface MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order;
}
interface BulkMarkOrdersAsPaidRequest {
    /**
     * IDs of orders to mark as paid.
     * @minSize 1
     * @maxSize 100
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderIds: string[];
}
interface BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkOrderResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /**
     * Updated order.
     *
     * Returned when `returnFullEntity = true`.
     */
    item?: Order;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetRefundabilityStatusRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
}
interface GetRefundabilityStatusResponse {
    /**
     * Refundability details.
     * @maxSize 300
     */
    refundabilities?: Refundability[];
    /**
     * Whether the order supports refunding per item.
     * @deprecated
     */
    refundablePerItem?: boolean;
}
interface Refundability extends RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReasonWithLiterals;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;
    /** Payment ID. */
    paymentId?: string;
    /** Payment refundability status. */
    refundabilityStatus?: RefundableStatusWithLiterals;
    /** Link to payment provider dashboard. */
    providerLink?: string | null;
}
/** @oneof */
interface RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReasonWithLiterals;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;
}
declare enum RefundableStatus {
    NOT_REFUNDABLE = "NOT_REFUNDABLE",
    MANUAL = "MANUAL",
    REFUNDABLE = "REFUNDABLE"
}
/** @enumType */
type RefundableStatusWithLiterals = RefundableStatus | 'NOT_REFUNDABLE' | 'MANUAL' | 'REFUNDABLE';
declare enum NonRefundableReason {
    NONE = "NONE",
    ALREADY_REFUNDED = "ALREADY_REFUNDED",
    PROVIDER_IS_DOWN = "PROVIDER_IS_DOWN",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NOT_PAID = "NOT_PAID",
    ACCESS_DENIED = "ACCESS_DENIED",
    ZERO_PRICE = "ZERO_PRICE",
    DISABLED_BY_PROVIDER = "DISABLED_BY_PROVIDER",
    PENDING_REFUND = "PENDING_REFUND",
    FORBIDDEN = "FORBIDDEN",
    TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND",
    ORDER_IS_PENDING = "ORDER_IS_PENDING",
    ORDER_IS_REJECTED = "ORDER_IS_REJECTED"
}
/** @enumType */
type NonRefundableReasonWithLiterals = NonRefundableReason | 'NONE' | 'ALREADY_REFUNDED' | 'PROVIDER_IS_DOWN' | 'INTERNAL_ERROR' | 'NOT_PAID' | 'ACCESS_DENIED' | 'ZERO_PRICE' | 'DISABLED_BY_PROVIDER' | 'PENDING_REFUND' | 'FORBIDDEN' | 'TRANSACTION_NOT_FOUND' | 'ORDER_IS_PENDING' | 'ORDER_IS_REJECTED';
declare enum ManuallyRefundableReason {
    EXPIRED = "EXPIRED",
    NOT_SUPPORTED = "NOT_SUPPORTED",
    OFFLINE = "OFFLINE",
    REQUIRES_CARD_READER = "REQUIRES_CARD_READER"
}
/** @enumType */
type ManuallyRefundableReasonWithLiterals = ManuallyRefundableReason | 'EXPIRED' | 'NOT_SUPPORTED' | 'OFFLINE' | 'REQUIRES_CARD_READER';
interface CreatePaymentGatewayOrderRequest {
    /**
     * Ecom order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /** Information about the user who initiated the payment. */
    chargedBy?: ChargedBy;
}
interface ChargedBy {
    /**
     * ID - id of the user who initiated the payment
     * @format GUID
     */
    _id?: string;
    /**
     * Full name - name of the user who initiated the payment
     * @minLength 1
     * @maxLength 200
     */
    fullName?: string | null;
}
interface CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
interface ChargeMembershipsRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member
     * but a user which is using the membership on behalf of the a member
     * @format GUID
     */
    memberId: string;
    /**
     * List of items to be paid by memberships
     * @minSize 1
     * @maxSize 300
     */
    membershipCharges?: MembershipChargeItem[];
}
interface MembershipChargeItem {
    /**
     * The id of used membership
     * @minLength 1
     * @maxLength 100
     */
    membershipId?: string;
    /**
     * ID of the application providing this payment option
     * @format GUID
     */
    appId?: string;
    /** The name of used membership */
    membershipName?: MembershipName;
    /** Additional data about this membership */
    membershipAdditionalData?: Record<string, any> | null;
    /** Catalog and item reference info. */
    catalogReference?: CatalogReference;
    /** Properties of the service. When relevant, contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * Usually would be the same as catalogReference.catalogItemId
     * For cases when these are not the same, this field would return the actual id of the item in the catalog
     * For example, for Wix bookings, catalogReference.catalogItemId is the booking id, and this value is being set to be the service id
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * line item id of Checkout/Order line item
     * @minLength 1
     * @maxLength 100
     */
    lineItemId?: string;
}
interface MembershipName {
    /**
     * Membership name.
     * @maxLength 100
     */
    original?: string;
    /**
     * Translated membership name. Defaults to `original` when not provided.
     * @maxLength 100
     */
    translated?: string | null;
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /**
     * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.
     * @min 1
     * @max 10000
     */
    numberOfParticipants?: number | null;
}
interface ChargeMembershipsResponse {
}
interface TriggerRefundRequest {
    /**
     * The order this refund related to
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * Refund operations information
     * @minSize 1
     * @maxSize 1
     */
    payments: PaymentRefund[];
    /** Business model of a refund */
    details?: RefundDetails;
    /** Side effect details related to refund */
    sideEffects?: RefundSideEffects;
}
interface PaymentRefund {
    /**
     * Specific payment within the order to refund
     * @format GUID
     */
    paymentId?: string;
    /** Refund amount. Not relevant for membership and gift card refunds. */
    amount?: Price;
    /**
     * Whether refund is made externally and manually (on the payment provider's side)
     * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.
     * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.
     */
    externalRefund?: boolean;
}
interface RefundSideEffects {
    /** Inventory restock details as part of this refund. */
    restockInfo?: RestockInfo;
    /** Whether to send a refund confirmation email to the customer. */
    sendOrderRefundedEmail?: boolean;
    /**
     * Custom message added to the refund confirmation email.
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
}
interface RestockInfo {
    /** Restock type. */
    type?: RestockTypeWithLiterals;
    /**
     * Restocked line items and quantities. Only relevant for `{"type": "SOME_ITEMS"}`.
     * @maxSize 300
     */
    items?: RestockItem[];
}
declare enum RestockType {
    NO_ITEMS = "NO_ITEMS",
    ALL_ITEMS = "ALL_ITEMS",
    SOME_ITEMS = "SOME_ITEMS"
}
/** @enumType */
type RestockTypeWithLiterals = RestockType | 'NO_ITEMS' | 'ALL_ITEMS' | 'SOME_ITEMS';
interface RestockItem {
    /**
     * ID of the line item being restocked.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity being restocked.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface TriggerRefundResponse {
    /** All order's transactions after the refunds were added */
    orderTransactions?: OrderTransactions;
    /** Created refund ID */
    refundId?: string | null;
    /** Payment ID's that the refund execution had failed for */
    failedPaymentIds?: ItemMetadata[];
}
interface OrderTransactions {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string;
    /**
     * Record of payments made to the merchant.
     * @maxSize 100
     */
    payments?: Payment[];
    /**
     * Record of refunds made to the buyer.
     * @maxSize 300
     */
    refunds?: Refund[];
}
interface Payment extends PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
    /**
     * Payment ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    _createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
interface PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
}
/** @oneof */
interface PaymentReceiptInfoOneOf {
}
interface RegularPaymentDetails extends RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
    /**
     * Wix Payments order ID.
     * @maxLength 100
     */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID.
     * This field is only returned when the value of `offline_payment` is `false`.
     * @maxLength 100
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     * @maxLength 100
     */
    paymentMethod?: string | null;
    /**
     * Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments.
     * @maxLength 100
     */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatusWithLiterals;
    /**
     * Whether there is a payment agreement that allows for future charges.
     * @immutable
     */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails;
    /**
     * Record of chargebacks made by the buyer.
     * @maxSize 6
     */
    chargebacks?: Chargeback[];
}
/** @oneof */
interface RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
}
declare enum TransactionStatus {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
/** @enumType */
type TransactionStatusWithLiterals = TransactionStatus | 'UNDEFINED' | 'APPROVED' | 'PENDING' | 'PENDING_MERCHANT' | 'CANCELED' | 'DECLINED' | 'REFUNDED' | 'PARTIALLY_REFUNDED' | 'AUTHORIZED' | 'VOIDED';
interface CreditCardPaymentMethodDetails {
    /**
     * The last 4 digits of the card number.
     * @maxLength 4
     */
    lastFourDigits?: string | null;
    /**
     * Card issuer's brand.
     * @maxLength 100
     */
    brand?: string | null;
}
interface AuthorizationDetails {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     * @maxSize 1
     */
    captures?: AuthorizationCapture[];
    /** Void associated with payment */
    void?: AuthorizationVoid;
    /** Scheduled action for this transaction */
    scheduledAction?: V1ScheduledAction;
}
interface AuthorizationCapture {
    /**
     * Capture ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatusWithLiterals;
    /**
     * Amount of this capture
     * @immutable
     */
    amount?: Price;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    _createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
}
declare enum AuthorizationCaptureStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Capture operation still in progress. */
    PENDING = "PENDING",
    /** Capture operation succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Capture operation failed. */
    FAILED = "FAILED"
}
/** @enumType */
type AuthorizationCaptureStatusWithLiterals = AuthorizationCaptureStatus | 'UNKNOWN_STATUS' | 'PENDING' | 'SUCCEEDED' | 'FAILED';
interface AuthorizationActionFailureDetails {
    /** @maxLength 100 */
    failureCode?: string;
}
interface AuthorizationVoid {
    /** Status of this void action */
    status?: AuthorizationVoidStatusWithLiterals;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
    /** Reason of void action */
    reason?: ReasonWithLiterals;
}
declare enum AuthorizationVoidStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Void operation still in progress. */
    PENDING = "PENDING",
    /** Void operation succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Void operation failed. */
    FAILED = "FAILED"
}
/** @enumType */
type AuthorizationVoidStatusWithLiterals = AuthorizationVoidStatus | 'UNKNOWN_STATUS' | 'PENDING' | 'SUCCEEDED' | 'FAILED';
/** Reason the authorization was voided. */
declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    /** Authorization was voided by user. */
    MANUAL = "MANUAL",
    /** Authorization passed execution date. */
    SCHEDULED = "SCHEDULED"
}
/** @enumType */
type ReasonWithLiterals = Reason | 'UNKNOWN_REASON' | 'MANUAL' | 'SCHEDULED';
interface V1ScheduledAction {
    /** Type of the action. */
    actionType?: ActionTypeWithLiterals;
    /** The date and time of the action. */
    executionDate?: Date | null;
}
declare enum ActionType {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
/** @enumType */
type ActionTypeWithLiterals = ActionType | 'UNKNOWN_ACTION_TYPE' | 'VOID' | 'CAPTURE';
interface Chargeback {
    /**
     * Chargeback ID.
     * @format GUID
     * @readonly
     * @immutable
     */
    _id?: string;
    /**
     * Date and time the chargeback was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     * @immutable
     */
    _createdDate?: Date | null;
    /**
     * Date and time the chargeback was updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Amount.
     * @readonly
     * @immutable
     */
    amount?: Price;
    /**
     * Reversal amount. Present only when status is REVERSED.
     * @readonly
     */
    reversalAmount?: Price;
    /**
     * Status.
     *
     * Default: `"APPROVED"`.
     */
    status?: ChargebackStatusWithLiterals;
    /**
     * External chargeback ID.
     * @format GUID
     * @readonly
     * @immutable
     */
    externalId?: string | null;
}
declare enum ChargebackStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /** Chargeback was approved. */
    APPROVED = "APPROVED",
    /** Chargeback was reversed. */
    REVERSED = "REVERSED"
}
/** @enumType */
type ChargebackStatusWithLiterals = ChargebackStatus | 'UNSPECIFIED' | 'APPROVED' | 'REVERSED';
interface GiftCardPaymentDetails {
    /**
     * Gift card payment ID.
     * @minLength 1
     * @maxLength 100
     */
    giftCardPaymentId?: string;
    /**
     * ID of the app that created the gift card.
     * @format GUID
     */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
interface MembershipPaymentDetails {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    membershipId?: string;
    /**
     * ID of the line item this membership applies to.
     * @minLength 1
     * @maxLength 100
     */
    lineItemId?: string;
    /** Payment status. */
    status?: MembershipPaymentStatusWithLiterals;
    /** Membership name. */
    name?: MembershipName;
    /**
     * The transaction ID in the membership system. Can be used to void the transaction.
     * @minLength 1
     * @maxLength 100
     */
    externalTransactionId?: string | null;
    /**
     * Whether the membership is voided.
     * @readonly
     */
    voided?: boolean;
    /**
     * ID of the application providing this payment option.
     * @format GUID
     */
    providerAppId?: string;
}
declare enum MembershipPaymentStatus {
    /** Payment was charged. */
    CHARGED = "CHARGED",
    /** The attempt to charge the payment failed, for example, due to lack of credits. */
    CHARGE_FAILED = "CHARGE_FAILED"
}
/** @enumType */
type MembershipPaymentStatusWithLiterals = MembershipPaymentStatus | 'CHARGED' | 'CHARGE_FAILED';
interface WixReceiptInfo {
    /**
     * Receipt ID
     * @format GUID
     */
    receiptId?: string;
    /**
     * Display number of receipt
     * @minLength 1
     * @maxLength 40
     */
    displayNumber?: string | null;
}
interface ExternalReceiptInfo {
    /**
     * External receipt ID
     * @maxLength 100
     */
    receiptId?: string | null;
    /**
     * ID of the app providing the receipt
     * @format GUID
     */
    appId?: string | null;
    /**
     * Display number of receipt
     * @minLength 1
     * @maxLength 40
     */
    displayNumber?: string | null;
}
interface Refund {
    /**
     * Refund ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * List of transactions.
     * @maxSize 50
     */
    transactions?: RefundTransaction[];
    /** Refund business details. */
    details?: RefundDetails;
    /**
     * Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     * @immutable
     */
    _createdDate?: Date | null;
    /**
     * Aggregated refund summary.
     * @readonly
     */
    summary?: AggregatedRefundSummary;
    /**
     * ID of the app that initiated this refund.
     * @format GUID
     * @readonly
     * @immutable
     */
    requestingServiceAppId?: string | null;
}
interface RefundTransaction {
    /**
     * ID of the payment associated with this refund.
     * @format GUID
     * @immutable
     */
    paymentId?: string;
    /**
     * Refund amount.
     * @immutable
     */
    amount?: Price;
    /** Refund status. */
    refundStatus?: RefundStatusWithLiterals;
    /** Optional details of current refund status. */
    refundStatusInfo?: RefundStatusInfo;
    /**
     * Payment gateway's refund ID.
     * This field is only returned when the value of `external_refund` is `false`.
     * @format GUID
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /**
     * Whether refund was made externally and manually on the payment provider's side.
     * @immutable
     */
    externalRefund?: boolean;
}
/** Refund transaction status. */
declare enum RefundStatus {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    PENDING = "PENDING",
    /** Refund transaction succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Refund transaction failed. */
    FAILED = "FAILED",
    /** Refund request acknowledged, and will be executed soon. */
    SCHEDULED = "SCHEDULED",
    /** Refund was initiated on payment provider side. */
    STARTED = "STARTED"
}
/** @enumType */
type RefundStatusWithLiterals = RefundStatus | 'PENDING' | 'SUCCEEDED' | 'FAILED' | 'SCHEDULED' | 'STARTED';
interface RefundStatusInfo {
    /**
     * Reason code for the refund's current status.
     *
     * Learn more about [reason codes](https://dev.wix.com/docs/rest/business-management/payments/service-plugins/payment-service-provider-service-plugin/reason-codes).
     * @minLength 1
     * @maxLength 10
     */
    paymentGatewayReasonCode?: string | null;
    /**
     * Free text explanation of current refund status.
     * @minLength 1
     * @maxLength 1000
     */
    description?: string | null;
}
interface AggregatedRefundSummary {
    /** Total amount requested for refund. */
    requestedRefund?: Price;
    /** Pending refund amount - the portion of `requestedRefund` that is still pending. */
    pendingRefund?: Price;
    /** Refunded amount - the portion of `requestedRefund` that refunded successfully. */
    refunded?: Price;
    /** Failed refund amount - the portion of `requestedRefund` that failed. */
    failedRefundAmount?: Price;
    /** Whether at least one refund transaction is still in `"PENDING"` status. */
    pending?: boolean;
    /** Breakdown of refunded items. Available only after refund is complete. */
    breakdown?: RefundItemsBreakdown;
}
interface RefundItemsBreakdown {
    /**
     * Refunded line items and the amount refunded for each.
     * @maxSize 300
     */
    lineItems?: LineItemRefundSummary[];
}
interface LineItemRefundSummary {
    /**
     * ID of the refunded line item.
     * @format GUID
     */
    lineItemId?: string;
    /** Total refunded amount for the line item. */
    totalRefundedAmount?: Price;
}
interface CalculateRefundRequest {
    /**
     * Order ID
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId?: string;
    /**
     * Refunded line items and quantity
     * @maxSize 300
     */
    refundItems?: CalculateRefundItemRequest[];
    /** Should include shipping in refund calculation */
    refundShipping?: boolean;
}
interface CalculateRefundItemRequest {
    /**
     * ID of the line item being refunded
     * @format GUID
     */
    _id?: string;
    /**
     * How much of that line item is being refunded
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface CalculateRefundResponse {
    /** Total refundable amount */
    total?: Price;
    /** Tax cost of the order */
    tax?: Price;
    /** Discount given for this order */
    discount?: Price;
    /** Total cost of the order (without tax) */
    subtotal?: Price;
    /** Total shipping cost for order */
    shipping?: Price;
    /** Previous refund given on that order */
    previouslyRefundedAmount?: Price;
    /**
     * The refundable items of that order
     * @maxSize 300
     */
    items?: CalculateRefundItemResponse[];
}
interface CalculateRefundItemResponse {
    /**
     * Line item ID
     * @format GUID
     */
    _id?: string;
    /** Refundable amount for requested quantity of items (price of requested quantity of items without tax and discount) */
    price?: Price;
}
interface VoidAuthorizedPaymentsRequest {
    /**
     * Wix eCommerce order ID
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * Payment IDs
     * @minSize 1
     * @maxSize 100
     * @format GUID
     */
    paymentIds: string[];
}
interface VoidAuthorizedPaymentsResponse {
    /** All order's transactions after the void was triggered */
    orderTransactions?: OrderTransactions;
}
interface CaptureAuthorizedPaymentsRequest {
    /**
     * Wix eCommerce order ID
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId: string;
    /**
     * Capture payments information
     * @minSize 1
     * @maxSize 100
     */
    payments: PaymentCapture[];
}
interface PaymentCapture {
    /**
     * Payment ID
     * @format GUID
     */
    paymentId?: string | null;
    /**
     * Capture amount.
     * If not provided - full authorized amount will be captured.
     */
    amount?: Price;
}
interface CaptureAuthorizedPaymentsResponse {
    /** All order's transactions after the capture was triggered */
    orderTransactions?: OrderTransactions;
}
interface ChargeSavedPaymentMethodRequest {
    /**
     * Ecom Order ID.
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId?: string;
    /** Amount to be charged */
    amount?: Price;
}
interface ChargeSavedPaymentMethodResponse {
    /** Payment gateway's order ID (e.g Wix Payments) */
    paymentGatewayOrderId?: string;
}
interface UpdateInternalDocumentsEvent extends UpdateInternalDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: InternalDocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update internal documents matching filter */
    updateByFilter?: InternalDocumentUpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: InternalUpdateExistingOperation;
    /** insert/update documents with versioning */
    versionedUpdate?: VersionedDocumentUpdateOperation;
    /** delete by document ids with versioning */
    versionedDeleteByIds?: VersionedDeleteByIdsOperation;
    /**
     * type of the documents
     * @minLength 2
     */
    documentType?: string;
    /**
     * language of the documents (mandatory)
     * @minLength 2
     */
    language?: string | null;
    /**
     * one or more search documents
     * @deprecated
     */
    addDocuments?: InternalDocument[];
    /**
     * one or more ids of indexed documents to be removed. Removal will happen before addition (if both provided)
     * @deprecated
     */
    removeDocumentIds?: string[];
    /** id to pass to processing notification */
    correlationId?: string | null;
    /** when event was created / issued */
    issuedAt?: Date | null;
}
/** @oneof */
interface UpdateInternalDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: InternalDocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update internal documents matching filter */
    updateByFilter?: InternalDocumentUpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: InternalUpdateExistingOperation;
    /** insert/update documents with versioning */
    versionedUpdate?: VersionedDocumentUpdateOperation;
    /** delete by document ids with versioning */
    versionedDeleteByIds?: VersionedDeleteByIdsOperation;
}
interface InternalDocument {
    /** document with mandatory fields (id) and with fields specific to the type of the document */
    document?: Record<string, any> | null;
}
interface InternalDocumentUpdateOperation {
    /** documents to index or update */
    documents?: InternalDocument[];
}
interface DeleteByIdsOperation {
    /** ids of the documents to delete */
    documentIds?: string[];
    /**
     * tenant id for custom tenancy strategy
     * @minLength 2
     * @maxLength 300
     */
    tenantId?: string | null;
}
interface DeleteByFilterOperation {
    /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
    filter?: Record<string, any> | null;
    /**
     * tenant id for custom tenancy strategy
     * @minLength 2
     * @maxLength 300
     */
    tenantId?: string | null;
}
interface InternalDocumentUpdateByFilterOperation {
    /** documents matching this filter will be updated */
    filter?: Record<string, any> | null;
    /** partial document to apply */
    document?: InternalDocument;
    /**
     * tenant id for custom tenancy strategy
     * @minLength 2
     * @maxLength 300
     */
    tenantId?: string | null;
}
interface InternalUpdateExistingOperation {
    /** documents to update */
    documents?: InternalDocument[];
}
interface VersionedDocumentUpdateOperation {
    /** documents to create or overwrite */
    documents?: InternalDocument[];
    /** versioning mode to use instead of default */
    versioningMode?: VersioningModeWithLiterals;
}
declare enum VersioningMode {
    /** use default versioning mode agreed with search team */
    DEFAULT = "DEFAULT",
    /** execute only if version is greater than existing */
    GREATER_THAN = "GREATER_THAN",
    /** execute only if version is greater or equal to existing */
    GREATER_OR_EQUAL = "GREATER_OR_EQUAL"
}
/** @enumType */
type VersioningModeWithLiterals = VersioningMode | 'DEFAULT' | 'GREATER_THAN' | 'GREATER_OR_EQUAL';
interface VersionedDeleteByIdsOperation {
    /** ids with version of the documents to delete */
    documentIds?: VersionedDocumentId[];
    /**
     * tenant id for custom tenancy strategy
     * @minLength 2
     * @maxLength 300
     */
    tenantId?: string | null;
}
interface VersionedDocumentId {
    /** document id */
    documentId?: string;
    /** document version */
    version?: string;
    /** versioning mode to use instead of default */
    versioningMode?: VersioningModeWithLiterals;
}
interface TriggerReindexRequest {
    /** @format GUID */
    metasiteId?: string;
    /**
     * @minLength 1
     * @maxLength 100
     * @maxSize 100
     */
    orderIds?: string[];
}
interface TriggerReindexResponse {
}
interface BatchOfTriggerReindexOrderRequest {
    /** @maxSize 25 */
    requests?: TriggerReindexOrderRequest[];
}
interface TriggerReindexOrderRequest {
    /** @format GUID */
    metasiteId?: string;
    /**
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
}
interface DiffmatokyPayload {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation;
    tags?: string[];
}
interface ErrorInformation {
    stackTrace?: string;
}
interface ContinueSideEffectsFlowInLegacyData {
    storeId?: string;
    orderId?: string;
    ordersExperiments?: OrdersExperiments;
}
interface SnapshotMessage {
    _id?: string;
    opType?: number;
}
interface IndexingMessage {
    _id?: string;
    opType?: number;
    requiredVersions?: string[];
}
interface GetOrderRequest {
    /**
     * ID of the order to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
}
interface GetOrderResponse {
    /** The requested order. */
    order?: Order;
}
interface InternalQueryOrdersRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface InternalQueryOrdersResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface QueryOrderRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface QueryOrderResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface SearchOrdersRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 4
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface SearchOrdersResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CreateOrderRequest {
    /** Order info. */
    order: Order;
    /** Determine order lifecycle */
    settings?: OrderCreationSettings;
}
interface OrderCreationSettings {
    /**
     * Condition for the order to be approved.
     * Default: `DEFAULT`
     */
    orderApprovalStrategy?: OrderApprovalStrategyWithLiterals;
    /** Notification settings to be applied on order creation */
    notifications?: OrderCreateNotifications;
}
declare enum OrderApprovalStrategy {
    /** Order is automatically approved when `order.priceSummary.total = 0`, **or** after receiving payment. */
    DEFAULT = "DEFAULT",
    /** Order is automatically approved **only** after receiving payment. */
    PAYMENT_RECEIVED = "PAYMENT_RECEIVED",
    /** Order is automatically approved when payment method is saved for it. */
    PAYMENT_METHOD_SAVED = "PAYMENT_METHOD_SAVED"
}
/** @enumType */
type OrderApprovalStrategyWithLiterals = OrderApprovalStrategy | 'DEFAULT' | 'PAYMENT_RECEIVED' | 'PAYMENT_METHOD_SAVED';
interface OrderCreateNotifications {
    /**
     * Whether to send notification to the buyer.
     *
     * Default: `true`
     */
    sendNotificationToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
}
interface CreateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
interface UpdateOrderRequest {
    /** Order to be updated. */
    order: Order;
}
interface UpdateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
interface BulkUpdateOrdersRequest {
    /**
     * Orders to update.
     * @minSize 1
     * @maxSize 100
     */
    orders: MaskedOrder[];
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface MaskedOrder {
    /** Order to be updated. */
    order?: Order;
}
interface BulkUpdateOrdersResponse {
    /**
     * Bulk action results.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface CommitDeltasRequest {
    /** Order id to be updated */
    _id: string;
    /**
     * Draft order Id representing this change.
     * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get
     * @format GUID
     */
    draftOrderId?: string;
    /** Draft order changes to be applied */
    changes: DraftOrderDiffs;
    /** Side-effects to happen after order is updated */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Reason for edit, given by user (optional).
     * @maxLength 200
     */
    reason?: string | null;
}
interface DraftOrderDiffs extends DraftOrderDiffsShippingUpdateInfoOneOf, DraftOrderDiffsBuyerUpdateInfoOneOf, DraftOrderDiffsBillingUpdateInfoOneOf, DraftOrderDiffsRecipientUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /**
     * Added/updated/removed order line items.
     * @maxSize 300
     */
    lineItems?: V1LineItemDelta[];
    /**
     * Added/updated/removed discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscountDelta[];
    /**
     * Added/updated/removed additional fee.
     * @maxSize 100
     */
    additionalFees?: AdditionalFeeDelta[];
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /**
     * Updated order price summary. overwrites existing price summary.
     * balance will be updated automatically.
     */
    priceSummary?: PriceSummary;
}
/** @oneof */
interface DraftOrderDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
/** @oneof */
interface DraftOrderDiffsBuyerUpdateInfoOneOf {
}
/** @oneof */
interface DraftOrderDiffsBillingUpdateInfoOneOf {
}
/** @oneof */
interface DraftOrderDiffsRecipientUpdateInfoOneOf {
}
interface V1LineItemDelta extends V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
    lineItem?: OrderLineItemChangedDetails;
}
/** @oneof */
interface V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
}
interface OrderLineItemChangedDetails {
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /**
     * Line item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Total discount for this line item's entire quantity. */
    totalDiscount?: Price;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     *
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).
     * @format GUID
     */
    fulfillerId?: string | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /** Line item price before line item discounts for display purposes. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price;
    /** Total price after all discounts and tax. */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     */
    paymentOption?: DeltaPaymentOptionTypeWithLiterals;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price;
    /** Total price after all discounts excluding tax. */
    totalPriceBeforeTax?: Price;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 10
     */
    modifierGroups?: ModifierGroup[];
}
/** Type of selected payment option for catalog item */
declare enum DeltaPaymentOptionType {
    /** Irrelevant */
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    /** The entire payment for the given item will happen after checkout. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /**
     * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.
     * Note: when this option is used, the price will be 0.
     */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
/** @enumType */
type DeltaPaymentOptionTypeWithLiterals = DeltaPaymentOptionType | 'UNKNOWN_PAYMENT_OPTION' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP_OFFLINE';
interface ItemChangedDetails {
    /**
     * The quantity before the change.
     * @min 1
     * @max 1000000
     */
    quantityBeforeChange?: number | null;
    /** The price before the change. */
    priceBeforeChange?: Price;
    /** The price description before the change */
    priceDescriptionBeforeChange?: PriceDescription;
}
interface AppliedDiscountDelta extends AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount;
    discountRemoved?: boolean;
    /**
     * Discount id.
     * @format GUID
     */
    discountId?: string;
}
/** @oneof */
interface AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount;
    discountRemoved?: boolean;
}
interface AdditionalFeeDelta extends AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee;
    additionalFeeRemoved?: boolean;
    /**
     * Additional fee id.
     * @format GUID
     */
    additionalFeeId?: string;
}
/** @oneof */
interface AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee;
    additionalFeeRemoved?: boolean;
}
interface DraftOrderCommitSettings {
    /** If false, do not send notifications to buyer. Default is true. */
    sendNotificationsToBuyer?: boolean | null;
    /** If false, do not send notifications to business. Default is true. */
    sendNotificationsToBusiness?: boolean | null;
    /** If false, do not add activities to the order. Default is true. */
    addActivitiesToOrder?: boolean | null;
    /** If false, do not send mails to custom fulfillers in case of a change of shippable items fulfilled by custom fulfillers. Default is true. */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Inventory changes to be applied. Either to restock, or decrease.
     * @maxSize 300
     */
    inventoryUpdates?: InventoryUpdateDetails[];
}
interface InventoryUpdateDetails {
    /** Action to be applied - decrease or restock */
    actionType?: InventoryActionWithLiterals;
    /** Order line item id */
    lineItemId?: string;
    /** The amount to be increased or restocked */
    quantityChange?: number;
}
declare enum InventoryAction {
    /** Restock inventory */
    RESTOCK = "RESTOCK",
    /** Decrease inventory. Without failing on negative inventory. */
    DECREASE = "DECREASE"
}
/** @enumType */
type InventoryActionWithLiterals = InventoryAction | 'RESTOCK' | 'DECREASE';
interface CommitDeltasResponse {
    /** Order after deltas are applied */
    order?: Order;
}
/** Triggered when order is edited by draftOrders */
interface OrderDeltasCommitted {
    /** The order after committed changes. */
    order?: Order;
    /** Draft order Id representing this change. */
    draftOrderId?: string;
    /** Applied changes. */
    changes?: CommittedDiffs;
    /** Side-effects requested to happen as a result of this edit. */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Date and time when order deltas were committed.
     * @readonly
     */
    commitDate?: Date | null;
}
interface CommittedDiffs extends CommittedDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /**
     * Added/updated/removed order line items.
     * @maxSize 300
     */
    lineItems?: LineItemDelta[];
    /**
     * Added/updated/removed discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscountDelta[];
    /**
     * Added/updated/removed additional fee.
     * @maxSize 100
     */
    additionalFees?: AdditionalFeeDelta[];
}
/** @oneof */
interface CommittedDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
interface LineItemDelta extends LineItemDeltaDeltaOneOf {
    lineItemAdded?: boolean;
    changedDetails?: ItemChangedDetails;
    lineItemRemoved?: OrderLineItemChangedDetails;
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
}
/** @oneof */
interface LineItemDeltaDeltaOneOf {
    lineItemAdded?: boolean;
    changedDetails?: ItemChangedDetails;
    lineItemRemoved?: OrderLineItemChangedDetails;
}
interface ArchiveOrderRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface ArchiveOrderResponse {
    /** Archived order. */
    order?: Order;
}
interface BulkArchiveOrdersRequest {
    /**
     * IDs of orders to archive.
     * @minSize 1
     * @maxSize 1000
     */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkArchiveOrdersResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkArchiveOrdersByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkArchiveOrdersByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface UnArchiveOrderRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface UnArchiveOrderResponse {
    /** Unarchived order. */
    order?: Order;
}
interface BulkUnArchiveOrdersRequest {
    /**
     * IDs or orders to unarchive.
     * @minSize 1
     * @maxSize 1000
     */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkUnArchiveOrdersResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUnArchiveOrdersByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkUnArchiveOrdersByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface UpdateBuyerInfoRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    _id?: string;
    /** Buyer info. */
    buyerInfo?: BuyerInfoUpdate;
}
interface BuyerInfoUpdate {
    /**
     * Contact ID.
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Email associated with the buyer.
     * @format EMAIL
     */
    email?: string | null;
}
interface UpdateBuyerInfoResponse {
    /** Updated order. */
    order?: Order;
}
interface UpdateBuyerEmailRequest {
    /**
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    _id?: string;
    /** @format EMAIL */
    email?: string | null;
}
interface UpdateBuyerEmailResponse {
    order?: Order;
}
interface UpdateOrderShippingAddressRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /** Shipping address and contact details to be updated. */
    shippingAddress?: AddressWithContact;
}
interface UpdateOrderShippingAddressResponse {
    /** Updated order. */
    order?: Order;
}
interface UpdateBillingContactDetailsRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    _id?: string;
    /** Contact details. */
    addressContactDetails?: FullAddressContactDetails;
}
interface UpdateBillingContactDetailsResponse {
    /** Updated order. */
    order?: Order;
}
interface UpdateOrderLineItemRequest {
    /**
     * Order ID
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /** Order line item to update */
    lineItem: OrderLineItem;
}
interface UpdateOrderLineItemResponse {
    /** Updated order data */
    order?: Order;
}
interface UpdateOrderLineItemsRequest {
    /**
     * Order ID
     * @minLength 1
     * @maxLength 100
     */
    orderId?: string;
    /**
     * Order line items to update
     * @minSize 1
     * @maxSize 300
     */
    lineItems?: MaskedOrderLineItem[];
}
interface MaskedOrderLineItem {
    /** Order line item to update */
    lineItem?: OrderLineItem;
}
interface UpdateOrderLineItemsResponse {
    /** Updated order data */
    order?: Order;
}
interface AddInternalActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /** Activity info. */
    activity?: InternalActivity;
}
interface InternalActivity extends InternalActivityContentOneOf {
    /** Order refunded. */
    orderRefunded?: OrderRefunded;
    /** Order placed. */
    orderPlaced?: OrderPlaced;
    /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */
    orderPaid?: OrderPaid;
    /** Order shipping status set as fulfilled. */
    orderFulfilled?: OrderFulfilled;
    /** Order shipping status set as not fulfilled. */
    orderNotFulfilled?: OrderNotFulfilled;
    /** Order canceled. */
    orderCanceled?: OrderCanceled;
    /** Download link was sent (relevant for orders with digital line items). */
    downloadLinkSent?: DownloadLinkSent;
    /** Shipping tracking number added to order. */
    trackingNumberAdded?: TrackingNumberAdded;
    /** Shipping tracking number was edited. */
    trackingNumberEdited?: TrackingNumberEdited;
    /** Shipping tracking link added to order. */
    trackingLinkAdded?: TrackingLinkAdded;
    /** An email confirmation of order shipment was sent. */
    shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;
    /** Invoice was added to order. */
    invoiceAdded?: InvoiceAdded;
    /** Invoice sent to customer via email. */
    invoiceSent?: InvoiceSent;
    /** Email sent to fulfiller. */
    fulfillerEmailSent?: FulfillerEmailSent;
    /** Shipping address was updated. */
    shippingAddressEdited?: ShippingAddressEdited;
    /** Order email was updated. */
    emailEdited?: EmailEdited;
    /** Email notification for pickup sent. */
    pickupReadyEmailSent?: PickupReadyEmailSent;
    /** Order created as a result of items exchange. */
    orderCreatedFromExchange?: OrderCreatedFromExchange;
    /** New exchange order created. */
    newExchangeOrderCreated?: NewExchangeOrderCreated;
    /** Order partially paid. During the checkout for orders with deposit items. */
    orderPartiallyPaid?: OrderPartiallyPaid;
    /** Draft order changes applied */
    draftOrderChangesApplied?: DraftOrderChangesApplied;
    /** Payment method is saved for order */
    savedPaymentMethod?: SavedPaymentMethod;
    /** Details of a pending payment */
    paymentPending?: PaymentPending;
    /** Details of a canceled payment */
    paymentCanceled?: PaymentCanceled;
    /** Details of a declined payment */
    paymentDeclined?: PaymentDeclined;
    /** Order pending */
    orderPending?: OrderPending;
    /** Order rejected */
    orderRejected?: OrderRejected;
    /**
     * Internal activity ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Internal activity author's email.
     * @format EMAIL
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Internal activity creation date and time.
     * @readonly
     */
    _createdDate?: Date | null;
}
/** @oneof */
interface InternalActivityContentOneOf {
    /** Order refunded. */
    orderRefunded?: OrderRefunded;
    /** Order placed. */
    orderPlaced?: OrderPlaced;
    /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */
    orderPaid?: OrderPaid;
    /** Order shipping status set as fulfilled. */
    orderFulfilled?: OrderFulfilled;
    /** Order shipping status set as not fulfilled. */
    orderNotFulfilled?: OrderNotFulfilled;
    /** Order canceled. */
    orderCanceled?: OrderCanceled;
    /** Download link was sent (relevant for orders with digital line items). */
    downloadLinkSent?: DownloadLinkSent;
    /** Shipping tracking number added to order. */
    trackingNumberAdded?: TrackingNumberAdded;
    /** Shipping tracking number was edited. */
    trackingNumberEdited?: TrackingNumberEdited;
    /** Shipping tracking link added to order. */
    trackingLinkAdded?: TrackingLinkAdded;
    /** An email confirmation of order shipment was sent. */
    shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;
    /** Invoice was added to order. */
    invoiceAdded?: InvoiceAdded;
    /** Invoice sent to customer via email. */
    invoiceSent?: InvoiceSent;
    /** Email sent to fulfiller. */
    fulfillerEmailSent?: FulfillerEmailSent;
    /** Shipping address was updated. */
    shippingAddressEdited?: ShippingAddressEdited;
    /** Order email was updated. */
    emailEdited?: EmailEdited;
    /** Email notification for pickup sent. */
    pickupReadyEmailSent?: PickupReadyEmailSent;
    /** Order created as a result of items exchange. */
    orderCreatedFromExchange?: OrderCreatedFromExchange;
    /** New exchange order created. */
    newExchangeOrderCreated?: NewExchangeOrderCreated;
    /** Order partially paid. During the checkout for orders with deposit items. */
    orderPartiallyPaid?: OrderPartiallyPaid;
    /** Draft order changes applied */
    draftOrderChangesApplied?: DraftOrderChangesApplied;
    /** Payment method is saved for order */
    savedPaymentMethod?: SavedPaymentMethod;
    /** Details of a pending payment */
    paymentPending?: PaymentPending;
    /** Details of a canceled payment */
    paymentCanceled?: PaymentCanceled;
    /** Details of a declined payment */
    paymentDeclined?: PaymentDeclined;
    /** Order pending */
    orderPending?: OrderPending;
    /** Order rejected */
    orderRejected?: OrderRejected;
}
/** Order placed */
interface OrderPlaced {
}
/** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */
interface OrderPaid {
}
/** Order shipping status set as fulfilled */
interface OrderFulfilled {
}
/** Order shipping status set as not fulfilled */
interface OrderNotFulfilled {
}
/** Order canceled */
interface OrderCanceled {
}
/** A download link was sent (relevant for orders with digital line items) */
interface DownloadLinkSent {
}
/** Shipping tracking number was set */
interface TrackingNumberAdded {
}
/** Shipping tracking number was edited */
interface TrackingNumberEdited {
}
/** Shipping tracking link was set */
interface TrackingLinkAdded {
}
/** An email confirmation of order shipment was sent */
interface ShippingConfirmationEmailSent {
}
/** Invoice was set in the order */
interface InvoiceAdded {
}
/** Invoice sent to customer via email */
interface InvoiceSent {
}
/** Email was sent to fulfiller */
interface FulfillerEmailSent {
}
/** Shipping address was updated */
interface ShippingAddressEdited {
}
/** Order email was updated */
interface EmailEdited {
}
/** An email notification for pickup was sent */
interface PickupReadyEmailSent {
}
/** Order marked as partially paid when an online transaction was confirmed with partial minimal required amount of total sum */
interface OrderPartiallyPaid {
}
/** Order reject */
interface OrderPending {
}
/** Order reject */
interface OrderRejected {
}
interface AddInternalActivityResponse {
    /** Updated order. */
    order?: Order;
    /**
     * ID of the added internal activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     * @format GUID
     */
    activityId?: string;
}
interface AddActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /** Activity info. */
    activity: PublicActivity;
}
interface PublicActivity extends PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
/** @oneof */
interface PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
interface AddActivityResponse {
    /** Updated order. */
    order?: Order;
    /**
     * ID of the added activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     * @format GUID
     */
    activityId?: string;
}
interface AddActivitiesRequest {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string;
    /**
     * Activities to add.
     * @minSize 1
     * @maxSize 300
     */
    activities?: PublicActivity[];
}
interface AddActivitiesResponse {
    /** Updated order. */
    order?: Order;
    /**
     * IDs of the added activities.
     * Use this IDs to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activities) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activities) the activities.
     * @format GUID
     */
    activityIds?: string[];
}
interface UpdateActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /**
     * ID of the activity to update.
     * @format GUID
     */
    activityId: string;
    /** Activity info. */
    activity: PublicActivity;
}
interface UpdateActivityResponse {
    /** Updated order. */
    order?: Order;
}
interface DeleteActivityRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /**
     * ID of the activity to delete.
     * @format GUID
     */
    activityId: string;
}
interface DeleteActivityResponse {
    /** Updated order. */
    order?: Order;
}
interface UpdateLineItemsDescriptionLinesRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * Line items.
     * @minSize 1
     * @maxSize 300
     */
    lineItems?: LineItemUpdate[];
}
interface LineItemUpdate {
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Description lines' info.
     * If description line already exists for this name, it will be replaced.
     * @minSize 1
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
}
interface UpdateLineItemsDescriptionLinesResponse {
    /** Updated order. */
    order?: Order;
}
interface MarkOrderAsSeenByHumanRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface MarkOrderAsSeenByHumanResponse {
    /** Updated order. */
    order?: Order;
}
interface CancelOrderRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /**
     * Custom note to be added to the email (optional).
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface CancelOrderResponse {
    /** Canceled order. */
    order?: Order;
}
interface OrderCanceledEventOrderCanceled {
    /** The order that was cancelled */
    order?: Order;
    /** Should restock all items on that order */
    restockAllItems?: boolean;
    /** Should send a confirmation mail to the customer */
    sendOrderCanceledEmail?: boolean;
    /** Personal note added to the email */
    customMessage?: string | null;
}
interface UpdateOrderStatusRequest {
    /**
     * Order ID.
     * @format GUID
     */
    orderId: string;
    /** New order status. */
    status: OrderStatusWithLiterals;
}
interface UpdateOrderStatusResponse {
    /** Updated order. */
    order?: Order;
}
interface MarkAsFulfilledRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface MarkAsFulfilledResponse {
    /** Updated order. */
    order?: Order;
}
/** Triggered when the fulfillment status of an order is updated */
interface FulfillmentStatusUpdated {
    /** The order that was updated */
    order?: Order;
    /** The previous status (before the update) */
    previousFulfillmentStatus?: FulfillmentStatusWithLiterals;
    /** the new status (after the update) */
    newFulfillmentStatus?: FulfillmentStatusWithLiterals;
    /** the action that caused this update */
    action?: string;
}
interface BulkMarkAsFulfilledRequest {
    /**
     * IDs of orders to be marked as fulfilled.
     * @minSize 1
     * @maxSize 1000
     */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkMarkAsFulfilledResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkMarkAsFulfilledByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkMarkAsFulfilledByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface MarkAsUnfulfilledRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface MarkAsUnfulfilledResponse {
    /** Updated order. */
    order?: Order;
}
interface BulkMarkAsUnfulfilledRequest {
    /**
     * IDs of orders to be marked as not fulfilled.
     * @minSize 1
     * @maxSize 1000
     */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
interface BulkMarkAsUnfulfilledResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkMarkAsUnfulfilledByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
interface BulkMarkAsUnfulfilledByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkSetBusinessLocationRequest {
    /**
     * IDs of orders to update location for.
     * @minSize 1
     * @maxSize 100
     * @format GUID
     */
    orderIds?: string[];
    /** Business location. */
    businessLocation?: Location;
}
interface BulkSetBusinessLocationResponse {
    /**
     * Bulk action results.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkSetBusinessLocationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkSetBusinessLocationResult {
    itemMetadata?: ItemMetadata;
}
interface V1MarkOrderAsPaidRequest {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface V1MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order;
}
/** Triggered when the payment status of an order is updated */
interface PaymentStatusUpdated {
    /** The order that was updated */
    order?: Order;
    /** The previous status (before the update) */
    previousPaymentStatus?: PaymentStatusWithLiterals;
}
interface V1BulkMarkOrdersAsPaidRequest {
    /**
     * IDs of orders to mark as paid.
     * @minSize 1
     * @maxSize 100
     * @minLength 1
     * @maxLength 100
     */
    ids?: string[];
}
interface V1BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V1CreatePaymentGatewayOrderRequest {
    /**
     * eCom Order ID
     * @minLength 1
     * @maxLength 100
     */
    ecomOrderId?: string;
}
interface V1CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
interface GetShipmentsRequest {
    /**
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
}
interface GetShipmentsResponse {
    shipmentIds?: string[];
}
interface AggregateOrdersRequest {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation: Record<string, any> | null;
    /**
     * Optional custom separator string that can be used to override default separator value '|'
     * for hierarchical responses of multifaceted aggregation requests like:
     * '{"aggregation": {"example_request_key": {"$count" : ["deliveryMethod", "shippingRegion"]}}}'
     * with example response for default '|' separator like:
     * '{"aggregates" :{"example_request_key": {"(Mail|Region 1)": 5, "(Pickup|Region 2)": 10}}}'
     * @minLength 1
     * @maxLength 100
     */
    hierarchySeparatorOverride?: string | null;
}
interface AggregateOrdersResponse {
    aggregates?: Record<string, any> | null;
}
interface DecrementItemsQuantityRequest {
    /**
     * Order ID
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * Which items to decrement, and how much to decrement from each one
     * @minSize 1
     * @maxSize 300
     */
    decrementData?: DecrementData[];
}
interface DecrementData {
    /**
     * ID of the line item being decremented.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * Line item quantity being decremented.
     * @min 1
     * @max 100000
     */
    decrementBy?: number;
    /** Whether to restock the line item (triggers inventory update). */
    restock?: boolean;
}
interface DecrementItemsQuantityResponse {
    /** Updated order data */
    order?: Order;
}
interface BulkUpdateOrderTagsRequest {
    /**
     * IDs of orders to update tags for.
     * @minSize 1
     * @maxSize 100
     * @format GUID
     */
    orderIds: string[];
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}
interface BulkUpdateOrderTagsResponse {
    /**
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkUpdateOrderTagsResult[];
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateOrderTagsResult {
    itemMetadata?: ItemMetadata;
}
interface Task {
    key?: TaskKey;
    executeAt?: Date | null;
    payload?: string | null;
}
interface TaskKey {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
interface TaskAction extends TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
/** @oneof */
interface TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
interface Complete {
}
interface Cancel {
}
interface Reschedule {
    executeAt?: Date | null;
    payload?: string | null;
}
interface InvoiceSentEvent {
    _id?: IdAndVersion;
    /** @readonly */
    data?: InvoiceFields;
    /** @readonly */
    status?: InvoiceStatusWithLiterals;
}
interface IdAndVersion {
    /** @format GUID */
    _id?: string | null;
    version?: number | null;
}
interface InvoiceFields {
    /** The invoice number allocated the invoice by the server. The number is limited to at most 11 digits. */
    number?: string | null;
    /**
     * The invoice 3-letter currency code in [ISO-4217 alphabetic](https://www.iso.org/iso-4217-currency-codes.html) format.
     * @format CURRENCY
     */
    currencyCode?: string | null;
    /** The invoice customer. The customer must be a contact of the site, with an email. */
    customer?: Customer;
    /**
     * Invoice dates: issue date and due date are mandatory and provided when the invoice is created.
     * Last seen date is the optional date when the invoice was last seen be UoU.
     */
    dates?: InvoiceDates;
    /**
     * Line items containing the details of the products or services relevant to the invoice, with their name, prices,
     * and quantity. There must be at least one line item on the invoice.
     */
    lineItems?: LineItems;
    /**
     * Locale of the invoice, containing the language.
     * This field is not mandatory but is used for display purposes, to determine the appearance of numbers and dates
     * on the invoice.
     */
    locale?: Locale;
    /**
     * The totals on the invoice.
     * The totals.subtotal, totals.total and totals.taxed_amount are calculated by the server based on the line items.
     * Alternatively, these fields can be provided in the invoice creation request, in this case, these values are fixed.
     * The totals contain fees and a discount, that apply to the invoice.
     */
    totals?: TotalPrice;
    /** An optional discount on the invoice. */
    discount?: Discount;
    /** The taxes of the invoice. */
    taxes?: CalculatedTaxes;
    /** The payments on the invoice. The invoice has status paid if its payments cover the invoice total. */
    payments?: Payments;
    /** Invoice metadata */
    metaData?: MetaData;
    /**
     * Not used
     * @deprecated
     */
    creationAdditional_BIInformation?: string | null;
    /**
     * The balance and amount paid on the invoice.
     * This read-only field is calculated based on the invoice totals and payments.
     * @readonly
     */
    dynamicTotals?: InvoiceDynamicPriceTotals;
    /** The invoice title */
    title?: string | null;
    /** Invoice custom fields */
    customFields?: CustomFieldValue[];
    /**
     * Not used
     * @deprecated
     */
    designTemplateId?: string | null;
    /**
     * Not used
     * @deprecated
     */
    createOrder?: boolean | null;
    /** The optional deposit of the invoice */
    deposit?: Deposit;
    /** Associated checkout for this invoice */
    ecomCheckoutId?: string | null;
}
interface Customer {
    contactId?: string | null;
    name?: string | null;
    email?: Email;
    address?: QuotesAddress;
    phone?: Phone;
    company?: Company;
    firstName?: string | null;
    lastName?: string | null;
    billingAddress?: CommonAddress;
    shippingAddress?: CommonAddress;
}
interface Email {
    address?: string;
}
interface QuotesAddress {
    street?: string | null;
    city?: string | null;
    zip?: string | null;
    state?: string | null;
    country?: string | null;
    /** @readonly */
    description?: AddressDescription;
}
interface AddressDescription {
    content?: string;
    placement?: PlacementWithLiterals;
}
declare enum Placement {
    Unknown = "Unknown",
    Replace = "Replace",
    Before = "Before",
    After = "After"
}
/** @enumType */
type PlacementWithLiterals = Placement | 'Unknown' | 'Replace' | 'Before' | 'After';
interface Phone {
    number?: string;
}
interface Company {
    name?: string;
    _id?: string | null;
}
/** Physical address */
interface CommonAddress extends CommonAddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine1?: string | null;
    /**
     * Country code.
     * @format COUNTRY
     */
    country?: string | null;
    /** Subdivision shorthand. Usually, a short code (2 or 3 letters) that represents a state, region, prefecture, or province. e.g. NY */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
interface CommonAddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
interface Subdivision {
    /** Short subdivision code. */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
declare enum SubdivisionType {
    UNKNOWN_SUBDIVISION_TYPE = "UNKNOWN_SUBDIVISION_TYPE",
    /** State */
    ADMINISTRATIVE_AREA_LEVEL_1 = "ADMINISTRATIVE_AREA_LEVEL_1",
    /** County */
    ADMINISTRATIVE_AREA_LEVEL_2 = "ADMINISTRATIVE_AREA_LEVEL_2",
    /** City/town */
    ADMINISTRATIVE_AREA_LEVEL_3 = "ADMINISTRATIVE_AREA_LEVEL_3",
    /** Neighborhood/quarter */
    ADMINISTRATIVE_AREA_LEVEL_4 = "ADMINISTRATIVE_AREA_LEVEL_4",
    /** Street/block */
    ADMINISTRATIVE_AREA_LEVEL_5 = "ADMINISTRATIVE_AREA_LEVEL_5",
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    COUNTRY = "COUNTRY"
}
/** @enumType */
type SubdivisionTypeWithLiterals = SubdivisionType | 'UNKNOWN_SUBDIVISION_TYPE' | 'ADMINISTRATIVE_AREA_LEVEL_1' | 'ADMINISTRATIVE_AREA_LEVEL_2' | 'ADMINISTRATIVE_AREA_LEVEL_3' | 'ADMINISTRATIVE_AREA_LEVEL_4' | 'ADMINISTRATIVE_AREA_LEVEL_5' | 'COUNTRY';
/** Subdivision Concordance values */
interface StandardDetails {
    /**
     * subdivision iso-3166-2 code according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). e.g. US-NY, GB-SCT, NO-30
     * @maxLength 20
     */
    iso31662?: string | null;
}
interface InvoiceDates {
    /** use UTC midnight date to set the issue date according to the site time zone */
    issueDate?: Date | null;
    /** use UTC midnight date to set the due date according to the site time zone */
    dueDate?: Date | null;
    /** <a href="http://joda-time.sourceforge.net/timezones.html">Valid time zones</a> */
    timeZoneCode?: string | null;
    /**
     * ignored in request use in response to get the site time zone
     * @readonly
     */
    lastSeenDate?: Date | null;
}
interface LineItems {
    lineItems?: LineItem[];
}
interface LineItem {
    /** @format GUID */
    _id?: string;
    name?: string;
    description?: string | null;
    price?: BigDecimalWrapper;
    taxedTotal?: BigDecimalWrapper;
    quantity?: BigDecimalWrapper;
    taxes?: LineItemTax[];
    /** The source of the line item */
    source?: Source;
    /** The line-item level metadata. */
    metadata?: LineItemMetaData;
}
interface BigDecimalWrapper {
    serializedValue?: number;
}
interface LineItemTax {
    name?: string;
    rate?: BigDecimalWrapper;
    code?: string | null;
}
interface Source {
    /**
     * Source app or service ID.
     * @readonly
     */
    sourceId?: string;
    /**
     * App or service type.
     * @readonly
     */
    sourceType?: SourceTypeWithLiterals;
}
declare enum SourceType {
    UNKNOWN_SOURCE_TYPE = "UNKNOWN_SOURCE_TYPE",
    WIX_APP = "WIX_APP",
    EXTERNAL = "EXTERNAL",
    ADMIN = "ADMIN",
    OTHER = "OTHER"
}
/** @enumType */
type SourceTypeWithLiterals = SourceType | 'UNKNOWN_SOURCE_TYPE' | 'WIX_APP' | 'EXTERNAL' | 'ADMIN' | 'OTHER';
interface LineItemMetaData {
    metadata?: Record<string, string>;
}
interface Locale {
    /** ISO 639 alpha-2 or alpha-3 language code, or a language subtag */
    language?: string;
    /** An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. */
    country?: string | null;
    invariant?: string | null;
}
interface TotalPrice {
    /** the subtotal of the line items without the tax reduction */
    subtotal?: BigDecimalWrapper;
    /** the total price taking into account the itemized fees and the taxes */
    total?: BigDecimalWrapper;
    fees?: ItemizedFee[];
    discountAmount?: BigDecimalWrapper;
    taxedAmount?: BigDecimalWrapper;
}
interface ItemizedFee {
    name?: string;
    price?: BigDecimalWrapper;
}
interface Discount extends DiscountOneDiscountTypeOneOf {
    /** Discount as percentage value. */
    percentage?: BigDecimalWrapper;
}
/** @oneof */
interface DiscountOneDiscountTypeOneOf {
    /** Discount as percentage value. */
    percentage?: BigDecimalWrapper;
}
interface CalculatedTaxes {
    /** consider calculated or not - cannot enforce set */
    taxes?: CalculatedTax[];
}
interface CalculatedTax {
    name?: string;
    rate?: BigDecimalWrapper;
    /** the costs on which the taxes are applied */
    taxable?: BigDecimalWrapper;
    /** the taxes as a result of the */
    taxed?: BigDecimalWrapper;
    code?: string | null;
}
interface Payments {
    payments?: InvoicesPayment[];
}
interface InvoicesPayment {
    /** document */
    _id?: string;
    type?: string;
    amount?: BigDecimalWrapper;
    date?: Date | null;
    /**
     * The orderId of the order in cashier associated with the payment.
     * This field is populated for external payments that are charged by invoices via AddPayment endpoint.
     */
    orderId?: string | null;
    /**
     * The transactionId corresponding to the orderId of the payment which are returned by cashier.
     * This field is populated for external payments that are charged by invoices via AddPayment endpoint as well.
     */
    transactionId?: string | null;
}
interface MetaData {
    notes?: string | null;
    legalTerms?: string | null;
    sourceUrl?: string | null;
    sourceProperties?: Record<string, string>;
    source?: string | null;
    sourceRefId?: string | null;
    /** Optional indicator whether to allow editing of the invoice by other applications other than the source. Default is true. */
    allowEditByOthers?: boolean | null;
}
interface InvoiceDynamicPriceTotals {
    paidAmount?: BigDecimalWrapper;
    balance?: BigDecimalWrapper;
}
/**
 * A custom field value is used to add additional data to a financial document or to a financial document template.
 * The custom field value may be based on a custom field definition.
 */
interface CustomFieldValue {
    /**
     * The unique id of the custom field value
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * The display name of the custom field value
     * @maxLength 50
     */
    displayName?: string;
    /** The optional namespace of the custom field value. This field may be used to indicate intended usage or source. */
    namespace?: string | null;
    /** The group of the custom field indicates its intended placement in the financial document */
    group?: CustomFieldGroupWithLiterals;
    /** The value of the custom field */
    value?: Value;
    /**
     * The optional key of the custom field definition on which the custom field value is based
     * @maxLength 50
     */
    originCustomFieldKey?: string | null;
}
declare enum CustomFieldGroup {
    UNKNOWN_CUSTOM_FIELD_GROUP = "UNKNOWN_CUSTOM_FIELD_GROUP",
    BUSINESS_DETAILS = "BUSINESS_DETAILS",
    CUSTOMER_DETAILS = "CUSTOMER_DETAILS",
    DOCUMENT = "DOCUMENT",
    FOOTER = "FOOTER",
    OTHER = "OTHER"
}
/** @enumType */
type CustomFieldGroupWithLiterals = CustomFieldGroup | 'UNKNOWN_CUSTOM_FIELD_GROUP' | 'BUSINESS_DETAILS' | 'CUSTOMER_DETAILS' | 'DOCUMENT' | 'FOOTER' | 'OTHER';
interface Value {
    value?: string;
    valueType?: ValueTypeWithLiterals;
}
declare enum ValueType {
    UNKNOWN_VALUE_TYPE = "UNKNOWN_VALUE_TYPE",
    STRING = "STRING",
    DATE = "DATE",
    BOOLEAN = "BOOLEAN",
    NUMBER = "NUMBER"
}
/** @enumType */
type ValueTypeWithLiterals = ValueType | 'UNKNOWN_VALUE_TYPE' | 'STRING' | 'DATE' | 'BOOLEAN' | 'NUMBER';
interface Deposit {
    /**
     * The flat amount of the deposit. The flat amount of the deposit must be less than the invoice total.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0.00 }
     */
    flatAmount?: string;
    /**
     * The read-only percentage value of the deposit.
     * It is computed according to the flat_amount and the invoice total and is rounded to 2 digits precision.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0.00, lte:100 }
     * @readonly
     */
    percentage?: string;
    /** The type of the deposit. The default is FLAT. */
    type?: DepositTypeWithLiterals;
}
declare enum DepositType {
    UNKNOWN = "UNKNOWN",
    FLAT = "FLAT",
    PERCENTAGE = "PERCENTAGE"
}
/** @enumType */
type DepositTypeWithLiterals = DepositType | 'UNKNOWN' | 'FLAT' | 'PERCENTAGE';
/**
 * InvoiceStatus allowed transitions based on current status:
 * Draft -> Deleted, Paid, Partially Paid, Sent
 * Sent -> Draft, Deleted, Void, Paid, Partially Paid, Processing, (Overdue)
 * Processing -> PartiallyPaid, Paid, Sent
 * Paid -> Void
 * PartiallyPaid -> Void, (PartialAndOverdue)
 * Void -> Deleted
 * Deleted
 */
declare enum InvoiceStatus {
    Draft = "Draft",
    Sent = "Sent",
    Processing = "Processing",
    Paid = "Paid",
    Overdue = "Overdue",
    Void = "Void",
    Deleted = "Deleted",
    PartiallyPaid = "PartiallyPaid",
    PartialAndOverdue = "PartialAndOverdue"
}
/** @enumType */
type InvoiceStatusWithLiterals = InvoiceStatus | 'Draft' | 'Sent' | 'Processing' | 'Paid' | 'Overdue' | 'Void' | 'Deleted' | 'PartiallyPaid' | 'PartialAndOverdue';
interface TriggerSideEffectsFromLegacyData {
    storeId?: string;
    orderId?: string;
    ordersExperiments?: OrdersExperiments;
}
/** @docsIgnore */
type PreparePaymentCollectionApplicationErrors = {
    code?: 'PAYMENT_METHODS_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_CANCELED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_ALREADY_PAID';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NO_ASSOCIATED_ECOM_ORDER';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type RecordManuallyCollectedPaymentApplicationErrors = {
    code?: 'ORDER_ALREADY_PAID';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_CANCELED';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type PaymentCollectionMarkOrderAsPaidApplicationErrors = {
    code?: 'ORDER_ALREADY_PAID';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_GATEWAY_ID_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type PaymentCollectionCreatePaymentGatewayOrderApplicationErrors = {
    code?: 'ORDER_ALREADY_PAID';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_CANCELED';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type TriggerRefundApplicationErrors = {
    code?: 'PAYMENTS_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'REFUND_NOT_AVAILABLE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_AMOUNT';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type VoidAuthorizedPaymentsApplicationErrors = {
    code?: 'PAYMENT_ALREADY_VOIDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_ALREADY_CAPTURED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_NOT_AUTHORIZED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_GATEWAY_ID_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CaptureAuthorizedPaymentsApplicationErrors = {
    code?: 'INVALID_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NOT_REGULAR_ONLINE_PAYMENT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_ALREADY_VOIDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_ALREADY_CAPTURED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_NOT_AUTHORIZED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_GATEWAY_ID_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PAYMENT_HAS_PENDING_CAPTURE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type GetOrderApplicationErrors = {
    code?: 'ORDER_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CreateOrderApplicationErrors = {
    code?: 'PURCHASED_DATE_CANNOT_BE_IN_FUTURE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type UpdateOrderApplicationErrors = {
    code?: 'ORDER_IS_PENDING';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_IS_REJECTED';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CommitDeltasApplicationErrors = {
    code?: 'EMPTY_DELTAS_TO_COMMIT';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CancelOrderApplicationErrors = {
    code?: 'ORDER_HAS_AUTHORIZED_TRANSACTION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_IS_PENDING';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_IS_REJECTED';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type UpdateOrderStatusApplicationErrors = {
    code?: 'STATUS_NOT_SUPPORTED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'UNSUPPORTED_TRANSITION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'STATUS_ALREADY_SET';
    description?: string;
    data?: Record<string, any>;
};
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
interface OrderApprovedEnvelope {
    data: OrderApproved;
    metadata: EventMetadata;
}
/** @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_ORDERS
 * @webhook
 * @eventType wix.ecom.v1.order_approved
 * @slug approved
 */
declare function onOrderApproved(handler: (event: OrderApprovedEnvelope) => void | Promise<void>): void;
interface OrderUpdatedEnvelope {
    entity: Order;
    metadata: EventMetadata;
}
/** @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_ORDERS
 * @webhook
 * @eventType wix.ecom.v1.order_updated
 * @slug updated
 */
declare function onOrderUpdated(handler: (event: OrderUpdatedEnvelope) => void | Promise<void>): void;
interface OrderCanceledEnvelope {
    data: OrderCanceledEventOrderCanceled;
    metadata: EventMetadata;
}
/**
 * Triggered when an order is canceled.
 * Learn more about [eCommerce webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_ORDERS
 * @webhook
 * @eventType wix.ecom.v1.order_canceled
 * @serviceIdentifier com.wix.ecom.orders.v1.Orders
 * @slug canceled
 */
declare function onOrderCanceled(handler: (event: OrderCanceledEnvelope) => void | Promise<void>): void;
interface OrderCreatedEnvelope {
    entity: Order;
    metadata: EventMetadata;
}
/**
 * Triggered when an order is created.
 * Learn more about [webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_ORDERS
 * @webhook
 * @eventType wix.ecom.v1.order_created
 * @serviceIdentifier com.wix.ecom.orders.v1.Orders
 * @slug created
 */
declare function onOrderCreated(handler: (event: OrderCreatedEnvelope) => void | Promise<void>): void;
interface OrderPaymentStatusUpdatedEnvelope {
    data: PaymentStatusUpdated;
    metadata: EventMetadata;
}
/**
 * Triggered when an order's payment status is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_ORDERS
 * @webhook
 * @eventType wix.ecom.v1.order_payment_status_updated
 * @serviceIdentifier com.wix.ecom.orders.v1.Orders
 * @slug payment_status_updated
 */
declare function onOrderPaymentStatusUpdated(handler: (event: OrderPaymentStatusUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
 * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
 * 2nd step is an actual charge of prepared payment gateway order. This could be done either
 * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
 * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
 * @param ecomOrderId - Ecom order ID.
 * @param amount - Amount to collect
 * @public
 * @documentationMaturity preview
 * @requiredField amount
 * @requiredField ecomOrderId
 * @permissionId ECOM.COLLECT_PAYMENTS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection
 */
declare function preparePaymentCollection(ecomOrderId: string, amount: Price, options?: PreparePaymentCollectionOptions): Promise<NonNullablePaths<PreparePaymentCollectionResponse, `paymentGatewayOrderId`, 2> & {
    __applicationErrorsType?: PreparePaymentCollectionApplicationErrors;
}>;
interface PreparePaymentCollectionOptions {
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
/**
 * Provides payment collectability status for given order. If payment collection is possible
 * response will contain collectable amount for given ecom order. If not - response will contain
 * reason why payment collection is not possible.
 * @param ecomOrderId - Ecom order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField ecomOrderId
 * @permissionId ECOM.COLLECT_PAYMENTS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus
 */
declare function getPaymentCollectabilityStatus(ecomOrderId: string): Promise<NonNullablePaths<GetPaymentCollectabilityStatusResponse, `status` | `amount.amount` | `amount.formattedAmount`, 3>>;
interface PaymentCollectionCreatePaymentGatewayOrderOptions {
    /** Information about the user who initiated the payment. */
    chargedBy?: ChargedBy;
}
interface ChargeMembershipsOptions {
    /**
     * List of items to be paid by memberships
     * @minSize 1
     * @maxSize 300
     */
    membershipCharges?: MembershipChargeItem[];
}
interface TriggerRefundOptions {
    /** Business model of a refund */
    details?: RefundDetails;
    /** Side effect details related to refund */
    sideEffects?: RefundSideEffects;
}
/**
 * Void authorized payments
 * Transaction statuses for related payments will be updated in async way
 * @param ecomOrderId - Wix eCommerce order ID
 * @param paymentIds - Payment IDs
 * @public
 * @documentationMaturity preview
 * @requiredField ecomOrderId
 * @requiredField paymentIds
 * @permissionId ECOM.ORDER_VOID_AUTHORIZED_PAYMENT
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments
 */
declare function voidAuthorizedPayments(ecomOrderId: string, paymentIds: string[]): Promise<NonNullablePaths<VoidAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
    __applicationErrorsType?: VoidAuthorizedPaymentsApplicationErrors;
}>;
/**
 * Capture authorized payments
 * Transaction statuses for related payments will be updated in async way
 * @param ecomOrderId - Wix eCommerce order ID
 * @param payments - Capture payments information
 * @public
 * @documentationMaturity preview
 * @requiredField ecomOrderId
 * @requiredField payments
 * @requiredField payments.paymentId
 * @permissionId ECOM.ORDER_CAPTURE_AUTHORIZED_PAYMENT
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments
 */
declare function captureAuthorizedPayments(ecomOrderId: string, payments: NonNullablePaths<PaymentCapture, `paymentId`, 2>[]): Promise<NonNullablePaths<CaptureAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
    __applicationErrorsType?: CaptureAuthorizedPaymentsApplicationErrors;
}>;
/**
 * Retrieves an order.
 *
 *
 * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
 *
 * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
 * @param _id - ID of the order to retrieve.
 * @public
 * @requiredField _id
 * @permissionId ECOM.READ_ORDERS
 * @permissionId ECOM.ORDER_READ_ALL_EXTENDED_FIELDS
 * @applicableIdentity APP
 * @returns Fulfilled - The requested order.
 * @fqn com.wix.ecom.orders.v1.Orders.GetOrder
 */
declare function getOrder(_id: string): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
    __applicationErrorsType?: GetOrderApplicationErrors;
}>;
interface OrderSearchSpec extends SearchSpec {
    paging: 'cursor';
    wql: [
        {
            operators: ['$eq', '$in', '$ne', '$nin'];
            fields: [
                'channelInfo.type',
                'fulfillmentStatus',
                'paymentStatus',
                'shippingInfo.region.name',
                'shippingInfo.title',
                'status'
            ];
            sort: 'BOTH';
        },
        {
            operators: '*';
            fields: [
                '_createdDate',
                '_updatedDate',
                'balanceSummary.authorized.amount',
                'balanceSummary.pending.amount',
                'balanceSummary.pendingRefund.amount',
                'billingInfo.contactDetails.firstName',
                'billingInfo.contactDetails.lastName',
                'businessLocation._id',
                'businessLocation.name',
                'buyerInfo.email',
                'number',
                'priceSummary.total.amount',
                'purchasedDate',
                'shippingInfo.logistics.deliveryTime',
                'shippingInfo.logistics.deliveryTimeSlot.from',
                'shippingInfo.logistics.deliveryTimeSlot.to'
            ];
            sort: 'BOTH';
        },
        {
            operators: '*';
            fields: ['archived', 'seenByAHuman'];
            sort: 'NONE';
        },
        {
            operators: ['$eq', '$in', '$ne', '$nin'];
            fields: [
                '_id',
                'buyerInfo.contactId',
                'buyerInfo.memberId',
                'channelInfo.externalOrderId',
                'checkoutId',
                'createdBy.userId',
                'lineItems.subscriptionInfo._id'
            ];
            sort: 'NONE';
        },
        {
            operators: ['$hasAll', '$hasSome'];
            fields: [
                'lineItems.catalogReference.appId',
                'lineItems.catalogReference.catalogItemId',
                'lineItems.locations._id'
            ];
            sort: 'NONE';
        },
        {
            operators: ['$hasAll', '$hasSome'];
            fields: [
                'fulfillmentStatusesAggregate.statuses',
                'lineItems.productName.original'
            ];
            sort: 'BOTH';
        }
    ];
}
type CommonSearchWithEntityContext = Search<Order, OrderSearchSpec>;
type OrderSearch = {
    /**
    Cursor paging options.
  
    Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
    */
    cursorPaging?: {
        /**
      Maximum number of items to return in the results.
      @max: 100
      */
        limit?: NonNullable<CommonSearchWithEntityContext['cursorPaging']>['limit'] | null;
        /**
      Pointer to the next or previous page in the list of results.
    
      Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
      Not relevant for the first request.
      @maxLength: 16000
      */
        cursor?: NonNullable<CommonSearchWithEntityContext['cursorPaging']>['cursor'] | null;
    };
    /**
    Filter object.
  
    Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
    */
    filter?: CommonSearchWithEntityContext['filter'] | null;
    /**
    List of sort objects.
  
    Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
    @maxSize: 4
    */
    sort?: {
        /**
      Name of the field to sort by.
      @maxLength: 512
      */
        fieldName?: NonNullable<CommonSearchWithEntityContext['sort']>[number]['fieldName'];
        /**
      Sort order.
      */
        order?: NonNullable<CommonSearchWithEntityContext['sort']>[number]['order'];
    }[];
};
/**
 * Creates an order.
 *
 *
 * The `createOrder()` function returns a Promise that resolves when the order is created.
 *
 * > **Notes:**
 * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
 * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
 * @param order - Order info.
 * @public
 * @requiredField order
 * @requiredField order.billingInfo.contactDetails
 * @requiredField order.channelInfo
 * @requiredField order.currencyConversionDetails.conversionRate
 * @requiredField order.currencyConversionDetails.originalCurrency
 * @requiredField order.lineItems
 * @requiredField order.lineItems.catalogReference.appId
 * @requiredField order.lineItems.catalogReference.catalogItemId
 * @requiredField order.lineItems.itemType
 * @requiredField order.lineItems.price
 * @requiredField order.lineItems.productName
 * @requiredField order.lineItems.productName.original
 * @requiredField order.lineItems.quantity
 * @requiredField order.priceSummary
 * @permissionId ECOM.CREATE_ORDERS
 * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS
 * @applicableIdentity APP
 * @returns Newly created order.
 * @fqn com.wix.ecom.orders.v1.Orders.CreateOrder
 */
declare function createOrder(order: NonNullablePaths<Order, `billingInfo.contactDetails` | `channelInfo` | `currencyConversionDetails.conversionRate` | `currencyConversionDetails.originalCurrency` | `lineItems` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.itemType` | `lineItems.${number}.price` | `lineItems.${number}.productName` | `lineItems.${number}.productName.original` | `lineItems.${number}.quantity` | `priceSummary`, 5>, options?: CreateOrderOptions): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
    __applicationErrorsType?: CreateOrderApplicationErrors;
}>;
interface CreateOrderOptions {
    /** Determine order lifecycle */
    settings?: OrderCreationSettings;
}
/**
 * Updates an order.
 *
 *
 * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
 *
 * Currently, the following fields can be updated:
 * + `order.buyerInfo.email`
 * + `order.buyerLanguage`
 * + `order.weightUnit`
 * + `order.billingInfo.address`
 * + `order.billingInfo.contactDetails`
 * + `order.archived`
 * + `order.attributionSource`
 * + `order.seenByAHuman`
 * + `order.recipientInfo.address`
 * + `order.recipientInfo.contactDetails`
 * + `order.shippingInfo.logistics.shippingDestination.address`
 * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
 *
 * To update a field's value, include the new value in the `order` object in the method parameters.
 * To remove a field's value, pass `null`.
 *
 * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
 *
 * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @requiredField order
 * @permissionId ECOM.MODIFY_ORDERS
 * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS
 * @applicableIdentity APP
 * @returns Newly created order.
 * @fqn com.wix.ecom.orders.v1.Orders.UpdateOrder
 */
declare function updateOrder(_id: string, order: UpdateOrder): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
    __applicationErrorsType?: UpdateOrderApplicationErrors;
}>;
interface UpdateOrder {
    /**
     * Order ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created.
     * @readonly
     * @immutable
     */
    _createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Order line items.
     * @minSize 1
     * @maxSize 300
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order payment status. */
    paymentStatus?: PaymentStatusWithLiterals;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatusWithLiterals;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     * @format CURRENCY
     */
    currency?: string | null;
    /** Currency conversion details. For use with multi-currency sites. */
    currencyConversionDetails?: CurrencyConversionDetails;
    /**
     * Whether tax is included in line item prices.
     * @immutable
     */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     * @immutable
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /**
     * [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer.
     * @maxLength 1000
     */
    buyerNote?: string | null;
    /** Order status. */
    status?: OrderStatusWithLiterals;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /**
     * Applied discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscount[];
    /**
     * Order activities.
     * @readonly
     * @maxSize 1000
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSourceWithLiterals;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /**
     * Checkout ID.
     * @format GUID
     */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /**
     * Additional fees applied to the order.
     * @maxSize 100
     */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Order tags.
     *
     * [Tags](https://dev.wix.com/docs/rest/business-management/tags/introduction) are labels attached to entities, allowing for flexible categorization and data management.
     */
    tags?: Tags;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     * @immutable
     */
    purchasedDate?: Date | null;
    /** Order Location */
    businessLocation?: Location;
    /**
     * Pay after free trial price summary. Price summary that should be paid for subscriptions after free trial period.
     * @readonly
     */
    payAfterFreeTrial?: PriceSummary;
}
/**
 * Updates up to 100 orders.
 *
 *
 * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
 *
 * Currently, the following fields can be updated:
 * + `order.buyerInfo.email`
 * + `order.buyerLanguage`
 * + `order.weightUnit`
 * + `order.billingInfo.address`
 * + `order.billingInfo.contactDetails`
 * + `order.archived`
 * + `order.attributionSource`
 * + `order.seenByAHuman`
 * + `order.recipientInfo.address`
 * + `order.recipientInfo.contactDetails`
 * + `order.shippingInfo.logistics.shippingDestination.address`
 * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
 *
 * To update a field's value, include the new value in the `orders.order` object in the method parameters.
 * To remove a field's value, pass `null`.
 *
 * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
 *
 * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
 * @param orders - Orders to update.
 * @public
 * @requiredField orders
 * @requiredField orders.order
 * @requiredField orders.order._id
 * @permissionId ECOM.MODIFY_ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.BulkUpdateOrders
 */
declare function bulkUpdateOrders(orders: NonNullablePaths<MaskedOrder, `order` | `order._id`, 3>[], options?: BulkUpdateOrdersOptions): Promise<NonNullablePaths<BulkUpdateOrdersResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.number` | `results.${number}.item.buyerInfo.visitorId` | `results.${number}.item.buyerInfo.memberId` | `results.${number}.item.paymentStatus` | `results.${number}.item.fulfillmentStatus` | `results.${number}.item.weightUnit` | `results.${number}.item.taxIncludedInPrices` | `results.${number}.item.shippingInfo.title` | `results.${number}.item.status` | `results.${number}.item.attributionSource` | `results.${number}.item.createdBy.userId` | `results.${number}.item.createdBy.memberId` | `results.${number}.item.createdBy.visitorId` | `results.${number}.item.createdBy.appId` | `results.${number}.item.channelInfo.type` | `results.${number}.item.businessLocation._id` | `results.${number}.item.businessLocation.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
interface BulkUpdateOrdersOptions {
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface CommitDeltasOptions {
    /**
     * Draft order Id representing this change.
     * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get
     * @format GUID
     */
    draftOrderId?: string;
    /** Draft order changes to be applied */
    changes: DraftOrderDiffs;
    /** Side-effects to happen after order is updated */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Reason for edit, given by user (optional).
     * @maxLength 200
     */
    reason?: string | null;
}
interface UpdateOrderLineItemIdentifiers {
    /**
     * Order ID
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /**
     * Line item ID.
     * @immutable
     */
    lineItemId?: string;
}
interface UpdateOrderLineItem {
    /**
     * Line item ID.
     * @immutable
     */
    _id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Line item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     *
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).
     * @format GUID
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @max 100000
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @max 100000
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
    /** Address used for tax calculation. */
    taxableAddress?: TaxableAddress;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 10
     */
    modifierGroups?: ModifierGroup[];
}
interface UpdateActivityIdentifiers {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /**
     * ID of the activity to update.
     * @format GUID
     */
    activityId: string;
}
interface DeleteActivityIdentifiers {
    /**
     * Order ID.
     * @minLength 1
     * @maxLength 100
     */
    _id: string;
    /**
     * ID of the activity to delete.
     * @format GUID
     */
    activityId: string;
}
/**
 * Cancels an order.
 *
 *
 * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.CancelOrder
 */
declare function cancelOrder(_id: string, options?: CancelOrderOptions): Promise<NonNullablePaths<CancelOrderResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7> & {
    __applicationErrorsType?: CancelOrderApplicationErrors;
}>;
interface CancelOrderOptions {
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /**
     * Custom note to be added to the email (optional).
     * @minLength 1
     * @maxLength 1000
     */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
interface AggregateOrdersOptions {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation: Record<string, any> | null;
    /**
     * Optional custom separator string that can be used to override default separator value '|'
     * for hierarchical responses of multifaceted aggregation requests like:
     * '{"aggregation": {"example_request_key": {"$count" : ["deliveryMethod", "shippingRegion"]}}}'
     * with example response for default '|' separator like:
     * '{"aggregates" :{"example_request_key": {"(Mail|Region 1)": 5, "(Pickup|Region 2)": 10}}}'
     * @minLength 1
     * @maxLength 100
     */
    hierarchySeparatorOverride?: string | null;
}
/**
 * Synchronously update tags on multiple orders, by list of order IDs.
 *
 * > **Note:** If the same tag is passed to both the `assignTags` and `unassignTags` fields, it will be assigned.
 * @param orderIds - IDs of orders to update tags for.
 * @public
 * @requiredField orderIds
 * @permissionId ECOM.MODIFY_ORDERS
 * @permissionId ECOM.ORDER_MODIFY_PRIVATE_TAGS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags
 */
declare function bulkUpdateOrderTags(orderIds: string[], options?: BulkUpdateOrderTagsOptions): Promise<NonNullablePaths<BulkUpdateOrderTagsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
interface BulkUpdateOrderTagsOptions {
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}

export { DurationUnit as $, AdjustmentType as A, type BulkUpdateOrdersOptions as B, type CaptureAuthorizedPaymentsResponse as C, DescriptionLineType as D, PickupMethod as E, FulfillmentStatus as F, type GetPaymentCollectabilityStatusResponse as G, OrderStatus as H, ItemTypeItemType as I, JurisdictionType as J, DiscountType as K, DiscountReason as L, type MaskedOrder as M, LineItemQuantityChangeType as N, type Order as O, type Price as P, ActivityType as Q, AttributionSource as R, type SearchOrdersResponse as S, TaxableAddressType as T, type UpdateOrder as U, type VoidAuthorizedPaymentsResponse as V, WeightUnit as W, ChannelType as X, PreviewEmailType as Y, WebhookIdentityType as Z, ScheduledAction as _, type PreparePaymentCollectionOptions as a, type StreetAddress as a$, PaymentCollectabilityStatus as a0, RefundableStatus as a1, NonRefundableReason as a2, ManuallyRefundableReason as a3, RestockType as a4, TransactionStatus as a5, AuthorizationCaptureStatus as a6, AuthorizationVoidStatus as a7, Reason as a8, ActionType as a9, type ItemType as aA, type ItemTypeItemTypeDataOneOf as aB, type ItemTaxFullDetails as aC, type LineItemTaxInfo as aD, type LineItemTaxBreakdown as aE, type DigitalFile as aF, type SubscriptionInfo as aG, type SubscriptionTitle as aH, type SubscriptionDescription as aI, type SubscriptionSettings as aJ, type FreeTrialPeriod as aK, type BillingAdjustment as aL, type BillingAdjustmentPriceSummary as aM, type PriceDescription as aN, type LocationAndQuantity as aO, type TaxableAddress as aP, type TaxableAddressTaxableAddressDataOneOf as aQ, type ExtendedFields as aR, type ModifierGroup as aS, type TranslatableString as aT, type ItemModifier as aU, type BuyerInfo as aV, type BuyerInfoIdOneOf as aW, type CurrencyConversionDetails as aX, type PriceSummary as aY, type AddressWithContact as aZ, type Address as a_, ChargebackStatus as aa, MembershipPaymentStatus as ab, RefundStatus as ac, VersioningMode as ad, SortOrder as ae, OrderApprovalStrategy as af, DeltaPaymentOptionType as ag, InventoryAction as ah, Placement as ai, SubdivisionType as aj, SourceType as ak, CustomFieldGroup as al, ValueType as am, DepositType as an, InvoiceStatus as ao, type OrderLineItem as ap, type ProductName as aq, type CatalogReference as ar, type DescriptionLine as as, type DescriptionLineValueOneOf as at, type DescriptionLineDescriptionLineValueOneOf as au, type DescriptionLineName as av, type PlainTextValue as aw, type Color as ax, type FocalPoint as ay, type PhysicalProperties as az, type PreparePaymentCollectionResponse as b, type PaymentCanceledPaymentDetailsOneOf as b$, type AddressLocation as b0, type FullAddressContactDetails as b1, type VatId as b2, type V1ShippingInformation as b3, type DeliveryLogistics as b4, type DeliveryLogisticsAddressOneOf as b5, type PickupDetails as b6, type PickupAddress as b7, type DeliveryTimeSlot as b8, type ShippingPrice as b9, type ManagedLineItem as bA, type ManagedDiscount as bB, type TranslatedValue as bC, type LineItemAmount as bD, type ManagedAdditionalFee as bE, type TotalPriceChange as bF, type ShippingInformationChange as bG, type ShippingInformation as bH, type SavedPaymentMethod as bI, type AuthorizedPaymentCreated as bJ, type AuthorizedPaymentCaptured as bK, type AuthorizedPaymentVoided as bL, type RefundInitiated as bM, type RefundedPayment as bN, type RefundedPaymentKindOneOf as bO, type RegularPaymentRefund as bP, type GiftCardPaymentRefund as bQ, type MembershipPaymentRefund as bR, type PaymentRefunded as bS, type PaymentRefundFailed as bT, type RefundedAsStoreCredit as bU, type PaymentPending as bV, type PaymentPendingPaymentDetailsOneOf as bW, type RegularPayment as bX, type RegularPaymentPaymentMethodDetailsOneOf as bY, type CreditCardDetails as bZ, type PaymentCanceled as b_, type ShippingRegion as ba, type TaxSummary as bb, type OrderTaxInfo as bc, type OrderTaxBreakdown as bd, type AppliedDiscount as be, type AppliedDiscountDiscountSourceOneOf as bf, type Coupon as bg, type MerchantDiscount as bh, type MerchantDiscountMerchantDiscountReasonOneOf as bi, type DiscountRule as bj, type DiscountRuleName as bk, type LineItemDiscount as bl, type Activity as bm, type ActivityContentOneOf as bn, type CustomActivity as bo, type MerchantComment as bp, type OrderRefunded as bq, type OrderCreatedFromExchange as br, type NewExchangeOrderCreated as bs, type LineItemExchangeData as bt, type DraftOrderChangesApplied as bu, type OrderChange as bv, type OrderChangeValueOneOf as bw, type LineItemChanges as bx, type LineItemQuantityChange as by, type LineItemPriceChange as bz, type PreparePaymentCollectionApplicationErrors as c, type PreviewBuyerPickupConfirmationEmailRequest as c$, type PaymentDeclined as c0, type PaymentDeclinedPaymentDetailsOneOf as c1, type ReceiptCreated as c2, type ReceiptCreatedReceiptInfoOneOf as c3, type WixReceipt as c4, type ExternalReceipt as c5, type ReceiptSent as c6, type ReceiptSentReceiptInfoOneOf as c7, type ChargebackCreated as c8, type ChargebackReversed as c9, type BulkSendBuyerShippingConfirmationEmailsRequest as cA, type BulkSendBuyerShippingConfirmationEmailsResponse as cB, type SendMerchantOrderReceivedNotificationRequest as cC, type SendMerchantOrderReceivedNotificationResponse as cD, type SendCancelRefundEmailRequest as cE, type SendCancelRefundEmailResponse as cF, type SendRefundEmailRequest as cG, type SendRefundEmailResponse as cH, type SendMerchantOrderReceivedPushRequest as cI, type SendMerchantOrderReceivedPushResponse as cJ, type PreviewEmailByTypeRequest as cK, type PreviewEmailByTypeResponse as cL, type PreviewRefundEmailRequest as cM, type RefundDetails as cN, type RefundItem as cO, type LineItemRefund as cP, type AdditionalFeeRefund as cQ, type ShippingRefund as cR, type PreviewRefundEmailResponse as cS, type PreviewCancelEmailRequest as cT, type PreviewCancelEmailResponse as cU, type PreviewCancelRefundEmailRequest as cV, type PreviewCancelRefundEmailResponse as cW, type PreviewBuyerPaymentsReceivedEmailRequest as cX, type PreviewBuyerPaymentsReceivedEmailResponse as cY, type PreviewBuyerConfirmationEmailRequest as cZ, type PreviewBuyerConfirmationEmailResponse as c_, type CreatedBy as ca, type CreatedByStringOneOf as cb, type ChannelInfo as cc, type CustomField as cd, type BalanceSummary as ce, type Balance as cf, type AdditionalFee as cg, type FulfillmentStatusesAggregate as ch, type Tags as ci, type TagList as cj, type Location as ck, type OrderApproved as cl, type OrdersExperiments as cm, type OrderRejectedEventOrderRejected as cn, type OrderItemsRestocked as co, type V1RestockItem as cp, type SendBuyerConfirmationEmailRequest as cq, type SendBuyerConfirmationEmailResponse as cr, type SendBuyerPaymentsReceivedEmailRequest as cs, type SendBuyerPaymentsReceivedEmailResponse as ct, type SendBuyerPickupConfirmationEmailRequest as cu, type SendBuyerPickupConfirmationEmailResponse as cv, type BulkSendBuyerPickupConfirmationEmailsRequest as cw, type BulkSendBuyerPickupConfirmationEmailsResponse as cx, type SendBuyerShippingConfirmationEmailRequest as cy, type SendBuyerShippingConfirmationEmailResponse as cz, type VoidAuthorizedPaymentsApplicationErrors as d, type GiftCardPaymentDetails as d$, type PreviewBuyerPickupConfirmationEmailResponse as d0, type PreviewShippingConfirmationEmailRequest as d1, type PreviewShippingConfirmationEmailResponse as d2, type PreviewResendDownloadLinksEmailRequest as d3, type PreviewResendDownloadLinksEmailResponse as d4, type DomainEvent as d5, type DomainEventBodyOneOf as d6, type EntityCreatedEvent as d7, type RestoreInfo as d8, type EntityUpdatedEvent as d9, type CreatePaymentGatewayOrderRequest as dA, type ChargedBy as dB, type CreatePaymentGatewayOrderResponse as dC, type ChargeMembershipsRequest as dD, type MembershipChargeItem as dE, type MembershipName as dF, type ServiceProperties as dG, type ChargeMembershipsResponse as dH, type TriggerRefundRequest as dI, type PaymentRefund as dJ, type RefundSideEffects as dK, type RestockInfo as dL, type RestockItem as dM, type TriggerRefundResponse as dN, type OrderTransactions as dO, type Payment as dP, type PaymentPaymentDetailsOneOf as dQ, type PaymentReceiptInfoOneOf as dR, type RegularPaymentDetails as dS, type RegularPaymentDetailsPaymentMethodDetailsOneOf as dT, type CreditCardPaymentMethodDetails as dU, type AuthorizationDetails as dV, type AuthorizationCapture as dW, type AuthorizationActionFailureDetails as dX, type AuthorizationVoid as dY, type V1ScheduledAction as dZ, type Chargeback as d_, type EntityDeletedEvent as da, type ActionEvent as db, type Empty as dc, type MessageEnvelope as dd, type IdentificationData as de, type IdentificationDataIdOneOf as df, type PreparePaymentCollectionRequest as dg, type RedirectUrls as dh, type DelayedCaptureSettings as di, type Duration as dj, type GetPaymentCollectabilityStatusRequest as dk, type RecordManuallyCollectedPaymentRequest as dl, type RecordManuallyCollectedPaymentResponse as dm, type MarkOrderAsPaidRequest as dn, type MarkOrderAsPaidResponse as dp, type BulkMarkOrdersAsPaidRequest as dq, type BulkMarkOrdersAsPaidResponse as dr, type BulkOrderResult as ds, type ItemMetadata as dt, type ApplicationError as du, type BulkActionMetadata as dv, type GetRefundabilityStatusRequest as dw, type GetRefundabilityStatusResponse as dx, type Refundability as dy, type RefundabilityAdditionalRefundabilityInfoOneOf as dz, type PaymentCapture as e, type DraftOrderDiffsShippingUpdateInfoOneOf as e$, type MembershipPaymentDetails as e0, type WixReceiptInfo as e1, type ExternalReceiptInfo as e2, type Refund as e3, type RefundTransaction as e4, type RefundStatusInfo as e5, type AggregatedRefundSummary as e6, type RefundItemsBreakdown as e7, type LineItemRefundSummary as e8, type CalculateRefundRequest as e9, type IndexingMessage as eA, type GetOrderRequest as eB, type GetOrderResponse as eC, type InternalQueryOrdersRequest as eD, type PlatformQuery as eE, type PlatformQueryPagingMethodOneOf as eF, type Sorting as eG, type PlatformPaging as eH, type CursorPaging as eI, type InternalQueryOrdersResponse as eJ, type PlatformPagingMetadata as eK, type Cursors as eL, type QueryOrderRequest as eM, type QueryOrderResponse as eN, type SearchOrdersRequest as eO, type CursorSearch as eP, type CursorSearchPagingMethodOneOf as eQ, type CursorPagingMetadata as eR, type CreateOrderRequest as eS, type OrderCreationSettings as eT, type OrderCreateNotifications as eU, type CreateOrderResponse as eV, type UpdateOrderRequest as eW, type UpdateOrderResponse as eX, type BulkUpdateOrdersRequest as eY, type CommitDeltasRequest as eZ, type DraftOrderDiffs as e_, type CalculateRefundItemRequest as ea, type CalculateRefundResponse as eb, type CalculateRefundItemResponse as ec, type VoidAuthorizedPaymentsRequest as ed, type CaptureAuthorizedPaymentsRequest as ee, type ChargeSavedPaymentMethodRequest as ef, type ChargeSavedPaymentMethodResponse as eg, type UpdateInternalDocumentsEvent as eh, type UpdateInternalDocumentsEventOperationOneOf as ei, type InternalDocument as ej, type InternalDocumentUpdateOperation as ek, type DeleteByIdsOperation as el, type DeleteByFilterOperation as em, type InternalDocumentUpdateByFilterOperation as en, type InternalUpdateExistingOperation as eo, type VersionedDocumentUpdateOperation as ep, type VersionedDeleteByIdsOperation as eq, type VersionedDocumentId as er, type TriggerReindexRequest as es, type TriggerReindexResponse as et, type BatchOfTriggerReindexOrderRequest as eu, type TriggerReindexOrderRequest as ev, type DiffmatokyPayload as ew, type ErrorInformation as ex, type ContinueSideEffectsFlowInLegacyData as ey, type SnapshotMessage as ez, type CaptureAuthorizedPaymentsApplicationErrors as f, type PickupReadyEmailSent as f$, type DraftOrderDiffsBuyerUpdateInfoOneOf as f0, type DraftOrderDiffsBillingUpdateInfoOneOf as f1, type DraftOrderDiffsRecipientUpdateInfoOneOf as f2, type V1LineItemDelta as f3, type V1LineItemDeltaDeltaOneOf as f4, type OrderLineItemChangedDetails as f5, type ItemChangedDetails as f6, type AppliedDiscountDelta as f7, type AppliedDiscountDeltaDeltaOneOf as f8, type AdditionalFeeDelta as f9, type UpdateOrderShippingAddressRequest as fA, type UpdateOrderShippingAddressResponse as fB, type UpdateBillingContactDetailsRequest as fC, type UpdateBillingContactDetailsResponse as fD, type UpdateOrderLineItemRequest as fE, type UpdateOrderLineItemResponse as fF, type UpdateOrderLineItemsRequest as fG, type MaskedOrderLineItem as fH, type UpdateOrderLineItemsResponse as fI, type AddInternalActivityRequest as fJ, type InternalActivity as fK, type InternalActivityContentOneOf as fL, type OrderPlaced as fM, type OrderPaid as fN, type OrderFulfilled as fO, type OrderNotFulfilled as fP, type OrderCanceled as fQ, type DownloadLinkSent as fR, type TrackingNumberAdded as fS, type TrackingNumberEdited as fT, type TrackingLinkAdded as fU, type ShippingConfirmationEmailSent as fV, type InvoiceAdded as fW, type InvoiceSent as fX, type FulfillerEmailSent as fY, type ShippingAddressEdited as fZ, type EmailEdited as f_, type AdditionalFeeDeltaDeltaOneOf as fa, type DraftOrderCommitSettings as fb, type InventoryUpdateDetails as fc, type CommitDeltasResponse as fd, type OrderDeltasCommitted as fe, type CommittedDiffs as ff, type CommittedDiffsShippingUpdateInfoOneOf as fg, type LineItemDelta as fh, type LineItemDeltaDeltaOneOf as fi, type ArchiveOrderRequest as fj, type ArchiveOrderResponse as fk, type BulkArchiveOrdersRequest as fl, type BulkArchiveOrdersResponse as fm, type BulkArchiveOrdersByFilterRequest as fn, type BulkArchiveOrdersByFilterResponse as fo, type UnArchiveOrderRequest as fp, type UnArchiveOrderResponse as fq, type BulkUnArchiveOrdersRequest as fr, type BulkUnArchiveOrdersResponse as fs, type BulkUnArchiveOrdersByFilterRequest as ft, type BulkUnArchiveOrdersByFilterResponse as fu, type UpdateBuyerInfoRequest as fv, type BuyerInfoUpdate as fw, type UpdateBuyerInfoResponse as fx, type UpdateBuyerEmailRequest as fy, type UpdateBuyerEmailResponse as fz, type GetOrderApplicationErrors as g, type IdAndVersion as g$, type OrderPartiallyPaid as g0, type OrderPending as g1, type OrderRejected as g2, type AddInternalActivityResponse as g3, type AddActivityRequest as g4, type PublicActivity as g5, type PublicActivityContentOneOf as g6, type AddActivityResponse as g7, type AddActivitiesRequest as g8, type AddActivitiesResponse as g9, type BulkSetBusinessLocationRequest as gA, type BulkSetBusinessLocationResponse as gB, type BulkSetBusinessLocationResult as gC, type V1MarkOrderAsPaidRequest as gD, type V1MarkOrderAsPaidResponse as gE, type PaymentStatusUpdated as gF, type V1BulkMarkOrdersAsPaidRequest as gG, type V1BulkMarkOrdersAsPaidResponse as gH, type V1CreatePaymentGatewayOrderRequest as gI, type V1CreatePaymentGatewayOrderResponse as gJ, type GetShipmentsRequest as gK, type GetShipmentsResponse as gL, type AggregateOrdersRequest as gM, type AggregateOrdersResponse as gN, type DecrementItemsQuantityRequest as gO, type DecrementData as gP, type DecrementItemsQuantityResponse as gQ, type BulkUpdateOrderTagsRequest as gR, type BulkUpdateOrderTagsResult as gS, type Task as gT, type TaskKey as gU, type TaskAction as gV, type TaskActionActionOneOf as gW, type Complete as gX, type Cancel as gY, type Reschedule as gZ, type InvoiceSentEvent as g_, type UpdateActivityRequest as ga, type UpdateActivityResponse as gb, type DeleteActivityRequest as gc, type DeleteActivityResponse as gd, type UpdateLineItemsDescriptionLinesRequest as ge, type LineItemUpdate as gf, type UpdateLineItemsDescriptionLinesResponse as gg, type MarkOrderAsSeenByHumanRequest as gh, type MarkOrderAsSeenByHumanResponse as gi, type CancelOrderRequest as gj, type OrderCanceledEventOrderCanceled as gk, type UpdateOrderStatusRequest as gl, type UpdateOrderStatusResponse as gm, type MarkAsFulfilledRequest as gn, type MarkAsFulfilledResponse as go, type FulfillmentStatusUpdated as gp, type BulkMarkAsFulfilledRequest as gq, type BulkMarkAsFulfilledResponse as gr, type BulkMarkAsFulfilledByFilterRequest as gs, type BulkMarkAsFulfilledByFilterResponse as gt, type MarkAsUnfulfilledRequest as gu, type MarkAsUnfulfilledResponse as gv, type BulkMarkAsUnfulfilledRequest as gw, type BulkMarkAsUnfulfilledResponse as gx, type BulkMarkAsUnfulfilledByFilterRequest as gy, type BulkMarkAsUnfulfilledByFilterResponse as gz, type OrderSearch as h, type ChannelTypeWithLiterals as h$, type InvoiceFields as h0, type Customer as h1, type Email as h2, type QuotesAddress as h3, type AddressDescription as h4, type Phone as h5, type Company as h6, type CommonAddress as h7, type CommonAddressStreetOneOf as h8, type Subdivision as h9, type ChargeMembershipsOptions as hA, type TriggerRefundOptions as hB, type OrderSearchSpec as hC, type CommitDeltasOptions as hD, type UpdateOrderLineItemIdentifiers as hE, type UpdateOrderLineItem as hF, type UpdateActivityIdentifiers as hG, type DeleteActivityIdentifiers as hH, type AggregateOrdersOptions as hI, type DescriptionLineTypeWithLiterals as hJ, type ItemTypeItemTypeWithLiterals as hK, type PaymentOptionTypeWithLiterals as hL, type JurisdictionTypeWithLiterals as hM, type SubscriptionFrequencyWithLiterals as hN, type AdjustmentTypeWithLiterals as hO, type TaxableAddressTypeWithLiterals as hP, type PaymentStatusWithLiterals as hQ, type FulfillmentStatusWithLiterals as hR, type WeightUnitWithLiterals as hS, type VatTypeWithLiterals as hT, type PickupMethodWithLiterals as hU, type OrderStatusWithLiterals as hV, type DiscountTypeWithLiterals as hW, type DiscountReasonWithLiterals as hX, type LineItemQuantityChangeTypeWithLiterals as hY, type ActivityTypeWithLiterals as hZ, type AttributionSourceWithLiterals as h_, type StandardDetails as ha, type InvoiceDates as hb, type LineItems as hc, type LineItem as hd, type BigDecimalWrapper as he, type LineItemTax as hf, type Source as hg, type LineItemMetaData as hh, type Locale as hi, type TotalPrice as hj, type ItemizedFee as hk, type Discount as hl, type DiscountOneDiscountTypeOneOf as hm, type CalculatedTaxes as hn, type CalculatedTax as ho, type Payments as hp, type InvoicesPayment as hq, type MetaData as hr, type InvoiceDynamicPriceTotals as hs, type CustomFieldValue as ht, type Value as hu, type Deposit as hv, type TriggerSideEffectsFromLegacyData as hw, type BaseEventMetadata as hx, type EventMetadata as hy, type PaymentCollectionCreatePaymentGatewayOrderOptions as hz, type CreateOrderOptions as i, type PreviewEmailTypeWithLiterals as i0, type WebhookIdentityTypeWithLiterals as i1, type ScheduledActionWithLiterals as i2, type DurationUnitWithLiterals as i3, type PaymentCollectabilityStatusWithLiterals as i4, type RefundableStatusWithLiterals as i5, type NonRefundableReasonWithLiterals as i6, type ManuallyRefundableReasonWithLiterals as i7, type RestockTypeWithLiterals as i8, type TransactionStatusWithLiterals as i9, type UpdateOrderStatusApplicationErrors as iA, type CommonSearchWithEntityContext as iB, onOrderApproved as iC, onOrderUpdated as iD, onOrderCanceled as iE, onOrderCreated as iF, onOrderPaymentStatusUpdated as iG, preparePaymentCollection as iH, getPaymentCollectabilityStatus as iI, voidAuthorizedPayments as iJ, captureAuthorizedPayments as iK, getOrder as iL, createOrder as iM, updateOrder as iN, bulkUpdateOrders as iO, cancelOrder as iP, bulkUpdateOrderTags as iQ, type AuthorizationCaptureStatusWithLiterals as ia, type AuthorizationVoidStatusWithLiterals as ib, type ReasonWithLiterals as ic, type ActionTypeWithLiterals as id, type ChargebackStatusWithLiterals as ie, type MembershipPaymentStatusWithLiterals as ig, type RefundStatusWithLiterals as ih, type VersioningModeWithLiterals as ii, type SortOrderWithLiterals as ij, type OrderApprovalStrategyWithLiterals as ik, type DeltaPaymentOptionTypeWithLiterals as il, type InventoryActionWithLiterals as im, type PlacementWithLiterals as io, type SubdivisionTypeWithLiterals as ip, type SourceTypeWithLiterals as iq, type CustomFieldGroupWithLiterals as ir, type ValueTypeWithLiterals as is, type DepositTypeWithLiterals as it, type InvoiceStatusWithLiterals as iu, type RecordManuallyCollectedPaymentApplicationErrors as iv, type PaymentCollectionMarkOrderAsPaidApplicationErrors as iw, type PaymentCollectionCreatePaymentGatewayOrderApplicationErrors as ix, type TriggerRefundApplicationErrors as iy, type CommitDeltasApplicationErrors as iz, type CreateOrderApplicationErrors as j, type UpdateOrderApplicationErrors as k, type BulkUpdateOrdersResponse as l, type CancelOrderOptions as m, type CancelOrderResponse as n, type CancelOrderApplicationErrors as o, type BulkUpdateOrderTagsOptions as p, type BulkUpdateOrderTagsResponse as q, type OrderApprovedEnvelope as r, type OrderUpdatedEnvelope as s, type OrderCanceledEnvelope as t, type OrderCreatedEnvelope as u, type OrderPaymentStatusUpdatedEnvelope as v, PaymentOptionType as w, SubscriptionFrequency as x, PaymentStatus as y, VatType as z };
