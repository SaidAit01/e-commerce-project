// src/ecom-v1-order-orders.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomOrdersV1OrdersUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/ecom-orders",
        destPath: ""
      },
      {
        srcPath: "/_api/orders",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/ecom-orders",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/bulk/orders",
        destPath: "/v1/bulk/orders"
      },
      {
        srcPath: "/ecom/v1/orders",
        destPath: "/v1/orders"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/payments-collector",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/payments-collector",
        destPath: "/v1/payments-collector"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/payments-collector",
        destPath: "/v1/payments-collector"
      },
      {
        srcPath: "/_api/v1/payments-collector",
        destPath: "/v1/payments-collector"
      },
      {
        srcPath: "/v1/payments-collector",
        destPath: "/v1/payments-collector"
      },
      {
        srcPath: "/_api/payments-collector",
        destPath: "/v1/payments-collector"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_orders";
function preparePaymentCollection(payload) {
  function __preparePaymentCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/prepare-payment-collection",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __preparePaymentCollection;
}
function getPaymentCollectabilityStatus(payload) {
  function __getPaymentCollectabilityStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/payment-collectability-status",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getPaymentCollectabilityStatus;
}
function recordManuallyCollectedPayment(payload) {
  function __recordManuallyCollectedPayment({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.RecordManuallyCollectedPayment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{orderId}/manual-payment",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __recordManuallyCollectedPayment;
}
function paymentCollectionMarkOrderAsPaid(payload) {
  function __paymentCollectionMarkOrderAsPaid({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.MarkOrderAsPaid",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/mark-as-paid",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __paymentCollectionMarkOrderAsPaid;
}
function paymentCollectionBulkMarkOrdersAsPaid(payload) {
  function __paymentCollectionBulkMarkOrdersAsPaid({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.BulkMarkOrdersAsPaid",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/bulk/payments-collector/mark-as-paid",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.purchasedDate" },
            { path: "results.item.lineItems.image.urlExpirationDate" },
            { path: "results.item.lineItems.digitalFile.expirationDate" },
            {
              path: "results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "results.item.shippingInfo.logistics.deliverByDate" },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "results.item.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "results.item.lineItems.image.focalPoint.x" },
            { path: "results.item.lineItems.image.focalPoint.y" },
            { path: "results.item.lineItems.physicalProperties.weight" },
            { path: "results.item.billingInfo.address.geocode.latitude" },
            { path: "results.item.billingInfo.address.geocode.longitude" },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "results.item.recipientInfo.address.geocode.latitude" },
            { path: "results.item.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __paymentCollectionBulkMarkOrdersAsPaid;
}
function getRefundabilityStatus(payload) {
  function __getRefundabilityStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetRefundabilityStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/refundability",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getRefundabilityStatus;
}
function paymentCollectionCreatePaymentGatewayOrder(payload) {
  function __paymentCollectionCreatePaymentGatewayOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CreatePaymentGatewayOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/create-payment-gateway-order",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __paymentCollectionCreatePaymentGatewayOrder;
}
function chargeMemberships(payload) {
  function __chargeMemberships({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "membershipCharges.serviceProperties.scheduledDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.ChargeMemberships",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/charge-membership",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __chargeMemberships;
}
function triggerRefund(payload) {
  function __triggerRefund({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.TriggerRefund",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/trigger-refund",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __triggerRefund;
}
function voidAuthorizedPayments(payload) {
  function __voidAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/void-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __voidAuthorizedPayments;
}
function captureAuthorizedPayments(payload) {
  function __captureAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/capture-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __captureAuthorizedPayments;
}
function getOrder(payload) {
  function __getOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.v1.Orders.GetOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrder;
}
function searchOrders(payload) {
  function __searchOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.SearchOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/search",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orders.createdDate" },
            { path: "orders.updatedDate" },
            { path: "orders.purchasedDate" },
            { path: "orders.lineItems.image.urlExpirationDate" },
            { path: "orders.lineItems.digitalFile.expirationDate" },
            {
              path: "orders.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "orders.shippingInfo.logistics.deliverByDate" },
            { path: "orders.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "orders.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "orders.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "orders.lineItems.image.focalPoint.x" },
            { path: "orders.lineItems.image.focalPoint.y" },
            { path: "orders.lineItems.physicalProperties.weight" },
            { path: "orders.billingInfo.address.geocode.latitude" },
            { path: "orders.billingInfo.address.geocode.longitude" },
            {
              path: "orders.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "orders.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "orders.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "orders.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "orders.recipientInfo.address.geocode.latitude" },
            { path: "orders.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __searchOrders;
}
function createOrder(payload) {
  function __createOrder({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "order.createdDate" },
          { path: "order.updatedDate" },
          { path: "order.purchasedDate" },
          { path: "order.lineItems.image.urlExpirationDate" },
          { path: "order.lineItems.digitalFile.expirationDate" },
          {
            path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "order.shippingInfo.logistics.deliverByDate" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "order.activities.createdDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "order.lineItems.image.focalPoint.x" },
          { path: "order.lineItems.image.focalPoint.y" },
          { path: "order.lineItems.physicalProperties.weight" },
          { path: "order.billingInfo.address.geocode.latitude" },
          { path: "order.billingInfo.address.geocode.longitude" },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "order.recipientInfo.address.geocode.latitude" },
          { path: "order.recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.CreateOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createOrder;
}
function updateOrder(payload) {
  function __updateOrder({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "order.createdDate" },
          { path: "order.updatedDate" },
          { path: "order.purchasedDate" },
          { path: "order.lineItems.image.urlExpirationDate" },
          { path: "order.lineItems.digitalFile.expirationDate" },
          {
            path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "order.shippingInfo.logistics.deliverByDate" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "order.activities.createdDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "order.lineItems.image.focalPoint.x" },
          { path: "order.lineItems.image.focalPoint.y" },
          { path: "order.lineItems.physicalProperties.weight" },
          { path: "order.billingInfo.address.geocode.latitude" },
          { path: "order.billingInfo.address.geocode.longitude" },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "order.recipientInfo.address.geocode.latitude" },
          { path: "order.recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{order.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrder;
}
function bulkUpdateOrders(payload) {
  function __bulkUpdateOrders({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "orders.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "orders.order.createdDate" },
          { path: "orders.order.updatedDate" },
          { path: "orders.order.purchasedDate" },
          { path: "orders.order.lineItems.image.urlExpirationDate" },
          { path: "orders.order.lineItems.digitalFile.expirationDate" },
          {
            path: "orders.order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "orders.order.shippingInfo.logistics.deliverByDate" },
          { path: "orders.order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "orders.order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "orders.order.activities.createdDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "orders.order.lineItems.image.focalPoint.x" },
          { path: "orders.order.lineItems.image.focalPoint.y" },
          { path: "orders.order.lineItems.physicalProperties.weight" },
          { path: "orders.order.billingInfo.address.geocode.latitude" },
          { path: "orders.order.billingInfo.address.geocode.longitude" },
          {
            path: "orders.order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "orders.order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "orders.order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "orders.order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "orders.order.recipientInfo.address.geocode.latitude" },
          { path: "orders.order.recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.BulkUpdateOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/bulk/orders/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.purchasedDate" },
            { path: "results.item.lineItems.image.urlExpirationDate" },
            { path: "results.item.lineItems.digitalFile.expirationDate" },
            {
              path: "results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "results.item.shippingInfo.logistics.deliverByDate" },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "results.item.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "results.item.lineItems.image.focalPoint.x" },
            { path: "results.item.lineItems.image.focalPoint.y" },
            { path: "results.item.lineItems.physicalProperties.weight" },
            { path: "results.item.billingInfo.address.geocode.latitude" },
            { path: "results.item.billingInfo.address.geocode.longitude" },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "results.item.recipientInfo.address.geocode.latitude" },
            { path: "results.item.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateOrders;
}
function commitDeltas(payload) {
  function __commitDeltas({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "changes.changedShippingInfo.logistics.deliverByDate" },
          {
            path: "changes.changedShippingInfo.logistics.deliveryTimeSlot.from"
          },
          { path: "changes.changedShippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "changes.lineItems.lineItem.image.urlExpirationDate" },
          { path: "changes.lineItems.lineItem.digitalFile.expirationDate" },
          {
            path: "changes.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "changes.changedShippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "changes.changedShippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "changes.changedShippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "changes.changedShippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "changes.changedBillingInfo.address.geocode.latitude" },
          { path: "changes.changedBillingInfo.address.geocode.longitude" },
          { path: "changes.changedRecipientInfo.address.geocode.latitude" },
          { path: "changes.changedRecipientInfo.address.geocode.longitude" },
          { path: "changes.lineItems.lineItem.physicalProperties.weight" },
          { path: "changes.lineItems.lineItem.image.focalPoint.x" },
          { path: "changes.lineItems.lineItem.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.CommitDeltas",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/commit-deltas",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __commitDeltas;
}
function updateOrderLineItem(payload) {
  function __updateOrderLineItem({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItem.image.urlExpirationDate" },
          { path: "lineItem.digitalFile.expirationDate" },
          { path: "lineItem.subscriptionInfo.subscriptionSettings.startDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItem.image.focalPoint.x" },
          { path: "lineItem.image.focalPoint.y" },
          { path: "lineItem.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateOrderLineItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/line-item/{lineItem.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrderLineItem;
}
function addActivity(payload) {
  function __addActivity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.AddActivity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/activities",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addActivity;
}
function updateActivity(payload) {
  function __updateActivity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateActivity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/activities/{activityId}",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateActivity;
}
function deleteActivity(payload) {
  function __deleteActivity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "DELETE",
      methodFqn: "com.wix.ecom.orders.v1.Orders.DeleteActivity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/activities/{activityId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteActivity;
}
function cancelOrder(payload) {
  function __cancelOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.CancelOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/cancel",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __cancelOrder;
}
function updateOrderStatus(payload) {
  function __updateOrderStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateOrderStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{orderId}/update-status",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrderStatus;
}
function aggregateOrders(payload) {
  function __aggregateOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.AggregateOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/aggregate",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __aggregateOrders;
}
function bulkUpdateOrderTags(payload) {
  function __bulkUpdateOrderTags({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/bulk/orders/update-tags",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkUpdateOrderTags;
}

// src/ecom-v1-order-orders.meta.ts
function preparePaymentCollection2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = preparePaymentCollection(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/prepare-payment-collection",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getPaymentCollectabilityStatus2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = getPaymentCollectabilityStatus(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/payments-collector/orders/{ecomOrderId}/payment-collectability-status",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function recordManuallyCollectedPayment2() {
  const payload = { orderId: ":orderId" };
  const getRequestOptions = recordManuallyCollectedPayment(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{orderId}/manual-payment",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function paymentCollectionMarkOrderAsPaid2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = paymentCollectionMarkOrderAsPaid(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/mark-as-paid",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function paymentCollectionBulkMarkOrdersAsPaid2() {
  const payload = {};
  const getRequestOptions = paymentCollectionBulkMarkOrdersAsPaid(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/bulk/payments-collector/mark-as-paid",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getRefundabilityStatus2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = getRefundabilityStatus(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/payments-collector/orders/{ecomOrderId}/refundability",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function paymentCollectionCreatePaymentGatewayOrder2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = paymentCollectionCreatePaymentGatewayOrder(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/create-payment-gateway-order",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function chargeMemberships2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = chargeMemberships(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/charge-membership",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function triggerRefund2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = triggerRefund(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/trigger-refund",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function voidAuthorizedPayments2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = voidAuthorizedPayments(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/void-authorized-payments",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function captureAuthorizedPayments2() {
  const payload = { ecomOrderId: ":ecomOrderId" };
  const getRequestOptions = captureAuthorizedPayments(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/payments-collector/orders/{ecomOrderId}/capture-authorized-payments",
    pathParams: { ecomOrderId: "ecomOrderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getOrder2() {
  const payload = { id: ":id" };
  const getRequestOptions = getOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/orders/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function searchOrders2() {
  const payload = {};
  const getRequestOptions = searchOrders(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders/search",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createOrder2() {
  const payload = {};
  const getRequestOptions = createOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateOrder2() {
  const payload = { order: { id: ":orderId" } };
  const getRequestOptions = updateOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/orders/{order.id}",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkUpdateOrders2() {
  const payload = {};
  const getRequestOptions = bulkUpdateOrders(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/bulk/orders/update",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function commitDeltas2() {
  const payload = { id: ":id" };
  const getRequestOptions = commitDeltas(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders/{id}/commit-deltas",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateOrderLineItem2() {
  const payload = { id: ":id", lineItem: { id: ":lineItemId" } };
  const getRequestOptions = updateOrderLineItem(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/orders/{id}/line-item/{lineItem.id}",
    pathParams: { id: "id", lineItemId: "lineItemId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function addActivity2() {
  const payload = { id: ":id" };
  const getRequestOptions = addActivity(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders/{id}/activities",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateActivity2() {
  const payload = { id: ":id", activityId: ":activityId" };
  const getRequestOptions = updateActivity(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/orders/{id}/activities/{activityId}",
    pathParams: { id: "id", activityId: "activityId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteActivity2() {
  const payload = { id: ":id", activityId: ":activityId" };
  const getRequestOptions = deleteActivity(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/orders/{id}/activities/{activityId}",
    pathParams: { id: "id", activityId: "activityId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function cancelOrder2() {
  const payload = { id: ":id" };
  const getRequestOptions = cancelOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders/{id}/cancel",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateOrderStatus2() {
  const payload = { orderId: ":orderId" };
  const getRequestOptions = updateOrderStatus(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders/{orderId}/update-status",
    pathParams: { orderId: "orderId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function aggregateOrders2() {
  const payload = {};
  const getRequestOptions = aggregateOrders(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/orders/aggregate",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkUpdateOrderTags2() {
  const payload = {};
  const getRequestOptions = bulkUpdateOrderTags(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/bulk/orders/update-tags",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
export {
  addActivity2 as addActivity,
  aggregateOrders2 as aggregateOrders,
  bulkUpdateOrderTags2 as bulkUpdateOrderTags,
  bulkUpdateOrders2 as bulkUpdateOrders,
  cancelOrder2 as cancelOrder,
  captureAuthorizedPayments2 as captureAuthorizedPayments,
  chargeMemberships2 as chargeMemberships,
  commitDeltas2 as commitDeltas,
  createOrder2 as createOrder,
  deleteActivity2 as deleteActivity,
  getOrder2 as getOrder,
  getPaymentCollectabilityStatus2 as getPaymentCollectabilityStatus,
  getRefundabilityStatus2 as getRefundabilityStatus,
  paymentCollectionBulkMarkOrdersAsPaid2 as paymentCollectionBulkMarkOrdersAsPaid,
  paymentCollectionCreatePaymentGatewayOrder2 as paymentCollectionCreatePaymentGatewayOrder,
  paymentCollectionMarkOrderAsPaid2 as paymentCollectionMarkOrderAsPaid,
  preparePaymentCollection2 as preparePaymentCollection,
  recordManuallyCollectedPayment2 as recordManuallyCollectedPayment,
  searchOrders2 as searchOrders,
  triggerRefund2 as triggerRefund,
  updateActivity2 as updateActivity,
  updateOrder2 as updateOrder,
  updateOrderLineItem2 as updateOrderLineItem,
  updateOrderStatus2 as updateOrderStatus,
  voidAuthorizedPayments2 as voidAuthorizedPayments
};
//# sourceMappingURL=meta.mjs.map