import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { P as Price, a as PreparePaymentCollectionOptions, b as PreparePaymentCollectionResponse, c as PreparePaymentCollectionApplicationErrors, G as GetPaymentCollectabilityStatusResponse, V as VoidAuthorizedPaymentsResponse, d as VoidAuthorizedPaymentsApplicationErrors, e as PaymentCapture, C as CaptureAuthorizedPaymentsResponse, f as CaptureAuthorizedPaymentsApplicationErrors, O as Order, g as GetOrderApplicationErrors, h as OrderSearch, S as SearchOrdersResponse, i as CreateOrderOptions, j as CreateOrderApplicationErrors, U as UpdateOrder, k as UpdateOrderApplicationErrors, M as MaskedOrder, B as BulkUpdateOrdersOptions, l as BulkUpdateOrdersResponse, m as CancelOrderOptions, n as CancelOrderResponse, o as CancelOrderApplicationErrors, p as BulkUpdateOrderTagsOptions, q as BulkUpdateOrderTagsResponse, r as OrderApprovedEnvelope, s as OrderUpdatedEnvelope, t as OrderCanceledEnvelope, u as OrderCreatedEnvelope, v as OrderPaymentStatusUpdatedEnvelope } from './ecom-v1-order-orders.universal-Bcw6NjJM.mjs';
export { db as ActionEvent, a9 as ActionType, id as ActionTypeWithLiterals, bm as Activity, bn as ActivityContentOneOf, Q as ActivityType, hZ as ActivityTypeWithLiterals, g8 as AddActivitiesRequest, g9 as AddActivitiesResponse, g4 as AddActivityRequest, g7 as AddActivityResponse, fJ as AddInternalActivityRequest, g3 as AddInternalActivityResponse, cg as AdditionalFee, f9 as AdditionalFeeDelta, fa as AdditionalFeeDeltaDeltaOneOf, cQ as AdditionalFeeRefund, a_ as Address, h4 as AddressDescription, b0 as AddressLocation, aZ as AddressWithContact, A as AdjustmentType, hO as AdjustmentTypeWithLiterals, hI as AggregateOrdersOptions, gM as AggregateOrdersRequest, gN as AggregateOrdersResponse, e6 as AggregatedRefundSummary, du as ApplicationError, be as AppliedDiscount, f7 as AppliedDiscountDelta, f8 as AppliedDiscountDeltaDeltaOneOf, bf as AppliedDiscountDiscountSourceOneOf, fj as ArchiveOrderRequest, fk as ArchiveOrderResponse, R as AttributionSource, h_ as AttributionSourceWithLiterals, dX as AuthorizationActionFailureDetails, dW as AuthorizationCapture, a6 as AuthorizationCaptureStatus, ia as AuthorizationCaptureStatusWithLiterals, dV as AuthorizationDetails, dY as AuthorizationVoid, a7 as AuthorizationVoidStatus, ib as AuthorizationVoidStatusWithLiterals, bK as AuthorizedPaymentCaptured, bJ as AuthorizedPaymentCreated, bL as AuthorizedPaymentVoided, cf as Balance, ce as BalanceSummary, hx as BaseEventMetadata, eu as BatchOfTriggerReindexOrderRequest, he as BigDecimalWrapper, aL as BillingAdjustment, aM as BillingAdjustmentPriceSummary, dv as BulkActionMetadata, fn as BulkArchiveOrdersByFilterRequest, fo as BulkArchiveOrdersByFilterResponse, fl as BulkArchiveOrdersRequest, fm as BulkArchiveOrdersResponse, gs as BulkMarkAsFulfilledByFilterRequest, gt as BulkMarkAsFulfilledByFilterResponse, gq as BulkMarkAsFulfilledRequest, gr as BulkMarkAsFulfilledResponse, gy as BulkMarkAsUnfulfilledByFilterRequest, gz as BulkMarkAsUnfulfilledByFilterResponse, gw as BulkMarkAsUnfulfilledRequest, gx as BulkMarkAsUnfulfilledResponse, dq as BulkMarkOrdersAsPaidRequest, dr as BulkMarkOrdersAsPaidResponse, ds as BulkOrderResult, cw as BulkSendBuyerPickupConfirmationEmailsRequest, cx as BulkSendBuyerPickupConfirmationEmailsResponse, cA as BulkSendBuyerShippingConfirmationEmailsRequest, cB as BulkSendBuyerShippingConfirmationEmailsResponse, gA as BulkSetBusinessLocationRequest, gB as BulkSetBusinessLocationResponse, gC as BulkSetBusinessLocationResult, ft as BulkUnArchiveOrdersByFilterRequest, fu as BulkUnArchiveOrdersByFilterResponse, fr as BulkUnArchiveOrdersRequest, fs as BulkUnArchiveOrdersResponse, gR as BulkUpdateOrderTagsRequest, gS as BulkUpdateOrderTagsResult, eY as BulkUpdateOrdersRequest, aV as BuyerInfo, aW as BuyerInfoIdOneOf, fw as BuyerInfoUpdate, ea as CalculateRefundItemRequest, ec as CalculateRefundItemResponse, e9 as CalculateRefundRequest, eb as CalculateRefundResponse, ho as CalculatedTax, hn as CalculatedTaxes, gY as Cancel, gj as CancelOrderRequest, ee as CaptureAuthorizedPaymentsRequest, ar as CatalogReference, cc as ChannelInfo, X as ChannelType, h$ as ChannelTypeWithLiterals, hA as ChargeMembershipsOptions, dD as ChargeMembershipsRequest, dH as ChargeMembershipsResponse, ef as ChargeSavedPaymentMethodRequest, eg as ChargeSavedPaymentMethodResponse, d_ as Chargeback, c8 as ChargebackCreated, c9 as ChargebackReversed, aa as ChargebackStatus, ie as ChargebackStatusWithLiterals, dB as ChargedBy, ax as Color, iz as CommitDeltasApplicationErrors, hD as CommitDeltasOptions, eZ as CommitDeltasRequest, fd as CommitDeltasResponse, ff as CommittedDiffs, fg as CommittedDiffsShippingUpdateInfoOneOf, h7 as CommonAddress, h8 as CommonAddressStreetOneOf, iB as CommonSearchWithEntityContext, h6 as Company, gX as Complete, ey as ContinueSideEffectsFlowInLegacyData, bg as Coupon, eS as CreateOrderRequest, eV as CreateOrderResponse, dA as CreatePaymentGatewayOrderRequest, dC as CreatePaymentGatewayOrderResponse, ca as CreatedBy, cb as CreatedByStringOneOf, bZ as CreditCardDetails, dU as CreditCardPaymentMethodDetails, aX as CurrencyConversionDetails, eI as CursorPaging, eR as CursorPagingMetadata, eP as CursorSearch, eQ as CursorSearchPagingMethodOneOf, eL as Cursors, bo as CustomActivity, cd as CustomField, al as CustomFieldGroup, ir as CustomFieldGroupWithLiterals, ht as CustomFieldValue, h1 as Customer, gP as DecrementData, gO as DecrementItemsQuantityRequest, gQ as DecrementItemsQuantityResponse, di as DelayedCaptureSettings, hH as DeleteActivityIdentifiers, gc as DeleteActivityRequest, gd as DeleteActivityResponse, em as DeleteByFilterOperation, el as DeleteByIdsOperation, b4 as DeliveryLogistics, b5 as DeliveryLogisticsAddressOneOf, b8 as DeliveryTimeSlot, ag as DeltaPaymentOptionType, il as DeltaPaymentOptionTypeWithLiterals, hv as Deposit, an as DepositType, it as DepositTypeWithLiterals, as as DescriptionLine, au as DescriptionLineDescriptionLineValueOneOf, av as DescriptionLineName, D as DescriptionLineType, hJ as DescriptionLineTypeWithLiterals, at as DescriptionLineValueOneOf, ew as DiffmatokyPayload, aF as DigitalFile, hl as Discount, hm as DiscountOneDiscountTypeOneOf, L as DiscountReason, hX as DiscountReasonWithLiterals, bj as DiscountRule, bk as DiscountRuleName, K as DiscountType, hW as DiscountTypeWithLiterals, d5 as DomainEvent, d6 as DomainEventBodyOneOf, fR as DownloadLinkSent, bu as DraftOrderChangesApplied, fb as DraftOrderCommitSettings, e_ as DraftOrderDiffs, f1 as DraftOrderDiffsBillingUpdateInfoOneOf, f0 as DraftOrderDiffsBuyerUpdateInfoOneOf, f2 as DraftOrderDiffsRecipientUpdateInfoOneOf, e$ as DraftOrderDiffsShippingUpdateInfoOneOf, dj as Duration, $ as DurationUnit, i3 as DurationUnitWithLiterals, h2 as Email, f_ as EmailEdited, dc as Empty, d7 as EntityCreatedEvent, da as EntityDeletedEvent, d9 as EntityUpdatedEvent, ex as ErrorInformation, hy as EventMetadata, aR as ExtendedFields, c5 as ExternalReceipt, e2 as ExternalReceiptInfo, ay as FocalPoint, aK as FreeTrialPeriod, fY as FulfillerEmailSent, F as FulfillmentStatus, gp as FulfillmentStatusUpdated, hR as FulfillmentStatusWithLiterals, ch as FulfillmentStatusesAggregate, b1 as FullAddressContactDetails, eB as GetOrderRequest, eC as GetOrderResponse, dk as GetPaymentCollectabilityStatusRequest, dw as GetRefundabilityStatusRequest, dx as GetRefundabilityStatusResponse, gK as GetShipmentsRequest, gL as GetShipmentsResponse, d$ as GiftCardPaymentDetails, bQ as GiftCardPaymentRefund, g$ as IdAndVersion, de as IdentificationData, df as IdentificationDataIdOneOf, eA as IndexingMessage, fK as InternalActivity, fL as InternalActivityContentOneOf, ej as InternalDocument, en as InternalDocumentUpdateByFilterOperation, ek as InternalDocumentUpdateOperation, eD as InternalQueryOrdersRequest, eJ as InternalQueryOrdersResponse, eo as InternalUpdateExistingOperation, ah as InventoryAction, im as InventoryActionWithLiterals, fc as InventoryUpdateDetails, fW as InvoiceAdded, hb as InvoiceDates, hs as InvoiceDynamicPriceTotals, h0 as InvoiceFields, fX as InvoiceSent, g_ as InvoiceSentEvent, ao as InvoiceStatus, iu as InvoiceStatusWithLiterals, hq as InvoicesPayment, f6 as ItemChangedDetails, dt as ItemMetadata, aU as ItemModifier, aC as ItemTaxFullDetails, aA as ItemType, I as ItemTypeItemType, aB as ItemTypeItemTypeDataOneOf, hK as ItemTypeItemTypeWithLiterals, hk as ItemizedFee, J as JurisdictionType, hM as JurisdictionTypeWithLiterals, hd as LineItem, bD as LineItemAmount, bx as LineItemChanges, fh as LineItemDelta, fi as LineItemDeltaDeltaOneOf, bl as LineItemDiscount, bt as LineItemExchangeData, hh as LineItemMetaData, bz as LineItemPriceChange, by as LineItemQuantityChange, N as LineItemQuantityChangeType, hY as LineItemQuantityChangeTypeWithLiterals, cP as LineItemRefund, e8 as LineItemRefundSummary, hf as LineItemTax, aE as LineItemTaxBreakdown, aD as LineItemTaxInfo, gf as LineItemUpdate, hc as LineItems, hi as Locale, ck as Location, aO as LocationAndQuantity, bE as ManagedAdditionalFee, bB as ManagedDiscount, bA as ManagedLineItem, a3 as ManuallyRefundableReason, i7 as ManuallyRefundableReasonWithLiterals, gn as MarkAsFulfilledRequest, go as MarkAsFulfilledResponse, gu as MarkAsUnfulfilledRequest, gv as MarkAsUnfulfilledResponse, dn as MarkOrderAsPaidRequest, dp as MarkOrderAsPaidResponse, gh as MarkOrderAsSeenByHumanRequest, gi as MarkOrderAsSeenByHumanResponse, fH as MaskedOrderLineItem, dE as MembershipChargeItem, dF as MembershipName, e0 as MembershipPaymentDetails, bR as MembershipPaymentRefund, ab as MembershipPaymentStatus, ig as MembershipPaymentStatusWithLiterals, bp as MerchantComment, bh as MerchantDiscount, bi as MerchantDiscountMerchantDiscountReasonOneOf, dd as MessageEnvelope, hr as MetaData, aS as ModifierGroup, bs as NewExchangeOrderCreated, a2 as NonRefundableReason, i6 as NonRefundableReasonWithLiterals, af as OrderApprovalStrategy, ik as OrderApprovalStrategyWithLiterals, cl as OrderApproved, fQ as OrderCanceled, gk as OrderCanceledEventOrderCanceled, bv as OrderChange, bw as OrderChangeValueOneOf, eU as OrderCreateNotifications, br as OrderCreatedFromExchange, eT as OrderCreationSettings, fe as OrderDeltasCommitted, fO as OrderFulfilled, co as OrderItemsRestocked, ap as OrderLineItem, f5 as OrderLineItemChangedDetails, fP as OrderNotFulfilled, fN as OrderPaid, g0 as OrderPartiallyPaid, g1 as OrderPending, fM as OrderPlaced, bq as OrderRefunded, g2 as OrderRejected, cn as OrderRejectedEventOrderRejected, hC as OrderSearchSpec, H as OrderStatus, hV as OrderStatusWithLiterals, bd as OrderTaxBreakdown, bc as OrderTaxInfo, dO as OrderTransactions, cm as OrdersExperiments, dP as Payment, b_ as PaymentCanceled, b$ as PaymentCanceledPaymentDetailsOneOf, a0 as PaymentCollectabilityStatus, i4 as PaymentCollectabilityStatusWithLiterals, ix as PaymentCollectionCreatePaymentGatewayOrderApplicationErrors, hz as PaymentCollectionCreatePaymentGatewayOrderOptions, iw as PaymentCollectionMarkOrderAsPaidApplicationErrors, c0 as PaymentDeclined, c1 as PaymentDeclinedPaymentDetailsOneOf, w as PaymentOptionType, hL as PaymentOptionTypeWithLiterals, dQ as PaymentPaymentDetailsOneOf, bV as PaymentPending, bW as PaymentPendingPaymentDetailsOneOf, dR as PaymentReceiptInfoOneOf, dJ as PaymentRefund, bT as PaymentRefundFailed, bS as PaymentRefunded, y as PaymentStatus, gF as PaymentStatusUpdated, hQ as PaymentStatusWithLiterals, hp as Payments, h5 as Phone, az as PhysicalProperties, b7 as PickupAddress, b6 as PickupDetails, E as PickupMethod, hU as PickupMethodWithLiterals, f$ as PickupReadyEmailSent, ai as Placement, io as PlacementWithLiterals, aw as PlainTextValue, eH as PlatformPaging, eK as PlatformPagingMetadata, eE as PlatformQuery, eF as PlatformQueryPagingMethodOneOf, dg as PreparePaymentCollectionRequest, cZ as PreviewBuyerConfirmationEmailRequest, c_ as PreviewBuyerConfirmationEmailResponse, cX as PreviewBuyerPaymentsReceivedEmailRequest, cY as PreviewBuyerPaymentsReceivedEmailResponse, c$ as PreviewBuyerPickupConfirmationEmailRequest, d0 as PreviewBuyerPickupConfirmationEmailResponse, cT as PreviewCancelEmailRequest, cU as PreviewCancelEmailResponse, cV as PreviewCancelRefundEmailRequest, cW as PreviewCancelRefundEmailResponse, cK as PreviewEmailByTypeRequest, cL as PreviewEmailByTypeResponse, Y as PreviewEmailType, i0 as PreviewEmailTypeWithLiterals, cM as PreviewRefundEmailRequest, cS as PreviewRefundEmailResponse, d3 as PreviewResendDownloadLinksEmailRequest, d4 as PreviewResendDownloadLinksEmailResponse, d1 as PreviewShippingConfirmationEmailRequest, d2 as PreviewShippingConfirmationEmailResponse, aN as PriceDescription, aY as PriceSummary, aq as ProductName, g5 as PublicActivity, g6 as PublicActivityContentOneOf, eM as QueryOrderRequest, eN as QueryOrderResponse, h3 as QuotesAddress, a8 as Reason, ic as ReasonWithLiterals, c2 as ReceiptCreated, c3 as ReceiptCreatedReceiptInfoOneOf, c6 as ReceiptSent, c7 as ReceiptSentReceiptInfoOneOf, iv as RecordManuallyCollectedPaymentApplicationErrors, dl as RecordManuallyCollectedPaymentRequest, dm as RecordManuallyCollectedPaymentResponse, dh as RedirectUrls, e3 as Refund, cN as RefundDetails, bM as RefundInitiated, cO as RefundItem, e7 as RefundItemsBreakdown, dK as RefundSideEffects, ac as RefundStatus, e5 as RefundStatusInfo, ih as RefundStatusWithLiterals, e4 as RefundTransaction, dy as Refundability, dz as RefundabilityAdditionalRefundabilityInfoOneOf, a1 as RefundableStatus, i5 as RefundableStatusWithLiterals, bU as RefundedAsStoreCredit, bN as RefundedPayment, bO as RefundedPaymentKindOneOf, bX as RegularPayment, dS as RegularPaymentDetails, dT as RegularPaymentDetailsPaymentMethodDetailsOneOf, bY as RegularPaymentPaymentMethodDetailsOneOf, bP as RegularPaymentRefund, gZ as Reschedule, dL as RestockInfo, dM as RestockItem, a4 as RestockType, i8 as RestockTypeWithLiterals, d8 as RestoreInfo, bI as SavedPaymentMethod, _ as ScheduledAction, i2 as ScheduledActionWithLiterals, eO as SearchOrdersRequest, cq as SendBuyerConfirmationEmailRequest, cr as SendBuyerConfirmationEmailResponse, cs as SendBuyerPaymentsReceivedEmailRequest, ct as SendBuyerPaymentsReceivedEmailResponse, cu as SendBuyerPickupConfirmationEmailRequest, cv as SendBuyerPickupConfirmationEmailResponse, cy as SendBuyerShippingConfirmationEmailRequest, cz as SendBuyerShippingConfirmationEmailResponse, cE as SendCancelRefundEmailRequest, cF as SendCancelRefundEmailResponse, cC as SendMerchantOrderReceivedNotificationRequest, cD as SendMerchantOrderReceivedNotificationResponse, cI as SendMerchantOrderReceivedPushRequest, cJ as SendMerchantOrderReceivedPushResponse, cG as SendRefundEmailRequest, cH as SendRefundEmailResponse, dG as ServiceProperties, fZ as ShippingAddressEdited, fV as ShippingConfirmationEmailSent, bH as ShippingInformation, bG as ShippingInformationChange, b9 as ShippingPrice, cR as ShippingRefund, ba as ShippingRegion, ez as SnapshotMessage, ae as SortOrder, ij as SortOrderWithLiterals, eG as Sorting, hg as Source, ak as SourceType, iq as SourceTypeWithLiterals, ha as StandardDetails, a$ as StreetAddress, h9 as Subdivision, aj as SubdivisionType, ip as SubdivisionTypeWithLiterals, aI as SubscriptionDescription, x as SubscriptionFrequency, hN as SubscriptionFrequencyWithLiterals, aG as SubscriptionInfo, aJ as SubscriptionSettings, aH as SubscriptionTitle, cj as TagList, ci as Tags, gT as Task, gV as TaskAction, gW as TaskActionActionOneOf, gU as TaskKey, bb as TaxSummary, aP as TaxableAddress, aQ as TaxableAddressTaxableAddressDataOneOf, T as TaxableAddressType, hP as TaxableAddressTypeWithLiterals, hj as TotalPrice, bF as TotalPriceChange, fU as TrackingLinkAdded, fS as TrackingNumberAdded, fT as TrackingNumberEdited, a5 as TransactionStatus, i9 as TransactionStatusWithLiterals, aT as TranslatableString, bC as TranslatedValue, iy as TriggerRefundApplicationErrors, hB as TriggerRefundOptions, dI as TriggerRefundRequest, dN as TriggerRefundResponse, ev as TriggerReindexOrderRequest, es as TriggerReindexRequest, et as TriggerReindexResponse, hw as TriggerSideEffectsFromLegacyData, fp as UnArchiveOrderRequest, fq as UnArchiveOrderResponse, hG as UpdateActivityIdentifiers, ga as UpdateActivityRequest, gb as UpdateActivityResponse, fC as UpdateBillingContactDetailsRequest, fD as UpdateBillingContactDetailsResponse, fy as UpdateBuyerEmailRequest, fz as UpdateBuyerEmailResponse, fv as UpdateBuyerInfoRequest, fx as UpdateBuyerInfoResponse, eh as UpdateInternalDocumentsEvent, ei as UpdateInternalDocumentsEventOperationOneOf, ge as UpdateLineItemsDescriptionLinesRequest, gg as UpdateLineItemsDescriptionLinesResponse, hF as UpdateOrderLineItem, hE as UpdateOrderLineItemIdentifiers, fE as UpdateOrderLineItemRequest, fF as UpdateOrderLineItemResponse, fG as UpdateOrderLineItemsRequest, fI as UpdateOrderLineItemsResponse, eW as UpdateOrderRequest, eX as UpdateOrderResponse, fA as UpdateOrderShippingAddressRequest, fB as UpdateOrderShippingAddressResponse, iA as UpdateOrderStatusApplicationErrors, gl as UpdateOrderStatusRequest, gm as UpdateOrderStatusResponse, gG as V1BulkMarkOrdersAsPaidRequest, gH as V1BulkMarkOrdersAsPaidResponse, gI as V1CreatePaymentGatewayOrderRequest, gJ as V1CreatePaymentGatewayOrderResponse, f3 as V1LineItemDelta, f4 as V1LineItemDeltaDeltaOneOf, gD as V1MarkOrderAsPaidRequest, gE as V1MarkOrderAsPaidResponse, cp as V1RestockItem, dZ as V1ScheduledAction, b3 as V1ShippingInformation, hu as Value, am as ValueType, is as ValueTypeWithLiterals, b2 as VatId, z as VatType, hT as VatTypeWithLiterals, eq as VersionedDeleteByIdsOperation, er as VersionedDocumentId, ep as VersionedDocumentUpdateOperation, ad as VersioningMode, ii as VersioningModeWithLiterals, ed as VoidAuthorizedPaymentsRequest, Z as WebhookIdentityType, i1 as WebhookIdentityTypeWithLiterals, W as WeightUnit, hS as WeightUnitWithLiterals, c4 as WixReceipt, e1 as WixReceiptInfo } from './ecom-v1-order-orders.universal-Bcw6NjJM.mjs';

declare function preparePaymentCollection$1(httpClient: HttpClient): PreparePaymentCollectionSignature;
interface PreparePaymentCollectionSignature {
    /**
     * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
     * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
     * 2nd step is an actual charge of prepared payment gateway order. This could be done either
     * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
     * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
     * @param - Ecom order ID.
     * @param - Amount to collect
     */
    (ecomOrderId: string, amount: Price, options?: PreparePaymentCollectionOptions): Promise<NonNullablePaths<PreparePaymentCollectionResponse, `paymentGatewayOrderId`, 2> & {
        __applicationErrorsType?: PreparePaymentCollectionApplicationErrors;
    }>;
}
declare function getPaymentCollectabilityStatus$1(httpClient: HttpClient): GetPaymentCollectabilityStatusSignature;
interface GetPaymentCollectabilityStatusSignature {
    /**
     * Provides payment collectability status for given order. If payment collection is possible
     * response will contain collectable amount for given ecom order. If not - response will contain
     * reason why payment collection is not possible.
     * @param - Ecom order ID.
     */
    (ecomOrderId: string): Promise<NonNullablePaths<GetPaymentCollectabilityStatusResponse, `status` | `amount.amount` | `amount.formattedAmount`, 3>>;
}
declare function voidAuthorizedPayments$1(httpClient: HttpClient): VoidAuthorizedPaymentsSignature;
interface VoidAuthorizedPaymentsSignature {
    /**
     * Void authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Payment IDs
     */
    (ecomOrderId: string, paymentIds: string[]): Promise<NonNullablePaths<VoidAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: VoidAuthorizedPaymentsApplicationErrors;
    }>;
}
declare function captureAuthorizedPayments$1(httpClient: HttpClient): CaptureAuthorizedPaymentsSignature;
interface CaptureAuthorizedPaymentsSignature {
    /**
     * Capture authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Capture payments information
     */
    (ecomOrderId: string, payments: NonNullablePaths<PaymentCapture, `paymentId`, 2>[]): Promise<NonNullablePaths<CaptureAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: CaptureAuthorizedPaymentsApplicationErrors;
    }>;
}
declare function getOrder$1(httpClient: HttpClient): GetOrderSignature;
interface GetOrderSignature {
    /**
     * Retrieves an order.
     *
     *
     * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
     *
     * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
     * @param - ID of the order to retrieve.
     * @returns Fulfilled - The requested order.
     */
    (_id: string): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
        __applicationErrorsType?: GetOrderApplicationErrors;
    }>;
}
declare function searchOrders$1(httpClient: HttpClient): SearchOrdersSignature;
interface SearchOrdersSignature {
    /**
     * Retrieves a list of orders, given the provided paging, filtering, and sorting.
     *
     *
     * Search Orders runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     * - `filter: {"status": {"$ne": "INITIALIZED"}}` - other order statuses can be queried, but orders with `status: "INITIALIZED"` are never returned
     *
     * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     * @param - Search options.
     */
    (search: OrderSearch): Promise<NonNullablePaths<SearchOrdersResponse, `orders` | `orders.${number}.number` | `orders.${number}.buyerInfo.visitorId` | `orders.${number}.buyerInfo.memberId` | `orders.${number}.paymentStatus` | `orders.${number}.fulfillmentStatus` | `orders.${number}.weightUnit` | `orders.${number}.taxIncludedInPrices` | `orders.${number}.shippingInfo.title` | `orders.${number}.status` | `orders.${number}.attributionSource` | `orders.${number}.createdBy.userId` | `orders.${number}.createdBy.memberId` | `orders.${number}.createdBy.visitorId` | `orders.${number}.createdBy.appId` | `orders.${number}.channelInfo.type` | `orders.${number}.balanceSummary.balance.amount` | `orders.${number}.balanceSummary.balance.formattedAmount` | `orders.${number}.businessLocation._id` | `orders.${number}.businessLocation.name`, 6>>;
}
declare function createOrder$1(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order.
     *
     *
     * The `createOrder()` function returns a Promise that resolves when the order is created.
     *
     * > **Notes:**
     * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
     * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
     * @param - Order info.
     * @returns Newly created order.
     */
    (order: NonNullablePaths<Order, `billingInfo.contactDetails` | `channelInfo` | `currencyConversionDetails.conversionRate` | `currencyConversionDetails.originalCurrency` | `lineItems` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.itemType` | `lineItems.${number}.price` | `lineItems.${number}.productName` | `lineItems.${number}.productName.original` | `lineItems.${number}.quantity` | `priceSummary`, 5>, options?: CreateOrderOptions): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
        __applicationErrorsType?: CreateOrderApplicationErrors;
    }>;
}
declare function updateOrder$1(httpClient: HttpClient): UpdateOrderSignature;
interface UpdateOrderSignature {
    /**
     * Updates an order.
     *
     *
     * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Order ID.
     * @returns Newly created order.
     */
    (_id: string, order: UpdateOrder): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
        __applicationErrorsType?: UpdateOrderApplicationErrors;
    }>;
}
declare function bulkUpdateOrders$1(httpClient: HttpClient): BulkUpdateOrdersSignature;
interface BulkUpdateOrdersSignature {
    /**
     * Updates up to 100 orders.
     *
     *
     * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `orders.order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Orders to update.
     */
    (orders: NonNullablePaths<MaskedOrder, `order` | `order._id`, 3>[], options?: BulkUpdateOrdersOptions): Promise<NonNullablePaths<BulkUpdateOrdersResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.number` | `results.${number}.item.buyerInfo.visitorId` | `results.${number}.item.buyerInfo.memberId` | `results.${number}.item.paymentStatus` | `results.${number}.item.fulfillmentStatus` | `results.${number}.item.weightUnit` | `results.${number}.item.taxIncludedInPrices` | `results.${number}.item.shippingInfo.title` | `results.${number}.item.status` | `results.${number}.item.attributionSource` | `results.${number}.item.createdBy.userId` | `results.${number}.item.createdBy.memberId` | `results.${number}.item.createdBy.visitorId` | `results.${number}.item.createdBy.appId` | `results.${number}.item.channelInfo.type` | `results.${number}.item.businessLocation._id` | `results.${number}.item.businessLocation.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function cancelOrder$1(httpClient: HttpClient): CancelOrderSignature;
interface CancelOrderSignature {
    /**
     * Cancels an order.
     *
     *
     * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
     * @param - Order ID.
     */
    (_id: string, options?: CancelOrderOptions): Promise<NonNullablePaths<CancelOrderResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7> & {
        __applicationErrorsType?: CancelOrderApplicationErrors;
    }>;
}
declare function bulkUpdateOrderTags$1(httpClient: HttpClient): BulkUpdateOrderTagsSignature;
interface BulkUpdateOrderTagsSignature {
    /**
     * Synchronously update tags on multiple orders, by list of order IDs.
     *
     * > **Note:** If the same tag is passed to both the `assignTags` and `unassignTags` fields, it will be assigned.
     * @param - IDs of orders to update tags for.
     */
    (orderIds: string[], options?: BulkUpdateOrderTagsOptions): Promise<NonNullablePaths<BulkUpdateOrderTagsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onOrderApproved$1: EventDefinition<OrderApprovedEnvelope, "wix.ecom.v1.order_approved">;
declare const onOrderUpdated$1: EventDefinition<OrderUpdatedEnvelope, "wix.ecom.v1.order_updated">;
declare const onOrderCanceled$1: EventDefinition<OrderCanceledEnvelope, "wix.ecom.v1.order_canceled">;
declare const onOrderCreated$1: EventDefinition<OrderCreatedEnvelope, "wix.ecom.v1.order_created">;
declare const onOrderPaymentStatusUpdated$1: EventDefinition<OrderPaymentStatusUpdatedEnvelope, "wix.ecom.v1.order_payment_status_updated">;

declare const preparePaymentCollection: MaybeContext<BuildRESTFunction<typeof preparePaymentCollection$1> & typeof preparePaymentCollection$1>;
declare const getPaymentCollectabilityStatus: MaybeContext<BuildRESTFunction<typeof getPaymentCollectabilityStatus$1> & typeof getPaymentCollectabilityStatus$1>;
declare const voidAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof voidAuthorizedPayments$1> & typeof voidAuthorizedPayments$1>;
declare const captureAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof captureAuthorizedPayments$1> & typeof captureAuthorizedPayments$1>;
declare const getOrder: MaybeContext<BuildRESTFunction<typeof getOrder$1> & typeof getOrder$1>;
declare const searchOrders: MaybeContext<BuildRESTFunction<typeof searchOrders$1> & typeof searchOrders$1>;
declare const createOrder: MaybeContext<BuildRESTFunction<typeof createOrder$1> & typeof createOrder$1>;
declare const updateOrder: MaybeContext<BuildRESTFunction<typeof updateOrder$1> & typeof updateOrder$1>;
declare const bulkUpdateOrders: MaybeContext<BuildRESTFunction<typeof bulkUpdateOrders$1> & typeof bulkUpdateOrders$1>;
declare const cancelOrder: MaybeContext<BuildRESTFunction<typeof cancelOrder$1> & typeof cancelOrder$1>;
declare const bulkUpdateOrderTags: MaybeContext<BuildRESTFunction<typeof bulkUpdateOrderTags$1> & typeof bulkUpdateOrderTags$1>;
/** */
declare const onOrderApproved: BuildEventDefinition<typeof onOrderApproved$1> & typeof onOrderApproved$1;
/** */
declare const onOrderUpdated: BuildEventDefinition<typeof onOrderUpdated$1> & typeof onOrderUpdated$1;
/**
 * Triggered when an order is canceled.
 * Learn more about [eCommerce webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderCanceled: BuildEventDefinition<typeof onOrderCanceled$1> & typeof onOrderCanceled$1;
/**
 * Triggered when an order is created.
 * Learn more about [webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderCreated: BuildEventDefinition<typeof onOrderCreated$1> & typeof onOrderCreated$1;
/**
 * Triggered when an order's payment status is updated.
 */
declare const onOrderPaymentStatusUpdated: BuildEventDefinition<typeof onOrderPaymentStatusUpdated$1> & typeof onOrderPaymentStatusUpdated$1;

export { BulkUpdateOrderTagsOptions, BulkUpdateOrderTagsResponse, BulkUpdateOrdersOptions, BulkUpdateOrdersResponse, CancelOrderApplicationErrors, CancelOrderOptions, CancelOrderResponse, CaptureAuthorizedPaymentsApplicationErrors, CaptureAuthorizedPaymentsResponse, CreateOrderApplicationErrors, CreateOrderOptions, GetOrderApplicationErrors, GetPaymentCollectabilityStatusResponse, MaskedOrder, Order, OrderApprovedEnvelope, OrderCanceledEnvelope, OrderCreatedEnvelope, OrderPaymentStatusUpdatedEnvelope, OrderSearch, OrderUpdatedEnvelope, PaymentCapture, PreparePaymentCollectionApplicationErrors, PreparePaymentCollectionOptions, PreparePaymentCollectionResponse, Price, SearchOrdersResponse, UpdateOrder, UpdateOrderApplicationErrors, VoidAuthorizedPaymentsApplicationErrors, VoidAuthorizedPaymentsResponse, bulkUpdateOrderTags, bulkUpdateOrders, cancelOrder, captureAuthorizedPayments, createOrder, getOrder, getPaymentCollectabilityStatus, onOrderApproved, onOrderCanceled, onOrderCreated, onOrderPaymentStatusUpdated, onOrderUpdated, preparePaymentCollection, searchOrders, updateOrder, voidAuthorizedPayments };
