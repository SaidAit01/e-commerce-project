// src/ecom-v1-order-orders.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTAddressToSDKAddress as transformRESTAddressToSDKAddress2 } from "@wix/sdk-runtime/transformations/address";
import { transformRESTFloatToSDKFloat as transformRESTFloatToSDKFloat2 } from "@wix/sdk-runtime/transformations/float";
import { transformRESTImageToSDKImage as transformRESTImageToSDKImage2 } from "@wix/sdk-runtime/transformations/image";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/ecom-v1-order-orders.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-order-orders.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomOrdersV1OrdersUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/ecom-orders",
        destPath: ""
      },
      {
        srcPath: "/_api/orders",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/ecom-orders",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/bulk/orders",
        destPath: "/v1/bulk/orders"
      },
      {
        srcPath: "/ecom/v1/orders",
        destPath: "/v1/orders"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/payments-collector",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/payments-collector",
        destPath: "/v1/payments-collector"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/payments-collector",
        destPath: "/v1/payments-collector"
      },
      {
        srcPath: "/_api/v1/payments-collector",
        destPath: "/v1/payments-collector"
      },
      {
        srcPath: "/v1/payments-collector",
        destPath: "/v1/payments-collector"
      },
      {
        srcPath: "/_api/payments-collector",
        destPath: "/v1/payments-collector"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_orders";
function preparePaymentCollection(payload) {
  function __preparePaymentCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/prepare-payment-collection",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __preparePaymentCollection;
}
function getPaymentCollectabilityStatus(payload) {
  function __getPaymentCollectabilityStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/payment-collectability-status",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getPaymentCollectabilityStatus;
}
function recordManuallyCollectedPayment(payload) {
  function __recordManuallyCollectedPayment({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.RecordManuallyCollectedPayment",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{orderId}/manual-payment",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __recordManuallyCollectedPayment;
}
function paymentCollectionMarkOrderAsPaid(payload) {
  function __paymentCollectionMarkOrderAsPaid({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.MarkOrderAsPaid",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/mark-as-paid",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __paymentCollectionMarkOrderAsPaid;
}
function paymentCollectionBulkMarkOrdersAsPaid(payload) {
  function __paymentCollectionBulkMarkOrdersAsPaid({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.BulkMarkOrdersAsPaid",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/bulk/payments-collector/mark-as-paid",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.purchasedDate" },
            { path: "results.item.lineItems.image.urlExpirationDate" },
            { path: "results.item.lineItems.digitalFile.expirationDate" },
            {
              path: "results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "results.item.shippingInfo.logistics.deliverByDate" },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "results.item.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "results.item.lineItems.image.focalPoint.x" },
            { path: "results.item.lineItems.image.focalPoint.y" },
            { path: "results.item.lineItems.physicalProperties.weight" },
            { path: "results.item.billingInfo.address.geocode.latitude" },
            { path: "results.item.billingInfo.address.geocode.longitude" },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "results.item.recipientInfo.address.geocode.latitude" },
            { path: "results.item.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __paymentCollectionBulkMarkOrdersAsPaid;
}
function getRefundabilityStatus(payload) {
  function __getRefundabilityStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetRefundabilityStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/refundability",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getRefundabilityStatus;
}
function paymentCollectionCreatePaymentGatewayOrder(payload) {
  function __paymentCollectionCreatePaymentGatewayOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CreatePaymentGatewayOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/create-payment-gateway-order",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __paymentCollectionCreatePaymentGatewayOrder;
}
function chargeMemberships(payload) {
  function __chargeMemberships({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "membershipCharges.serviceProperties.scheduledDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.ChargeMemberships",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/charge-membership",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __chargeMemberships;
}
function triggerRefund(payload) {
  function __triggerRefund({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.TriggerRefund",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/trigger-refund",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __triggerRefund;
}
function voidAuthorizedPayments(payload) {
  function __voidAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/void-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __voidAuthorizedPayments;
}
function captureAuthorizedPayments(payload) {
  function __captureAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
        protoPath: "/v1/payments-collector/orders/{ecomOrderId}/capture-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __captureAuthorizedPayments;
}
function getOrder(payload) {
  function __getOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.v1.Orders.GetOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrder;
}
function searchOrders(payload) {
  function __searchOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.SearchOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/search",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orders.createdDate" },
            { path: "orders.updatedDate" },
            { path: "orders.purchasedDate" },
            { path: "orders.lineItems.image.urlExpirationDate" },
            { path: "orders.lineItems.digitalFile.expirationDate" },
            {
              path: "orders.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "orders.shippingInfo.logistics.deliverByDate" },
            { path: "orders.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "orders.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "orders.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "orders.lineItems.image.focalPoint.x" },
            { path: "orders.lineItems.image.focalPoint.y" },
            { path: "orders.lineItems.physicalProperties.weight" },
            { path: "orders.billingInfo.address.geocode.latitude" },
            { path: "orders.billingInfo.address.geocode.longitude" },
            {
              path: "orders.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "orders.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "orders.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "orders.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "orders.recipientInfo.address.geocode.latitude" },
            { path: "orders.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __searchOrders;
}
function createOrder(payload) {
  function __createOrder({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "order.createdDate" },
          { path: "order.updatedDate" },
          { path: "order.purchasedDate" },
          { path: "order.lineItems.image.urlExpirationDate" },
          { path: "order.lineItems.digitalFile.expirationDate" },
          {
            path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "order.shippingInfo.logistics.deliverByDate" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "order.activities.createdDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "order.lineItems.image.focalPoint.x" },
          { path: "order.lineItems.image.focalPoint.y" },
          { path: "order.lineItems.physicalProperties.weight" },
          { path: "order.billingInfo.address.geocode.latitude" },
          { path: "order.billingInfo.address.geocode.longitude" },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "order.recipientInfo.address.geocode.latitude" },
          { path: "order.recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.CreateOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createOrder;
}
function updateOrder(payload) {
  function __updateOrder({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "order.createdDate" },
          { path: "order.updatedDate" },
          { path: "order.purchasedDate" },
          { path: "order.lineItems.image.urlExpirationDate" },
          { path: "order.lineItems.digitalFile.expirationDate" },
          {
            path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "order.shippingInfo.logistics.deliverByDate" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "order.activities.createdDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "order.lineItems.image.focalPoint.x" },
          { path: "order.lineItems.image.focalPoint.y" },
          { path: "order.lineItems.physicalProperties.weight" },
          { path: "order.billingInfo.address.geocode.latitude" },
          { path: "order.billingInfo.address.geocode.longitude" },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "order.recipientInfo.address.geocode.latitude" },
          { path: "order.recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{order.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrder;
}
function bulkUpdateOrders(payload) {
  function __bulkUpdateOrders({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "orders.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "orders.order.createdDate" },
          { path: "orders.order.updatedDate" },
          { path: "orders.order.purchasedDate" },
          { path: "orders.order.lineItems.image.urlExpirationDate" },
          { path: "orders.order.lineItems.digitalFile.expirationDate" },
          {
            path: "orders.order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "orders.order.shippingInfo.logistics.deliverByDate" },
          { path: "orders.order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "orders.order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "orders.order.activities.createdDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "orders.order.lineItems.image.focalPoint.x" },
          { path: "orders.order.lineItems.image.focalPoint.y" },
          { path: "orders.order.lineItems.physicalProperties.weight" },
          { path: "orders.order.billingInfo.address.geocode.latitude" },
          { path: "orders.order.billingInfo.address.geocode.longitude" },
          {
            path: "orders.order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "orders.order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "orders.order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "orders.order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "orders.order.recipientInfo.address.geocode.latitude" },
          { path: "orders.order.recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.BulkUpdateOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/bulk/orders/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.purchasedDate" },
            { path: "results.item.lineItems.image.urlExpirationDate" },
            { path: "results.item.lineItems.digitalFile.expirationDate" },
            {
              path: "results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "results.item.shippingInfo.logistics.deliverByDate" },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "results.item.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "results.item.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "results.item.lineItems.image.focalPoint.x" },
            { path: "results.item.lineItems.image.focalPoint.y" },
            { path: "results.item.lineItems.physicalProperties.weight" },
            { path: "results.item.billingInfo.address.geocode.latitude" },
            { path: "results.item.billingInfo.address.geocode.longitude" },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "results.item.recipientInfo.address.geocode.latitude" },
            { path: "results.item.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateOrders;
}
function commitDeltas(payload) {
  function __commitDeltas({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "changes.changedShippingInfo.logistics.deliverByDate" },
          {
            path: "changes.changedShippingInfo.logistics.deliveryTimeSlot.from"
          },
          { path: "changes.changedShippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "changes.lineItems.lineItem.image.urlExpirationDate" },
          { path: "changes.lineItems.lineItem.digitalFile.expirationDate" },
          {
            path: "changes.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "changes.changedShippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "changes.changedShippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "changes.changedShippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "changes.changedShippingInfo.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "changes.changedBillingInfo.address.geocode.latitude" },
          { path: "changes.changedBillingInfo.address.geocode.longitude" },
          { path: "changes.changedRecipientInfo.address.geocode.latitude" },
          { path: "changes.changedRecipientInfo.address.geocode.longitude" },
          { path: "changes.lineItems.lineItem.physicalProperties.weight" },
          { path: "changes.lineItems.lineItem.image.focalPoint.x" },
          { path: "changes.lineItems.lineItem.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.CommitDeltas",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/commit-deltas",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __commitDeltas;
}
function updateOrderLineItem(payload) {
  function __updateOrderLineItem({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItem.image.urlExpirationDate" },
          { path: "lineItem.digitalFile.expirationDate" },
          { path: "lineItem.subscriptionInfo.subscriptionSettings.startDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItem.image.focalPoint.x" },
          { path: "lineItem.image.focalPoint.y" },
          { path: "lineItem.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateOrderLineItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/line-item/{lineItem.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrderLineItem;
}
function addActivity(payload) {
  function __addActivity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.AddActivity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/activities",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addActivity;
}
function updateActivity(payload) {
  function __updateActivity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "PATCH",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateActivity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/activities/{activityId}",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateActivity;
}
function deleteActivity(payload) {
  function __deleteActivity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "DELETE",
      methodFqn: "com.wix.ecom.orders.v1.Orders.DeleteActivity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/activities/{activityId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteActivity;
}
function cancelOrder(payload) {
  function __cancelOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.CancelOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{id}/cancel",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __cancelOrder;
}
function updateOrderStatus(payload) {
  function __updateOrderStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.UpdateOrderStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/{orderId}/update-status",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "order.createdDate" },
            { path: "order.updatedDate" },
            { path: "order.purchasedDate" },
            { path: "order.lineItems.image.urlExpirationDate" },
            { path: "order.lineItems.digitalFile.expirationDate" },
            {
              path: "order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "order.shippingInfo.logistics.deliverByDate" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.from" },
            { path: "order.shippingInfo.logistics.deliveryTimeSlot.to" },
            { path: "order.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "order.lineItems.image.focalPoint.x" },
            { path: "order.lineItems.image.focalPoint.y" },
            { path: "order.lineItems.physicalProperties.weight" },
            { path: "order.billingInfo.address.geocode.latitude" },
            { path: "order.billingInfo.address.geocode.longitude" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "order.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "order.recipientInfo.address.geocode.latitude" },
            { path: "order.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrderStatus;
}
function aggregateOrders(payload) {
  function __aggregateOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.AggregateOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/orders/aggregate",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __aggregateOrders;
}
function bulkUpdateOrderTags(payload) {
  function __bulkUpdateOrderTags({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersV1OrdersUrl({
        protoPath: "/v1/bulk/orders/update-tags",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkUpdateOrderTags;
}

// src/ecom-v1-order-orders.universal.ts
import { transformSDKAddressToRESTAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var AdjustmentType = /* @__PURE__ */ ((AdjustmentType2) => {
  AdjustmentType2["UNKNOWN_ADJUSTMENT_TYPE"] = "UNKNOWN_ADJUSTMENT_TYPE";
  AdjustmentType2["EXTRA_CHARGE"] = "EXTRA_CHARGE";
  AdjustmentType2["CREDIT"] = "CREDIT";
  return AdjustmentType2;
})(AdjustmentType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var PaymentStatus = /* @__PURE__ */ ((PaymentStatus2) => {
  PaymentStatus2["UNSPECIFIED"] = "UNSPECIFIED";
  PaymentStatus2["NOT_PAID"] = "NOT_PAID";
  PaymentStatus2["PAID"] = "PAID";
  PaymentStatus2["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
  PaymentStatus2["FULLY_REFUNDED"] = "FULLY_REFUNDED";
  PaymentStatus2["PENDING"] = "PENDING";
  PaymentStatus2["PARTIALLY_PAID"] = "PARTIALLY_PAID";
  PaymentStatus2["PENDING_MERCHANT"] = "PENDING_MERCHANT";
  PaymentStatus2["CANCELED"] = "CANCELED";
  PaymentStatus2["DECLINED"] = "DECLINED";
  return PaymentStatus2;
})(PaymentStatus || {});
var FulfillmentStatus = /* @__PURE__ */ ((FulfillmentStatus2) => {
  FulfillmentStatus2["NOT_FULFILLED"] = "NOT_FULFILLED";
  FulfillmentStatus2["FULFILLED"] = "FULFILLED";
  FulfillmentStatus2["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
  return FulfillmentStatus2;
})(FulfillmentStatus || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var OrderStatus = /* @__PURE__ */ ((OrderStatus2) => {
  OrderStatus2["INITIALIZED"] = "INITIALIZED";
  OrderStatus2["APPROVED"] = "APPROVED";
  OrderStatus2["CANCELED"] = "CANCELED";
  OrderStatus2["PENDING"] = "PENDING";
  OrderStatus2["REJECTED"] = "REJECTED";
  return OrderStatus2;
})(OrderStatus || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var DiscountReason = /* @__PURE__ */ ((DiscountReason2) => {
  DiscountReason2["UNSPECIFIED"] = "UNSPECIFIED";
  DiscountReason2["EXCHANGED_ITEMS"] = "EXCHANGED_ITEMS";
  DiscountReason2["BILLING_ADJUSTMENT"] = "BILLING_ADJUSTMENT";
  return DiscountReason2;
})(DiscountReason || {});
var LineItemQuantityChangeType = /* @__PURE__ */ ((LineItemQuantityChangeType2) => {
  LineItemQuantityChangeType2["QUANTITY_INCREASED"] = "QUANTITY_INCREASED";
  LineItemQuantityChangeType2["QUANTITY_DECREASED"] = "QUANTITY_DECREASED";
  return LineItemQuantityChangeType2;
})(LineItemQuantityChangeType || {});
var ActivityType = /* @__PURE__ */ ((ActivityType2) => {
  ActivityType2["ORDER_REFUNDED"] = "ORDER_REFUNDED";
  ActivityType2["ORDER_PLACED"] = "ORDER_PLACED";
  ActivityType2["ORDER_PAID"] = "ORDER_PAID";
  ActivityType2["ORDER_FULFILLED"] = "ORDER_FULFILLED";
  ActivityType2["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
  ActivityType2["ORDER_CANCELED"] = "ORDER_CANCELED";
  ActivityType2["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
  ActivityType2["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
  ActivityType2["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
  ActivityType2["TRACKING_LINK_ADDED"] = "TRACKING_LINK_ADDED";
  ActivityType2["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
  ActivityType2["INVOICE_ADDED"] = "INVOICE_ADDED";
  ActivityType2["INVOICE_REMOVED"] = "INVOICE_REMOVED";
  ActivityType2["INVOICE_SENT"] = "INVOICE_SENT";
  ActivityType2["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
  ActivityType2["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
  ActivityType2["EMAIL_EDITED"] = "EMAIL_EDITED";
  ActivityType2["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
  ActivityType2["CUSTOM_ACTIVITY"] = "CUSTOM_ACTIVITY";
  ActivityType2["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
  ActivityType2["ORDER_CREATED_FROM_EXCHANGE"] = "ORDER_CREATED_FROM_EXCHANGE";
  ActivityType2["NEW_EXCHANGE_ORDER_CREATED"] = "NEW_EXCHANGE_ORDER_CREATED";
  ActivityType2["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
  ActivityType2["DRAFT_ORDER_CHANGES_APPLIED"] = "DRAFT_ORDER_CHANGES_APPLIED";
  ActivityType2["SAVED_PAYMENT_METHOD"] = "SAVED_PAYMENT_METHOD";
  ActivityType2["PAYMENT_PENDING"] = "PAYMENT_PENDING";
  ActivityType2["PAYMENT_CANCELED"] = "PAYMENT_CANCELED";
  ActivityType2["PAYMENT_DECLINED"] = "PAYMENT_DECLINED";
  ActivityType2["ORDER_PENDING"] = "ORDER_PENDING";
  ActivityType2["ORDER_REJECTED"] = "ORDER_REJECTED";
  return ActivityType2;
})(ActivityType || {});
var AttributionSource = /* @__PURE__ */ ((AttributionSource2) => {
  AttributionSource2["UNSPECIFIED"] = "UNSPECIFIED";
  AttributionSource2["FACEBOOK_ADS"] = "FACEBOOK_ADS";
  return AttributionSource2;
})(AttributionSource || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var PreviewEmailType = /* @__PURE__ */ ((PreviewEmailType2) => {
  PreviewEmailType2["ORDER_PLACED"] = "ORDER_PLACED";
  PreviewEmailType2["DOWNLOAD_LINKS"] = "DOWNLOAD_LINKS";
  PreviewEmailType2["ORDER_SHIPPED"] = "ORDER_SHIPPED";
  PreviewEmailType2["ORDER_READY_FOR_PICKUP"] = "ORDER_READY_FOR_PICKUP";
  return PreviewEmailType2;
})(PreviewEmailType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
var ScheduledAction = /* @__PURE__ */ ((ScheduledAction2) => {
  ScheduledAction2["UNSPECIFIED"] = "UNSPECIFIED";
  ScheduledAction2["VOID"] = "VOID";
  ScheduledAction2["CAPTURE"] = "CAPTURE";
  return ScheduledAction2;
})(ScheduledAction || {});
var DurationUnit = /* @__PURE__ */ ((DurationUnit2) => {
  DurationUnit2["UNKNOWN_DURATION_UNIT"] = "UNKNOWN_DURATION_UNIT";
  DurationUnit2["MINUTES"] = "MINUTES";
  DurationUnit2["HOURS"] = "HOURS";
  DurationUnit2["DAYS"] = "DAYS";
  return DurationUnit2;
})(DurationUnit || {});
var PaymentCollectabilityStatus = /* @__PURE__ */ ((PaymentCollectabilityStatus2) => {
  PaymentCollectabilityStatus2["UNKNOWN"] = "UNKNOWN";
  PaymentCollectabilityStatus2["COLLECTABLE"] = "COLLECTABLE";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_ORDER_IS_CANCELLED"] = "NONCOLLECTABLE_ORDER_IS_CANCELLED";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_ORDER_IS_PAID"] = "NONCOLLECTABLE_ORDER_IS_PAID";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_MISSING_PAYMENT_METHOD"] = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_ORDER_IS_PENDING"] = "NONCOLLECTABLE_ORDER_IS_PENDING";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_ORDER_IS_REJECTED"] = "NONCOLLECTABLE_ORDER_IS_REJECTED";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS"] = "NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS";
  PaymentCollectabilityStatus2["NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS"] = "NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS";
  return PaymentCollectabilityStatus2;
})(PaymentCollectabilityStatus || {});
var RefundableStatus = /* @__PURE__ */ ((RefundableStatus2) => {
  RefundableStatus2["NOT_REFUNDABLE"] = "NOT_REFUNDABLE";
  RefundableStatus2["MANUAL"] = "MANUAL";
  RefundableStatus2["REFUNDABLE"] = "REFUNDABLE";
  return RefundableStatus2;
})(RefundableStatus || {});
var NonRefundableReason = /* @__PURE__ */ ((NonRefundableReason2) => {
  NonRefundableReason2["NONE"] = "NONE";
  NonRefundableReason2["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
  NonRefundableReason2["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
  NonRefundableReason2["INTERNAL_ERROR"] = "INTERNAL_ERROR";
  NonRefundableReason2["NOT_PAID"] = "NOT_PAID";
  NonRefundableReason2["ACCESS_DENIED"] = "ACCESS_DENIED";
  NonRefundableReason2["ZERO_PRICE"] = "ZERO_PRICE";
  NonRefundableReason2["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
  NonRefundableReason2["PENDING_REFUND"] = "PENDING_REFUND";
  NonRefundableReason2["FORBIDDEN"] = "FORBIDDEN";
  NonRefundableReason2["TRANSACTION_NOT_FOUND"] = "TRANSACTION_NOT_FOUND";
  NonRefundableReason2["ORDER_IS_PENDING"] = "ORDER_IS_PENDING";
  NonRefundableReason2["ORDER_IS_REJECTED"] = "ORDER_IS_REJECTED";
  return NonRefundableReason2;
})(NonRefundableReason || {});
var ManuallyRefundableReason = /* @__PURE__ */ ((ManuallyRefundableReason2) => {
  ManuallyRefundableReason2["EXPIRED"] = "EXPIRED";
  ManuallyRefundableReason2["NOT_SUPPORTED"] = "NOT_SUPPORTED";
  ManuallyRefundableReason2["OFFLINE"] = "OFFLINE";
  ManuallyRefundableReason2["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
  return ManuallyRefundableReason2;
})(ManuallyRefundableReason || {});
var RestockType = /* @__PURE__ */ ((RestockType2) => {
  RestockType2["NO_ITEMS"] = "NO_ITEMS";
  RestockType2["ALL_ITEMS"] = "ALL_ITEMS";
  RestockType2["SOME_ITEMS"] = "SOME_ITEMS";
  return RestockType2;
})(RestockType || {});
var TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {
  TransactionStatus2["UNDEFINED"] = "UNDEFINED";
  TransactionStatus2["APPROVED"] = "APPROVED";
  TransactionStatus2["PENDING"] = "PENDING";
  TransactionStatus2["PENDING_MERCHANT"] = "PENDING_MERCHANT";
  TransactionStatus2["CANCELED"] = "CANCELED";
  TransactionStatus2["DECLINED"] = "DECLINED";
  TransactionStatus2["REFUNDED"] = "REFUNDED";
  TransactionStatus2["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
  TransactionStatus2["AUTHORIZED"] = "AUTHORIZED";
  TransactionStatus2["VOIDED"] = "VOIDED";
  return TransactionStatus2;
})(TransactionStatus || {});
var AuthorizationCaptureStatus = /* @__PURE__ */ ((AuthorizationCaptureStatus2) => {
  AuthorizationCaptureStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  AuthorizationCaptureStatus2["PENDING"] = "PENDING";
  AuthorizationCaptureStatus2["SUCCEEDED"] = "SUCCEEDED";
  AuthorizationCaptureStatus2["FAILED"] = "FAILED";
  return AuthorizationCaptureStatus2;
})(AuthorizationCaptureStatus || {});
var AuthorizationVoidStatus = /* @__PURE__ */ ((AuthorizationVoidStatus2) => {
  AuthorizationVoidStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  AuthorizationVoidStatus2["PENDING"] = "PENDING";
  AuthorizationVoidStatus2["SUCCEEDED"] = "SUCCEEDED";
  AuthorizationVoidStatus2["FAILED"] = "FAILED";
  return AuthorizationVoidStatus2;
})(AuthorizationVoidStatus || {});
var Reason = /* @__PURE__ */ ((Reason2) => {
  Reason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  Reason2["MANUAL"] = "MANUAL";
  Reason2["SCHEDULED"] = "SCHEDULED";
  return Reason2;
})(Reason || {});
var ActionType = /* @__PURE__ */ ((ActionType2) => {
  ActionType2["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
  ActionType2["VOID"] = "VOID";
  ActionType2["CAPTURE"] = "CAPTURE";
  return ActionType2;
})(ActionType || {});
var ChargebackStatus = /* @__PURE__ */ ((ChargebackStatus2) => {
  ChargebackStatus2["UNSPECIFIED"] = "UNSPECIFIED";
  ChargebackStatus2["APPROVED"] = "APPROVED";
  ChargebackStatus2["REVERSED"] = "REVERSED";
  return ChargebackStatus2;
})(ChargebackStatus || {});
var MembershipPaymentStatus = /* @__PURE__ */ ((MembershipPaymentStatus2) => {
  MembershipPaymentStatus2["CHARGED"] = "CHARGED";
  MembershipPaymentStatus2["CHARGE_FAILED"] = "CHARGE_FAILED";
  return MembershipPaymentStatus2;
})(MembershipPaymentStatus || {});
var RefundStatus = /* @__PURE__ */ ((RefundStatus2) => {
  RefundStatus2["PENDING"] = "PENDING";
  RefundStatus2["SUCCEEDED"] = "SUCCEEDED";
  RefundStatus2["FAILED"] = "FAILED";
  RefundStatus2["SCHEDULED"] = "SCHEDULED";
  RefundStatus2["STARTED"] = "STARTED";
  return RefundStatus2;
})(RefundStatus || {});
var VersioningMode = /* @__PURE__ */ ((VersioningMode2) => {
  VersioningMode2["DEFAULT"] = "DEFAULT";
  VersioningMode2["GREATER_THAN"] = "GREATER_THAN";
  VersioningMode2["GREATER_OR_EQUAL"] = "GREATER_OR_EQUAL";
  return VersioningMode2;
})(VersioningMode || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var OrderApprovalStrategy = /* @__PURE__ */ ((OrderApprovalStrategy2) => {
  OrderApprovalStrategy2["DEFAULT"] = "DEFAULT";
  OrderApprovalStrategy2["PAYMENT_RECEIVED"] = "PAYMENT_RECEIVED";
  OrderApprovalStrategy2["PAYMENT_METHOD_SAVED"] = "PAYMENT_METHOD_SAVED";
  return OrderApprovalStrategy2;
})(OrderApprovalStrategy || {});
var DeltaPaymentOptionType = /* @__PURE__ */ ((DeltaPaymentOptionType2) => {
  DeltaPaymentOptionType2["UNKNOWN_PAYMENT_OPTION"] = "UNKNOWN_PAYMENT_OPTION";
  DeltaPaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  DeltaPaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  return DeltaPaymentOptionType2;
})(DeltaPaymentOptionType || {});
var InventoryAction = /* @__PURE__ */ ((InventoryAction2) => {
  InventoryAction2["RESTOCK"] = "RESTOCK";
  InventoryAction2["DECREASE"] = "DECREASE";
  return InventoryAction2;
})(InventoryAction || {});
var Placement = /* @__PURE__ */ ((Placement2) => {
  Placement2["Unknown"] = "Unknown";
  Placement2["Replace"] = "Replace";
  Placement2["Before"] = "Before";
  Placement2["After"] = "After";
  return Placement2;
})(Placement || {});
var SubdivisionType = /* @__PURE__ */ ((SubdivisionType2) => {
  SubdivisionType2["UNKNOWN_SUBDIVISION_TYPE"] = "UNKNOWN_SUBDIVISION_TYPE";
  SubdivisionType2["ADMINISTRATIVE_AREA_LEVEL_1"] = "ADMINISTRATIVE_AREA_LEVEL_1";
  SubdivisionType2["ADMINISTRATIVE_AREA_LEVEL_2"] = "ADMINISTRATIVE_AREA_LEVEL_2";
  SubdivisionType2["ADMINISTRATIVE_AREA_LEVEL_3"] = "ADMINISTRATIVE_AREA_LEVEL_3";
  SubdivisionType2["ADMINISTRATIVE_AREA_LEVEL_4"] = "ADMINISTRATIVE_AREA_LEVEL_4";
  SubdivisionType2["ADMINISTRATIVE_AREA_LEVEL_5"] = "ADMINISTRATIVE_AREA_LEVEL_5";
  SubdivisionType2["COUNTRY"] = "COUNTRY";
  return SubdivisionType2;
})(SubdivisionType || {});
var SourceType = /* @__PURE__ */ ((SourceType2) => {
  SourceType2["UNKNOWN_SOURCE_TYPE"] = "UNKNOWN_SOURCE_TYPE";
  SourceType2["WIX_APP"] = "WIX_APP";
  SourceType2["EXTERNAL"] = "EXTERNAL";
  SourceType2["ADMIN"] = "ADMIN";
  SourceType2["OTHER"] = "OTHER";
  return SourceType2;
})(SourceType || {});
var CustomFieldGroup = /* @__PURE__ */ ((CustomFieldGroup2) => {
  CustomFieldGroup2["UNKNOWN_CUSTOM_FIELD_GROUP"] = "UNKNOWN_CUSTOM_FIELD_GROUP";
  CustomFieldGroup2["BUSINESS_DETAILS"] = "BUSINESS_DETAILS";
  CustomFieldGroup2["CUSTOMER_DETAILS"] = "CUSTOMER_DETAILS";
  CustomFieldGroup2["DOCUMENT"] = "DOCUMENT";
  CustomFieldGroup2["FOOTER"] = "FOOTER";
  CustomFieldGroup2["OTHER"] = "OTHER";
  return CustomFieldGroup2;
})(CustomFieldGroup || {});
var ValueType = /* @__PURE__ */ ((ValueType2) => {
  ValueType2["UNKNOWN_VALUE_TYPE"] = "UNKNOWN_VALUE_TYPE";
  ValueType2["STRING"] = "STRING";
  ValueType2["DATE"] = "DATE";
  ValueType2["BOOLEAN"] = "BOOLEAN";
  ValueType2["NUMBER"] = "NUMBER";
  return ValueType2;
})(ValueType || {});
var DepositType = /* @__PURE__ */ ((DepositType2) => {
  DepositType2["UNKNOWN"] = "UNKNOWN";
  DepositType2["FLAT"] = "FLAT";
  DepositType2["PERCENTAGE"] = "PERCENTAGE";
  return DepositType2;
})(DepositType || {});
var InvoiceStatus = /* @__PURE__ */ ((InvoiceStatus2) => {
  InvoiceStatus2["Draft"] = "Draft";
  InvoiceStatus2["Sent"] = "Sent";
  InvoiceStatus2["Processing"] = "Processing";
  InvoiceStatus2["Paid"] = "Paid";
  InvoiceStatus2["Overdue"] = "Overdue";
  InvoiceStatus2["Void"] = "Void";
  InvoiceStatus2["Deleted"] = "Deleted";
  InvoiceStatus2["PartiallyPaid"] = "PartiallyPaid";
  InvoiceStatus2["PartialAndOverdue"] = "PartialAndOverdue";
  return InvoiceStatus2;
})(InvoiceStatus || {});
async function preparePaymentCollection2(ecomOrderId, amount, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId,
    amount,
    paymentGatewayOrderId: options?.paymentGatewayOrderId,
    delayedCapture: options?.delayedCapture,
    delayedCaptureSettings: options?.delayedCaptureSettings
  });
  const reqOpts = preparePaymentCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ecomOrderId: "$[0]",
          amount: "$[1]",
          paymentGatewayOrderId: "$[2].paymentGatewayOrderId",
          delayedCapture: "$[2].delayedCapture",
          delayedCaptureSettings: "$[2].delayedCaptureSettings"
        },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId", "amount", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getPaymentCollectabilityStatus2(ecomOrderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId
  });
  const reqOpts = getPaymentCollectabilityStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ecomOrderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function recordManuallyCollectedPayment2(orderId, amount) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    amount
  });
  const reqOpts = recordManuallyCollectedPayment(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]", amount: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["orderId", "amount"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function paymentCollectionMarkOrderAsPaid2(ecomOrderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId
  });
  const reqOpts = paymentCollectionMarkOrderAsPaid(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ecomOrderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function paymentCollectionBulkMarkOrdersAsPaid2(ecomOrderIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderIds
  });
  const reqOpts = paymentCollectionBulkMarkOrdersAsPaid(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "results.item.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "results.item.billingInfo.address" },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "results.item.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ecomOrderIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ecomOrderIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getRefundabilityStatus2(ecomOrderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId
  });
  const reqOpts = getRefundabilityStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ecomOrderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function paymentCollectionCreatePaymentGatewayOrder2(ecomOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId,
    chargedBy: options?.chargedBy
  });
  const reqOpts = paymentCollectionCreatePaymentGatewayOrder(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ecomOrderId: "$[0]",
          chargedBy: "$[1].chargedBy"
        },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function chargeMemberships2(ecomOrderId, memberId, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId,
    memberId,
    membershipCharges: options?.membershipCharges
  });
  const reqOpts = chargeMemberships(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ecomOrderId: "$[0]",
          memberId: "$[1]",
          membershipCharges: "$[2].membershipCharges"
        },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId", "memberId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function triggerRefund2(ecomOrderId, payments, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId,
    payments,
    details: options?.details,
    sideEffects: options?.sideEffects
  });
  const reqOpts = triggerRefund(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ecomOrderId: "$[0]",
          payments: "$[1]",
          details: "$[2].details",
          sideEffects: "$[2].sideEffects"
        },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId", "payments", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function voidAuthorizedPayments2(ecomOrderId, paymentIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId,
    paymentIds
  });
  const reqOpts = voidAuthorizedPayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ecomOrderId: "$[0]", paymentIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId", "paymentIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function captureAuthorizedPayments2(ecomOrderId, payments) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ecomOrderId,
    payments
  });
  const reqOpts = captureAuthorizedPayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ecomOrderId: "$[0]", payments: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["ecomOrderId", "payments"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrder2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    )?.order;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function searchOrders2(search) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ search });
  const reqOpts = searchOrders(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "orders.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "orders.billingInfo.address" },
            {
              path: "orders.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "orders.shippingInfo.logistics.pickupDetails.address" },
            { path: "orders.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { search: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["search"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createOrder2(order, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      order,
      settings: options?.settings
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "order.lineItems.image" }]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          { path: "order.billingInfo.address" },
          { path: "order.shippingInfo.logistics.shippingDestination.address" },
          { path: "order.shippingInfo.logistics.pickupDetails.address" },
          { path: "order.recipientInfo.address" }
        ]
      }
    ]
  );
  const reqOpts = createOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    )?.order;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { order: "$[0]", settings: "$[1].settings" },
        singleArgumentUnchanged: false
      },
      ["order", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateOrder2(_id, order) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({ order: { ...order, id: _id } }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "order.lineItems.image" }]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          { path: "order.billingInfo.address" },
          { path: "order.shippingInfo.logistics.shippingDestination.address" },
          { path: "order.shippingInfo.logistics.pickupDetails.address" },
          { path: "order.recipientInfo.address" }
        ]
      }
    ]
  );
  const reqOpts = updateOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    )?.order;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { order: "$[1]" },
        explicitPathsToArguments: { "order.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "order"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateOrders2(orders, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      orders,
      returnEntity: options?.returnEntity
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "orders.order.lineItems.image" }]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          { path: "orders.order.billingInfo.address" },
          {
            path: "orders.order.shippingInfo.logistics.shippingDestination.address"
          },
          { path: "orders.order.shippingInfo.logistics.pickupDetails.address" },
          { path: "orders.order.recipientInfo.address" }
        ]
      }
    ]
  );
  const reqOpts = bulkUpdateOrders(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "results.item.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "results.item.billingInfo.address" },
            {
              path: "results.item.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "results.item.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "results.item.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orders: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["orders", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function commitDeltas2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      id: _id,
      draftOrderId: options?.draftOrderId,
      changes: options?.changes,
      commitSettings: options?.commitSettings,
      reason: options?.reason
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          {
            path: "changes.changedShippingInfo.logistics.shippingDestination.address"
          },
          {
            path: "changes.changedShippingInfo.logistics.pickupDetails.address"
          },
          { path: "changes.changedBillingInfo.address" },
          { path: "changes.changedRecipientInfo.address" }
        ]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "changes.lineItems.lineItem.image" }]
      }
    ]
  );
  const reqOpts = commitDeltas(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          draftOrderId: "$[1].draftOrderId",
          changes: "$[1].changes",
          commitSettings: "$[1].commitSettings",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateOrderLineItem2(identifiers, lineItem) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      id: identifiers?._id,
      lineItem: { ...lineItem, id: identifiers?.lineItemId }
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "lineItem.image" }]
      }
    ]
  );
  const reqOpts = updateOrderLineItem(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { lineItem: "$[1]" },
        explicitPathsToArguments: {
          id: "$[0]._id",
          "lineItem.id": "$[0].lineItemId"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "lineItem"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addActivity2(_id, activity) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    activity
  });
  const reqOpts = addActivity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", activity: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "activity"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateActivity2(identifiers, activity) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: identifiers?._id,
    activityId: identifiers?.activityId,
    activity
  });
  const reqOpts = updateActivity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]._id",
          activityId: "$[0].activityId",
          activity: "$[1]"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "activity"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteActivity2(identifiers) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: identifiers?._id,
    activityId: identifiers?.activityId
  });
  const reqOpts = deleteActivity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]._id",
          activityId: "$[0].activityId"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function cancelOrder2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    sendOrderCanceledEmail: options?.sendOrderCanceledEmail,
    customMessage: options?.customMessage,
    restockAllItems: options?.restockAllItems
  });
  const reqOpts = cancelOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          sendOrderCanceledEmail: "$[1].sendOrderCanceledEmail",
          customMessage: "$[1].customMessage",
          restockAllItems: "$[1].restockAllItems"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateOrderStatus2(orderId, status) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    status
  });
  const reqOpts = updateOrderStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "order.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "order.billingInfo.address" },
            {
              path: "order.shippingInfo.logistics.shippingDestination.address"
            },
            { path: "order.shippingInfo.logistics.pickupDetails.address" },
            { path: "order.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]", status: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["orderId", "status"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function aggregateOrders2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    filter: options?.filter,
    aggregation: options?.aggregation,
    hierarchySeparatorOverride: options?.hierarchySeparatorOverride
  });
  const reqOpts = aggregateOrders(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          filter: "$[0].filter",
          aggregation: "$[0].aggregation",
          hierarchySeparatorOverride: "$[0].hierarchySeparatorOverride"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateOrderTags2(orderIds, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderIds,
    assignTags: options?.assignTags,
    unassignTags: options?.unassignTags
  });
  const reqOpts = bulkUpdateOrderTags(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderIds: "$[0]",
          assignTags: "$[1].assignTags",
          unassignTags: "$[1].unassignTags"
        },
        singleArgumentUnchanged: false
      },
      ["orderIds", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-order-orders.public.ts
function preparePaymentCollection3(httpClient) {
  return (ecomOrderId, amount, options) => preparePaymentCollection2(
    ecomOrderId,
    amount,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getPaymentCollectabilityStatus3(httpClient) {
  return (ecomOrderId) => getPaymentCollectabilityStatus2(
    ecomOrderId,
    // @ts-ignore
    { httpClient }
  );
}
function recordManuallyCollectedPayment3(httpClient) {
  return (orderId, amount) => recordManuallyCollectedPayment2(
    orderId,
    amount,
    // @ts-ignore
    { httpClient }
  );
}
function paymentCollectionMarkOrderAsPaid3(httpClient) {
  return (ecomOrderId) => paymentCollectionMarkOrderAsPaid2(
    ecomOrderId,
    // @ts-ignore
    { httpClient }
  );
}
function paymentCollectionBulkMarkOrdersAsPaid3(httpClient) {
  return (ecomOrderIds) => paymentCollectionBulkMarkOrdersAsPaid2(
    ecomOrderIds,
    // @ts-ignore
    { httpClient }
  );
}
function getRefundabilityStatus3(httpClient) {
  return (ecomOrderId) => getRefundabilityStatus2(
    ecomOrderId,
    // @ts-ignore
    { httpClient }
  );
}
function paymentCollectionCreatePaymentGatewayOrder3(httpClient) {
  return (ecomOrderId, options) => paymentCollectionCreatePaymentGatewayOrder2(
    ecomOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function chargeMemberships3(httpClient) {
  return (ecomOrderId, memberId, options) => chargeMemberships2(
    ecomOrderId,
    memberId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function triggerRefund3(httpClient) {
  return (ecomOrderId, payments, options) => triggerRefund2(
    ecomOrderId,
    payments,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function voidAuthorizedPayments3(httpClient) {
  return (ecomOrderId, paymentIds) => voidAuthorizedPayments2(
    ecomOrderId,
    paymentIds,
    // @ts-ignore
    { httpClient }
  );
}
function captureAuthorizedPayments3(httpClient) {
  return (ecomOrderId, payments) => captureAuthorizedPayments2(
    ecomOrderId,
    payments,
    // @ts-ignore
    { httpClient }
  );
}
function getOrder3(httpClient) {
  return (_id) => getOrder2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function searchOrders3(httpClient) {
  return (search) => searchOrders2(
    search,
    // @ts-ignore
    { httpClient }
  );
}
function createOrder3(httpClient) {
  return (order, options) => createOrder2(
    order,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateOrder3(httpClient) {
  return (_id, order) => updateOrder2(
    _id,
    order,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateOrders3(httpClient) {
  return (orders, options) => bulkUpdateOrders2(
    orders,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function commitDeltas3(httpClient) {
  return (_id, options) => commitDeltas2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateOrderLineItem3(httpClient) {
  return (identifiers, lineItem) => updateOrderLineItem2(
    identifiers,
    lineItem,
    // @ts-ignore
    { httpClient }
  );
}
function addActivity3(httpClient) {
  return (_id, activity) => addActivity2(
    _id,
    activity,
    // @ts-ignore
    { httpClient }
  );
}
function updateActivity3(httpClient) {
  return (identifiers, activity) => updateActivity2(
    identifiers,
    activity,
    // @ts-ignore
    { httpClient }
  );
}
function deleteActivity3(httpClient) {
  return (identifiers) => deleteActivity2(
    identifiers,
    // @ts-ignore
    { httpClient }
  );
}
function cancelOrder3(httpClient) {
  return (_id, options) => cancelOrder2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateOrderStatus3(httpClient) {
  return (orderId, status) => updateOrderStatus2(
    orderId,
    status,
    // @ts-ignore
    { httpClient }
  );
}
function aggregateOrders3(httpClient) {
  return (options) => aggregateOrders2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateOrderTags3(httpClient) {
  return (orderIds, options) => bulkUpdateOrderTags2(
    orderIds,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onOrderApproved = EventDefinition(
  "wix.ecom.v1.order_approved",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "data.order.createdDate" },
          { path: "data.order.updatedDate" },
          { path: "data.order.purchasedDate" },
          { path: "data.order.lineItems.digitalFile.expirationDate" },
          {
            path: "data.order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "data.order.shippingInfo.logistics.deliverByDate" },
          { path: "data.order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "data.order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "data.order.activities.createdDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "data.order.lineItems.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [{ path: "data.order.lineItems.physicalProperties.weight" }]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          { path: "data.order.billingInfo.address" },
          {
            path: "data.order.shippingInfo.logistics.shippingDestination.address"
          },
          { path: "data.order.shippingInfo.logistics.pickupDetails.address" },
          { path: "data.order.recipientInfo.address" }
        ]
      }
    ])
  )
)();
var onOrderUpdated = EventDefinition(
  "wix.ecom.v1.order_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.purchasedDate" },
          { path: "entity.lineItems.digitalFile.expirationDate" },
          {
            path: "entity.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.shippingInfo.logistics.deliverByDate" },
          { path: "entity.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "entity.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "entity.activities.createdDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "entity.lineItems.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [{ path: "entity.lineItems.physicalProperties.weight" }]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          { path: "entity.billingInfo.address" },
          {
            path: "entity.shippingInfo.logistics.shippingDestination.address"
          },
          { path: "entity.shippingInfo.logistics.pickupDetails.address" },
          { path: "entity.recipientInfo.address" }
        ]
      }
    ])
  )
)();
var onOrderCanceled = EventDefinition(
  "wix.ecom.v1.order_canceled",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "data.order.createdDate" },
          { path: "data.order.updatedDate" },
          { path: "data.order.purchasedDate" },
          { path: "data.order.lineItems.digitalFile.expirationDate" },
          {
            path: "data.order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "data.order.shippingInfo.logistics.deliverByDate" },
          { path: "data.order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "data.order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "data.order.activities.createdDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "data.order.lineItems.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [{ path: "data.order.lineItems.physicalProperties.weight" }]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          { path: "data.order.billingInfo.address" },
          {
            path: "data.order.shippingInfo.logistics.shippingDestination.address"
          },
          { path: "data.order.shippingInfo.logistics.pickupDetails.address" },
          { path: "data.order.recipientInfo.address" }
        ]
      }
    ])
  )
)();
var onOrderCreated = EventDefinition(
  "wix.ecom.v1.order_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.purchasedDate" },
          { path: "entity.lineItems.digitalFile.expirationDate" },
          {
            path: "entity.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.shippingInfo.logistics.deliverByDate" },
          { path: "entity.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "entity.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "entity.activities.createdDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "entity.lineItems.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [{ path: "entity.lineItems.physicalProperties.weight" }]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          { path: "entity.billingInfo.address" },
          {
            path: "entity.shippingInfo.logistics.shippingDestination.address"
          },
          { path: "entity.shippingInfo.logistics.pickupDetails.address" },
          { path: "entity.recipientInfo.address" }
        ]
      }
    ])
  )
)();
var onOrderPaymentStatusUpdated = EventDefinition(
  "wix.ecom.v1.order_payment_status_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "data.order.createdDate" },
          { path: "data.order.updatedDate" },
          { path: "data.order.purchasedDate" },
          { path: "data.order.lineItems.digitalFile.expirationDate" },
          {
            path: "data.order.lineItems.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "data.order.shippingInfo.logistics.deliverByDate" },
          { path: "data.order.shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "data.order.shippingInfo.logistics.deliveryTimeSlot.to" },
          { path: "data.order.activities.createdDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "data.order.lineItems.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [{ path: "data.order.lineItems.physicalProperties.weight" }]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          { path: "data.order.billingInfo.address" },
          {
            path: "data.order.shippingInfo.logistics.shippingDestination.address"
          },
          { path: "data.order.shippingInfo.logistics.pickupDetails.address" },
          { path: "data.order.recipientInfo.address" }
        ]
      }
    ])
  )
)();

// src/ecom-v1-order-orders.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var preparePaymentCollection4 = /* @__PURE__ */ createRESTModule(preparePaymentCollection3);
var getPaymentCollectabilityStatus4 = /* @__PURE__ */ createRESTModule(getPaymentCollectabilityStatus3);
var recordManuallyCollectedPayment4 = /* @__PURE__ */ createRESTModule(recordManuallyCollectedPayment3);
var paymentCollectionMarkOrderAsPaid4 = /* @__PURE__ */ createRESTModule(paymentCollectionMarkOrderAsPaid3);
var paymentCollectionBulkMarkOrdersAsPaid4 = /* @__PURE__ */ createRESTModule(paymentCollectionBulkMarkOrdersAsPaid3);
var getRefundabilityStatus4 = /* @__PURE__ */ createRESTModule(getRefundabilityStatus3);
var paymentCollectionCreatePaymentGatewayOrder4 = /* @__PURE__ */ createRESTModule(
  paymentCollectionCreatePaymentGatewayOrder3
);
var chargeMemberships4 = /* @__PURE__ */ createRESTModule(chargeMemberships3);
var triggerRefund4 = /* @__PURE__ */ createRESTModule(triggerRefund3);
var voidAuthorizedPayments4 = /* @__PURE__ */ createRESTModule(voidAuthorizedPayments3);
var captureAuthorizedPayments4 = /* @__PURE__ */ createRESTModule(captureAuthorizedPayments3);
var getOrder4 = /* @__PURE__ */ createRESTModule(getOrder3);
var searchOrders4 = /* @__PURE__ */ createRESTModule(searchOrders3);
var createOrder4 = /* @__PURE__ */ createRESTModule(createOrder3);
var updateOrder4 = /* @__PURE__ */ createRESTModule(updateOrder3);
var bulkUpdateOrders4 = /* @__PURE__ */ createRESTModule(bulkUpdateOrders3);
var commitDeltas4 = /* @__PURE__ */ createRESTModule(commitDeltas3);
var updateOrderLineItem4 = /* @__PURE__ */ createRESTModule(updateOrderLineItem3);
var addActivity4 = /* @__PURE__ */ createRESTModule(addActivity3);
var updateActivity4 = /* @__PURE__ */ createRESTModule(updateActivity3);
var deleteActivity4 = /* @__PURE__ */ createRESTModule(deleteActivity3);
var cancelOrder4 = /* @__PURE__ */ createRESTModule(cancelOrder3);
var updateOrderStatus4 = /* @__PURE__ */ createRESTModule(updateOrderStatus3);
var aggregateOrders4 = /* @__PURE__ */ createRESTModule(aggregateOrders3);
var bulkUpdateOrderTags4 = /* @__PURE__ */ createRESTModule(bulkUpdateOrderTags3);
var onOrderApproved2 = createEventModule(onOrderApproved);
var onOrderUpdated2 = createEventModule(onOrderUpdated);
var onOrderCanceled2 = createEventModule(onOrderCanceled);
var onOrderCreated2 = createEventModule(onOrderCreated);
var onOrderPaymentStatusUpdated2 = createEventModule(
  onOrderPaymentStatusUpdated
);
export {
  ActionType,
  ActivityType,
  AdjustmentType,
  AttributionSource,
  AuthorizationCaptureStatus,
  AuthorizationVoidStatus,
  ChannelType,
  ChargebackStatus,
  CustomFieldGroup,
  DeltaPaymentOptionType,
  DepositType,
  DescriptionLineType,
  DiscountReason,
  DiscountType,
  DurationUnit,
  FulfillmentStatus,
  InventoryAction,
  InvoiceStatus,
  ItemTypeItemType,
  JurisdictionType,
  LineItemQuantityChangeType,
  ManuallyRefundableReason,
  MembershipPaymentStatus,
  NonRefundableReason,
  OrderApprovalStrategy,
  OrderStatus,
  PaymentCollectabilityStatus,
  PaymentOptionType,
  PaymentStatus,
  PickupMethod,
  Placement,
  PreviewEmailType,
  Reason,
  RefundStatus,
  RefundableStatus,
  RestockType,
  ScheduledAction,
  SortOrder,
  SourceType,
  SubdivisionType,
  SubscriptionFrequency,
  TaxableAddressType,
  TransactionStatus,
  ValueType,
  VatType,
  VersioningMode,
  WebhookIdentityType,
  WeightUnit,
  addActivity4 as addActivity,
  aggregateOrders4 as aggregateOrders,
  bulkUpdateOrderTags4 as bulkUpdateOrderTags,
  bulkUpdateOrders4 as bulkUpdateOrders,
  cancelOrder4 as cancelOrder,
  captureAuthorizedPayments4 as captureAuthorizedPayments,
  chargeMemberships4 as chargeMemberships,
  commitDeltas4 as commitDeltas,
  createOrder4 as createOrder,
  deleteActivity4 as deleteActivity,
  getOrder4 as getOrder,
  getPaymentCollectabilityStatus4 as getPaymentCollectabilityStatus,
  getRefundabilityStatus4 as getRefundabilityStatus,
  onOrderApproved2 as onOrderApproved,
  onOrderCanceled2 as onOrderCanceled,
  onOrderCreated2 as onOrderCreated,
  onOrderPaymentStatusUpdated2 as onOrderPaymentStatusUpdated,
  onOrderUpdated2 as onOrderUpdated,
  paymentCollectionBulkMarkOrdersAsPaid4 as paymentCollectionBulkMarkOrdersAsPaid,
  paymentCollectionCreatePaymentGatewayOrder4 as paymentCollectionCreatePaymentGatewayOrder,
  paymentCollectionMarkOrderAsPaid4 as paymentCollectionMarkOrderAsPaid,
  preparePaymentCollection4 as preparePaymentCollection,
  recordManuallyCollectedPayment4 as recordManuallyCollectedPayment,
  searchOrders4 as searchOrders,
  triggerRefund4 as triggerRefund,
  updateActivity4 as updateActivity,
  updateOrder4 as updateOrder,
  updateOrderLineItem4 as updateOrderLineItem,
  updateOrderStatus4 as updateOrderStatus,
  voidAuthorizedPayments4 as voidAuthorizedPayments
};
//# sourceMappingURL=index.mjs.map