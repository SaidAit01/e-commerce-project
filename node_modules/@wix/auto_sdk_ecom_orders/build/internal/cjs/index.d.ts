import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { P as Price, a as PreparePaymentCollectionOptions, b as PreparePaymentCollectionResponse, c as PreparePaymentCollectionApplicationErrors, G as GetPaymentCollectabilityStatusResponse, R as RecordManuallyCollectedPaymentApplicationErrors, M as MarkOrderAsPaidResponse, d as PaymentCollectionMarkOrderAsPaidApplicationErrors, B as BulkMarkOrdersAsPaidResponse, e as GetRefundabilityStatusResponse, f as PaymentCollectionCreatePaymentGatewayOrderOptions, C as CreatePaymentGatewayOrderResponse, g as PaymentCollectionCreatePaymentGatewayOrderApplicationErrors, h as ChargeMembershipsOptions, i as PaymentRefund, T as TriggerRefundOptions, j as TriggerRefundResponse, k as TriggerRefundApplicationErrors, V as VoidAuthorizedPaymentsResponse, l as VoidAuthorizedPaymentsApplicationErrors, m as PaymentCapture, n as CaptureAuthorizedPaymentsResponse, o as CaptureAuthorizedPaymentsApplicationErrors, O as Order, p as GetOrderApplicationErrors, q as OrderSearch, S as SearchOrdersResponse, r as CreateOrderOptions, s as CreateOrderApplicationErrors, U as UpdateOrder, t as UpdateOrderApplicationErrors, u as MaskedOrder, v as BulkUpdateOrdersOptions, w as BulkUpdateOrdersResponse, x as CommitDeltasOptions, y as CommitDeltasResponse, z as CommitDeltasApplicationErrors, A as UpdateOrderLineItemIdentifiers, D as UpdateOrderLineItem, E as UpdateOrderLineItemResponse, F as PublicActivity, H as AddActivityResponse, I as UpdateActivityIdentifiers, J as UpdateActivityResponse, K as DeleteActivityIdentifiers, L as DeleteActivityResponse, N as CancelOrderOptions, Q as CancelOrderResponse, W as CancelOrderApplicationErrors, X as OrderStatusWithLiterals, Y as UpdateOrderStatusResponse, Z as UpdateOrderStatusApplicationErrors, _ as AggregateOrdersOptions, $ as AggregateOrdersResponse, a0 as BulkUpdateOrderTagsOptions, a1 as BulkUpdateOrderTagsResponse, a2 as OrderApprovedEnvelope, a3 as OrderUpdatedEnvelope, a4 as OrderCanceledEnvelope, a5 as OrderCreatedEnvelope, a6 as OrderPaymentStatusUpdatedEnvelope } from './ecom-v1-order-orders.universal-DJbQYSET.js';
export { dG as ActionEvent, aD as ActionType, ik as ActionTypeWithLiterals, bQ as Activity, bR as ActivityContentOneOf, an as ActivityType, i3 as ActivityTypeWithLiterals, gs as AddActivitiesRequest, gt as AddActivitiesResponse, gq as AddActivityRequest, g3 as AddInternalActivityRequest, gp as AddInternalActivityResponse, cK as AdditionalFee, fx as AdditionalFeeDelta, fy as AdditionalFeeDeltaDeltaOneOf, di as AdditionalFeeRefund, bs as Address, hk as AddressDescription, bu as AddressLocation, br as AddressWithContact, ac as AdjustmentType, hV as AdjustmentTypeWithLiterals, h1 as AggregateOrdersRequest, eu as AggregatedRefundSummary, dW as ApplicationError, bI as AppliedDiscount, fv as AppliedDiscountDelta, fw as AppliedDiscountDeltaDeltaOneOf, bJ as AppliedDiscountDiscountSourceOneOf, fG as ArchiveOrderRequest, fH as ArchiveOrderResponse, ao as AttributionSource, i4 as AttributionSourceWithLiterals, ej as AuthorizationActionFailureDetails, ei as AuthorizationCapture, aA as AuthorizationCaptureStatus, ih as AuthorizationCaptureStatusWithLiterals, eh as AuthorizationDetails, ek as AuthorizationVoid, aB as AuthorizationVoidStatus, ii as AuthorizationVoidStatusWithLiterals, cc as AuthorizedPaymentCaptured, cb as AuthorizedPaymentCreated, cd as AuthorizedPaymentVoided, cJ as Balance, cI as BalanceSummary, hN as BaseEventMetadata, eS as BatchOfTriggerReindexOrderRequest, hu as BigDecimalWrapper, bd as BillingAdjustment, be as BillingAdjustmentPriceSummary, dX as BulkActionMetadata, fK as BulkArchiveOrdersByFilterRequest, fL as BulkArchiveOrdersByFilterResponse, fI as BulkArchiveOrdersRequest, fJ as BulkArchiveOrdersResponse, gJ as BulkMarkAsFulfilledByFilterRequest, gK as BulkMarkAsFulfilledByFilterResponse, gH as BulkMarkAsFulfilledRequest, gI as BulkMarkAsFulfilledResponse, gP as BulkMarkAsUnfulfilledByFilterRequest, gQ as BulkMarkAsUnfulfilledByFilterResponse, gN as BulkMarkAsUnfulfilledRequest, gO as BulkMarkAsUnfulfilledResponse, dT as BulkMarkOrdersAsPaidRequest, dU as BulkOrderResult, c_ as BulkSendBuyerPickupConfirmationEmailsRequest, c$ as BulkSendBuyerPickupConfirmationEmailsResponse, d2 as BulkSendBuyerShippingConfirmationEmailsRequest, d3 as BulkSendBuyerShippingConfirmationEmailsResponse, gR as BulkSetBusinessLocationRequest, gS as BulkSetBusinessLocationResponse, gT as BulkSetBusinessLocationResult, fQ as BulkUnArchiveOrdersByFilterRequest, fR as BulkUnArchiveOrdersByFilterResponse, fO as BulkUnArchiveOrdersRequest, fP as BulkUnArchiveOrdersResponse, h5 as BulkUpdateOrderTagsRequest, h6 as BulkUpdateOrderTagsResult, fk as BulkUpdateOrdersRequest, bn as BuyerInfo, bo as BuyerInfoIdOneOf, fT as BuyerInfoUpdate, ey as CalculateRefundItemRequest, eA as CalculateRefundItemResponse, ex as CalculateRefundRequest, ez as CalculateRefundResponse, hE as CalculatedTax, hD as CalculatedTaxes, hc as Cancel, gB as CancelOrderRequest, eC as CaptureAuthorizedPaymentsRequest, aV as CatalogReference, cG as ChannelInfo, ap as ChannelType, i5 as ChannelTypeWithLiterals, e1 as ChargeMembershipsRequest, e5 as ChargeMembershipsResponse, eD as ChargeSavedPaymentMethodRequest, eE as ChargeSavedPaymentMethodResponse, em as Chargeback, cC as ChargebackCreated, cD as ChargebackReversed, aE as ChargebackStatus, il as ChargebackStatusWithLiterals, e0 as ChargedBy, a$ as Color, fl as CommitDeltasRequest, fC as CommittedDiffs, fD as CommittedDiffsShippingUpdateInfoOneOf, hn as CommonAddress, ho as CommonAddressStreetOneOf, iB as CommonSearchWithEntityContext, hm as Company, hb as Complete, eW as ContinueSideEffectsFlowInLegacyData, bK as Coupon, fe as CreateOrderRequest, fh as CreateOrderResponse, d$ as CreatePaymentGatewayOrderRequest, cE as CreatedBy, cF as CreatedByStringOneOf, cr as CreditCardDetails, eg as CreditCardPaymentMethodDetails, bp as CurrencyConversionDetails, f4 as CursorPaging, fd as CursorPagingMetadata, fb as CursorSearch, fc as CursorSearchPagingMethodOneOf, f7 as Cursors, bS as CustomActivity, cH as CustomField, aP as CustomFieldGroup, ix as CustomFieldGroupWithLiterals, hJ as CustomFieldValue, hh as Customer, h3 as DecrementData, h2 as DecrementItemsQuantityRequest, h4 as DecrementItemsQuantityResponse, dN as DelayedCaptureSettings, gv as DeleteActivityRequest, eK as DeleteByFilterOperation, eJ as DeleteByIdsOperation, by as DeliveryLogistics, bz as DeliveryLogisticsAddressOneOf, bC as DeliveryTimeSlot, aK as DeltaPaymentOptionType, is as DeltaPaymentOptionTypeWithLiterals, hL as Deposit, aR as DepositType, iz as DepositTypeWithLiterals, aW as DescriptionLine, aY as DescriptionLineDescriptionLineValueOneOf, aZ as DescriptionLineName, a7 as DescriptionLineType, hQ as DescriptionLineTypeWithLiterals, aX as DescriptionLineValueOneOf, eU as DiffmatokyPayload, b7 as DigitalFile, hB as Discount, hC as DiscountOneDiscountTypeOneOf, al as DiscountReason, i1 as DiscountReasonWithLiterals, bN as DiscountRule, bO as DiscountRuleName, ak as DiscountType, i0 as DiscountTypeWithLiterals, dA as DomainEvent, dB as DomainEventBodyOneOf, gb as DownloadLinkSent, bY as DraftOrderChangesApplied, fz as DraftOrderCommitSettings, fm as DraftOrderDiffs, fp as DraftOrderDiffsBillingUpdateInfoOneOf, fo as DraftOrderDiffsBuyerUpdateInfoOneOf, fq as DraftOrderDiffsRecipientUpdateInfoOneOf, fn as DraftOrderDiffsShippingUpdateInfoOneOf, dO as Duration, at as DurationUnit, i9 as DurationUnitWithLiterals, hi as Email, gk as EmailEdited, dH as Empty, dC as EntityCreatedEvent, dF as EntityDeletedEvent, dE as EntityUpdatedEvent, eV as ErrorInformation, hO as EventMetadata, bj as ExtendedFields, cz as ExternalReceipt, eq as ExternalReceiptInfo, b0 as FocalPoint, bc as FreeTrialPeriod, gi as FulfillerEmailSent, af as FulfillmentStatus, gG as FulfillmentStatusUpdated, hY as FulfillmentStatusWithLiterals, cL as FulfillmentStatusesAggregate, bv as FullAddressContactDetails, eZ as GetOrderRequest, e_ as GetOrderResponse, dP as GetPaymentCollectabilityStatusRequest, dY as GetRefundabilityStatusRequest, g$ as GetShipmentsRequest, h0 as GetShipmentsResponse, en as GiftCardPaymentDetails, ci as GiftCardPaymentRefund, hf as IdAndVersion, dJ as IdentificationData, dK as IdentificationDataIdOneOf, eY as IndexingMessage, g4 as InternalActivity, g5 as InternalActivityContentOneOf, eH as InternalDocument, eL as InternalDocumentUpdateByFilterOperation, eI as InternalDocumentUpdateOperation, e$ as InternalQueryOrdersRequest, f5 as InternalQueryOrdersResponse, eM as InternalUpdateExistingOperation, aL as InventoryAction, it as InventoryActionWithLiterals, fA as InventoryUpdateDetails, gg as InvoiceAdded, hr as InvoiceDates, hI as InvoiceDynamicPriceTotals, hg as InvoiceFields, gh as InvoiceSent, he as InvoiceSentEvent, aS as InvoiceStatus, iA as InvoiceStatusWithLiterals, hG as InvoicesPayment, fu as ItemChangedDetails, dV as ItemMetadata, bm as ItemModifier, b4 as ItemTaxFullDetails, b2 as ItemType, a8 as ItemTypeItemType, b3 as ItemTypeItemTypeDataOneOf, hR as ItemTypeItemTypeWithLiterals, hA as ItemizedFee, aa as JurisdictionType, hT as JurisdictionTypeWithLiterals, ht as LineItem, c5 as LineItemAmount, b$ as LineItemChanges, fE as LineItemDelta, fF as LineItemDeltaDeltaOneOf, bP as LineItemDiscount, bX as LineItemExchangeData, hx as LineItemMetaData, c1 as LineItemPriceChange, c0 as LineItemQuantityChange, am as LineItemQuantityChangeType, i2 as LineItemQuantityChangeTypeWithLiterals, dh as LineItemRefund, ew as LineItemRefundSummary, hv as LineItemTax, b6 as LineItemTaxBreakdown, b5 as LineItemTaxInfo, gx as LineItemUpdate, hs as LineItems, hy as Locale, cO as Location, bg as LocationAndQuantity, c6 as ManagedAdditionalFee, c3 as ManagedDiscount, c2 as ManagedLineItem, ax as ManuallyRefundableReason, id as ManuallyRefundableReasonWithLiterals, gE as MarkAsFulfilledRequest, gF as MarkAsFulfilledResponse, gL as MarkAsUnfulfilledRequest, gM as MarkAsUnfulfilledResponse, dS as MarkOrderAsPaidRequest, gz as MarkOrderAsSeenByHumanRequest, gA as MarkOrderAsSeenByHumanResponse, g1 as MaskedOrderLineItem, e2 as MembershipChargeItem, e3 as MembershipName, eo as MembershipPaymentDetails, cj as MembershipPaymentRefund, aF as MembershipPaymentStatus, im as MembershipPaymentStatusWithLiterals, bT as MerchantComment, bL as MerchantDiscount, bM as MerchantDiscountMerchantDiscountReasonOneOf, dI as MessageEnvelope, hH as MetaData, bk as ModifierGroup, bW as NewExchangeOrderCreated, aw as NonRefundableReason, ic as NonRefundableReasonWithLiterals, aJ as OrderApprovalStrategy, ir as OrderApprovalStrategyWithLiterals, cP as OrderApproved, ga as OrderCanceled, gC as OrderCanceledEventOrderCanceled, bZ as OrderChange, b_ as OrderChangeValueOneOf, fg as OrderCreateNotifications, bV as OrderCreatedFromExchange, ff as OrderCreationSettings, fB as OrderDeltasCommitted, g8 as OrderFulfilled, cS as OrderItemsRestocked, aT as OrderLineItem, ft as OrderLineItemChangedDetails, g9 as OrderNotFulfilled, g7 as OrderPaid, gm as OrderPartiallyPaid, gn as OrderPending, g6 as OrderPlaced, bU as OrderRefunded, go as OrderRejected, cR as OrderRejectedEventOrderRejected, hP as OrderSearchSpec, aj as OrderStatus, bH as OrderTaxBreakdown, bG as OrderTaxInfo, ea as OrderTransactions, cQ as OrdersExperiments, eb as Payment, cs as PaymentCanceled, ct as PaymentCanceledPaymentDetailsOneOf, au as PaymentCollectabilityStatus, ia as PaymentCollectabilityStatusWithLiterals, cu as PaymentDeclined, cv as PaymentDeclinedPaymentDetailsOneOf, a9 as PaymentOptionType, hS as PaymentOptionTypeWithLiterals, ec as PaymentPaymentDetailsOneOf, cn as PaymentPending, co as PaymentPendingPaymentDetailsOneOf, ed as PaymentReceiptInfoOneOf, cl as PaymentRefundFailed, ck as PaymentRefunded, ae as PaymentStatus, gW as PaymentStatusUpdated, hX as PaymentStatusWithLiterals, hF as Payments, hl as Phone, b1 as PhysicalProperties, bB as PickupAddress, bA as PickupDetails, ai as PickupMethod, h$ as PickupMethodWithLiterals, gl as PickupReadyEmailSent, aM as Placement, iu as PlacementWithLiterals, a_ as PlainTextValue, f3 as PlatformPaging, f6 as PlatformPagingMetadata, f0 as PlatformQuery, f1 as PlatformQueryPagingMethodOneOf, dL as PreparePaymentCollectionRequest, ds as PreviewBuyerConfirmationEmailRequest, dt as PreviewBuyerConfirmationEmailResponse, dq as PreviewBuyerPaymentsReceivedEmailRequest, dr as PreviewBuyerPaymentsReceivedEmailResponse, du as PreviewBuyerPickupConfirmationEmailRequest, dv as PreviewBuyerPickupConfirmationEmailResponse, dl as PreviewCancelEmailRequest, dm as PreviewCancelEmailResponse, dn as PreviewCancelRefundEmailRequest, dp as PreviewCancelRefundEmailResponse, dc as PreviewEmailByTypeRequest, dd as PreviewEmailByTypeResponse, aq as PreviewEmailType, i6 as PreviewEmailTypeWithLiterals, de as PreviewRefundEmailRequest, dk as PreviewRefundEmailResponse, dy as PreviewResendDownloadLinksEmailRequest, dz as PreviewResendDownloadLinksEmailResponse, dw as PreviewShippingConfirmationEmailRequest, dx as PreviewShippingConfirmationEmailResponse, bf as PriceDescription, bq as PriceSummary, aU as ProductName, gr as PublicActivityContentOneOf, f8 as QueryOrderRequest, f9 as QueryOrderResponse, hj as QuotesAddress, aC as Reason, ij as ReasonWithLiterals, cw as ReceiptCreated, cx as ReceiptCreatedReceiptInfoOneOf, cA as ReceiptSent, cB as ReceiptSentReceiptInfoOneOf, dQ as RecordManuallyCollectedPaymentRequest, dR as RecordManuallyCollectedPaymentResponse, dM as RedirectUrls, er as Refund, df as RefundDetails, ce as RefundInitiated, dg as RefundItem, ev as RefundItemsBreakdown, e7 as RefundSideEffects, aG as RefundStatus, et as RefundStatusInfo, io as RefundStatusWithLiterals, es as RefundTransaction, dZ as Refundability, d_ as RefundabilityAdditionalRefundabilityInfoOneOf, av as RefundableStatus, ib as RefundableStatusWithLiterals, cm as RefundedAsStoreCredit, cf as RefundedPayment, cg as RefundedPaymentKindOneOf, cp as RegularPayment, ee as RegularPaymentDetails, ef as RegularPaymentDetailsPaymentMethodDetailsOneOf, cq as RegularPaymentPaymentMethodDetailsOneOf, ch as RegularPaymentRefund, hd as Reschedule, e8 as RestockInfo, e9 as RestockItem, ay as RestockType, ie as RestockTypeWithLiterals, dD as RestoreInfo, ca as SavedPaymentMethod, as as ScheduledAction, i8 as ScheduledActionWithLiterals, fa as SearchOrdersRequest, cU as SendBuyerConfirmationEmailRequest, cV as SendBuyerConfirmationEmailResponse, cW as SendBuyerPaymentsReceivedEmailRequest, cX as SendBuyerPaymentsReceivedEmailResponse, cY as SendBuyerPickupConfirmationEmailRequest, cZ as SendBuyerPickupConfirmationEmailResponse, d0 as SendBuyerShippingConfirmationEmailRequest, d1 as SendBuyerShippingConfirmationEmailResponse, d6 as SendCancelRefundEmailRequest, d7 as SendCancelRefundEmailResponse, d4 as SendMerchantOrderReceivedNotificationRequest, d5 as SendMerchantOrderReceivedNotificationResponse, da as SendMerchantOrderReceivedPushRequest, db as SendMerchantOrderReceivedPushResponse, d8 as SendRefundEmailRequest, d9 as SendRefundEmailResponse, e4 as ServiceProperties, gj as ShippingAddressEdited, gf as ShippingConfirmationEmailSent, c9 as ShippingInformation, c8 as ShippingInformationChange, bD as ShippingPrice, dj as ShippingRefund, bE as ShippingRegion, eX as SnapshotMessage, aI as SortOrder, iq as SortOrderWithLiterals, f2 as Sorting, hw as Source, aO as SourceType, iw as SourceTypeWithLiterals, hq as StandardDetails, bt as StreetAddress, hp as Subdivision, aN as SubdivisionType, iv as SubdivisionTypeWithLiterals, ba as SubscriptionDescription, ab as SubscriptionFrequency, hU as SubscriptionFrequencyWithLiterals, b8 as SubscriptionInfo, bb as SubscriptionSettings, b9 as SubscriptionTitle, cN as TagList, cM as Tags, h7 as Task, h9 as TaskAction, ha as TaskActionActionOneOf, h8 as TaskKey, bF as TaxSummary, bh as TaxableAddress, bi as TaxableAddressTaxableAddressDataOneOf, ad as TaxableAddressType, hW as TaxableAddressTypeWithLiterals, hz as TotalPrice, c7 as TotalPriceChange, ge as TrackingLinkAdded, gc as TrackingNumberAdded, gd as TrackingNumberEdited, az as TransactionStatus, ig as TransactionStatusWithLiterals, bl as TranslatableString, c4 as TranslatedValue, e6 as TriggerRefundRequest, eT as TriggerReindexOrderRequest, eQ as TriggerReindexRequest, eR as TriggerReindexResponse, hM as TriggerSideEffectsFromLegacyData, fM as UnArchiveOrderRequest, fN as UnArchiveOrderResponse, gu as UpdateActivityRequest, fZ as UpdateBillingContactDetailsRequest, f_ as UpdateBillingContactDetailsResponse, fV as UpdateBuyerEmailRequest, fW as UpdateBuyerEmailResponse, fS as UpdateBuyerInfoRequest, fU as UpdateBuyerInfoResponse, eF as UpdateInternalDocumentsEvent, eG as UpdateInternalDocumentsEventOperationOneOf, gw as UpdateLineItemsDescriptionLinesRequest, gy as UpdateLineItemsDescriptionLinesResponse, f$ as UpdateOrderLineItemRequest, g0 as UpdateOrderLineItemsRequest, g2 as UpdateOrderLineItemsResponse, fi as UpdateOrderRequest, fj as UpdateOrderResponse, fX as UpdateOrderShippingAddressRequest, fY as UpdateOrderShippingAddressResponse, gD as UpdateOrderStatusRequest, gX as V1BulkMarkOrdersAsPaidRequest, gY as V1BulkMarkOrdersAsPaidResponse, gZ as V1CreatePaymentGatewayOrderRequest, g_ as V1CreatePaymentGatewayOrderResponse, fr as V1LineItemDelta, fs as V1LineItemDeltaDeltaOneOf, gU as V1MarkOrderAsPaidRequest, gV as V1MarkOrderAsPaidResponse, cT as V1RestockItem, el as V1ScheduledAction, bx as V1ShippingInformation, hK as Value, aQ as ValueType, iy as ValueTypeWithLiterals, bw as VatId, ah as VatType, h_ as VatTypeWithLiterals, eO as VersionedDeleteByIdsOperation, eP as VersionedDocumentId, eN as VersionedDocumentUpdateOperation, aH as VersioningMode, ip as VersioningModeWithLiterals, eB as VoidAuthorizedPaymentsRequest, ar as WebhookIdentityType, i7 as WebhookIdentityTypeWithLiterals, ag as WeightUnit, hZ as WeightUnitWithLiterals, cy as WixReceipt, ep as WixReceiptInfo } from './ecom-v1-order-orders.universal-DJbQYSET.js';

declare function preparePaymentCollection$1(httpClient: HttpClient): PreparePaymentCollectionSignature;
interface PreparePaymentCollectionSignature {
    /**
     * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
     * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
     * 2nd step is an actual charge of prepared payment gateway order. This could be done either
     * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
     * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
     * @param - Ecom order ID.
     * @param - Amount to collect
     */
    (ecomOrderId: string, amount: Price, options?: PreparePaymentCollectionOptions): Promise<NonNullablePaths<PreparePaymentCollectionResponse, `paymentGatewayOrderId`, 2> & {
        __applicationErrorsType?: PreparePaymentCollectionApplicationErrors;
    }>;
}
declare function getPaymentCollectabilityStatus$1(httpClient: HttpClient): GetPaymentCollectabilityStatusSignature;
interface GetPaymentCollectabilityStatusSignature {
    /**
     * Provides payment collectability status for given order. If payment collection is possible
     * response will contain collectable amount for given ecom order. If not - response will contain
     * reason why payment collection is not possible.
     * @param - Ecom order ID.
     */
    (ecomOrderId: string): Promise<NonNullablePaths<GetPaymentCollectabilityStatusResponse, `status` | `amount.amount` | `amount.formattedAmount`, 3>>;
}
/** @internal */
declare function recordManuallyCollectedPayment$1(httpClient: HttpClient): RecordManuallyCollectedPaymentSignature;
interface RecordManuallyCollectedPaymentSignature {
    /**
     * Records and approves new manual payment with provided custom amount on given order.
     * Existing pending payments are ignored.
     * Custom amount is expected to be less or equal remaining amount to be paid on order (affected by approved payments, refunds and gift card payments)
     * @param - Order ID.
     * @param - Amount to be recorded as approved manual payment for given order
     */
    (orderId: string, amount: Price): Promise<void & {
        __applicationErrorsType?: RecordManuallyCollectedPaymentApplicationErrors;
    }>;
}
/** @internal */
declare function paymentCollectionMarkOrderAsPaid$1(httpClient: HttpClient): PaymentCollectionMarkOrderAsPaidSignature;
interface PaymentCollectionMarkOrderAsPaidSignature {
    /**
     * Marks the order as paid. `order.paymentStatus` field *eventually* changes to `PAID`.
     * In case the order already has an offline payment transaction associated with it
     * (usually when manual payment method is chosen at checkout) - This transaction will become approved.
     * In case the order has no payment transactions associated with it
     * (usually when the item is set to be paid offline after checkout or when an order is created from the backoffice) - A payment transaction
     * will be created and approved.
     * @param - Ecom order ID.
     */
    (ecomOrderId: string): Promise<NonNullablePaths<MarkOrderAsPaidResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7> & {
        __applicationErrorsType?: PaymentCollectionMarkOrderAsPaidApplicationErrors;
    }>;
}
/** @internal */
declare function paymentCollectionBulkMarkOrdersAsPaid$1(httpClient: HttpClient): PaymentCollectionBulkMarkOrdersAsPaidSignature;
interface PaymentCollectionBulkMarkOrdersAsPaidSignature {
    /**
     * Marks multiple orders as paid. `order.paymentStatus` field *eventually* changes to `PAID`.
     * @param - IDs of orders to mark as paid.
     */
    (ecomOrderIds: string[]): Promise<NonNullablePaths<BulkMarkOrdersAsPaidResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.number` | `results.${number}.item.buyerInfo.visitorId` | `results.${number}.item.buyerInfo.memberId` | `results.${number}.item.paymentStatus` | `results.${number}.item.fulfillmentStatus` | `results.${number}.item.weightUnit` | `results.${number}.item.taxIncludedInPrices` | `results.${number}.item.shippingInfo.title` | `results.${number}.item.status` | `results.${number}.item.attributionSource` | `results.${number}.item.createdBy.userId` | `results.${number}.item.createdBy.memberId` | `results.${number}.item.createdBy.visitorId` | `results.${number}.item.createdBy.appId` | `results.${number}.item.channelInfo.type` | `results.${number}.item.businessLocation._id` | `results.${number}.item.businessLocation.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
/** @internal */
declare function getRefundabilityStatus$1(httpClient: HttpClient): GetRefundabilityStatusSignature;
interface GetRefundabilityStatusSignature {
    /**
     * Checks whether this order can be refunded.
     * @param - Order ID.
     */
    (ecomOrderId: string): Promise<NonNullablePaths<GetRefundabilityStatusResponse, `refundabilities` | `refundabilities.${number}.nonRefundableReason` | `refundabilities.${number}.manuallyRefundableReason` | `refundabilities.${number}.paymentId` | `refundabilities.${number}.refundabilityStatus` | `refundablePerItem`, 4>>;
}
/** @internal */
declare function paymentCollectionCreatePaymentGatewayOrder$1(httpClient: HttpClient): PaymentCollectionCreatePaymentGatewayOrderSignature;
interface PaymentCollectionCreatePaymentGatewayOrderSignature {
    /**
     * Call this endpoint to create an order in the payment gateway system. The amount of the order would be either:
     * 1. An explicit amount provided in the request, or;
     * 2. If an explicit amount is not provided - the remaining amount to complete the payment of that eCom order.
     * As a result, an ID of the created payment gateway order would be returned.
     * You can then use Wix Payments APIs to approve that order or collect payment, which will eventually change the eCom order state (e.g mark it as paid).
     * @param - Ecom order ID.
     */
    (ecomOrderId: string, options?: PaymentCollectionCreatePaymentGatewayOrderOptions): Promise<NonNullablePaths<CreatePaymentGatewayOrderResponse, `paymentGatewayOrderId`, 2> & {
        __applicationErrorsType?: PaymentCollectionCreatePaymentGatewayOrderApplicationErrors;
    }>;
}
/** @internal */
declare function chargeMemberships$1(httpClient: HttpClient): ChargeMembershipsSignature;
interface ChargeMembershipsSignature {
    /**
     * @param - Order ID.
     * @param - The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member
     * but a user which is using the membership on behalf of the a member
     */
    (ecomOrderId: string, memberId: string, options?: NonNullablePaths<ChargeMembershipsOptions, `membershipCharges.${number}.appId` | `membershipCharges.${number}.catalogReference` | `membershipCharges.${number}.catalogReference.appId` | `membershipCharges.${number}.catalogReference.catalogItemId` | `membershipCharges.${number}.membershipId` | `membershipCharges.${number}.membershipName` | `membershipCharges.${number}.membershipName.original` | `membershipCharges.${number}.rootCatalogItemId`, 5>): Promise<void>;
}
/** @internal */
declare function triggerRefund$1(httpClient: HttpClient): TriggerRefundSignature;
interface TriggerRefundSignature {
    /**
     * Calls corresponding payment providers and creates refund transactions for requested payments.
     * Updates order transactions based on refund results.
     * For requested payments with `TriggerRefundRequest.payments.external_refund = true` will not call payment providers and
     * will only update order transactions.
     * @param - The order this refund related to
     * @param - Refund operations information
     */
    (ecomOrderId: string, payments: NonNullablePaths<PaymentRefund, `paymentId`, 2>[], options?: TriggerRefundOptions): Promise<NonNullablePaths<TriggerRefundResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending` | `failedPaymentIds` | `failedPaymentIds.${number}.originalIndex` | `failedPaymentIds.${number}.success` | `failedPaymentIds.${number}.error.code` | `failedPaymentIds.${number}.error.description`, 7> & {
        __applicationErrorsType?: TriggerRefundApplicationErrors;
    }>;
}
declare function voidAuthorizedPayments$1(httpClient: HttpClient): VoidAuthorizedPaymentsSignature;
interface VoidAuthorizedPaymentsSignature {
    /**
     * Void authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Payment IDs
     */
    (ecomOrderId: string, paymentIds: string[]): Promise<NonNullablePaths<VoidAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: VoidAuthorizedPaymentsApplicationErrors;
    }>;
}
declare function captureAuthorizedPayments$1(httpClient: HttpClient): CaptureAuthorizedPaymentsSignature;
interface CaptureAuthorizedPaymentsSignature {
    /**
     * Capture authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Capture payments information
     */
    (ecomOrderId: string, payments: NonNullablePaths<PaymentCapture, `paymentId`, 2>[]): Promise<NonNullablePaths<CaptureAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: CaptureAuthorizedPaymentsApplicationErrors;
    }>;
}
declare function getOrder$1(httpClient: HttpClient): GetOrderSignature;
interface GetOrderSignature {
    /**
     * Retrieves an order.
     *
     *
     * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
     *
     * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
     * @param - ID of the order to retrieve.
     * @returns Fulfilled - The requested order.
     */
    (_id: string): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
        __applicationErrorsType?: GetOrderApplicationErrors;
    }>;
}
declare function searchOrders$1(httpClient: HttpClient): SearchOrdersSignature;
interface SearchOrdersSignature {
    /**
     * Retrieves a list of orders, given the provided paging, filtering, and sorting.
     *
     *
     * Search Orders runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     * - `filter: {"status": {"$ne": "INITIALIZED"}}` - other order statuses can be queried, but orders with `status: "INITIALIZED"` are never returned
     *
     * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     * @param - Search options.
     */
    (search: OrderSearch): Promise<NonNullablePaths<SearchOrdersResponse, `orders` | `orders.${number}.number` | `orders.${number}.buyerInfo.visitorId` | `orders.${number}.buyerInfo.memberId` | `orders.${number}.paymentStatus` | `orders.${number}.fulfillmentStatus` | `orders.${number}.weightUnit` | `orders.${number}.taxIncludedInPrices` | `orders.${number}.shippingInfo.title` | `orders.${number}.status` | `orders.${number}.attributionSource` | `orders.${number}.createdBy.userId` | `orders.${number}.createdBy.memberId` | `orders.${number}.createdBy.visitorId` | `orders.${number}.createdBy.appId` | `orders.${number}.channelInfo.type` | `orders.${number}.balanceSummary.balance.amount` | `orders.${number}.balanceSummary.balance.formattedAmount` | `orders.${number}.businessLocation._id` | `orders.${number}.businessLocation.name`, 6>>;
}
declare function createOrder$1(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order.
     *
     *
     * The `createOrder()` function returns a Promise that resolves when the order is created.
     *
     * > **Notes:**
     * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
     * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
     * @param - Order info.
     * @returns Newly created order.
     */
    (order: NonNullablePaths<Order, `billingInfo.contactDetails` | `channelInfo` | `currencyConversionDetails.conversionRate` | `currencyConversionDetails.originalCurrency` | `lineItems` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.itemType` | `lineItems.${number}.price` | `lineItems.${number}.productName` | `lineItems.${number}.productName.original` | `lineItems.${number}.quantity` | `priceSummary`, 5>, options?: CreateOrderOptions): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
        __applicationErrorsType?: CreateOrderApplicationErrors;
    }>;
}
declare function updateOrder$1(httpClient: HttpClient): UpdateOrderSignature;
interface UpdateOrderSignature {
    /**
     * Updates an order.
     *
     *
     * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Order ID.
     * @returns Newly created order.
     */
    (_id: string, order: UpdateOrder): Promise<NonNullablePaths<Order, `number` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.productName.original` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.quantity` | `lineItems.${number}.totalDiscount.amount` | `lineItems.${number}.totalDiscount.formattedAmount` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.paymentOption` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.taxInfo.taxIncludedInPrice` | `lineItems.${number}.digitalFile.fileId` | `lineItems.${number}.subscriptionInfo.cycleNumber` | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.taxableAddress.addressType` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `paymentStatus` | `fulfillmentStatus` | `weightUnit` | `taxIncludedInPrices` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.title` | `shippingInfo.logistics.pickupDetails.pickupMethod` | `status` | `taxInfo.taxBreakdown` | `taxInfo.taxBreakdown.${number}.taxName` | `taxInfo.taxBreakdown.${number}.taxType` | `taxInfo.taxBreakdown.${number}.jurisdiction` | `taxInfo.taxBreakdown.${number}.jurisdictionType` | `taxInfo.taxBreakdown.${number}.rate` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.merchantDiscount.discountReason` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `activities` | `activities.${number}.customActivity.appId` | `activities.${number}.customActivity.type` | `activities.${number}.merchantComment.message` | `activities.${number}.orderRefunded.manual` | `activities.${number}.orderRefunded.reason` | `activities.${number}.type` | `attributionSource` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `channelInfo.type` | `customFields` | `customFields.${number}.title` | `balanceSummary.balance.amount` | `balanceSummary.balance.formattedAmount` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}._id` | `tags.privateTags.tagIds` | `businessLocation._id` | `businessLocation.name`, 6> & {
        __applicationErrorsType?: UpdateOrderApplicationErrors;
    }>;
}
declare function bulkUpdateOrders$1(httpClient: HttpClient): BulkUpdateOrdersSignature;
interface BulkUpdateOrdersSignature {
    /**
     * Updates up to 100 orders.
     *
     *
     * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `orders.order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Orders to update.
     */
    (orders: NonNullablePaths<MaskedOrder, `order` | `order._id`, 3>[], options?: BulkUpdateOrdersOptions): Promise<NonNullablePaths<BulkUpdateOrdersResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.number` | `results.${number}.item.buyerInfo.visitorId` | `results.${number}.item.buyerInfo.memberId` | `results.${number}.item.paymentStatus` | `results.${number}.item.fulfillmentStatus` | `results.${number}.item.weightUnit` | `results.${number}.item.taxIncludedInPrices` | `results.${number}.item.shippingInfo.title` | `results.${number}.item.status` | `results.${number}.item.attributionSource` | `results.${number}.item.createdBy.userId` | `results.${number}.item.createdBy.memberId` | `results.${number}.item.createdBy.visitorId` | `results.${number}.item.createdBy.appId` | `results.${number}.item.channelInfo.type` | `results.${number}.item.businessLocation._id` | `results.${number}.item.businessLocation.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
/** @internal */
declare function commitDeltas$1(httpClient: HttpClient): CommitDeltasSignature;
interface CommitDeltasSignature {
    /** @param - Order id to be updated */
    (_id: string, options?: NonNullablePaths<CommitDeltasOptions, `changes` | `changes.priceSummary.subtotal` | `changes.priceSummary.total`, 4>): Promise<NonNullablePaths<CommitDeltasResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7> & {
        __applicationErrorsType?: CommitDeltasApplicationErrors;
    }>;
}
/** @internal */
declare function updateOrderLineItem$1(httpClient: HttpClient): UpdateOrderLineItemSignature;
interface UpdateOrderLineItemSignature {
    /** @deprecated */
    (identifiers: NonNullablePaths<UpdateOrderLineItemIdentifiers, `_id` | `lineItemId`, 2>, lineItem: UpdateOrderLineItem): Promise<NonNullablePaths<UpdateOrderLineItemResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7>>;
}
/** @internal */
declare function addActivity$1(httpClient: HttpClient): AddActivitySignature;
interface AddActivitySignature {
    /**
     * Adds a merchant comment to an order.
     * > **Note:** Activities with type CustomActivity not supported
     * @param - Order ID.
     * @param - Activity info.
     * @deprecated
     */
    (_id: string, activity: PublicActivity): Promise<NonNullablePaths<AddActivityResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name` | `activityId`, 7>>;
}
/** @internal */
declare function updateActivity$1(httpClient: HttpClient): UpdateActivitySignature;
interface UpdateActivitySignature {
    /**
     * Updates an order's activity.
     * @param - Activity info.
     */
    (identifiers: NonNullablePaths<UpdateActivityIdentifiers, `_id` | `activityId`, 2>, activity: PublicActivity): Promise<NonNullablePaths<UpdateActivityResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7>>;
}
/** @internal */
declare function deleteActivity$1(httpClient: HttpClient): DeleteActivitySignature;
interface DeleteActivitySignature {
    /**
     * Delete's an order's activity.
     *
     * Only custom activities and merchant comments can be deleted.
     */
    (identifiers: NonNullablePaths<DeleteActivityIdentifiers, `_id` | `activityId`, 2>): Promise<NonNullablePaths<DeleteActivityResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7>>;
}
declare function cancelOrder$1(httpClient: HttpClient): CancelOrderSignature;
interface CancelOrderSignature {
    /**
     * Cancels an order.
     *
     *
     * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
     * @param - Order ID.
     */
    (_id: string, options?: CancelOrderOptions): Promise<NonNullablePaths<CancelOrderResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7> & {
        __applicationErrorsType?: CancelOrderApplicationErrors;
    }>;
}
/** @internal */
declare function updateOrderStatus$1(httpClient: HttpClient): UpdateOrderStatusSignature;
interface UpdateOrderStatusSignature {
    /**
     * Updates order status.
     *
     * >CANCELED and REJECTED are final statuses. Update from either of those will fail.
     * >Updates into INITIALIZED are not supported.
     *
     * Approving order:
     * APPROVED status can be set while order has one of [INITIALIZED, PENDING] statuses.
     *
     * Approving an order which was created with CreateOrderRequest.settings.order_approval_strategy = PAYMENT_METHOD_SAVED
     * will cause an error.
     *
     * Setting PENDING status:
     * Only orders in INITIALIZED status can be updated into PENDING.
     * @param - Order ID.
     * @param - New order status.
     */
    (orderId: string, status: OrderStatusWithLiterals): Promise<NonNullablePaths<UpdateOrderStatusResponse, `order.number` | `order.lineItems` | `order.lineItems.${number}._id` | `order.lineItems.${number}.productName.original` | `order.lineItems.${number}.catalogReference.catalogItemId` | `order.lineItems.${number}.catalogReference.appId` | `order.lineItems.${number}.quantity` | `order.lineItems.${number}.totalDiscount.amount` | `order.lineItems.${number}.totalDiscount.formattedAmount` | `order.lineItems.${number}.physicalProperties.shippable` | `order.lineItems.${number}.itemType.preset` | `order.lineItems.${number}.itemType.custom` | `order.lineItems.${number}.paymentOption` | `order.lineItems.${number}.taxDetails.taxRate` | `order.lineItems.${number}.taxInfo.taxIncludedInPrice` | `order.lineItems.${number}.digitalFile.fileId` | `order.lineItems.${number}.subscriptionInfo.cycleNumber` | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal` | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation` | `order.lineItems.${number}.priceDescription.original` | `order.lineItems.${number}.taxableAddress.addressType` | `order.buyerInfo.visitorId` | `order.buyerInfo.memberId` | `order.paymentStatus` | `order.fulfillmentStatus` | `order.weightUnit` | `order.taxIncludedInPrices` | `order.billingInfo.address.streetAddress.number` | `order.billingInfo.address.streetAddress.name` | `order.billingInfo.contactDetails.vatId._id` | `order.billingInfo.contactDetails.vatId.type` | `order.shippingInfo.title` | `order.shippingInfo.logistics.pickupDetails.pickupMethod` | `order.status` | `order.taxInfo.taxBreakdown` | `order.taxInfo.taxBreakdown.${number}.taxName` | `order.taxInfo.taxBreakdown.${number}.taxType` | `order.taxInfo.taxBreakdown.${number}.jurisdiction` | `order.taxInfo.taxBreakdown.${number}.jurisdictionType` | `order.taxInfo.taxBreakdown.${number}.rate` | `order.appliedDiscounts` | `order.appliedDiscounts.${number}.coupon._id` | `order.appliedDiscounts.${number}.coupon.code` | `order.appliedDiscounts.${number}.coupon.name` | `order.appliedDiscounts.${number}.merchantDiscount.discountReason` | `order.appliedDiscounts.${number}.discountRule._id` | `order.appliedDiscounts.${number}.discountRule.name.original` | `order.appliedDiscounts.${number}.discountType` | `order.activities` | `order.activities.${number}.customActivity.appId` | `order.activities.${number}.customActivity.type` | `order.activities.${number}.merchantComment.message` | `order.activities.${number}.orderRefunded.manual` | `order.activities.${number}.orderRefunded.reason` | `order.activities.${number}.type` | `order.attributionSource` | `order.createdBy.userId` | `order.createdBy.memberId` | `order.createdBy.visitorId` | `order.createdBy.appId` | `order.channelInfo.type` | `order.customFields` | `order.customFields.${number}.title` | `order.balanceSummary.balance.amount` | `order.balanceSummary.balance.formattedAmount` | `order.additionalFees` | `order.additionalFees.${number}.name` | `order.additionalFees.${number}._id` | `order.tags.privateTags.tagIds` | `order.businessLocation._id` | `order.businessLocation.name`, 7> & {
        __applicationErrorsType?: UpdateOrderStatusApplicationErrors;
    }>;
}
/** @internal */
declare function aggregateOrders$1(httpClient: HttpClient): AggregateOrdersSignature;
interface AggregateOrdersSignature {
    /** */
    (options?: NonNullablePaths<AggregateOrdersOptions, `aggregation`, 2>): Promise<AggregateOrdersResponse>;
}
declare function bulkUpdateOrderTags$1(httpClient: HttpClient): BulkUpdateOrderTagsSignature;
interface BulkUpdateOrderTagsSignature {
    /**
     * Synchronously update tags on multiple orders, by list of order IDs.
     *
     * > **Note:** If the same tag is passed to both the `assignTags` and `unassignTags` fields, it will be assigned.
     * @param - IDs of orders to update tags for.
     */
    (orderIds: string[], options?: BulkUpdateOrderTagsOptions): Promise<NonNullablePaths<BulkUpdateOrderTagsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onOrderApproved$1: EventDefinition<OrderApprovedEnvelope, "wix.ecom.v1.order_approved">;
declare const onOrderUpdated$1: EventDefinition<OrderUpdatedEnvelope, "wix.ecom.v1.order_updated">;
declare const onOrderCanceled$1: EventDefinition<OrderCanceledEnvelope, "wix.ecom.v1.order_canceled">;
declare const onOrderCreated$1: EventDefinition<OrderCreatedEnvelope, "wix.ecom.v1.order_created">;
declare const onOrderPaymentStatusUpdated$1: EventDefinition<OrderPaymentStatusUpdatedEnvelope, "wix.ecom.v1.order_payment_status_updated">;

declare const preparePaymentCollection: MaybeContext<BuildRESTFunction<typeof preparePaymentCollection$1> & typeof preparePaymentCollection$1>;
declare const getPaymentCollectabilityStatus: MaybeContext<BuildRESTFunction<typeof getPaymentCollectabilityStatus$1> & typeof getPaymentCollectabilityStatus$1>;
/** @internal */
declare const recordManuallyCollectedPayment: MaybeContext<BuildRESTFunction<typeof recordManuallyCollectedPayment$1> & typeof recordManuallyCollectedPayment$1>;
/** @internal */
declare const paymentCollectionMarkOrderAsPaid: MaybeContext<BuildRESTFunction<typeof paymentCollectionMarkOrderAsPaid$1> & typeof paymentCollectionMarkOrderAsPaid$1>;
/** @internal */
declare const paymentCollectionBulkMarkOrdersAsPaid: MaybeContext<BuildRESTFunction<typeof paymentCollectionBulkMarkOrdersAsPaid$1> & typeof paymentCollectionBulkMarkOrdersAsPaid$1>;
/** @internal */
declare const getRefundabilityStatus: MaybeContext<BuildRESTFunction<typeof getRefundabilityStatus$1> & typeof getRefundabilityStatus$1>;
/** @internal */
declare const paymentCollectionCreatePaymentGatewayOrder: MaybeContext<BuildRESTFunction<typeof paymentCollectionCreatePaymentGatewayOrder$1> & typeof paymentCollectionCreatePaymentGatewayOrder$1>;
/** @internal */
declare const chargeMemberships: MaybeContext<BuildRESTFunction<typeof chargeMemberships$1> & typeof chargeMemberships$1>;
/** @internal */
declare const triggerRefund: MaybeContext<BuildRESTFunction<typeof triggerRefund$1> & typeof triggerRefund$1>;
declare const voidAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof voidAuthorizedPayments$1> & typeof voidAuthorizedPayments$1>;
declare const captureAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof captureAuthorizedPayments$1> & typeof captureAuthorizedPayments$1>;
declare const getOrder: MaybeContext<BuildRESTFunction<typeof getOrder$1> & typeof getOrder$1>;
declare const searchOrders: MaybeContext<BuildRESTFunction<typeof searchOrders$1> & typeof searchOrders$1>;
declare const createOrder: MaybeContext<BuildRESTFunction<typeof createOrder$1> & typeof createOrder$1>;
declare const updateOrder: MaybeContext<BuildRESTFunction<typeof updateOrder$1> & typeof updateOrder$1>;
declare const bulkUpdateOrders: MaybeContext<BuildRESTFunction<typeof bulkUpdateOrders$1> & typeof bulkUpdateOrders$1>;
/** @internal */
declare const commitDeltas: MaybeContext<BuildRESTFunction<typeof commitDeltas$1> & typeof commitDeltas$1>;
/** @internal */
declare const updateOrderLineItem: MaybeContext<BuildRESTFunction<typeof updateOrderLineItem$1> & typeof updateOrderLineItem$1>;
/** @internal */
declare const addActivity: MaybeContext<BuildRESTFunction<typeof addActivity$1> & typeof addActivity$1>;
/** @internal */
declare const updateActivity: MaybeContext<BuildRESTFunction<typeof updateActivity$1> & typeof updateActivity$1>;
/** @internal */
declare const deleteActivity: MaybeContext<BuildRESTFunction<typeof deleteActivity$1> & typeof deleteActivity$1>;
declare const cancelOrder: MaybeContext<BuildRESTFunction<typeof cancelOrder$1> & typeof cancelOrder$1>;
/** @internal */
declare const updateOrderStatus: MaybeContext<BuildRESTFunction<typeof updateOrderStatus$1> & typeof updateOrderStatus$1>;
/** @internal */
declare const aggregateOrders: MaybeContext<BuildRESTFunction<typeof aggregateOrders$1> & typeof aggregateOrders$1>;
declare const bulkUpdateOrderTags: MaybeContext<BuildRESTFunction<typeof bulkUpdateOrderTags$1> & typeof bulkUpdateOrderTags$1>;
/** */
declare const onOrderApproved: BuildEventDefinition<typeof onOrderApproved$1> & typeof onOrderApproved$1;
/** */
declare const onOrderUpdated: BuildEventDefinition<typeof onOrderUpdated$1> & typeof onOrderUpdated$1;
/**
 * Triggered when an order is canceled.
 * Learn more about [eCommerce webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderCanceled: BuildEventDefinition<typeof onOrderCanceled$1> & typeof onOrderCanceled$1;
/**
 * Triggered when an order is created.
 * Learn more about [webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).
 */
declare const onOrderCreated: BuildEventDefinition<typeof onOrderCreated$1> & typeof onOrderCreated$1;
/**
 * Triggered when an order's payment status is updated.
 */
declare const onOrderPaymentStatusUpdated: BuildEventDefinition<typeof onOrderPaymentStatusUpdated$1> & typeof onOrderPaymentStatusUpdated$1;

export { AddActivityResponse, AggregateOrdersOptions, AggregateOrdersResponse, BulkMarkOrdersAsPaidResponse, BulkUpdateOrderTagsOptions, BulkUpdateOrderTagsResponse, BulkUpdateOrdersOptions, BulkUpdateOrdersResponse, CancelOrderApplicationErrors, CancelOrderOptions, CancelOrderResponse, CaptureAuthorizedPaymentsApplicationErrors, CaptureAuthorizedPaymentsResponse, ChargeMembershipsOptions, CommitDeltasApplicationErrors, CommitDeltasOptions, CommitDeltasResponse, CreateOrderApplicationErrors, CreateOrderOptions, CreatePaymentGatewayOrderResponse, DeleteActivityIdentifiers, DeleteActivityResponse, GetOrderApplicationErrors, GetPaymentCollectabilityStatusResponse, GetRefundabilityStatusResponse, MarkOrderAsPaidResponse, MaskedOrder, Order, OrderApprovedEnvelope, OrderCanceledEnvelope, OrderCreatedEnvelope, OrderPaymentStatusUpdatedEnvelope, OrderSearch, OrderStatusWithLiterals, OrderUpdatedEnvelope, PaymentCapture, PaymentCollectionCreatePaymentGatewayOrderApplicationErrors, PaymentCollectionCreatePaymentGatewayOrderOptions, PaymentCollectionMarkOrderAsPaidApplicationErrors, PaymentRefund, PreparePaymentCollectionApplicationErrors, PreparePaymentCollectionOptions, PreparePaymentCollectionResponse, Price, PublicActivity, RecordManuallyCollectedPaymentApplicationErrors, SearchOrdersResponse, TriggerRefundApplicationErrors, TriggerRefundOptions, TriggerRefundResponse, UpdateActivityIdentifiers, UpdateActivityResponse, UpdateOrder, UpdateOrderApplicationErrors, UpdateOrderLineItem, UpdateOrderLineItemIdentifiers, UpdateOrderLineItemResponse, UpdateOrderStatusApplicationErrors, UpdateOrderStatusResponse, VoidAuthorizedPaymentsApplicationErrors, VoidAuthorizedPaymentsResponse, addActivity, aggregateOrders, bulkUpdateOrderTags, bulkUpdateOrders, cancelOrder, captureAuthorizedPayments, chargeMemberships, commitDeltas, createOrder, deleteActivity, getOrder, getPaymentCollectabilityStatus, getRefundabilityStatus, onOrderApproved, onOrderCanceled, onOrderCreated, onOrderPaymentStatusUpdated, onOrderUpdated, paymentCollectionBulkMarkOrdersAsPaid, paymentCollectionCreatePaymentGatewayOrder, paymentCollectionMarkOrderAsPaid, preparePaymentCollection, recordManuallyCollectedPayment, searchOrders, triggerRefund, updateActivity, updateOrder, updateOrderLineItem, updateOrderStatus, voidAuthorizedPayments };
