{"version":3,"sources":["../../../index.typings.ts","../../../src/ecom-v1-order-orders.universal.ts","../../../src/ecom-v1-order-orders.http.ts"],"sourcesContent":["import {\n  SearchOrdersResponse,\n  CursorSearch,\n} from './src/ecom-v1-order-orders.universal';\n\nexport * from './src/ecom-v1-order-orders.universal.js';\n\n/** @hidden */\nexport type OrderSearch = {};\n\n/**\n * Retrieves a list of orders, given the provided paging, filtering, and sorting.\n *\n *\n * Search Orders runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n * - `filter: {\"status\": {\"$ne\": \"INITIALIZED\"}}` - other order statuses can be queried, but orders with `status: \"INITIALIZED\"` are never returned\n *\n * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).\n *\n * To learn about working with _Search_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and\n * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n * @param search - Search options.\n * @public\n * @requiredField search\n * @permissionId ECOM.READ_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.SearchOrders\n */\nexport declare function searchOrders(\n  search: CursorSearch\n): Promise<SearchOrdersResponse>;\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport {\n  HttpClient,\n  Search as SearchSdkType,\n  NonNullablePaths,\n  SearchSpec,\n} from '@wix/sdk-types';\nimport * as ambassadorWixEcomV1Order from './ecom-v1-order-orders.http.js';\n// @ts-ignore\nimport { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';\nimport { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';\nimport { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';\nimport { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\nexport interface Order {\n  /**\n   * Order ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Order number displayed in the site owner's dashboard (auto-generated).\n   * @readonly\n   */\n  number?: string;\n  /**\n   * Date and time the order was created.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Order line items.\n   * @minSize 1\n   * @maxSize 300\n   * @readonly\n   */\n  lineItems?: OrderLineItem[];\n  /** Buyer information. */\n  buyerInfo?: BuyerInfo;\n  /** Order payment status. */\n  paymentStatus?: PaymentStatusWithLiterals;\n  /**\n   * Order fulfillment status.\n   * @readonly\n   */\n  fulfillmentStatus?: FulfillmentStatusWithLiterals;\n  /**\n   * Language for communication with the buyer. Defaults to the site language.\n   * For a site that supports multiple languages, this is the language the buyer selected.\n   */\n  buyerLanguage?: string | null;\n  /** Weight measurement unit - defaults to site's weight unit. */\n  weightUnit?: WeightUnitWithLiterals;\n  /**\n   * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency?: string | null;\n  /** Currency conversion details. For use with multi-currency sites. */\n  currencyConversionDetails?: CurrencyConversionDetails;\n  /**\n   * Whether tax is included in line item prices.\n   * @immutable\n   */\n  taxIncludedInPrices?: boolean;\n  /**\n   * Site language in which original values are shown.\n   * @readonly\n   * @immutable\n   */\n  siteLanguage?: string | null;\n  /**\n   * Order price summary.\n   * @readonly\n   */\n  priceSummary?: PriceSummary;\n  /** Billing address and contact details. */\n  billingInfo?: AddressWithContact;\n  /** Shipping info and selected shipping option details. */\n  shippingInfo?: V1ShippingInformation;\n  /**\n   * [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer.\n   * @maxLength 1000\n   */\n  buyerNote?: string | null;\n  /** Order status. */\n  status?: OrderStatusWithLiterals;\n  /** Whether order is archived. */\n  archived?: boolean | null;\n  /**\n   * Tax summary.\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * @deprecated Tax summary.\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * @replacedBy tax_info\n   * @targetRemovalDate 2024-09-30\n   */\n  taxSummary?: TaxSummary;\n  /** Tax information. */\n  taxInfo?: OrderTaxInfo;\n  /**\n   * Applied discounts.\n   * @maxSize 320\n   */\n  appliedDiscounts?: AppliedDiscount[];\n  /**\n   * Order activities.\n   * @readonly\n   * @maxSize 1000\n   */\n  activities?: Activity[];\n  /** Order attribution source. */\n  attributionSource?: AttributionSourceWithLiterals;\n  /**\n   * ID of the order's initiator.\n   * @readonly\n   */\n  createdBy?: CreatedBy;\n  /** Information about the sales channel that submitted this order. */\n  channelInfo?: ChannelInfo;\n  /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */\n  seenByAHuman?: boolean | null;\n  /**\n   * Checkout ID.\n   * @format GUID\n   */\n  checkoutId?: string | null;\n  /** Custom fields. */\n  customFields?: CustomField[];\n  /**\n   * Balance summary.\n   * @readonly\n   */\n  balanceSummary?: BalanceSummary;\n  /**\n   * Additional fees applied to the order.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFee[];\n  /**\n   * Custom field data for the order object.\n   *\n   * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.\n   */\n  extendedFields?: ExtendedFields;\n  /**\n   * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.\n   * @format GUID\n   */\n  purchaseFlowId?: string | null;\n  /**\n   * Order recipient address and contact details.\n   *\n   * This field may differ from the address in `shippingInfo.logistics` when:\n   * + The chosen shipping option is pickup point or store pickup.\n   * + No shipping option is selected.\n   */\n  recipientInfo?: AddressWithContact;\n  /**\n   * Order tags.\n   *\n   * [Tags](https://dev.wix.com/docs/rest/business-management/tags/introduction) are labels attached to entities, allowing for flexible categorization and data management.\n   */\n  tags?: Tags;\n  /**\n   * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * Used for migration from external systems.\n   * @immutable\n   */\n  purchasedDate?: Date | null;\n  /** Order Location */\n  businessLocation?: Location;\n  /**\n   * Pay after free trial price summary. Price summary that should be paid for subscriptions after free trial period.\n   * @readonly\n   */\n  payAfterFreeTrial?: PriceSummary;\n}\n\nexport interface OrderLineItem {\n  /**\n   * Line item ID.\n   * @immutable\n   */\n  _id?: string;\n  /**\n   * Item name.\n   * + Stores - `product.name`\n   * + Bookings - `service.info.name`\n   * + Events - `ticket.name`\n   */\n  productName?: ProductName;\n  /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */\n  catalogReference?: CatalogReference;\n  /**\n   * Line item quantity.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n  /**\n   * Total discount for this line item's entire quantity.\n   * @readonly\n   */\n  totalDiscount?: Price;\n  /**\n   * Line item description lines. Used for display purposes for the cart, checkout and order.\n   * @maxSize 20\n   */\n  descriptionLines?: DescriptionLine[];\n  /** Line item image. */\n  image?: string;\n  /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */\n  physicalProperties?: PhysicalProperties;\n  /** Item type. Either a preset type or custom. */\n  itemType?: ItemType;\n  /**\n   * Fulfiller ID. Field is empty when the line item is self-fulfilled.\n   *\n   * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).\n   * @format GUID\n   */\n  fulfillerId?: string | null;\n  /**\n   * Number of items that were refunded.\n   * @max 100000\n   */\n  refundQuantity?: number | null;\n  /**\n   * Number of items restocked.\n   * @max 100000\n   */\n  restockQuantity?: number | null;\n  /** Line item price after line item discounts for display purposes. */\n  price?: Price;\n  /**\n   * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.\n   * @readonly\n   */\n  priceBeforeDiscounts?: Price;\n  /**\n   * Total price after discounts, and before tax.\n   * @readonly\n   */\n  totalPriceBeforeTax?: Price;\n  /**\n   * Total price after all discounts and tax.\n   * @readonly\n   */\n  totalPriceAfterTax?: Price;\n  /**\n   * Type of selected payment option for current item.\n   *\n   * Default: `FULL_PAYMENT_ONLINE`\n   */\n  paymentOption?: PaymentOptionTypeWithLiterals;\n  /**\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Tax details for this line item.\n   * @deprecated Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Tax details for this line item.\n   * @replacedBy tax_info\n   * @targetRemovalDate 2024-09-30\n   */\n  taxDetails?: ItemTaxFullDetails;\n  /** Represents all the relevant tax details for a specific line item. */\n  taxInfo?: LineItemTaxInfo;\n  /** Digital file identifier, relevant only for items with type DIGITAL. */\n  digitalFile?: DigitalFile;\n  /** Subscription info. */\n  subscriptionInfo?: SubscriptionInfo;\n  /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - \"Starts at $67\". */\n  priceDescription?: PriceDescription;\n  /**\n   * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `\"DEPOSIT_ONLINE\"`.\n   * @readonly\n   */\n  depositAmount?: Price;\n  /**\n   * Line item locations.\n   *\n   * The location's total quantity must not exceed the line item quantity.\n   * @maxSize 5\n   */\n  locations?: LocationAndQuantity[];\n  /** Address used for tax calculation. */\n  taxableAddress?: TaxableAddress;\n  /**\n   * ID of the app managing the inventory.\n   * @internal\n   * @format GUID\n   */\n  inventoryAppId?: string | null;\n  /**\n   * Custom extended fields for the line item object.\n   *\n   * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.\n   */\n  extendedFields?: ExtendedFields;\n  /**\n   * Modifier groups that were added to the item.\n   * @readonly\n   * @maxSize 10\n   */\n  modifierGroups?: ModifierGroup[];\n}\n\nexport interface ProductName {\n  /**\n   * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   *\n   * Min: 1 character.\n   * Max: 200 characters.\n   * @minLength 1\n   * @maxLength 200\n   */\n  original?: string;\n  /**\n   * Item name translated into the buyer's language.\n   *\n   * Min: 1 character.\n   * Max: 400 characters.\n   * Default: Same as `original`.\n   * @minLength 1\n   * @maxLength 400\n   */\n  translated?: string | null;\n}\n\n/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */\nexport interface CatalogReference {\n  /**\n   * ID of the item within the catalog it belongs to.\n   * @minLength 1\n   * @maxLength 36\n   */\n  catalogItemId?: string;\n  /**\n   * ID of the app providing the catalog.\n   *\n   * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).\n   *\n   * For items from Wix catalogs, the following values always apply:\n   * + Wix Stores: `\"215238eb-22a5-4c36-9e7b-e7c08025e04e\"`\n   * + Wix Bookings: `\"13d21c63-b5ec-5912-8397-c3a5ddb27a97\"`\n   * + Wix Restaurants: `\"9a5d83fd-8570-482e-81ab-cfa88942ee60\"`\n   * @minLength 1\n   */\n  appId?: string;\n  /**\n   * Additional item details in key:value pairs.\n   *\n   * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.\n   *\n   * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).\n   */\n  options?: Record<string, any> | null;\n}\n\nexport interface Price {\n  /**\n   * Amount.\n   * @decimalValue options { gte:0, lte:1000000000000000 }\n   */\n  amount?: string;\n  /**\n   * Amount formatted with currency symbol.\n   * @readonly\n   */\n  formattedAmount?: string;\n}\n\nexport interface DescriptionLine\n  extends DescriptionLineValueOneOf,\n    DescriptionLineDescriptionLineValueOneOf {\n  /** Description line plain text value. */\n  plainText?: PlainTextValue;\n  /** Description line color value. */\n  colorInfo?: Color;\n  /** Description line name. */\n  name?: DescriptionLineName;\n  /**\n   * Whether the description line originates from a modifier.\n   * @internal\n   */\n  modifierDescriptionLine?: boolean;\n}\n\n/** @oneof */\nexport interface DescriptionLineValueOneOf {\n  /** Description line plain text value. */\n  plainText?: PlainTextValue;\n  /** Description line color value. */\n  colorInfo?: Color;\n}\n\n/** @oneof */\nexport interface DescriptionLineDescriptionLineValueOneOf {}\n\nexport interface DescriptionLineName {\n  /**\n   * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   * @maxLength 100\n   */\n  original?: string;\n  /**\n   * Description line name translated into the buyer's language.\n   *\n   * Default: Same as `original`.\n   * @maxLength 200\n   */\n  translated?: string | null;\n}\n\nexport interface PlainTextValue {\n  /**\n   * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   * @maxLength 600\n   */\n  original?: string;\n  /**\n   * Description line plain text value translated into the buyer's language.\n   *\n   * Default: Same as `original`.\n   * @maxLength 600\n   */\n  translated?: string | null;\n}\n\nexport interface Color {\n  /**\n   * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   * @maxLength 500\n   */\n  original?: string;\n  /**\n   * Description line color name translated into the buyer's language.\n   *\n   * Default: Same as `original`.\n   * @maxLength 500\n   */\n  translated?: string | null;\n  /** HEX or RGB color code for display. */\n  code?: string | null;\n}\n\nexport enum DescriptionLineType {\n  /** Unrecognized type. */\n  UNRECOGNISED = 'UNRECOGNISED',\n  /** Plain text type. */\n  PLAIN_TEXT = 'PLAIN_TEXT',\n  /** Color type. */\n  COLOR = 'COLOR',\n}\n\n/** @enumType */\nexport type DescriptionLineTypeWithLiterals =\n  | DescriptionLineType\n  | 'UNRECOGNISED'\n  | 'PLAIN_TEXT'\n  | 'COLOR';\n\nexport interface FocalPoint {\n  /** X-coordinate of the focal point. */\n  x?: number;\n  /** Y-coordinate of the focal point. */\n  y?: number;\n  /** crop by height */\n  height?: number | null;\n  /** crop by width */\n  width?: number | null;\n}\n\nexport interface PhysicalProperties {\n  /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */\n  weight?: number | null;\n  /**\n   * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).\n   * @maxLength 40\n   */\n  sku?: string | null;\n  /** Whether this line item is shippable. */\n  shippable?: boolean;\n}\n\nexport interface ItemType extends ItemTypeItemTypeDataOneOf {\n  /** Preset item type. */\n  preset?: ItemTypeItemTypeWithLiterals;\n  /** Custom item type. When none of the preset types are suitable, specifies the custom type. */\n  custom?: string;\n}\n\n/** @oneof */\nexport interface ItemTypeItemTypeDataOneOf {\n  /** Preset item type. */\n  preset?: ItemTypeItemTypeWithLiterals;\n  /** Custom item type. When none of the preset types are suitable, specifies the custom type. */\n  custom?: string;\n}\n\nexport enum ItemTypeItemType {\n  UNRECOGNISED = 'UNRECOGNISED',\n  PHYSICAL = 'PHYSICAL',\n  DIGITAL = 'DIGITAL',\n  GIFT_CARD = 'GIFT_CARD',\n  SERVICE = 'SERVICE',\n}\n\n/** @enumType */\nexport type ItemTypeItemTypeWithLiterals =\n  | ItemTypeItemType\n  | 'UNRECOGNISED'\n  | 'PHYSICAL'\n  | 'DIGITAL'\n  | 'GIFT_CARD'\n  | 'SERVICE';\n\n/** Type of selected payment option for catalog item */\nexport enum PaymentOptionType {\n  /** The entire payment for this item happens as part of the checkout. */\n  FULL_PAYMENT_ONLINE = 'FULL_PAYMENT_ONLINE',\n  /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */\n  FULL_PAYMENT_OFFLINE = 'FULL_PAYMENT_OFFLINE',\n  /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */\n  MEMBERSHIP = 'MEMBERSHIP',\n  /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */\n  DEPOSIT_ONLINE = 'DEPOSIT_ONLINE',\n  /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */\n  MEMBERSHIP_OFFLINE = 'MEMBERSHIP_OFFLINE',\n  /**\n   * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.\n   * @documentationMaturity preview\n   */\n  MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER',\n}\n\n/** @enumType */\nexport type PaymentOptionTypeWithLiterals =\n  | PaymentOptionType\n  | 'FULL_PAYMENT_ONLINE'\n  | 'FULL_PAYMENT_OFFLINE'\n  | 'MEMBERSHIP'\n  | 'DEPOSIT_ONLINE'\n  | 'MEMBERSHIP_OFFLINE'\n  | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';\n\nexport interface ItemTaxFullDetails {\n  /** Taxable amount of this line item. */\n  taxableAmount?: Price;\n  /**\n   * Tax rate percentage, as a decimal numeral between 0 and 1. For example, `\"0.13\"`.\n   * @decimalValue options { gte:0, maxScale:6 }\n   */\n  taxRate?: string;\n  /** The calculated tax, based on the `taxableAmount` and `taxRate`. */\n  totalTax?: Price;\n}\n\nexport interface LineItemTaxInfo {\n  /** Calculated tax, based on `taxable_amount` and `tax_rate`. */\n  taxAmount?: Price;\n  /** Amount for which tax is calculated. */\n  taxableAmount?: Price;\n  /**\n   * Tax rate %, as a decimal point.\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gte:0, maxScale:6 }\n   */\n  taxRate?: string | null;\n  /**\n   * Tax group ID.\n   * @format GUID\n   */\n  taxGroupId?: string | null;\n  /** Indicates whether the price already includes tax. */\n  taxIncludedInPrice?: boolean;\n  /**\n   * Tax information for a line item.\n   * @maxSize 7\n   */\n  taxBreakdown?: LineItemTaxBreakdown[];\n}\n\n/**\n * TaxBreakdown represents tax information for a line item.\n * It holds the tax amount and the tax rate for each tax authority that apply on the line item.\n */\nexport interface LineItemTaxBreakdown {\n  /**\n   * Jurisdiction that taxes were calculated for. For example, \"New York\", or \"Quebec\".\n   * @maxLength 200\n   */\n  jurisdiction?: string | null;\n  /**\n   * Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000.\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gte:0, maxScale:6 }\n   */\n  rate?: string | null;\n  /** Amount of tax calculated for this line item. */\n  taxAmount?: Price;\n  /**\n   * The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, \"Sales Tax\", \"Income Tax\", \"Value Added Tax\", etc.\n   * @maxLength 200\n   */\n  taxType?: string | null;\n  /**\n   * The name of the tax against which this tax amount was calculated. For example, \"NY State Sales Tax\", \"Quebec GST\", etc.\n   * This name should be explicit enough to allow the merchant to understand what tax was calculated.\n   * @maxLength 200\n   */\n  taxName?: string | null;\n  /** Type of jurisdiction that taxes were calculated for. */\n  jurisdictionType?: JurisdictionTypeWithLiterals;\n  /** Non-taxable amount of the line item price. */\n  nonTaxableAmount?: Price;\n  /** Taxable amount of the line item price. */\n  taxableAmount?: Price;\n}\n\n/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */\nexport enum JurisdictionType {\n  UNDEFINED = 'UNDEFINED',\n  COUNTRY = 'COUNTRY',\n  STATE = 'STATE',\n  COUNTY = 'COUNTY',\n  CITY = 'CITY',\n  SPECIAL = 'SPECIAL',\n}\n\n/** @enumType */\nexport type JurisdictionTypeWithLiterals =\n  | JurisdictionType\n  | 'UNDEFINED'\n  | 'COUNTRY'\n  | 'STATE'\n  | 'COUNTY'\n  | 'CITY'\n  | 'SPECIAL';\n\nexport interface DigitalFile {\n  /**\n   * ID of the secure file in media.\n   * @minLength 1\n   * @maxLength 100\n   */\n  fileId?: string;\n  /**\n   * Link will exist after the digital links have been generated on the order.\n   * @format WEB_URL\n   * @minLength 1\n   * @maxLength 2000\n   */\n  link?: string | null;\n  /**\n   * Link expiration time and date.\n   * @readonly\n   */\n  expirationDate?: Date | null;\n}\n\nexport interface SubscriptionInfo {\n  /**\n   * Subscription ID.\n   * @format GUID\n   */\n  _id?: string | null;\n  /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */\n  cycleNumber?: number;\n  /**\n   * Subscription option title. For example, `\"Monthly coffee Subscription\"`.\n   * @maxLength 150\n   * @deprecated Subscription option title. For example, `\"Monthly coffee Subscription\"`.\n   * @replacedBy title\n   * @targetRemovalDate 2025-10-01\n   */\n  subscriptionOptionTitle?: string;\n  /**\n   * Subscription title. For example, `\"Monthly coffee Subscription\"`.\n   * @internal\n   */\n  title?: SubscriptionTitle;\n  /**\n   * Subscription option description. For example, `\"1kg of selected coffee, once a month\"`.\n   * @maxLength 500\n   * @deprecated Subscription option description. For example, `\"1kg of selected coffee, once a month\"`.\n   * @replacedBy description\n   * @targetRemovalDate 2025-10-01\n   */\n  subscriptionOptionDescription?: string | null;\n  /**\n   * Subscription description. For example, `\"1kg of selected coffee, once a month\"`.\n   * @internal\n   */\n  description?: SubscriptionDescription;\n  /**\n   * Subscription detailed information.\n   * @immutable\n   */\n  subscriptionSettings?: SubscriptionSettings;\n  /**\n   * Description of the charges that will be applied for subscription.\n   * @maxLength 1000\n   */\n  chargesDescription?: string | null;\n  /**\n   * Details of the billing adjustment applied to the current subscription cycle due to a shift in the subscription’s billing date.\n   * @internal\n   */\n  billingAdjustment?: BillingAdjustment;\n}\n\nexport interface SubscriptionTitle {\n  /**\n   * Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   * @minLength 1\n   * @maxLength 150\n   */\n  original?: string;\n  /**\n   * Subscription option name translated into the buyer's language.\n   *\n   * Default: Same as `original`.\n   * @minLength 1\n   * @maxLength 150\n   */\n  translated?: string | null;\n}\n\nexport interface SubscriptionDescription {\n  /**\n   * Subscription option description.\n   * @maxLength 500\n   */\n  original?: string;\n  /**\n   * Translated subscription option description.\n   * @maxLength 500\n   */\n  translated?: string | null;\n}\n\nexport interface SubscriptionSettings {\n  /** Frequency of recurring payment. */\n  frequency?: SubscriptionFrequencyWithLiterals;\n  /**\n   * Interval of recurring payment.\n   * @min 1\n   * @max 3650\n   */\n  interval?: number | null;\n  /** Whether subscription is renewed automatically at the end of each period. */\n  autoRenewal?: boolean;\n  /**\n   * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.\n   * @min 1\n   */\n  billingCycles?: number | null;\n  /** Whether to allow the customer to cancel the subscription. */\n  enableCustomerCancellation?: boolean;\n  /** Period until first cycle starts. If None => no free trial */\n  freeTrialPeriod?: FreeTrialPeriod;\n  /**\n   * The date the subscription will start. The subscription will be charged either now or according to freeTrialDays.\n   * @internal\n   */\n  startDate?: Date | null;\n}\n\n/** Frequency unit of recurring payment */\nexport enum SubscriptionFrequency {\n  UNDEFINED = 'UNDEFINED',\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n  YEAR = 'YEAR',\n}\n\n/** @enumType */\nexport type SubscriptionFrequencyWithLiterals =\n  | SubscriptionFrequency\n  | 'UNDEFINED'\n  | 'DAY'\n  | 'WEEK'\n  | 'MONTH'\n  | 'YEAR';\n\nexport interface FreeTrialPeriod {\n  /** Frequency of period. Values: DAY, WEEK, MONTH, YEAR */\n  frequency?: SubscriptionFrequencyWithLiterals;\n  /**\n   * interval of period\n   * @min 1\n   * @max 3650\n   */\n  interval?: number;\n}\n\nexport interface BillingAdjustment {\n  /** The type of adjustment. */\n  type?: AdjustmentTypeWithLiterals;\n  /** Summary of the prorated adjustment amount. */\n  priceSummary?: BillingAdjustmentPriceSummary;\n}\n\nexport enum AdjustmentType {\n  UNKNOWN_ADJUSTMENT_TYPE = 'UNKNOWN_ADJUSTMENT_TYPE',\n  /** Adjustment increases the total amount due to changes like covering extra billing days. Typically results in an additional fee. */\n  EXTRA_CHARGE = 'EXTRA_CHARGE',\n  /** Adjustment reduces the total amount due to changes like covering fewer billing days. Typically results in a credit or discount. */\n  CREDIT = 'CREDIT',\n}\n\n/** @enumType */\nexport type AdjustmentTypeWithLiterals =\n  | AdjustmentType\n  | 'UNKNOWN_ADJUSTMENT_TYPE'\n  | 'EXTRA_CHARGE'\n  | 'CREDIT';\n\nexport interface BillingAdjustmentPriceSummary {\n  /** Subtotal of adjustment, before tax. */\n  subtotal?: Price;\n  /** Tax on adjustment. */\n  tax?: Price;\n  /** Total price after tax. */\n  total?: Price;\n}\n\nexport interface PriceDescription {\n  /**\n   * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   * @minLength 1\n   * @maxLength 100\n   */\n  original?: string;\n  /**\n   * Price description translated into the buyer's language.\n   *\n   * Default: Same as `original`.\n   * @minLength 1\n   * @maxLength 100\n   */\n  translated?: string | null;\n}\n\nexport interface LocationAndQuantity {\n  /**\n   * Location id in the associated owner app.\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * Location owner app, if not provided then the site business info locations will be used.\n   * @format GUID\n   * @deprecated Location owner app, if not provided then the site business info locations will be used.\n   * @targetRemovalDate 2025-03-01\n   */\n  appId?: string | null;\n  /**\n   * Quantity for specific location.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n  /**\n   * Location name.\n   * @maxLength 500\n   * @readonly\n   */\n  name?: string | null;\n}\n\nexport interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {\n  /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */\n  addressType?: TaxableAddressTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface TaxableAddressTaxableAddressDataOneOf {\n  /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */\n  addressType?: TaxableAddressTypeWithLiterals;\n}\n\nexport enum TaxableAddressType {\n  UNKNOWN_TAXABLE_ADDRESS = 'UNKNOWN_TAXABLE_ADDRESS',\n  BUSINESS = 'BUSINESS',\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\n/** @enumType */\nexport type TaxableAddressTypeWithLiterals =\n  | TaxableAddressType\n  | 'UNKNOWN_TAXABLE_ADDRESS'\n  | 'BUSINESS'\n  | 'BILLING'\n  | 'SHIPPING';\n\nexport interface ExtendedFields {\n  /**\n   * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.\n   * The value of each key is structured according to the schema defined when the extended fields were configured.\n   *\n   * You can only access fields for which you have the appropriate permissions.\n   *\n   * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).\n   */\n  namespaces?: Record<string, Record<string, any>>;\n}\n\nexport interface ModifierGroup {\n  /**\n   * Modifier group ID.\n   * @minLength 1\n   * @maxLength 36\n   */\n  _id?: string;\n  /** Modifier group name. */\n  name?: TranslatableString;\n  /**\n   * List of modifiers in this group.\n   * @minSize 1\n   * @maxSize 10\n   */\n  modifiers?: ItemModifier[];\n}\n\nexport interface TranslatableString {\n  /**\n   * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).\n   *\n   * Min: 1 character.\n   * Max: 200 characters.\n   * @minLength 1\n   * @maxLength 200\n   */\n  original?: string;\n  /**\n   * String translated into the buyer's language.\n   *\n   * Min: 1 character.\n   * Max: 400 characters.\n   * Default: Same as `original`.\n   * @minLength 1\n   * @maxLength 400\n   */\n  translated?: string | null;\n}\n\nexport interface ItemModifier {\n  /**\n   * Modifier ID.\n   * @minLength 1\n   * @maxLength 36\n   */\n  _id?: string;\n  /**\n   * The quantity of this modifier.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number | null;\n  /** Primary display label for the modifier. */\n  label?: TranslatableString;\n  /** Additional details. */\n  details?: TranslatableString;\n  /** The price of the modifier. */\n  price?: Price;\n}\n\n/** Buyer Info */\nexport interface BuyerInfo extends BuyerInfoIdOneOf {\n  /**\n   * Visitor ID (if site visitor is not a member).\n   * @format GUID\n   */\n  visitorId?: string;\n  /**\n   * Member ID (if site visitor is a site member).\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://www.wix.com/velo/reference/wix-crm-backend/contacts/introduction).\n   * @format GUID\n   */\n  contactId?: string | null;\n  /**\n   * Buyer email address.\n   * @format EMAIL\n   */\n  email?: string | null;\n}\n\n/** @oneof */\nexport interface BuyerInfoIdOneOf {\n  /**\n   * Visitor ID (if site visitor is not a member).\n   * @format GUID\n   */\n  visitorId?: string;\n  /**\n   * Member ID (if site visitor is a site member).\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport enum PaymentStatus {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /**\n   * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.\n   * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.\n   */\n  NOT_PAID = 'NOT_PAID',\n  /** All required payments associated with this order are paid. */\n  PAID = 'PAID',\n  /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */\n  PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',\n  /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */\n  FULLY_REFUNDED = 'FULLY_REFUNDED',\n  /**\n   * All payments pending.\n   *\n   * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.\n   * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).\n   */\n  PENDING = 'PENDING',\n  /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */\n  PARTIALLY_PAID = 'PARTIALLY_PAID',\n  /**\n   * Payment received, but not yet confirmed by the payment provider.\n   *\n   * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.\n   * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.\n   * @documentationMaturity preview\n   */\n  PENDING_MERCHANT = 'PENDING_MERCHANT',\n  /**\n   * One or more payments canceled.\n   * @documentationMaturity preview\n   */\n  CANCELED = 'CANCELED',\n  /**\n   * One or more payments declined.\n   * @documentationMaturity preview\n   */\n  DECLINED = 'DECLINED',\n}\n\n/** @enumType */\nexport type PaymentStatusWithLiterals =\n  | PaymentStatus\n  | 'UNSPECIFIED'\n  | 'NOT_PAID'\n  | 'PAID'\n  | 'PARTIALLY_REFUNDED'\n  | 'FULLY_REFUNDED'\n  | 'PENDING'\n  | 'PARTIALLY_PAID'\n  | 'PENDING_MERCHANT'\n  | 'CANCELED'\n  | 'DECLINED';\n\nexport enum FulfillmentStatus {\n  /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */\n  NOT_FULFILLED = 'NOT_FULFILLED',\n  /**\n   * All of the order items are fulfilled or the order was manually marked as fulfilled.\n   * Orders without shipping info are fulfilled automatically.\n   */\n  FULFILLED = 'FULFILLED',\n  /** Some, but not all, of the order items are fulfilled. */\n  PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',\n}\n\n/** @enumType */\nexport type FulfillmentStatusWithLiterals =\n  | FulfillmentStatus\n  | 'NOT_FULFILLED'\n  | 'FULFILLED'\n  | 'PARTIALLY_FULFILLED';\n\nexport enum WeightUnit {\n  /** Weight unit can't be classified due to an error. */\n  UNSPECIFIED_WEIGHT_UNIT = 'UNSPECIFIED_WEIGHT_UNIT',\n  /** Kilograms. */\n  KG = 'KG',\n  /** Pounds. */\n  LB = 'LB',\n}\n\n/** @enumType */\nexport type WeightUnitWithLiterals =\n  | WeightUnit\n  | 'UNSPECIFIED_WEIGHT_UNIT'\n  | 'KG'\n  | 'LB';\n\nexport interface CurrencyConversionDetails {\n  /**\n   * Currency used for the pricing of this order, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   *\n   * This currency is used to calculate the pricing before conversion to the buyer's payment currency.\n   * @readonly\n   * @immutable\n   * @format CURRENCY\n   */\n  originalCurrency?: string | null;\n  /**\n   * The rate used for converting the original currency to the currency used for payment.\n   * @readonly\n   * @immutable\n   * @decimalValue options { gt:0, lte:1000000000000000 }\n   */\n  conversionRate?: string | null;\n}\n\nexport interface PriceSummary {\n  /** Subtotal of all the line items, before discounts and before tax. */\n  subtotal?: Price;\n  /** Total shipping price, before discounts and before tax. */\n  shipping?: Price;\n  /** Total tax on this order. */\n  tax?: Price;\n  /** Total calculated discount value. */\n  discount?: Price;\n  /** Order’s total price after discounts and tax. */\n  total?: Price;\n  /** Total price of additional fees before tax. */\n  totalAdditionalFees?: Price;\n}\n\n/** Billing Info and shipping details */\nexport interface AddressWithContact {\n  /** Address. */\n  address?: Address;\n  /** Contact details. */\n  contactDetails?: FullAddressContactDetails;\n}\n\n/** Physical address */\nexport interface Address {\n  /**\n   * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /**\n   * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.\n   * @maxLength 50\n   */\n  subdivision?: string | null;\n  /**\n   * City name.\n   * @maxLength 50\n   */\n  city?: string | null;\n  /**\n   * Postal or zip code.\n   * @maxLength 50\n   */\n  postalCode?: string | null;\n  /** Street address. */\n  streetAddress?: StreetAddress;\n  /**\n   * Main address line (usually street name and number).\n   * @maxLength 150\n   */\n  addressLine1?: string | null;\n  /**\n   * Free text providing more detailed address info. Usually contains apt, suite, floor.\n   * @maxLength 100\n   */\n  addressLine2?: string | null;\n  /**\n   * Country's full name.\n   * @readonly\n   */\n  countryFullname?: string | null;\n  /**\n   * Subdivision full-name.\n   * @readonly\n   */\n  subdivisionFullname?: string | null;\n}\n\nexport interface StreetAddress {\n  /** Street number. */\n  number?: string;\n  /** Street name. */\n  name?: string;\n}\n\nexport interface AddressLocation {\n  /** Address latitude. */\n  latitude?: number | null;\n  /** Address longitude. */\n  longitude?: number | null;\n}\n\n/** Full contact details for an address */\nexport interface FullAddressContactDetails {\n  /**\n   * First name.\n   * @maxLength 100\n   */\n  firstName?: string | null;\n  /**\n   * Last name.\n   * @maxLength 100\n   */\n  lastName?: string | null;\n  /**\n   * Phone number.\n   * @format PHONE\n   */\n  phone?: string | null;\n  /**\n   * Company name.\n   * @maxLength 1000\n   */\n  company?: string | null;\n  /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */\n  vatId?: VatId;\n}\n\nexport interface VatId {\n  /** Customer's tax ID. */\n  _id?: string;\n  /**\n   * Tax type.\n   *\n   * Supported values:\n   * + `CPF`: for individual tax payers\n   * + `CNPJ`: for corporations\n   */\n  type?: VatTypeWithLiterals;\n}\n\n/** tax info types */\nexport enum VatType {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** CPF - for individual tax payers. */\n  CPF = 'CPF',\n  /** CNPJ - for corporations */\n  CNPJ = 'CNPJ',\n}\n\n/** @enumType */\nexport type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';\n\nexport interface V1ShippingInformation {\n  /**\n   * App Def Id of external provider which was a source of shipping info\n   * @minLength 1\n   * @maxLength 100\n   */\n  carrierId?: string | null;\n  /**\n   * Unique code (or ID) of selected shipping option. For example, `\"usps_std_overnight\"`.\n   * @minLength 1\n   * @maxLength 100\n   */\n  code?: string | null;\n  /**\n   * Shipping option title.\n   * For example, `\"USPS Standard Overnight Delivery\"`, `\"Standard\"` or `\"First-Class Package International\"`.\n   * @maxLength 250\n   */\n  title?: string;\n  /** Shipping logistics. */\n  logistics?: DeliveryLogistics;\n  /** Shipping costs. */\n  cost?: ShippingPrice;\n  /** Shipping region. */\n  region?: ShippingRegion;\n}\n\nexport interface DeliveryLogistics extends DeliveryLogisticsAddressOneOf {\n  /** Shipping address and contact details. */\n  shippingDestination?: AddressWithContact;\n  /** Pickup details. */\n  pickupDetails?: PickupDetails;\n  /**\n   * Expected delivery time in free text. For example, `\"3-5 business days\"`.\n   * @maxLength 500\n   */\n  deliveryTime?: string | null;\n  /**\n   * Instructions for carrier. For example, `\"Please knock on the door. If unanswered, please call contact number. Thanks.\"`.\n   * @maxLength 1000\n   */\n  instructions?: string | null;\n  /**\n   * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @deprecated\n   */\n  deliverByDate?: Date | null;\n  /** Expected delivery time. */\n  deliveryTimeSlot?: DeliveryTimeSlot;\n}\n\n/** @oneof */\nexport interface DeliveryLogisticsAddressOneOf {\n  /** Shipping address and contact details. */\n  shippingDestination?: AddressWithContact;\n  /** Pickup details. */\n  pickupDetails?: PickupDetails;\n}\n\nexport interface PickupDetails {\n  /** Pickup address. */\n  address?: PickupAddress;\n  /** Pickup method */\n  pickupMethod?: PickupMethodWithLiterals;\n}\n\n/** Physical address */\nexport interface PickupAddress {\n  /**\n   * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /**\n   * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.\n   * @maxLength 50\n   */\n  subdivision?: string | null;\n  /**\n   * City name.\n   * @maxLength 1000\n   */\n  city?: string | null;\n  /**\n   * Postal or zip code.\n   * @maxLength 1000\n   */\n  postalCode?: string | null;\n  /** Street address object, with number, name, and apartment number in separate fields. */\n  streetAddress?: StreetAddress;\n  /**\n   * Main address line (usually street name and number).\n   * @maxLength 1000\n   */\n  addressLine1?: string | null;\n  /**\n   * Free text providing more detailed address info. Usually contains apt, suite, floor.\n   * @maxLength 1000\n   */\n  addressLine2?: string | null;\n  /**\n   * Country's full name.\n   * @readonly\n   */\n  countryFullname?: string | null;\n  /**\n   * Subdivision full-name.\n   * @readonly\n   */\n  subdivisionFullname?: string | null;\n}\n\nexport enum PickupMethod {\n  UNKNOWN_METHOD = 'UNKNOWN_METHOD',\n  STORE_PICKUP = 'STORE_PICKUP',\n  PICKUP_POINT = 'PICKUP_POINT',\n}\n\n/** @enumType */\nexport type PickupMethodWithLiterals =\n  | PickupMethod\n  | 'UNKNOWN_METHOD'\n  | 'STORE_PICKUP'\n  | 'PICKUP_POINT';\n\nexport interface DeliveryTimeSlot {\n  /** Delivery slot starting time. */\n  from?: Date | null;\n  /** Delivery slot ending time. */\n  to?: Date | null;\n}\n\nexport interface ShippingPrice {\n  /** Shipping price for display purposes. */\n  price?: Price;\n  /**\n   * Total price of shipping after discounts (when relevant), and before tax.\n   * @readonly\n   */\n  totalPriceBeforeTax?: Price;\n  /**\n   * Shipping price after all discounts (if any exist), and after tax.\n   * @readonly\n   */\n  totalPriceAfterTax?: Price;\n  /** Tax details. */\n  taxDetails?: ItemTaxFullDetails;\n  /**\n   * Shipping discount before tax.\n   * @readonly\n   */\n  discount?: Price;\n}\n\nexport interface ShippingRegion {\n  /**\n   * Name of shipping region. For example, `\"Metropolitan London\"`, or `\"Outer Melbourne suburbs\"`.\n   * @maxLength 100\n   */\n  name?: string | null;\n}\n\nexport enum OrderStatus {\n  /** Order created, but not yet approved or canceled. */\n  INITIALIZED = 'INITIALIZED',\n  /**\n   * Order approved.\n   *\n   * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).\n   * Offline orders (cash payment) are automatically approved.\n   */\n  APPROVED = 'APPROVED',\n  /** Order canceled by the user. */\n  CANCELED = 'CANCELED',\n  /**\n   * Order pending.\n   * @documentationMaturity preview\n   */\n  PENDING = 'PENDING',\n  /**\n   * Order rejected.\n   *\n   * This happens when pending payments fail.\n   * @documentationMaturity preview\n   */\n  REJECTED = 'REJECTED',\n}\n\n/** @enumType */\nexport type OrderStatusWithLiterals =\n  | OrderStatus\n  | 'INITIALIZED'\n  | 'APPROVED'\n  | 'CANCELED'\n  | 'PENDING'\n  | 'REJECTED';\n\nexport interface TaxSummary {\n  /**\n   * Total tax.\n   * @readonly\n   */\n  totalTax?: Price;\n}\n\nexport interface OrderTaxInfo {\n  /** Calculated tax, added from line items. */\n  totalTax?: Price;\n  /**\n   * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.\n   * @maxSize 50\n   */\n  taxBreakdown?: OrderTaxBreakdown[];\n  /**\n   * Whether the order is exempt from tax calculations.\n   *\n   * Default: `false`\n   * @readonly\n   */\n  taxExempt?: boolean | null;\n}\n\n/**\n * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.\n * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.\n */\nexport interface OrderTaxBreakdown {\n  /**\n   * The name of the tax against which this tax amount was calculated.\n   * @maxLength 200\n   */\n  taxName?: string;\n  /**\n   * The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws.\n   * @maxLength 200\n   */\n  taxType?: string;\n  /**\n   * The name of the jurisdiction in which this tax detail applies.\n   * @maxLength 200\n   */\n  jurisdiction?: string;\n  /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */\n  jurisdictionType?: JurisdictionTypeWithLiterals;\n  /**\n   * The rate at which this tax detail was calculated.\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gte:0, maxScale:6 }\n   */\n  rate?: string;\n  /** The sum of all the tax from line items that calculated by the tax identifiers. */\n  aggregatedTaxAmount?: Price;\n}\n\nexport interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {\n  /** Applied coupon info. */\n  coupon?: Coupon;\n  /** Merchant discount. */\n  merchantDiscount?: MerchantDiscount;\n  /** Automatic Discount */\n  discountRule?: DiscountRule;\n  /**\n   * Discount type.\n   * * `\"GLOBAL\"` - discount applies to entire order.\n   * * `\"SPECIFIC-ITEMS\"` - discount applies to specific items.\n   * * `\"SHIPPING\"` - discount applies to shipping. For example, free shipping.\n   */\n  discountType?: DiscountTypeWithLiterals;\n  /**\n   * IDs of line items discount applies to.\n   * Deprecated. Use `line_item_discounts` instead.\n   * @format GUID\n   * @maxSize 1\n   * @deprecated IDs of line items discount applies to.\n   * Deprecated. Use `line_item_discounts` instead.\n   * @replacedBy line_item_discounts\n   * @targetRemovalDate 2024-10-30\n   */\n  lineItemIds?: string[];\n  /**\n   * Discount id.\n   * @format GUID\n   * @immutable\n   */\n  _id?: string | null;\n  /**\n   * Number of subscription billing cycles the discount applies to.\n   * If None and discount is linked to subscription line item, it applies to all cycles.\n   * @internal\n   * @min 1\n   * @max 999\n   */\n  subscriptionCycles?: number | null;\n}\n\n/** @oneof */\nexport interface AppliedDiscountDiscountSourceOneOf {\n  /** Applied coupon info. */\n  coupon?: Coupon;\n  /** Merchant discount. */\n  merchantDiscount?: MerchantDiscount;\n  /** Automatic Discount */\n  discountRule?: DiscountRule;\n}\n\nexport enum DiscountType {\n  GLOBAL = 'GLOBAL',\n  SPECIFIC_ITEMS = 'SPECIFIC_ITEMS',\n  SHIPPING = 'SHIPPING',\n}\n\n/** @enumType */\nexport type DiscountTypeWithLiterals =\n  | DiscountType\n  | 'GLOBAL'\n  | 'SPECIFIC_ITEMS'\n  | 'SHIPPING';\n\n/** Coupon */\nexport interface Coupon {\n  /** Coupon ID. */\n  _id?: string;\n  /** Coupon code. */\n  code?: string;\n  /** Coupon name. */\n  name?: string;\n  /** Coupon value. */\n  amount?: Price;\n}\n\nexport interface MerchantDiscount\n  extends MerchantDiscountMerchantDiscountReasonOneOf {\n  /**\n   * Pre-defined discount reason (optional).\n   * * `\"ITEMS_EXCHANGE\"` - exchange balance acquired as a result of items exchange.\n   */\n  discountReason?: DiscountReasonWithLiterals;\n  /**\n   * Discount description as free text (optional).\n   * @maxLength 200\n   */\n  description?: string | null;\n  /** Discount amount. */\n  amount?: Price;\n  /**\n   * Discount percentage.\n   * @internal\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gte:0, lte:100, maxScale:2 }\n   */\n  percentage?: string | null;\n}\n\n/** @oneof */\nexport interface MerchantDiscountMerchantDiscountReasonOneOf {\n  /**\n   * Pre-defined discount reason (optional).\n   * * `\"ITEMS_EXCHANGE\"` - exchange balance acquired as a result of items exchange.\n   */\n  discountReason?: DiscountReasonWithLiterals;\n  /**\n   * Discount description as free text (optional).\n   * @maxLength 200\n   */\n  description?: string | null;\n}\n\nexport enum DiscountReason {\n  UNSPECIFIED = 'UNSPECIFIED',\n  EXCHANGED_ITEMS = 'EXCHANGED_ITEMS',\n  BILLING_ADJUSTMENT = 'BILLING_ADJUSTMENT',\n}\n\n/** @enumType */\nexport type DiscountReasonWithLiterals =\n  | DiscountReason\n  | 'UNSPECIFIED'\n  | 'EXCHANGED_ITEMS'\n  | 'BILLING_ADJUSTMENT';\n\nexport interface DiscountRule {\n  /**\n   * Discount rule ID\n   * @format GUID\n   */\n  _id?: string;\n  /** Discount rule name */\n  name?: DiscountRuleName;\n  /** Discount value. */\n  amount?: Price;\n}\n\nexport interface DiscountRuleName {\n  /**\n   * Original discount rule name (in site's default language).\n   * @minLength 1\n   * @maxLength 256\n   */\n  original?: string;\n  /**\n   * Translated discount rule name according to buyer language. Defaults to `original` when not provided.\n   * @minLength 1\n   * @maxLength 500\n   */\n  translated?: string | null;\n}\n\nexport interface LineItemDiscount {\n  /**\n   * ID of line item the discount applies to.\n   * @format GUID\n   */\n  _id?: string;\n  /** Total discount for this line item. */\n  totalDiscount?: Price;\n}\n\nexport interface Activity extends ActivityContentOneOf {\n  /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */\n  customActivity?: CustomActivity;\n  /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */\n  merchantComment?: MerchantComment;\n  /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */\n  orderRefunded?: OrderRefunded;\n  /**\n   * Details of an initiated refund process.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  refundInitiated?: RefundInitiated;\n  /**\n   * Details of a refunded payment.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefunded?: PaymentRefunded;\n  /**\n   * Details of a failed payment refund.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefundFailed?: PaymentRefundFailed;\n  /**\n   * Details of refund to store credit.\n   * @internal\n   */\n  refundedAsStoreCredit?: RefundedAsStoreCredit;\n  /**\n   * Details of a pending payment\n   * @internal\n   */\n  paymentPending?: PaymentPending;\n  /**\n   * Details of a canceled payment\n   * @internal\n   */\n  paymentCanceled?: PaymentCanceled;\n  /**\n   * Details of a declined payment\n   * @internal\n   */\n  paymentDeclined?: PaymentDeclined;\n  /**\n   * Receipt was added for associated payment\n   * @internal\n   */\n  receiptCreated?: ReceiptCreated;\n  /**\n   * Receipt sent to customer\n   * @internal\n   */\n  receiptSent?: ReceiptSent;\n  /**\n   * Order received a chargeback for one of its' payments.\n   * @internal\n   */\n  chargebackCreated?: ChargebackCreated;\n  /**\n   * Chargeback reversed for one of the order's payments.\n   * @internal\n   */\n  chargebackReversed?: ChargebackReversed;\n  /**\n   * Activity ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Activity author's email.\n   * @format EMAIL\n   * @readonly\n   */\n  authorEmail?: string | null;\n  /**\n   * Activity creation date and time.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /** Activity type. */\n  type?: ActivityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface ActivityContentOneOf {\n  /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */\n  customActivity?: CustomActivity;\n  /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */\n  merchantComment?: MerchantComment;\n  /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */\n  orderRefunded?: OrderRefunded;\n  /**\n   * Details of an initiated refund process.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  refundInitiated?: RefundInitiated;\n  /**\n   * Details of a refunded payment.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefunded?: PaymentRefunded;\n  /**\n   * Details of a failed payment refund.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefundFailed?: PaymentRefundFailed;\n  /**\n   * Details of refund to store credit.\n   * @internal\n   */\n  refundedAsStoreCredit?: RefundedAsStoreCredit;\n  /**\n   * Details of a pending payment\n   * @internal\n   */\n  paymentPending?: PaymentPending;\n  /**\n   * Details of a canceled payment\n   * @internal\n   */\n  paymentCanceled?: PaymentCanceled;\n  /**\n   * Details of a declined payment\n   * @internal\n   */\n  paymentDeclined?: PaymentDeclined;\n  /**\n   * Receipt was added for associated payment\n   * @internal\n   */\n  receiptCreated?: ReceiptCreated;\n  /**\n   * Receipt sent to customer\n   * @internal\n   */\n  receiptSent?: ReceiptSent;\n  /**\n   * Order received a chargeback for one of its' payments.\n   * @internal\n   */\n  chargebackCreated?: ChargebackCreated;\n  /**\n   * Chargeback reversed for one of the order's payments.\n   * @internal\n   */\n  chargebackReversed?: ChargebackReversed;\n}\n\nexport interface CustomActivity {\n  /**\n   * ID of the app that created the custom activity.\n   * @format GUID\n   */\n  appId?: string;\n  /**\n   * Custom activity type. For example, `\"Ticket number set\"`.\n   * @maxLength 100\n   */\n  type?: string;\n  /** Additional data in key-value form. For example, `{ \"Ticket number\": \"123456\" }`. */\n  additionalData?: Record<string, string>;\n}\n\n/** Store owner added a comment */\nexport interface MerchantComment {\n  /**\n   * Merchant comment message.\n   * @minLength 1\n   * @maxLength 5000\n   */\n  message?: string;\n}\n\nexport interface OrderRefunded {\n  /** Whether order was refunded manually. For example, via payment provider or using cash. */\n  manual?: boolean;\n  /** Refund amount. */\n  amount?: Price;\n  /**\n   * Reason for refund.\n   * @maxLength 200\n   */\n  reason?: string;\n}\n\nexport interface OrderCreatedFromExchange {\n  /**\n   * ID of the original order for which the exchange happened.\n   * @format GUID\n   */\n  originalOrderId?: string;\n}\n\nexport interface NewExchangeOrderCreated {\n  /**\n   * ID of the new order created as a result of an exchange of items.\n   * @format GUID\n   */\n  exchangeOrderId?: string;\n  /**\n   * IDs of the items that were exchanged.\n   * @minSize 1\n   * @maxSize 300\n   */\n  lineItems?: LineItemExchangeData[];\n}\n\nexport interface LineItemExchangeData {\n  /**\n   * ID of the exchanged line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity being exchanged.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface DraftOrderChangesApplied {\n  /** Draft order id. */\n  draftOrderId?: string;\n  /**\n   * Reason for edit, given by user (optional).\n   * @maxLength 200\n   */\n  reason?: string | null;\n  /** Changes applied to order. */\n  changes?: OrderChange[];\n}\n\nexport interface OrderChange extends OrderChangeValueOneOf {\n  lineItemChanged?: LineItemChanges;\n  lineItemAdded?: ManagedLineItem;\n  lineItemRemoved?: ManagedLineItem;\n  discountAdded?: ManagedDiscount;\n  discountRemoved?: ManagedDiscount;\n  additionalFeeAdded?: ManagedAdditionalFee;\n  additionalFeeRemoved?: ManagedAdditionalFee;\n  totalPriceChanged?: TotalPriceChange;\n  shippingInformationChanged?: ShippingInformationChange;\n}\n\n/** @oneof */\nexport interface OrderChangeValueOneOf {\n  lineItemChanged?: LineItemChanges;\n  lineItemAdded?: ManagedLineItem;\n  lineItemRemoved?: ManagedLineItem;\n  discountAdded?: ManagedDiscount;\n  discountRemoved?: ManagedDiscount;\n  additionalFeeAdded?: ManagedAdditionalFee;\n  additionalFeeRemoved?: ManagedAdditionalFee;\n  totalPriceChanged?: TotalPriceChange;\n  shippingInformationChanged?: ShippingInformationChange;\n}\n\nexport interface LineItemChanges {\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  _id?: string;\n  /** Item name. */\n  name?: ProductName;\n  /** Item quantity change. */\n  quantity?: LineItemQuantityChange;\n  /** Item price change. */\n  price?: LineItemPriceChange;\n}\n\nexport interface LineItemQuantityChange {\n  /**\n   * Item quantity before update.\n   * @max 1000000\n   */\n  originalQuantity?: number;\n  /**\n   * Item quantity after update.\n   * @max 1000000\n   */\n  newQuantity?: number;\n  /**\n   * Difference between original and new quantity. Absolute value.\n   * @min 1\n   * @max 1000000\n   */\n  diff?: number;\n  /** Type of quantity change: increase or decrease. */\n  deltaType?: LineItemQuantityChangeTypeWithLiterals;\n}\n\nexport enum LineItemQuantityChangeType {\n  /** Quantity increased. */\n  QUANTITY_INCREASED = 'QUANTITY_INCREASED',\n  /** Quantity decreased. */\n  QUANTITY_DECREASED = 'QUANTITY_DECREASED',\n}\n\n/** @enumType */\nexport type LineItemQuantityChangeTypeWithLiterals =\n  | LineItemQuantityChangeType\n  | 'QUANTITY_INCREASED'\n  | 'QUANTITY_DECREASED';\n\nexport interface LineItemPriceChange {\n  /** Item price before update. */\n  originalPrice?: Price;\n  /** Item price after update. */\n  newPrice?: Price;\n}\n\nexport interface ManagedLineItem {\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  _id?: string;\n  /** Item name. */\n  name?: ProductName;\n  /**\n   * Added or removed item quantity.\n   * @min 1\n   * @max 1000000\n   */\n  quantity?: number;\n}\n\nexport interface ManagedDiscount {\n  /**\n   * Discount id.\n   * @format GUID\n   */\n  _id?: string;\n  /** Discount name: coupon name / discount rule name / merchant discount description. */\n  name?: TranslatedValue;\n  /** Line items discount applies to. */\n  affectedLineItems?: LineItemAmount[];\n  /** Discount amount. */\n  totalAmount?: Price;\n}\n\nexport interface TranslatedValue {\n  /**\n   * Value in site default language.\n   * @minLength 1\n   */\n  original?: string;\n  /**\n   * Translated value.\n   * @minLength 1\n   */\n  translated?: string | null;\n}\n\nexport interface LineItemAmount {\n  /**\n   * Order line item id\n   * @format GUID\n   */\n  _id?: string;\n  /** Item name. */\n  name?: ProductName;\n  /** Amount associated with this item. (Discount amount for item / additional fee amount for item) */\n  amount?: Price;\n}\n\nexport interface ManagedAdditionalFee {\n  /**\n   * Additional fee id.\n   * @format GUID\n   */\n  _id?: string;\n  /** Additional fee name. */\n  name?: TranslatedValue;\n  /** Line items additional fee applies to. */\n  affectedLineItems?: LineItemAmount[];\n  /** Additional fee amount. */\n  totalAmount?: Price;\n}\n\nexport interface TotalPriceChange {\n  /** Order’s total price after discounts and tax. Before update */\n  originalTotal?: Price;\n  /** Order’s total price after discounts and tax. After update */\n  newTotal?: Price;\n}\n\nexport interface ShippingInformationChange {\n  /** Order’s Shipping Information. Before update */\n  originalShippingInfo?: ShippingInformation;\n  /** Order’s Shipping Information. After update */\n  newShippingInfo?: ShippingInformation;\n}\n\nexport interface ShippingInformation {\n  /** Order’s shipping price. */\n  total?: Price;\n  /**\n   * Order’s shipping title.\n   * @maxLength 250\n   */\n  shippingTitle?: string;\n}\n\n/** Payment method is saved for order */\nexport interface SavedPaymentMethod {\n  /**\n   * Payment method name\n   * @minLength 1\n   * @maxLength 100\n   */\n  name?: string;\n  /**\n   * Payment method description\n   * @minLength 1\n   * @maxLength 100\n   */\n  description?: string | null;\n}\n\nexport interface AuthorizedPaymentCreated {\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Payment amount */\n  amount?: Price;\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface AuthorizedPaymentCaptured {\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Payment amount */\n  amount?: Price;\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface AuthorizedPaymentVoided {\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Payment amount */\n  amount?: Price;\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface RefundInitiated {\n  /**\n   * Refund ID.\n   * @format GUID\n   */\n  refundId?: string;\n  /** Refund amount. */\n  amount?: Price;\n  /**\n   * Details about the payments being refunded.\n   * @minSize 1\n   * @maxSize 50\n   */\n  payments?: RefundedPayment[];\n  /**\n   * Reason for refund.\n   * @maxLength 200\n   */\n  reason?: string | null;\n}\n\nexport interface RefundedPayment extends RefundedPaymentKindOneOf {\n  /** Regular payment refund. */\n  regular?: RegularPaymentRefund;\n  /** Gift card payment refund. */\n  giftCard?: GiftCardPaymentRefund;\n  /** Membership payment refund. */\n  membership?: MembershipPaymentRefund;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Whether refund was made externally and manually on the payment provider's side. */\n  externalRefund?: boolean;\n}\n\n/** @oneof */\nexport interface RefundedPaymentKindOneOf {\n  /** Regular payment refund. */\n  regular?: RegularPaymentRefund;\n  /** Gift card payment refund. */\n  giftCard?: GiftCardPaymentRefund;\n  /** Membership payment refund. */\n  membership?: MembershipPaymentRefund;\n}\n\nexport interface RegularPaymentRefund {\n  /** Refund amount */\n  amount?: Price;\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface GiftCardPaymentRefund {\n  /**\n   * Gift card payment ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  giftCardPaymentId?: string | null;\n  /** Refund amount */\n  amount?: Price;\n}\n\nexport interface MembershipPaymentRefund {\n  /**\n   * Membership ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  membershipId?: string | null;\n}\n\nexport interface PaymentRefunded {\n  /**\n   * Refund ID.\n   * @format GUID\n   */\n  refundId?: string;\n  /** Details about the refunded payment. */\n  payment?: RefundedPayment;\n}\n\nexport interface PaymentRefundFailed {\n  /**\n   * Refund ID.\n   * @format GUID\n   */\n  refundId?: string;\n  /** Details about the failed payment refund. */\n  payment?: RefundedPayment;\n}\n\nexport interface RefundedAsStoreCredit {\n  /** Refund amount */\n  amount?: Price;\n  /**\n   * Reason for refund\n   * @maxLength 100\n   */\n  reason?: string | null;\n}\n\nexport interface PaymentPending extends PaymentPendingPaymentDetailsOneOf {\n  /** Regular payment. */\n  regular?: RegularPayment;\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n}\n\n/** @oneof */\nexport interface PaymentPendingPaymentDetailsOneOf {\n  /** Regular payment. */\n  regular?: RegularPayment;\n}\n\nexport interface RegularPayment\n  extends RegularPaymentPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardDetails;\n  /** Payment amount */\n  amount?: Price;\n}\n\n/** @oneof */\nexport interface RegularPaymentPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardDetails;\n}\n\nexport interface CreditCardDetails {\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface PaymentCanceled extends PaymentCanceledPaymentDetailsOneOf {\n  /** Regular payment. */\n  regular?: RegularPayment;\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n}\n\n/** @oneof */\nexport interface PaymentCanceledPaymentDetailsOneOf {\n  /** Regular payment. */\n  regular?: RegularPayment;\n}\n\nexport interface PaymentDeclined extends PaymentDeclinedPaymentDetailsOneOf {\n  /** Regular payment. */\n  regular?: RegularPayment;\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n}\n\n/** @oneof */\nexport interface PaymentDeclinedPaymentDetailsOneOf {\n  /** Regular payment. */\n  regular?: RegularPayment;\n}\n\nexport interface ReceiptCreated extends ReceiptCreatedReceiptInfoOneOf {\n  /** Receipt created by Wix */\n  wixReceipt?: WixReceipt;\n  /** Receipt created by an external system. */\n  externalReceipt?: ExternalReceipt;\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n}\n\n/** @oneof */\nexport interface ReceiptCreatedReceiptInfoOneOf {\n  /** Receipt created by Wix */\n  wixReceipt?: WixReceipt;\n  /** Receipt created by an external system. */\n  externalReceipt?: ExternalReceipt;\n}\n\nexport interface WixReceipt {\n  /**\n   * Receipt ID\n   * @format GUID\n   */\n  receiptId?: string;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface ExternalReceipt {\n  /**\n   * Receipt ID\n   * @maxLength 100\n   */\n  receiptId?: string | null;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface ReceiptSent extends ReceiptSentReceiptInfoOneOf {\n  /** Receipt created by Wix */\n  wixReceipt?: WixReceipt;\n  /** Receipt created by an external system. */\n  externalReceipt?: ExternalReceipt;\n  /**\n   * Payment ID of payment associated with this activity\n   * @format GUID\n   */\n  paymentId?: string;\n}\n\n/** @oneof */\nexport interface ReceiptSentReceiptInfoOneOf {\n  /** Receipt created by Wix */\n  wixReceipt?: WixReceipt;\n  /** Receipt created by an external system. */\n  externalReceipt?: ExternalReceipt;\n}\n\nexport interface ChargebackCreated {\n  /**\n   * ID of the payment that received a chargeback.\n   * @format GUID\n   */\n  paymentId?: string;\n  /**\n   * Chargeback ID.\n   * @format GUID\n   */\n  chargebackId?: string;\n  /** Chargeback amount. */\n  amount?: Price;\n  /** Payment details. */\n  paymentDetails?: RegularPayment;\n}\n\nexport interface ChargebackReversed {\n  /**\n   * ID of the payment involved with the chargeback.\n   * @format GUID\n   */\n  paymentId?: string;\n  /**\n   * Chargeback ID.\n   * @format GUID\n   */\n  chargebackId?: string;\n  /** Chargeback amount. */\n  amount?: Price;\n  /** Chargeback reversal amount. */\n  reversalAmount?: Price;\n  /** Payment details. */\n  paymentDetails?: RegularPayment;\n}\n\nexport enum ActivityType {\n  ORDER_REFUNDED = 'ORDER_REFUNDED',\n  ORDER_PLACED = 'ORDER_PLACED',\n  ORDER_PAID = 'ORDER_PAID',\n  ORDER_FULFILLED = 'ORDER_FULFILLED',\n  ORDER_NOT_FULFILLED = 'ORDER_NOT_FULFILLED',\n  ORDER_CANCELED = 'ORDER_CANCELED',\n  DOWNLOAD_LINK_SENT = 'DOWNLOAD_LINK_SENT',\n  TRACKING_NUMBER_ADDED = 'TRACKING_NUMBER_ADDED',\n  TRACKING_NUMBER_EDITED = 'TRACKING_NUMBER_EDITED',\n  TRACKING_LINK_ADDED = 'TRACKING_LINK_ADDED',\n  SHIPPING_CONFIRMATION_EMAIL_SENT = 'SHIPPING_CONFIRMATION_EMAIL_SENT',\n  INVOICE_ADDED = 'INVOICE_ADDED',\n  INVOICE_REMOVED = 'INVOICE_REMOVED',\n  INVOICE_SENT = 'INVOICE_SENT',\n  FULFILLER_EMAIL_SENT = 'FULFILLER_EMAIL_SENT',\n  SHIPPING_ADDRESS_EDITED = 'SHIPPING_ADDRESS_EDITED',\n  EMAIL_EDITED = 'EMAIL_EDITED',\n  PICKUP_READY_EMAIL_SENT = 'PICKUP_READY_EMAIL_SENT',\n  CUSTOM_ACTIVITY = 'CUSTOM_ACTIVITY',\n  MERCHANT_COMMENT = 'MERCHANT_COMMENT',\n  ORDER_CREATED_FROM_EXCHANGE = 'ORDER_CREATED_FROM_EXCHANGE',\n  NEW_EXCHANGE_ORDER_CREATED = 'NEW_EXCHANGE_ORDER_CREATED',\n  ORDER_PARTIALLY_PAID = 'ORDER_PARTIALLY_PAID',\n  DRAFT_ORDER_CHANGES_APPLIED = 'DRAFT_ORDER_CHANGES_APPLIED',\n  SAVED_PAYMENT_METHOD = 'SAVED_PAYMENT_METHOD',\n  /** @documentationMaturity preview */\n  PAYMENT_PENDING = 'PAYMENT_PENDING',\n  /** @documentationMaturity preview */\n  PAYMENT_CANCELED = 'PAYMENT_CANCELED',\n  /** @documentationMaturity preview */\n  PAYMENT_DECLINED = 'PAYMENT_DECLINED',\n  /** @documentationMaturity preview */\n  ORDER_PENDING = 'ORDER_PENDING',\n  /** @documentationMaturity preview */\n  ORDER_REJECTED = 'ORDER_REJECTED',\n}\n\n/** @enumType */\nexport type ActivityTypeWithLiterals =\n  | ActivityType\n  | 'ORDER_REFUNDED'\n  | 'ORDER_PLACED'\n  | 'ORDER_PAID'\n  | 'ORDER_FULFILLED'\n  | 'ORDER_NOT_FULFILLED'\n  | 'ORDER_CANCELED'\n  | 'DOWNLOAD_LINK_SENT'\n  | 'TRACKING_NUMBER_ADDED'\n  | 'TRACKING_NUMBER_EDITED'\n  | 'TRACKING_LINK_ADDED'\n  | 'SHIPPING_CONFIRMATION_EMAIL_SENT'\n  | 'INVOICE_ADDED'\n  | 'INVOICE_REMOVED'\n  | 'INVOICE_SENT'\n  | 'FULFILLER_EMAIL_SENT'\n  | 'SHIPPING_ADDRESS_EDITED'\n  | 'EMAIL_EDITED'\n  | 'PICKUP_READY_EMAIL_SENT'\n  | 'CUSTOM_ACTIVITY'\n  | 'MERCHANT_COMMENT'\n  | 'ORDER_CREATED_FROM_EXCHANGE'\n  | 'NEW_EXCHANGE_ORDER_CREATED'\n  | 'ORDER_PARTIALLY_PAID'\n  | 'DRAFT_ORDER_CHANGES_APPLIED'\n  | 'SAVED_PAYMENT_METHOD'\n  | 'PAYMENT_PENDING'\n  | 'PAYMENT_CANCELED'\n  | 'PAYMENT_DECLINED'\n  | 'ORDER_PENDING'\n  | 'ORDER_REJECTED';\n\nexport enum AttributionSource {\n  UNSPECIFIED = 'UNSPECIFIED',\n  FACEBOOK_ADS = 'FACEBOOK_ADS',\n}\n\n/** @enumType */\nexport type AttributionSourceWithLiterals =\n  | AttributionSource\n  | 'UNSPECIFIED'\n  | 'FACEBOOK_ADS';\n\nexport interface CreatedBy extends CreatedByStringOneOf {\n  /**\n   * User ID - when the order was created by a Wix user on behalf of a buyer.\n   * For example, via POS (point of service).\n   * @format GUID\n   */\n  userId?: string;\n  /**\n   * Member ID - when the order was created by a **logged in** site visitor.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * Visitor ID - when the order was created by a site visitor that was **not** logged in.\n   * @format GUID\n   */\n  visitorId?: string;\n  /**\n   * App ID - when the order was created by an external application.\n   * @format GUID\n   */\n  appId?: string;\n}\n\n/** @oneof */\nexport interface CreatedByStringOneOf {\n  /**\n   * User ID - when the order was created by a Wix user on behalf of a buyer.\n   * For example, via POS (point of service).\n   * @format GUID\n   */\n  userId?: string;\n  /**\n   * Member ID - when the order was created by a **logged in** site visitor.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * Visitor ID - when the order was created by a site visitor that was **not** logged in.\n   * @format GUID\n   */\n  visitorId?: string;\n  /**\n   * App ID - when the order was created by an external application.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport interface ChannelInfo {\n  /** Sales channel that submitted the order. */\n  type?: ChannelTypeWithLiterals;\n  /**\n   * Reference to an order ID from an external system.\n   * @maxLength 100\n   */\n  externalOrderId?: string | null;\n  /**\n   * URL to the order in the external system.\n   * @maxLength 300\n   */\n  externalOrderUrl?: string | null;\n}\n\nexport enum ChannelType {\n  /** Unspecified sales channel. This value is not supported. */\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** A web client. */\n  WEB = 'WEB',\n  /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */\n  POS = 'POS',\n  /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */\n  EBAY = 'EBAY',\n  /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */\n  AMAZON = 'AMAZON',\n  /** Other sales platform. */\n  OTHER_PLATFORM = 'OTHER_PLATFORM',\n  /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */\n  WIX_APP_STORE = 'WIX_APP_STORE',\n  /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */\n  WIX_INVOICES = 'WIX_INVOICES',\n  /** Wix merchant backoffice. */\n  BACKOFFICE_MERCHANT = 'BACKOFFICE_MERCHANT',\n  /** Wish sales channel. */\n  WISH = 'WISH',\n  /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */\n  CLASS_PASS = 'CLASS_PASS',\n  /** Global-E sales channel. */\n  GLOBAL_E = 'GLOBAL_E',\n  /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */\n  FACEBOOK = 'FACEBOOK',\n  /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */\n  ETSY = 'ETSY',\n  /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */\n  TIKTOK = 'TIKTOK',\n  /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */\n  FAIRE_COM = 'FAIRE_COM',\n  /** PayPal Agentic Checkout sales channel. */\n  PAYPAL_AGENTIC_CHECKOUT = 'PAYPAL_AGENTIC_CHECKOUT',\n}\n\n/** @enumType */\nexport type ChannelTypeWithLiterals =\n  | ChannelType\n  | 'UNSPECIFIED'\n  | 'WEB'\n  | 'POS'\n  | 'EBAY'\n  | 'AMAZON'\n  | 'OTHER_PLATFORM'\n  | 'WIX_APP_STORE'\n  | 'WIX_INVOICES'\n  | 'BACKOFFICE_MERCHANT'\n  | 'WISH'\n  | 'CLASS_PASS'\n  | 'GLOBAL_E'\n  | 'FACEBOOK'\n  | 'ETSY'\n  | 'TIKTOK'\n  | 'FAIRE_COM'\n  | 'PAYPAL_AGENTIC_CHECKOUT';\n\nexport interface CustomField {\n  /** Custom field value. */\n  value?: any;\n  /**\n   * Custom field title.\n   * @minLength 1\n   * @maxLength 500\n   */\n  title?: string;\n  /**\n   * Translated custom field title.\n   * @minLength 1\n   * @maxLength 500\n   */\n  translatedTitle?: string | null;\n}\n\nexport interface BalanceSummary {\n  /**\n   * Current amount left to pay.\n   * @readonly\n   */\n  balance?: Balance;\n  /**\n   * Sum of all approved and successful payments.\n   *\n   * The value includes payments that have subsequently been fully or partially refunded.\n   * @readonly\n   */\n  paid?: Price;\n  /**\n   * Sum of all successfully refunded payments.\n   * @readonly\n   */\n  refunded?: Price;\n  /**\n   * Sum of all authorized payments.\n   * @readonly\n   */\n  authorized?: Price;\n  /**\n   * Sum of all pending refund transactions.\n   * @internal\n   * @readonly\n   */\n  pendingRefund?: Price;\n  /**\n   * Sum of all pending transactions.\n   * @readonly\n   */\n  pending?: Price;\n  /**\n   * Sum of all transaction chargebacks.\n   * @internal\n   * @readonly\n   */\n  chargeback?: Price;\n  /**\n   * Sum of all chargeback reversals.\n   * @internal\n   * @readonly\n   */\n  chargebackReversal?: Price;\n}\n\n/**\n * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.\n * `amount` field depends on order payment status:\n * + UNSPECIFIED, NOT_PAID: price_summary.total_price\n * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price\n * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0\n */\nexport interface Balance {\n  /**\n   * Balance amount.\n   *\n   * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.\n   * @decimalValue options { }\n   * @readonly\n   */\n  amount?: string;\n  /**\n   * Amount formatted with currency symbol.\n   * @readonly\n   */\n  formattedAmount?: string;\n}\n\nexport interface AdditionalFee {\n  /**\n   * Additional fee's unique code for future processing.\n   * @minLength 1\n   * @maxLength 100\n   */\n  code?: string | null;\n  /**\n   * Name of additional fee.\n   * @minLength 1\n   * @maxLength 50\n   */\n  name?: string;\n  /** Additional fee's price. */\n  price?: Price;\n  /** Tax details. */\n  taxDetails?: ItemTaxFullDetails;\n  /**\n   * SPI implementer's `appId`.\n   * @format GUID\n   */\n  providerAppId?: string | null;\n  /** Additional fee's price before tax. */\n  priceBeforeTax?: Price;\n  /** Additional fee's price after tax. */\n  priceAfterTax?: Price;\n  /**\n   * Additional fee's id.\n   * @format GUID\n   * @immutable\n   */\n  _id?: string;\n  /**\n   * Optional - Line items associated with this additional fee.\n   * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.\n   * @format GUID\n   */\n  lineItemIds?: string[];\n  /**\n   * Number of subscription billing cycles the additional fee applies to.\n   * If None and additional fee is linked to subscription line item, it applies to all cycles.\n   * @internal\n   * @min 1\n   * @max 999\n   */\n  subscriptionCycles?: number | null;\n}\n\nexport interface FulfillmentStatusesAggregate {\n  /** Unique string values based on Fulfillment entities statuses */\n  statuses?: string[] | null;\n}\n\n/**\n * Common object for tags.\n * Should be use as in this example:\n * message Foo {\n * string id = 1;\n * ...\n * Tags tags = 5\n * }\n *\n * example of taggable entity\n * {\n * id: \"123\"\n * tags: {\n * tags: {\n * tag_ids:[\"11\",\"22\"]\n * },\n * private_tags: {\n * tag_ids: [\"33\", \"44\"]\n * }\n * }\n * }\n */\nexport interface Tags {\n  /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */\n  privateTags?: TagList;\n  /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */\n  tags?: TagList;\n}\n\nexport interface TagList {\n  /**\n   * List of tag IDs\n   * @maxSize 100\n   * @maxLength 5\n   */\n  tagIds?: string[];\n}\n\nexport interface Location {\n  /**\n   * Location ID.\n   * Learn more about the [Wix Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * Location name.\n   * @minLength 1\n   * @maxLength 500\n   * @readonly\n   */\n  name?: string;\n}\n\n/** Triggered when the order status changes to approved */\nexport interface OrderApproved {\n  /** The order that was updated */\n  order?: Order;\n}\n\nexport interface OrdersExperiments {\n  epCommitTax?: boolean;\n  moveMerchantEmailToEp?: boolean;\n  moveBuyerOrderConfirmationEmailToEp?: boolean;\n  producedByEpBridge?: boolean;\n  enableRewrittenSideEffects?: boolean;\n}\n\nexport interface OrderRejectedEventOrderRejected {\n  /** The order that was rejected */\n  order?: Order;\n}\n\n/** Triggered when order items are marked as restocked */\nexport interface OrderItemsRestocked {\n  /** The order which items were restocked */\n  order?: Order;\n  /** Restocked items and quantities */\n  restockItems?: V1RestockItem[];\n}\n\nexport interface V1RestockItem {\n  /**\n   * ID of the line item being restocked.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity being restocked.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface SendBuyerConfirmationEmailRequest {\n  /** @format GUID */\n  orderId?: string;\n}\n\nexport interface SendBuyerConfirmationEmailResponse {}\n\nexport interface SendBuyerPaymentsReceivedEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface SendBuyerPaymentsReceivedEmailResponse {}\n\nexport interface SendBuyerPickupConfirmationEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface SendBuyerPickupConfirmationEmailResponse {}\n\nexport interface BulkSendBuyerPickupConfirmationEmailsRequest {\n  /**\n   * IDs of orders to send pickup emails for.\n   * @minSize 1\n   * @maxSize 300\n   */\n  orderIds?: string[];\n}\n\nexport interface BulkSendBuyerPickupConfirmationEmailsResponse {}\n\nexport interface SendBuyerShippingConfirmationEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface SendBuyerShippingConfirmationEmailResponse {}\n\nexport interface BulkSendBuyerShippingConfirmationEmailsRequest {\n  /**\n   * IDs of orders to send pickup emails for.\n   * @minSize 1\n   * @maxSize 300\n   */\n  orderIds?: string[];\n}\n\nexport interface BulkSendBuyerShippingConfirmationEmailsResponse {}\n\nexport interface SendMerchantOrderReceivedNotificationRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface SendMerchantOrderReceivedNotificationResponse {}\n\nexport interface SendCancelRefundEmailRequest {\n  /**\n   * The ID of order that is canceled/refunded\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Personal note added to the email (optional)\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n  /** Refund amount */\n  refundAmount?: Price;\n  /**\n   * Refund ID. (Optional)\n   * @format GUID\n   */\n  refundId?: string | null;\n}\n\nexport interface SendCancelRefundEmailResponse {}\n\nexport interface SendRefundEmailRequest {\n  /**\n   * The ID of order that is refunded\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Refund ID\n   * @format GUID\n   */\n  refundId?: string;\n  /**\n   * Personal note added to the email (optional)\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n}\n\nexport interface SendRefundEmailResponse {}\n\nexport interface SendMerchantOrderReceivedPushRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface SendMerchantOrderReceivedPushResponse {}\n\nexport interface PreviewEmailByTypeRequest {\n  emailType?: PreviewEmailTypeWithLiterals;\n}\n\nexport enum PreviewEmailType {\n  ORDER_PLACED = 'ORDER_PLACED',\n  DOWNLOAD_LINKS = 'DOWNLOAD_LINKS',\n  ORDER_SHIPPED = 'ORDER_SHIPPED',\n  ORDER_READY_FOR_PICKUP = 'ORDER_READY_FOR_PICKUP',\n}\n\n/** @enumType */\nexport type PreviewEmailTypeWithLiterals =\n  | PreviewEmailType\n  | 'ORDER_PLACED'\n  | 'DOWNLOAD_LINKS'\n  | 'ORDER_SHIPPED'\n  | 'ORDER_READY_FOR_PICKUP';\n\nexport interface PreviewEmailByTypeResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewRefundEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /** Refund amount */\n  refundAmount?: Price;\n  /** Refund business details */\n  details?: RefundDetails;\n  /**\n   * Personal note added to the email (optional)\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n  /**\n   * Refund ID. (Optional)\n   * @format GUID\n   */\n  refundId?: string | null;\n}\n\n/** Business model of a refund request */\nexport interface RefundDetails {\n  /**\n   * Order line item IDs and quantities that were refunded.\n   * @maxSize 300\n   */\n  items?: RefundItem[];\n  /** Whether the shipping fee was also refunded. */\n  shippingIncluded?: boolean;\n  /**\n   * Reason for the refund, provided by customer (optional).\n   * @maxLength 200\n   */\n  reason?: string | null;\n  /**\n   * Line items that were refunded.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefund[];\n  /**\n   * Additional fees that were refunded.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFeeRefund[];\n  /** Shipping amount that was refunded. */\n  shipping?: ShippingRefund;\n}\n\nexport interface RefundItem {\n  /**\n   * Line item ID the refunded line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity refunded.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface LineItemRefund {\n  /**\n   * Line item ID.\n   * @format GUID\n   * @immutable\n   */\n  lineItemId?: string;\n  /**\n   * Refund quantity.\n   * @min 1\n   * @max 100000\n   * @immutable\n   */\n  quantity?: number;\n}\n\nexport interface AdditionalFeeRefund {\n  /**\n   * Additional fee ID.\n   * @format GUID\n   * @immutable\n   */\n  additionalFeeId?: string;\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n}\n\nexport interface ShippingRefund {\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n}\n\nexport interface PreviewRefundEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewCancelEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Personal note added to the email (optional)\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n}\n\nexport interface PreviewCancelEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewCancelRefundEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Personal note added to the email (optional)\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n  /** Refund amount */\n  refundAmount?: Price;\n  /**\n   * Refund ID. (Optional)\n   * @format GUID\n   */\n  refundId?: string | null;\n}\n\nexport interface PreviewCancelRefundEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewBuyerPaymentsReceivedEmailRequest {}\n\nexport interface PreviewBuyerPaymentsReceivedEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewBuyerConfirmationEmailRequest {}\n\nexport interface PreviewBuyerConfirmationEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewBuyerPickupConfirmationEmailRequest {}\n\nexport interface PreviewBuyerPickupConfirmationEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewShippingConfirmationEmailRequest {}\n\nexport interface PreviewShippingConfirmationEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface PreviewResendDownloadLinksEmailRequest {}\n\nexport interface PreviewResendDownloadLinksEmailResponse {\n  emailPreview?: string;\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface Empty {}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n\nexport interface PreparePaymentCollectionRequest {\n  /**\n   * Ecom order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n  /** Amount to collect */\n  amount: Price;\n  /**\n   * Optional parameter. When present, payment collection will be performed using given payment gateway order.\n   * Existing payment gateway order will be updated with a new amount.\n   * When parameter is absent, new payment gateway order will be created and used for payment collection.\n   */\n  paymentGatewayOrderId?: string | null;\n  /**\n   * Whether to delay capture of the payment.\n   * Default: false\n   * @deprecated Whether to delay capture of the payment.\n   * Default: false\n   * @replacedBy delayed_capture_settings.scheduled_action\n   * @targetRemovalDate 2024-09-30\n   */\n  delayedCapture?: boolean;\n  /**\n   * Specifies whether payment collection is initiated by Merchant or User of User\n   * Default: `true`\n   * @internal\n   */\n  merchantInitiated?: boolean | null;\n  /**\n   * Redirect urls which are used to return buyer to third party system.\n   * @internal\n   */\n  redirectUrls?: RedirectUrls;\n  /** Delayed capture payment settings */\n  delayedCaptureSettings?: DelayedCaptureSettings;\n}\n\nexport interface RedirectUrls {\n  /**\n   * URL to redirect buyer in case of approved (successful) transaction\n   * @format WEB_URL\n   */\n  successUrl?: string | null;\n  /**\n   * URL to redirect buyer in case of buyer canceled the transaction\n   * @format WEB_URL\n   */\n  cancelUrl?: string | null;\n  /**\n   * URL to redirect buyer in case of failed/rejected transaction\n   * @format WEB_URL\n   */\n  errorUrl?: string | null;\n  /**\n   * URL to redirect buyer in case of pending transaction (that might take some time to process)\n   * @format WEB_URL\n   */\n  pendingUrl?: string | null;\n}\n\nexport interface DelayedCaptureSettings {\n  /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */\n  scheduledAction?: ScheduledActionWithLiterals;\n  /** Delay duration before execution. Optional - if not set, providers default period will be used */\n  delayDuration?: Duration;\n}\n\nexport enum ScheduledAction {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** Whether payment will be auto-voided when duration passes */\n  VOID = 'VOID',\n  /** Whether payment will be auto-captured when duration passes */\n  CAPTURE = 'CAPTURE',\n}\n\n/** @enumType */\nexport type ScheduledActionWithLiterals =\n  | ScheduledAction\n  | 'UNSPECIFIED'\n  | 'VOID'\n  | 'CAPTURE';\n\nexport interface Duration {\n  /**\n   * Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc\n   * @min 1\n   */\n  count?: number;\n  /** Duration unit: MINUTES, HOURS and DAYS */\n  unit?: DurationUnitWithLiterals;\n}\n\nexport enum DurationUnit {\n  UNKNOWN_DURATION_UNIT = 'UNKNOWN_DURATION_UNIT',\n  MINUTES = 'MINUTES',\n  HOURS = 'HOURS',\n  DAYS = 'DAYS',\n}\n\n/** @enumType */\nexport type DurationUnitWithLiterals =\n  | DurationUnit\n  | 'UNKNOWN_DURATION_UNIT'\n  | 'MINUTES'\n  | 'HOURS'\n  | 'DAYS';\n\nexport interface PreparePaymentCollectionResponse {\n  /** Payment gateway order id which is associated with given payment */\n  paymentGatewayOrderId?: string;\n}\n\nexport interface GetPaymentCollectabilityStatusRequest {\n  /**\n   * Ecom order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n}\n\nexport interface GetPaymentCollectabilityStatusResponse {\n  /** Payment collectability status */\n  status?: PaymentCollectabilityStatusWithLiterals;\n  /** Collectable order amount */\n  amount?: Price;\n}\n\nexport enum PaymentCollectabilityStatus {\n  UNKNOWN = 'UNKNOWN',\n  COLLECTABLE = 'COLLECTABLE',\n  NONCOLLECTABLE_ORDER_IS_CANCELLED = 'NONCOLLECTABLE_ORDER_IS_CANCELLED',\n  NONCOLLECTABLE_ORDER_IS_PAID = 'NONCOLLECTABLE_ORDER_IS_PAID',\n  NONCOLLECTABLE_MISSING_PAYMENT_METHOD = 'NONCOLLECTABLE_MISSING_PAYMENT_METHOD',\n  NONCOLLECTABLE_ORDER_IS_PENDING = 'NONCOLLECTABLE_ORDER_IS_PENDING',\n  NONCOLLECTABLE_ORDER_IS_REJECTED = 'NONCOLLECTABLE_ORDER_IS_REJECTED',\n  NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS = 'NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS',\n  NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS = 'NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS',\n}\n\n/** @enumType */\nexport type PaymentCollectabilityStatusWithLiterals =\n  | PaymentCollectabilityStatus\n  | 'UNKNOWN'\n  | 'COLLECTABLE'\n  | 'NONCOLLECTABLE_ORDER_IS_CANCELLED'\n  | 'NONCOLLECTABLE_ORDER_IS_PAID'\n  | 'NONCOLLECTABLE_MISSING_PAYMENT_METHOD'\n  | 'NONCOLLECTABLE_ORDER_IS_PENDING'\n  | 'NONCOLLECTABLE_ORDER_IS_REJECTED'\n  | 'NONCOLLECTABLE_ORDER_HAS_SUBSCRIPTIONS'\n  | 'NONCOLLECTABLE_ORDER_HAS_CHARGEBACKS';\n\nexport interface RecordManuallyCollectedPaymentRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId: string;\n  /** Amount to be recorded as approved manual payment for given order */\n  amount: Price;\n}\n\nexport interface RecordManuallyCollectedPaymentResponse {}\n\nexport interface MarkOrderAsPaidRequest {\n  /**\n   * Ecom order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n}\n\nexport interface MarkOrderAsPaidResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface BulkMarkOrdersAsPaidRequest {\n  /**\n   * IDs of orders to mark as paid.\n   * @minSize 1\n   * @maxSize 100\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderIds: string[];\n}\n\nexport interface BulkMarkOrdersAsPaidResponse {\n  /**\n   * Items updated by the bulk action.\n   * The Order entity within the results optimistically changes its payment status to paid, however this process is async.\n   */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkOrderResult {\n  /** Item metadata. */\n  itemMetadata?: ItemMetadata;\n  /**\n   * Updated order.\n   *\n   * Returned when `returnFullEntity = true`.\n   */\n  item?: Order;\n}\n\nexport interface ItemMetadata {\n  /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface GetRefundabilityStatusRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n}\n\nexport interface GetRefundabilityStatusResponse {\n  /**\n   * Refundability details.\n   * @maxSize 300\n   */\n  refundabilities?: Refundability[];\n  /**\n   * Whether the order supports refunding per item.\n   * @deprecated\n   */\n  refundablePerItem?: boolean;\n}\n\nexport interface Refundability\n  extends RefundabilityAdditionalRefundabilityInfoOneOf {\n  /** Reason why payment is not refundable. */\n  nonRefundableReason?: NonRefundableReasonWithLiterals;\n  /** Reason why payment is only refundable manually. */\n  manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;\n  /** Payment ID. */\n  paymentId?: string;\n  /** Payment refundability status. */\n  refundabilityStatus?: RefundableStatusWithLiterals;\n  /** Link to payment provider dashboard. */\n  providerLink?: string | null;\n}\n\n/** @oneof */\nexport interface RefundabilityAdditionalRefundabilityInfoOneOf {\n  /** Reason why payment is not refundable. */\n  nonRefundableReason?: NonRefundableReasonWithLiterals;\n  /** Reason why payment is only refundable manually. */\n  manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;\n}\n\nexport enum RefundableStatus {\n  NOT_REFUNDABLE = 'NOT_REFUNDABLE',\n  MANUAL = 'MANUAL',\n  REFUNDABLE = 'REFUNDABLE',\n}\n\n/** @enumType */\nexport type RefundableStatusWithLiterals =\n  | RefundableStatus\n  | 'NOT_REFUNDABLE'\n  | 'MANUAL'\n  | 'REFUNDABLE';\n\nexport enum NonRefundableReason {\n  NONE = 'NONE',\n  ALREADY_REFUNDED = 'ALREADY_REFUNDED',\n  PROVIDER_IS_DOWN = 'PROVIDER_IS_DOWN',\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  NOT_PAID = 'NOT_PAID',\n  ACCESS_DENIED = 'ACCESS_DENIED',\n  ZERO_PRICE = 'ZERO_PRICE',\n  DISABLED_BY_PROVIDER = 'DISABLED_BY_PROVIDER',\n  PENDING_REFUND = 'PENDING_REFUND',\n  FORBIDDEN = 'FORBIDDEN',\n  TRANSACTION_NOT_FOUND = 'TRANSACTION_NOT_FOUND',\n  ORDER_IS_PENDING = 'ORDER_IS_PENDING',\n  ORDER_IS_REJECTED = 'ORDER_IS_REJECTED',\n}\n\n/** @enumType */\nexport type NonRefundableReasonWithLiterals =\n  | NonRefundableReason\n  | 'NONE'\n  | 'ALREADY_REFUNDED'\n  | 'PROVIDER_IS_DOWN'\n  | 'INTERNAL_ERROR'\n  | 'NOT_PAID'\n  | 'ACCESS_DENIED'\n  | 'ZERO_PRICE'\n  | 'DISABLED_BY_PROVIDER'\n  | 'PENDING_REFUND'\n  | 'FORBIDDEN'\n  | 'TRANSACTION_NOT_FOUND'\n  | 'ORDER_IS_PENDING'\n  | 'ORDER_IS_REJECTED';\n\nexport enum ManuallyRefundableReason {\n  EXPIRED = 'EXPIRED',\n  NOT_SUPPORTED = 'NOT_SUPPORTED',\n  OFFLINE = 'OFFLINE',\n  REQUIRES_CARD_READER = 'REQUIRES_CARD_READER',\n}\n\n/** @enumType */\nexport type ManuallyRefundableReasonWithLiterals =\n  | ManuallyRefundableReason\n  | 'EXPIRED'\n  | 'NOT_SUPPORTED'\n  | 'OFFLINE'\n  | 'REQUIRES_CARD_READER';\n\nexport interface CreatePaymentGatewayOrderRequest {\n  /**\n   * Ecom order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n  /** Information about the user who initiated the payment. */\n  chargedBy?: ChargedBy;\n}\n\nexport interface ChargedBy {\n  /**\n   * ID - id of the user who initiated the payment\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * Full name - name of the user who initiated the payment\n   * @minLength 1\n   * @maxLength 200\n   */\n  fullName?: string | null;\n}\n\nexport interface CreatePaymentGatewayOrderResponse {\n  /** ID of the order created in the payment gateway */\n  paymentGatewayOrderId?: string;\n}\n\nexport interface ChargeMembershipsRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n  /**\n   * The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member\n   * but a user which is using the membership on behalf of the a member\n   * @format GUID\n   */\n  memberId: string;\n  /**\n   * List of items to be paid by memberships\n   * @minSize 1\n   * @maxSize 300\n   */\n  membershipCharges?: MembershipChargeItem[];\n}\n\nexport interface MembershipChargeItem {\n  /**\n   * The id of used membership\n   * @minLength 1\n   * @maxLength 100\n   */\n  membershipId?: string;\n  /**\n   * ID of the application providing this payment option\n   * @format GUID\n   */\n  appId?: string;\n  /** The name of used membership */\n  membershipName?: MembershipName;\n  /** Additional data about this membership */\n  membershipAdditionalData?: Record<string, any> | null;\n  /** Catalog and item reference info. */\n  catalogReference?: CatalogReference;\n  /** Properties of the service. When relevant, contains information such as date and number of participants. */\n  serviceProperties?: ServiceProperties;\n  /**\n   * Usually would be the same as catalogReference.catalogItemId\n   * For cases when these are not the same, this field would return the actual id of the item in the catalog\n   * For example, for Wix bookings, catalogReference.catalogItemId is the booking id, and this value is being set to be the service id\n   * @minLength 1\n   * @maxLength 36\n   */\n  rootCatalogItemId?: string | null;\n  /**\n   * line item id of Checkout/Order line item\n   * @minLength 1\n   * @maxLength 100\n   */\n  lineItemId?: string;\n}\n\nexport interface MembershipName {\n  /**\n   * Membership name.\n   * @maxLength 100\n   */\n  original?: string;\n  /**\n   * Translated membership name. Defaults to `original` when not provided.\n   * @maxLength 100\n   */\n  translated?: string | null;\n}\n\nexport interface ServiceProperties {\n  /**\n   * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * For example, the start time of a class.\n   */\n  scheduledDate?: Date | null;\n  /**\n   * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.\n   * @min 1\n   * @max 10000\n   */\n  numberOfParticipants?: number | null;\n}\n\nexport interface ChargeMembershipsResponse {}\n\nexport interface TriggerRefundRequest {\n  /**\n   * The order this refund related to\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n  /**\n   * Refund operations information\n   * @minSize 1\n   * @maxSize 1\n   */\n  payments: PaymentRefund[];\n  /** Business model of a refund */\n  details?: RefundDetails;\n  /** Side effect details related to refund */\n  sideEffects?: RefundSideEffects;\n}\n\nexport interface PaymentRefund {\n  /**\n   * Specific payment within the order to refund\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Refund amount. Not relevant for membership and gift card refunds. */\n  amount?: Price;\n  /**\n   * Whether refund is made externally and manually (on the payment provider's side)\n   * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.\n   * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.\n   */\n  externalRefund?: boolean;\n}\n\nexport interface RefundSideEffects {\n  /** Inventory restock details as part of this refund. */\n  restockInfo?: RestockInfo;\n  /** Whether to send a refund confirmation email to the customer. */\n  sendOrderRefundedEmail?: boolean;\n  /**\n   * Custom message added to the refund confirmation email.\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n}\n\nexport interface RestockInfo {\n  /** Restock type. */\n  type?: RestockTypeWithLiterals;\n  /**\n   * Restocked line items and quantities. Only relevant for `{\"type\": \"SOME_ITEMS\"}`.\n   * @maxSize 300\n   */\n  items?: RestockItem[];\n}\n\nexport enum RestockType {\n  NO_ITEMS = 'NO_ITEMS',\n  ALL_ITEMS = 'ALL_ITEMS',\n  SOME_ITEMS = 'SOME_ITEMS',\n}\n\n/** @enumType */\nexport type RestockTypeWithLiterals =\n  | RestockType\n  | 'NO_ITEMS'\n  | 'ALL_ITEMS'\n  | 'SOME_ITEMS';\n\nexport interface RestockItem {\n  /**\n   * ID of the line item being restocked.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity being restocked.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface TriggerRefundResponse {\n  /** All order's transactions after the refunds were added */\n  orderTransactions?: OrderTransactions;\n  /** Created refund ID */\n  refundId?: string | null;\n  /** Payment ID's that the refund execution had failed for */\n  failedPaymentIds?: ItemMetadata[];\n}\n\nexport interface OrderTransactions {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Record of payments made to the merchant.\n   * @maxSize 100\n   */\n  payments?: Payment[];\n  /**\n   * Record of refunds made to the buyer.\n   * @maxSize 300\n   */\n  refunds?: Refund[];\n}\n\nexport interface Payment\n  extends PaymentPaymentDetailsOneOf,\n    PaymentReceiptInfoOneOf {\n  /** Regular payment details. */\n  regularPaymentDetails?: RegularPaymentDetails;\n  /** Gift card payment details. */\n  giftcardPaymentDetails?: GiftCardPaymentDetails;\n  /**\n   * Receipt created by Wix\n   * @internal\n   */\n  wixReceipt?: WixReceiptInfo;\n  /**\n   * Receipt created by an external system.\n   * @internal\n   */\n  externalReceipt?: ExternalReceiptInfo;\n  /**\n   * Payment ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /** Payment amount. */\n  amount?: Price;\n  /**\n   * Whether refunds for this payment are disabled.\n   * + `true`: This payment is not refundable.\n   * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.\n   */\n  refundDisabled?: boolean;\n  /**\n   * Whether receipt generation for this payment are allowed.\n   * + `true`: This payment supports receipt generation.\n   * + `false`: This payment not supports receipt generation, or receipt already generated\n   * @internal\n   * @readonly\n   */\n  supportReceiptGeneration?: boolean;\n}\n\n/** @oneof */\nexport interface PaymentPaymentDetailsOneOf {\n  /** Regular payment details. */\n  regularPaymentDetails?: RegularPaymentDetails;\n  /** Gift card payment details. */\n  giftcardPaymentDetails?: GiftCardPaymentDetails;\n}\n\n/** @oneof */\nexport interface PaymentReceiptInfoOneOf {\n  /**\n   * Receipt created by Wix\n   * @internal\n   */\n  wixReceipt?: WixReceiptInfo;\n  /**\n   * Receipt created by an external system.\n   * @internal\n   */\n  externalReceipt?: ExternalReceiptInfo;\n}\n\nexport interface RegularPaymentDetails\n  extends RegularPaymentDetailsPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n  /**\n   * Wix Payments order ID.\n   * @maxLength 100\n   */\n  paymentOrderId?: string | null;\n  /**\n   * Payment gateway's transaction ID.\n   * This field is only returned when the value of `offline_payment` is `false`.\n   * @maxLength 100\n   */\n  gatewayTransactionId?: string | null;\n  /**\n   * Payment method. Non-exhaustive list of supported values:\n   * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`\n   * @maxLength 100\n   */\n  paymentMethod?: string | null;\n  /**\n   * Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments.\n   * @maxLength 100\n   */\n  providerTransactionId?: string | null;\n  /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */\n  offlinePayment?: boolean;\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n  /**\n   * Whether there is a payment agreement that allows for future charges.\n   * @immutable\n   */\n  savedPaymentMethod?: boolean;\n  /** Authorization details. */\n  authorizationDetails?: AuthorizationDetails;\n  /**\n   * Payment service provider display name. Non-exhaustive list of supported values: Wix Payments, PayPal, Square, Stripe, etc.\n   * @internal\n   * @maxLength 300\n   */\n  paymentProvider?: string | null;\n  /**\n   * Record of chargebacks made by the buyer.\n   * @maxSize 6\n   */\n  chargebacks?: Chargeback[];\n}\n\n/** @oneof */\nexport interface RegularPaymentDetailsPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n}\n\nexport enum TransactionStatus {\n  UNDEFINED = 'UNDEFINED',\n  APPROVED = 'APPROVED',\n  PENDING = 'PENDING',\n  PENDING_MERCHANT = 'PENDING_MERCHANT',\n  CANCELED = 'CANCELED',\n  DECLINED = 'DECLINED',\n  REFUNDED = 'REFUNDED',\n  PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',\n  AUTHORIZED = 'AUTHORIZED',\n  VOIDED = 'VOIDED',\n}\n\n/** @enumType */\nexport type TransactionStatusWithLiterals =\n  | TransactionStatus\n  | 'UNDEFINED'\n  | 'APPROVED'\n  | 'PENDING'\n  | 'PENDING_MERCHANT'\n  | 'CANCELED'\n  | 'DECLINED'\n  | 'REFUNDED'\n  | 'PARTIALLY_REFUNDED'\n  | 'AUTHORIZED'\n  | 'VOIDED';\n\nexport interface CreditCardPaymentMethodDetails {\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface AuthorizationDetails {\n  /**\n   * Whether the authorized payment is of a delayed capture.\n   * @readonly\n   */\n  delayedCapture?: boolean;\n  /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  authorizedDate?: Date | null;\n  /**\n   * List of captures associated with payment\n   * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses\n   * @maxSize 1\n   */\n  captures?: AuthorizationCapture[];\n  /** Void associated with payment */\n  void?: AuthorizationVoid;\n  /** Scheduled action for this transaction */\n  scheduledAction?: V1ScheduledAction;\n}\n\nexport interface AuthorizationCapture {\n  /**\n   * Capture ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /** Status of this capture action */\n  status?: AuthorizationCaptureStatusWithLiterals;\n  /**\n   * Amount of this capture\n   * @immutable\n   */\n  amount?: Price;\n  /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  _createdDate?: Date | null;\n  /** In case of status is FAILED may contain failure details */\n  failureDetails?: AuthorizationActionFailureDetails;\n}\n\nexport enum AuthorizationCaptureStatus {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Capture operation still in progress. */\n  PENDING = 'PENDING',\n  /** Capture operation succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Capture operation failed. */\n  FAILED = 'FAILED',\n}\n\n/** @enumType */\nexport type AuthorizationCaptureStatusWithLiterals =\n  | AuthorizationCaptureStatus\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED';\n\nexport interface AuthorizationActionFailureDetails {\n  /** @maxLength 100 */\n  failureCode?: string;\n}\n\nexport interface AuthorizationVoid {\n  /** Status of this void action */\n  status?: AuthorizationVoidStatusWithLiterals;\n  /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  voidedDate?: Date | null;\n  /** In case of status is FAILED may contain failure details */\n  failureDetails?: AuthorizationActionFailureDetails;\n  /** Reason of void action */\n  reason?: ReasonWithLiterals;\n}\n\nexport enum AuthorizationVoidStatus {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Void operation still in progress. */\n  PENDING = 'PENDING',\n  /** Void operation succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Void operation failed. */\n  FAILED = 'FAILED',\n}\n\n/** @enumType */\nexport type AuthorizationVoidStatusWithLiterals =\n  | AuthorizationVoidStatus\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED';\n\n/** Reason the authorization was voided. */\nexport enum Reason {\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  /** Authorization was voided by user. */\n  MANUAL = 'MANUAL',\n  /** Authorization passed execution date. */\n  SCHEDULED = 'SCHEDULED',\n}\n\n/** @enumType */\nexport type ReasonWithLiterals =\n  | Reason\n  | 'UNKNOWN_REASON'\n  | 'MANUAL'\n  | 'SCHEDULED';\n\nexport interface V1ScheduledAction {\n  /** Type of the action. */\n  actionType?: ActionTypeWithLiterals;\n  /** The date and time of the action. */\n  executionDate?: Date | null;\n}\n\nexport enum ActionType {\n  UNKNOWN_ACTION_TYPE = 'UNKNOWN_ACTION_TYPE',\n  VOID = 'VOID',\n  CAPTURE = 'CAPTURE',\n}\n\n/** @enumType */\nexport type ActionTypeWithLiterals =\n  | ActionType\n  | 'UNKNOWN_ACTION_TYPE'\n  | 'VOID'\n  | 'CAPTURE';\n\nexport interface Chargeback {\n  /**\n   * Chargeback ID.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  _id?: string;\n  /**\n   * Date and time the chargeback was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the chargeback was updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Amount.\n   * @readonly\n   * @immutable\n   */\n  amount?: Price;\n  /**\n   * Reversal amount. Present only when status is REVERSED.\n   * @readonly\n   */\n  reversalAmount?: Price;\n  /**\n   * Status.\n   *\n   * Default: `\"APPROVED\"`.\n   */\n  status?: ChargebackStatusWithLiterals;\n  /**\n   * External chargeback ID.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  externalId?: string | null;\n}\n\nexport enum ChargebackStatus {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** Chargeback was approved. */\n  APPROVED = 'APPROVED',\n  /** Chargeback was reversed. */\n  REVERSED = 'REVERSED',\n}\n\n/** @enumType */\nexport type ChargebackStatusWithLiterals =\n  | ChargebackStatus\n  | 'UNSPECIFIED'\n  | 'APPROVED'\n  | 'REVERSED';\n\nexport interface GiftCardPaymentDetails {\n  /**\n   * Gift card payment ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  giftCardPaymentId?: string;\n  /**\n   * ID of the app that created the gift card.\n   * @format GUID\n   */\n  appId?: string;\n  /**\n   * Whether the gift card is voided.\n   * @readonly\n   */\n  voided?: boolean;\n  /**\n   * Gift card obfuscated code.\n   * @internal\n   * @maxLength 30\n   * @immutable\n   */\n  obfuscatedCode?: string | null;\n}\n\nexport interface MembershipPaymentDetails {\n  /**\n   * Membership ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  membershipId?: string;\n  /**\n   * ID of the line item this membership applies to.\n   * @minLength 1\n   * @maxLength 100\n   */\n  lineItemId?: string;\n  /** Payment status. */\n  status?: MembershipPaymentStatusWithLiterals;\n  /** Membership name. */\n  name?: MembershipName;\n  /**\n   * The transaction ID in the membership system. Can be used to void the transaction.\n   * @minLength 1\n   * @maxLength 100\n   */\n  externalTransactionId?: string | null;\n  /**\n   * Whether the membership is voided.\n   * @readonly\n   */\n  voided?: boolean;\n  /**\n   * ID of the application providing this payment option.\n   * @format GUID\n   */\n  providerAppId?: string;\n}\n\nexport enum MembershipPaymentStatus {\n  /** Payment was charged. */\n  CHARGED = 'CHARGED',\n  /** The attempt to charge the payment failed, for example, due to lack of credits. */\n  CHARGE_FAILED = 'CHARGE_FAILED',\n}\n\n/** @enumType */\nexport type MembershipPaymentStatusWithLiterals =\n  | MembershipPaymentStatus\n  | 'CHARGED'\n  | 'CHARGE_FAILED';\n\nexport interface WixReceiptInfo {\n  /**\n   * Receipt ID\n   * @format GUID\n   */\n  receiptId?: string;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface ExternalReceiptInfo {\n  /**\n   * External receipt ID\n   * @maxLength 100\n   */\n  receiptId?: string | null;\n  /**\n   * ID of the app providing the receipt\n   * @format GUID\n   */\n  appId?: string | null;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface Refund {\n  /**\n   * Refund ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string;\n  /**\n   * List of transactions.\n   * @maxSize 50\n   */\n  transactions?: RefundTransaction[];\n  /** Refund business details. */\n  details?: RefundDetails;\n  /**\n   * Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Aggregated refund summary.\n   * @readonly\n   */\n  summary?: AggregatedRefundSummary;\n  /**\n   * ID of the app that initiated this refund.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  requestingServiceAppId?: string | null;\n}\n\nexport interface RefundTransaction {\n  /**\n   * ID of the payment associated with this refund.\n   * @format GUID\n   * @immutable\n   */\n  paymentId?: string;\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n  /** Refund status. */\n  refundStatus?: RefundStatusWithLiterals;\n  /** Optional details of current refund status. */\n  refundStatusInfo?: RefundStatusInfo;\n  /**\n   * Payment gateway's refund ID.\n   * This field is only returned when the value of `external_refund` is `false`.\n   * @format GUID\n   */\n  gatewayRefundId?: string | null;\n  /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */\n  providerRefundId?: string | null;\n  /**\n   * Whether refund was made externally and manually on the payment provider's side.\n   * @immutable\n   */\n  externalRefund?: boolean;\n}\n\n/** Refund transaction status. */\nexport enum RefundStatus {\n  /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */\n  PENDING = 'PENDING',\n  /** Refund transaction succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Refund transaction failed. */\n  FAILED = 'FAILED',\n  /** Refund request acknowledged, and will be executed soon. */\n  SCHEDULED = 'SCHEDULED',\n  /** Refund was initiated on payment provider side. */\n  STARTED = 'STARTED',\n}\n\n/** @enumType */\nexport type RefundStatusWithLiterals =\n  | RefundStatus\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED'\n  | 'SCHEDULED'\n  | 'STARTED';\n\nexport interface RefundStatusInfo {\n  /**\n   * Reason code for the refund's current status.\n   *\n   * Learn more about [reason codes](https://dev.wix.com/docs/rest/business-management/payments/service-plugins/payment-service-provider-service-plugin/reason-codes).\n   * @minLength 1\n   * @maxLength 10\n   */\n  paymentGatewayReasonCode?: string | null;\n  /**\n   * Free text explanation of current refund status.\n   * @minLength 1\n   * @maxLength 1000\n   */\n  description?: string | null;\n}\n\nexport interface AggregatedRefundSummary {\n  /** Total amount requested for refund. */\n  requestedRefund?: Price;\n  /** Pending refund amount - the portion of `requestedRefund` that is still pending. */\n  pendingRefund?: Price;\n  /** Refunded amount - the portion of `requestedRefund` that refunded successfully. */\n  refunded?: Price;\n  /** Failed refund amount - the portion of `requestedRefund` that failed. */\n  failedRefundAmount?: Price;\n  /** Whether at least one refund transaction is still in `\"PENDING\"` status. */\n  pending?: boolean;\n  /** Breakdown of refunded items. Available only after refund is complete. */\n  breakdown?: RefundItemsBreakdown;\n}\n\nexport interface RefundItemsBreakdown {\n  /**\n   * Refunded line items and the amount refunded for each.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefundSummary[];\n}\n\nexport interface LineItemRefundSummary {\n  /**\n   * ID of the refunded line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /** Total refunded amount for the line item. */\n  totalRefundedAmount?: Price;\n}\n\nexport interface CalculateRefundRequest {\n  /**\n   * Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId?: string;\n  /**\n   * Refunded line items and quantity\n   * @maxSize 300\n   */\n  refundItems?: CalculateRefundItemRequest[];\n  /** Should include shipping in refund calculation */\n  refundShipping?: boolean;\n}\n\nexport interface CalculateRefundItemRequest {\n  /**\n   * ID of the line item being refunded\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * How much of that line item is being refunded\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface CalculateRefundResponse {\n  /** Total refundable amount */\n  total?: Price;\n  /** Tax cost of the order */\n  tax?: Price;\n  /** Discount given for this order */\n  discount?: Price;\n  /** Total cost of the order (without tax) */\n  subtotal?: Price;\n  /** Total shipping cost for order */\n  shipping?: Price;\n  /** Previous refund given on that order */\n  previouslyRefundedAmount?: Price;\n  /**\n   * The refundable items of that order\n   * @maxSize 300\n   */\n  items?: CalculateRefundItemResponse[];\n}\n\nexport interface CalculateRefundItemResponse {\n  /**\n   * Line item ID\n   * @format GUID\n   */\n  _id?: string;\n  /** Refundable amount for requested quantity of items (price of requested quantity of items without tax and discount) */\n  price?: Price;\n}\n\nexport interface VoidAuthorizedPaymentsRequest {\n  /**\n   * Wix eCommerce order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n  /**\n   * Payment IDs\n   * @minSize 1\n   * @maxSize 100\n   * @format GUID\n   */\n  paymentIds: string[];\n}\n\nexport interface VoidAuthorizedPaymentsResponse {\n  /** All order's transactions after the void was triggered */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface CaptureAuthorizedPaymentsRequest {\n  /**\n   * Wix eCommerce order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId: string;\n  /**\n   * Capture payments information\n   * @minSize 1\n   * @maxSize 100\n   */\n  payments: PaymentCapture[];\n}\n\nexport interface PaymentCapture {\n  /**\n   * Payment ID\n   * @format GUID\n   */\n  paymentId?: string | null;\n  /**\n   * Capture amount.\n   * If not provided - full authorized amount will be captured.\n   */\n  amount?: Price;\n}\n\nexport interface CaptureAuthorizedPaymentsResponse {\n  /** All order's transactions after the capture was triggered */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface ChargeSavedPaymentMethodRequest {\n  /**\n   * Ecom Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId?: string;\n  /** Amount to be charged */\n  amount?: Price;\n}\n\nexport interface ChargeSavedPaymentMethodResponse {\n  /** Payment gateway's order ID (e.g Wix Payments) */\n  paymentGatewayOrderId?: string;\n}\n\nexport interface UpdateInternalDocumentsEvent\n  extends UpdateInternalDocumentsEventOperationOneOf {\n  /** insert/update documents */\n  update?: InternalDocumentUpdateOperation;\n  /** delete by document ids */\n  deleteByIds?: DeleteByIdsOperation;\n  /** delete documents matching filter */\n  deleteByFilter?: DeleteByFilterOperation;\n  /** update internal documents matching filter */\n  updateByFilter?: InternalDocumentUpdateByFilterOperation;\n  /** update only existing documents */\n  updateExisting?: InternalUpdateExistingOperation;\n  /** insert/update documents with versioning */\n  versionedUpdate?: VersionedDocumentUpdateOperation;\n  /** delete by document ids with versioning */\n  versionedDeleteByIds?: VersionedDeleteByIdsOperation;\n  /**\n   * type of the documents\n   * @minLength 2\n   */\n  documentType?: string;\n  /**\n   * language of the documents (mandatory)\n   * @minLength 2\n   */\n  language?: string | null;\n  /**\n   * one or more search documents\n   * @deprecated\n   */\n  addDocuments?: InternalDocument[];\n  /**\n   * one or more ids of indexed documents to be removed. Removal will happen before addition (if both provided)\n   * @deprecated\n   */\n  removeDocumentIds?: string[];\n  /** id to pass to processing notification */\n  correlationId?: string | null;\n  /** when event was created / issued */\n  issuedAt?: Date | null;\n}\n\n/** @oneof */\nexport interface UpdateInternalDocumentsEventOperationOneOf {\n  /** insert/update documents */\n  update?: InternalDocumentUpdateOperation;\n  /** delete by document ids */\n  deleteByIds?: DeleteByIdsOperation;\n  /** delete documents matching filter */\n  deleteByFilter?: DeleteByFilterOperation;\n  /** update internal documents matching filter */\n  updateByFilter?: InternalDocumentUpdateByFilterOperation;\n  /** update only existing documents */\n  updateExisting?: InternalUpdateExistingOperation;\n  /** insert/update documents with versioning */\n  versionedUpdate?: VersionedDocumentUpdateOperation;\n  /** delete by document ids with versioning */\n  versionedDeleteByIds?: VersionedDeleteByIdsOperation;\n}\n\nexport interface InternalDocument {\n  /** document with mandatory fields (id) and with fields specific to the type of the document */\n  document?: Record<string, any> | null;\n}\n\nexport interface InternalDocumentUpdateOperation {\n  /** documents to index or update */\n  documents?: InternalDocument[];\n}\n\nexport interface DeleteByIdsOperation {\n  /** ids of the documents to delete */\n  documentIds?: string[];\n  /**\n   * tenant id for custom tenancy strategy\n   * @minLength 2\n   * @maxLength 300\n   */\n  tenantId?: string | null;\n}\n\nexport interface DeleteByFilterOperation {\n  /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */\n  filter?: Record<string, any> | null;\n  /**\n   * tenant id for custom tenancy strategy\n   * @minLength 2\n   * @maxLength 300\n   */\n  tenantId?: string | null;\n}\n\nexport interface InternalDocumentUpdateByFilterOperation {\n  /** documents matching this filter will be updated */\n  filter?: Record<string, any> | null;\n  /** partial document to apply */\n  document?: InternalDocument;\n  /**\n   * tenant id for custom tenancy strategy\n   * @minLength 2\n   * @maxLength 300\n   */\n  tenantId?: string | null;\n}\n\nexport interface InternalUpdateExistingOperation {\n  /** documents to update */\n  documents?: InternalDocument[];\n}\n\nexport interface VersionedDocumentUpdateOperation {\n  /** documents to create or overwrite */\n  documents?: InternalDocument[];\n  /** versioning mode to use instead of default */\n  versioningMode?: VersioningModeWithLiterals;\n}\n\nexport enum VersioningMode {\n  /** use default versioning mode agreed with search team */\n  DEFAULT = 'DEFAULT',\n  /** execute only if version is greater than existing */\n  GREATER_THAN = 'GREATER_THAN',\n  /** execute only if version is greater or equal to existing */\n  GREATER_OR_EQUAL = 'GREATER_OR_EQUAL',\n}\n\n/** @enumType */\nexport type VersioningModeWithLiterals =\n  | VersioningMode\n  | 'DEFAULT'\n  | 'GREATER_THAN'\n  | 'GREATER_OR_EQUAL';\n\nexport interface VersionedDeleteByIdsOperation {\n  /** ids with version of the documents to delete */\n  documentIds?: VersionedDocumentId[];\n  /**\n   * tenant id for custom tenancy strategy\n   * @minLength 2\n   * @maxLength 300\n   */\n  tenantId?: string | null;\n}\n\nexport interface VersionedDocumentId {\n  /** document id */\n  documentId?: string;\n  /** document version */\n  version?: string;\n  /** versioning mode to use instead of default */\n  versioningMode?: VersioningModeWithLiterals;\n}\n\nexport interface TriggerReindexRequest {\n  /** @format GUID */\n  metasiteId?: string;\n  /**\n   * @minLength 1\n   * @maxLength 100\n   * @maxSize 100\n   */\n  orderIds?: string[];\n}\n\nexport interface TriggerReindexResponse {}\n\nexport interface BatchOfTriggerReindexOrderRequest {\n  /** @maxSize 25 */\n  requests?: TriggerReindexOrderRequest[];\n}\n\nexport interface TriggerReindexOrderRequest {\n  /** @format GUID */\n  metasiteId?: string;\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface DiffmatokyPayload {\n  left?: string;\n  right?: string;\n  compareChannel?: string;\n  entityId?: string;\n  errorInformation?: ErrorInformation;\n  tags?: string[];\n}\n\nexport interface ErrorInformation {\n  stackTrace?: string;\n}\n\nexport interface ContinueSideEffectsFlowInLegacyData {\n  storeId?: string;\n  orderId?: string;\n  ordersExperiments?: OrdersExperiments;\n}\n\nexport interface SnapshotMessage {\n  _id?: string;\n  opType?: number;\n}\n\nexport interface IndexingMessage {\n  _id?: string;\n  opType?: number;\n  requiredVersions?: string[];\n}\n\nexport interface GetOrderRequest {\n  /**\n   * ID of the order to retrieve.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n}\n\nexport interface GetOrderResponse {\n  /** The requested order. */\n  order?: Order;\n}\n\nexport interface InternalQueryOrdersRequest {\n  /** Query options. */\n  query?: PlatformQuery;\n}\n\nexport interface PlatformQuery extends PlatformQueryPagingMethodOneOf {\n  /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */\n  paging?: PlatformPaging;\n  /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n  /** Filter object. */\n  filter?: Record<string, any> | null;\n  /** Sorting options. For example, `[{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]`. */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface PlatformQueryPagingMethodOneOf {\n  /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */\n  paging?: PlatformPaging;\n  /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrderWithLiterals;\n}\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\n/** @enumType */\nexport type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';\n\nexport interface PlatformPaging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface InternalQueryOrdersResponse {\n  /** List of orders. */\n  orders?: Order[];\n  /** Details on the paged set of results returned. */\n  metadata?: PlatformPagingMetadata;\n}\n\nexport interface PlatformPagingMetadata {\n  /** The number of items returned in this response. */\n  count?: number | null;\n  /** The offset which was requested. Returned if offset paging was used. */\n  offset?: number | null;\n  /** The total number of items that match the query. Returned if offset paging was used. */\n  total?: number | null;\n  /** Cursors to navigate through result pages. Returned if cursor paging was used. */\n  cursors?: Cursors;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface QueryOrderRequest {\n  /** Query options. */\n  query?: PlatformQuery;\n}\n\nexport interface QueryOrderResponse {\n  /** List of orders. */\n  orders?: Order[];\n  /** Details on the paged set of results returned. */\n  metadata?: PlatformPagingMetadata;\n}\n\nexport interface SearchOrdersRequest {\n  /** Search options. */\n  search?: CursorSearch;\n}\n\nexport interface CursorSearch extends CursorSearchPagingMethodOneOf {\n  /**\n   * Cursor paging options.\n   *\n   * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).\n   */\n  cursorPaging?: CursorPaging;\n  /**\n   * Filter object.\n   *\n   * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).\n   */\n  filter?: Record<string, any> | null;\n  /**\n   * List of sort objects.\n   *\n   * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).\n   * @maxSize 4\n   */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface CursorSearchPagingMethodOneOf {\n  /**\n   * Cursor paging options.\n   *\n   * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).\n   */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface SearchOrdersResponse {\n  /** List of orders. */\n  orders?: Order[];\n  /** Details on the paged set of results returned. */\n  metadata?: CursorPagingMetadata;\n}\n\nexport interface CursorPagingMetadata {\n  /** Number of items returned in current page. */\n  count?: number | null;\n  /** Cursor strings that point to the next page, previous page, or both. */\n  cursors?: Cursors;\n  /**\n   * Whether there are more pages to retrieve following the current page.\n   *\n   * + `true`: Another page of results can be retrieved.\n   * + `false`: This is the last page.\n   */\n  hasNext?: boolean | null;\n}\n\nexport interface CreateOrderRequest {\n  /** Order info. */\n  order: Order;\n  /** Determine order lifecycle */\n  settings?: OrderCreationSettings;\n}\n\nexport interface OrderCreationSettings {\n  /**\n   * Condition for the order to be approved.\n   * Default: `DEFAULT`\n   */\n  orderApprovalStrategy?: OrderApprovalStrategyWithLiterals;\n  /** Notification settings to be applied on order creation */\n  notifications?: OrderCreateNotifications;\n}\n\nexport enum OrderApprovalStrategy {\n  /** Order is automatically approved when `order.priceSummary.total = 0`, **or** after receiving payment. */\n  DEFAULT = 'DEFAULT',\n  /** Order is automatically approved **only** after receiving payment. */\n  PAYMENT_RECEIVED = 'PAYMENT_RECEIVED',\n  /** Order is automatically approved when payment method is saved for it. */\n  PAYMENT_METHOD_SAVED = 'PAYMENT_METHOD_SAVED',\n}\n\n/** @enumType */\nexport type OrderApprovalStrategyWithLiterals =\n  | OrderApprovalStrategy\n  | 'DEFAULT'\n  | 'PAYMENT_RECEIVED'\n  | 'PAYMENT_METHOD_SAVED';\n\nexport interface OrderCreateNotifications {\n  /**\n   * Whether to send notification to the buyer.\n   *\n   * Default: `true`\n   */\n  sendNotificationToBuyer?: boolean | null;\n  /**\n   * Whether to send notifications to the business.\n   *\n   * Default: `true`\n   */\n  sendNotificationsToBusiness?: boolean | null;\n}\n\nexport interface CreateOrderResponse {\n  /** Newly created order. */\n  order?: Order;\n}\n\nexport interface UpdateOrderRequest {\n  /** Order to be updated. */\n  order: Order;\n}\n\nexport interface UpdateOrderResponse {\n  /** Newly created order. */\n  order?: Order;\n}\n\nexport interface BulkUpdateOrdersRequest {\n  /**\n   * Orders to update.\n   * @minSize 1\n   * @maxSize 100\n   */\n  orders: MaskedOrder[];\n  /**\n   * Whether to return the full order entities.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n}\n\nexport interface MaskedOrder {\n  /** Order to be updated. */\n  order?: Order;\n}\n\nexport interface BulkUpdateOrdersResponse {\n  /**\n   * Bulk action results.\n   * @minSize 1\n   * @maxSize 100\n   */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface CommitDeltasRequest {\n  /** Order id to be updated */\n  _id: string;\n  /**\n   * Draft order Id representing this change.\n   * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get\n   * @format GUID\n   */\n  draftOrderId?: string;\n  /** Draft order changes to be applied */\n  changes: DraftOrderDiffs;\n  /** Side-effects to happen after order is updated */\n  commitSettings?: DraftOrderCommitSettings;\n  /**\n   * Reason for edit, given by user (optional).\n   * @maxLength 200\n   */\n  reason?: string | null;\n}\n\nexport interface DraftOrderDiffs\n  extends DraftOrderDiffsShippingUpdateInfoOneOf,\n    DraftOrderDiffsBuyerUpdateInfoOneOf,\n    DraftOrderDiffsBillingUpdateInfoOneOf,\n    DraftOrderDiffsRecipientUpdateInfoOneOf {\n  /** Shipping info and selected shipping option details. */\n  changedShippingInfo?: V1ShippingInformation;\n  /** Remove existing shipping info. */\n  shippingInfoRemoved?: boolean;\n  /**\n   * Buyer info and selected buyer option details.\n   * @internal\n   */\n  changedBuyerInfo?: BuyerInfo;\n  /**\n   * Remove existing buyer info.\n   * @internal\n   */\n  buyerInfoRemoved?: boolean;\n  /**\n   * Updated billing info.\n   * @internal\n   */\n  changedBillingInfo?: AddressWithContact;\n  /**\n   * Remove existing billing info.\n   * @internal\n   */\n  billingInfoRemoved?: boolean;\n  /**\n   * Updated recipient info.\n   * @internal\n   */\n  changedRecipientInfo?: AddressWithContact;\n  /**\n   * Remove existing recipient info.\n   * @internal\n   */\n  recipientInfoRemoved?: boolean;\n  /**\n   * Added/updated/removed order line items.\n   * @maxSize 300\n   */\n  lineItems?: V1LineItemDelta[];\n  /**\n   * Added/updated/removed discounts.\n   * @maxSize 320\n   */\n  appliedDiscounts?: AppliedDiscountDelta[];\n  /**\n   * Added/updated/removed additional fee.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFeeDelta[];\n  /**\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Updated Tax summary. overwrites existing tax summary.\n   * @deprecated Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Updated Tax summary. overwrites existing tax summary.\n   * @replacedBy tax_info\n   * @targetRemovalDate 2024-09-30\n   */\n  taxSummary?: TaxSummary;\n  /**\n   * Updated order price summary. overwrites existing price summary.\n   * balance will be updated automatically.\n   */\n  priceSummary?: PriceSummary;\n}\n\n/** @oneof */\nexport interface DraftOrderDiffsShippingUpdateInfoOneOf {\n  /** Shipping info and selected shipping option details. */\n  changedShippingInfo?: V1ShippingInformation;\n  /** Remove existing shipping info. */\n  shippingInfoRemoved?: boolean;\n}\n\n/** @oneof */\nexport interface DraftOrderDiffsBuyerUpdateInfoOneOf {\n  /**\n   * Buyer info and selected buyer option details.\n   * @internal\n   */\n  changedBuyerInfo?: BuyerInfo;\n  /**\n   * Remove existing buyer info.\n   * @internal\n   */\n  buyerInfoRemoved?: boolean;\n}\n\n/** @oneof */\nexport interface DraftOrderDiffsBillingUpdateInfoOneOf {\n  /**\n   * Updated billing info.\n   * @internal\n   */\n  changedBillingInfo?: AddressWithContact;\n  /**\n   * Remove existing billing info.\n   * @internal\n   */\n  billingInfoRemoved?: boolean;\n}\n\n/** @oneof */\nexport interface DraftOrderDiffsRecipientUpdateInfoOneOf {\n  /**\n   * Updated recipient info.\n   * @internal\n   */\n  changedRecipientInfo?: AddressWithContact;\n  /**\n   * Remove existing recipient info.\n   * @internal\n   */\n  recipientInfoRemoved?: boolean;\n}\n\nexport interface V1LineItemDelta extends V1LineItemDeltaDeltaOneOf {\n  /** The line item was added. */\n  lineItemAdded?: boolean;\n  /** The line item was modified. */\n  changedDetails?: ItemChangedDetails;\n  /** The line item was added. */\n  lineItemRemoved?: boolean;\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  lineItemId?: string;\n  lineItem?: OrderLineItemChangedDetails;\n}\n\n/** @oneof */\nexport interface V1LineItemDeltaDeltaOneOf {\n  /** The line item was added. */\n  lineItemAdded?: boolean;\n  /** The line item was modified. */\n  changedDetails?: ItemChangedDetails;\n  /** The line item was added. */\n  lineItemRemoved?: boolean;\n}\n\nexport interface OrderLineItemChangedDetails {\n  /**\n   * Item name.\n   * + Stores - `product.name`\n   * + Bookings - `service.info.name`\n   * + Events - `ticket.name`\n   */\n  productName?: ProductName;\n  /**\n   * References to the line item's origin catalog.\n   * This field may be empty in the case of a custom line item.\n   */\n  catalogReference?: CatalogReference;\n  /**\n   * Line item quantity.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n  /** Total discount for this line item's entire quantity. */\n  totalDiscount?: Price;\n  /**\n   * Line item description lines. Used for display purposes for the cart, checkout and order.\n   * @maxSize 20\n   */\n  descriptionLines?: DescriptionLine[];\n  /** Line item image. */\n  image?: string;\n  /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */\n  physicalProperties?: PhysicalProperties;\n  /** Item type. Either a preset type or custom. */\n  itemType?: ItemType;\n  /**\n   * Fulfiller ID. Field is empty when the line item is self-fulfilled.\n   *\n   * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).\n   * @format GUID\n   */\n  fulfillerId?: string | null;\n  /** Line item price after line item discounts for display purposes. */\n  price?: Price;\n  /** Line item price before line item discounts for display purposes. Defaults to `price` when not provided. */\n  priceBeforeDiscounts?: Price;\n  /** Total price after all discounts and tax. */\n  totalPriceAfterTax?: Price;\n  /**\n   * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.\n   * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.\n   * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.\n   */\n  paymentOption?: DeltaPaymentOptionTypeWithLiterals;\n  /**\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Tax details for this line item.\n   * @deprecated Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Tax details for this line item.\n   * @replacedBy tax_info\n   * @targetRemovalDate 2024-09-30\n   */\n  taxDetails?: ItemTaxFullDetails;\n  /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - \"Starts at $67\". */\n  priceDescription?: PriceDescription;\n  /** Total price **after** catalog-defined discount and line item discounts. */\n  lineItemPrice?: Price;\n  /** Total price after all discounts excluding tax. */\n  totalPriceBeforeTax?: Price;\n  /**\n   * Line item locations.\n   *\n   * The location's total quantity must not exceed the line item quantity.\n   * @maxSize 5\n   */\n  locations?: LocationAndQuantity[];\n  /**\n   * ID of the app managing the inventory.\n   * @internal\n   * @format GUID\n   */\n  inventoryAppId?: string | null;\n  /** Subscription info. */\n  subscriptionInfo?: SubscriptionInfo;\n  /**\n   * Modifier groups that were added to the item.\n   * @readonly\n   * @maxSize 10\n   */\n  modifierGroups?: ModifierGroup[];\n}\n\n/** Type of selected payment option for catalog item */\nexport enum DeltaPaymentOptionType {\n  /** Irrelevant */\n  UNKNOWN_PAYMENT_OPTION = 'UNKNOWN_PAYMENT_OPTION',\n  /** The entire payment for the given item will happen after checkout. */\n  FULL_PAYMENT_OFFLINE = 'FULL_PAYMENT_OFFLINE',\n  /**\n   * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.\n   * Note: when this option is used, the price will be 0.\n   */\n  MEMBERSHIP_OFFLINE = 'MEMBERSHIP_OFFLINE',\n}\n\n/** @enumType */\nexport type DeltaPaymentOptionTypeWithLiterals =\n  | DeltaPaymentOptionType\n  | 'UNKNOWN_PAYMENT_OPTION'\n  | 'FULL_PAYMENT_OFFLINE'\n  | 'MEMBERSHIP_OFFLINE';\n\nexport interface ItemChangedDetails {\n  /**\n   * The quantity before the change.\n   * @min 1\n   * @max 1000000\n   */\n  quantityBeforeChange?: number | null;\n  /** The price before the change. */\n  priceBeforeChange?: Price;\n  /** The price description before the change */\n  priceDescriptionBeforeChange?: PriceDescription;\n}\n\nexport interface AppliedDiscountDelta extends AppliedDiscountDeltaDeltaOneOf {\n  editedDiscount?: AppliedDiscount;\n  discountRemoved?: boolean;\n  /**\n   * Discount id.\n   * @format GUID\n   */\n  discountId?: string;\n}\n\n/** @oneof */\nexport interface AppliedDiscountDeltaDeltaOneOf {\n  editedDiscount?: AppliedDiscount;\n  discountRemoved?: boolean;\n}\n\nexport interface AdditionalFeeDelta extends AdditionalFeeDeltaDeltaOneOf {\n  editedAdditionalFee?: AdditionalFee;\n  additionalFeeRemoved?: boolean;\n  /**\n   * Additional fee id.\n   * @format GUID\n   */\n  additionalFeeId?: string;\n}\n\n/** @oneof */\nexport interface AdditionalFeeDeltaDeltaOneOf {\n  editedAdditionalFee?: AdditionalFee;\n  additionalFeeRemoved?: boolean;\n}\n\nexport interface DraftOrderCommitSettings {\n  /** If false, do not send notifications to buyer. Default is true. */\n  sendNotificationsToBuyer?: boolean | null;\n  /** If false, do not send notifications to business. Default is true. */\n  sendNotificationsToBusiness?: boolean | null;\n  /** If false, do not add activities to the order. Default is true. */\n  addActivitiesToOrder?: boolean | null;\n  /** If false, do not send mails to custom fulfillers in case of a change of shippable items fulfilled by custom fulfillers. Default is true. */\n  sendNotificationsToCustomFulfillers?: boolean | null;\n  /**\n   * Inventory changes to be applied. Either to restock, or decrease.\n   * @maxSize 300\n   */\n  inventoryUpdates?: InventoryUpdateDetails[];\n}\n\nexport interface InventoryUpdateDetails {\n  /** Action to be applied - decrease or restock */\n  actionType?: InventoryActionWithLiterals;\n  /** Order line item id */\n  lineItemId?: string;\n  /** The amount to be increased or restocked */\n  quantityChange?: number;\n}\n\nexport enum InventoryAction {\n  /** Restock inventory */\n  RESTOCK = 'RESTOCK',\n  /** Decrease inventory. Without failing on negative inventory. */\n  DECREASE = 'DECREASE',\n}\n\n/** @enumType */\nexport type InventoryActionWithLiterals =\n  | InventoryAction\n  | 'RESTOCK'\n  | 'DECREASE';\n\nexport interface CommitDeltasResponse {\n  /** Order after deltas are applied */\n  order?: Order;\n}\n\n/** Triggered when order is edited by draftOrders */\nexport interface OrderDeltasCommitted {\n  /** The order after committed changes. */\n  order?: Order;\n  /** Draft order Id representing this change. */\n  draftOrderId?: string;\n  /** Applied changes. */\n  changes?: CommittedDiffs;\n  /** Side-effects requested to happen as a result of this edit. */\n  commitSettings?: DraftOrderCommitSettings;\n  /**\n   * Date and time when order deltas were committed.\n   * @readonly\n   */\n  commitDate?: Date | null;\n}\n\nexport interface CommittedDiffs extends CommittedDiffsShippingUpdateInfoOneOf {\n  /** Shipping info and selected shipping option details. */\n  changedShippingInfo?: V1ShippingInformation;\n  /** Remove existing shipping info. */\n  shippingInfoRemoved?: boolean;\n  /**\n   * Added/updated/removed order line items.\n   * @maxSize 300\n   */\n  lineItems?: LineItemDelta[];\n  /**\n   * Added/updated/removed discounts.\n   * @maxSize 320\n   */\n  appliedDiscounts?: AppliedDiscountDelta[];\n  /**\n   * Added/updated/removed additional fee.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFeeDelta[];\n}\n\n/** @oneof */\nexport interface CommittedDiffsShippingUpdateInfoOneOf {\n  /** Shipping info and selected shipping option details. */\n  changedShippingInfo?: V1ShippingInformation;\n  /** Remove existing shipping info. */\n  shippingInfoRemoved?: boolean;\n}\n\nexport interface LineItemDelta extends LineItemDeltaDeltaOneOf {\n  lineItemAdded?: boolean;\n  changedDetails?: ItemChangedDetails;\n  lineItemRemoved?: OrderLineItemChangedDetails;\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  lineItemId?: string;\n}\n\n/** @oneof */\nexport interface LineItemDeltaDeltaOneOf {\n  lineItemAdded?: boolean;\n  changedDetails?: ItemChangedDetails;\n  lineItemRemoved?: OrderLineItemChangedDetails;\n}\n\nexport interface ArchiveOrderRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface ArchiveOrderResponse {\n  /** Archived order. */\n  order?: Order;\n}\n\nexport interface BulkArchiveOrdersRequest {\n  /**\n   * IDs of orders to archive.\n   * @minSize 1\n   * @maxSize 1000\n   */\n  ids?: string[];\n  /** Whether to return the full updated order entities in the response. */\n  returnFullEntity?: boolean;\n}\n\nexport interface BulkArchiveOrdersResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkArchiveOrdersByFilterRequest {\n  /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */\n  filter?: Record<string, any> | null;\n}\n\nexport interface BulkArchiveOrdersByFilterResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface UnArchiveOrderRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface UnArchiveOrderResponse {\n  /** Unarchived order. */\n  order?: Order;\n}\n\nexport interface BulkUnArchiveOrdersRequest {\n  /**\n   * IDs or orders to unarchive.\n   * @minSize 1\n   * @maxSize 1000\n   */\n  ids?: string[];\n  /** Whether to return the full updated order entities in the response. */\n  returnFullEntity?: boolean;\n}\n\nexport interface BulkUnArchiveOrdersResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkUnArchiveOrdersByFilterRequest {\n  /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */\n  filter?: Record<string, any> | null;\n}\n\nexport interface BulkUnArchiveOrdersByFilterResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface UpdateBuyerInfoRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   * @readonly\n   */\n  _id?: string;\n  /** Buyer info. */\n  buyerInfo?: BuyerInfoUpdate;\n}\n\nexport interface BuyerInfoUpdate {\n  /**\n   * Contact ID.\n   * @format GUID\n   */\n  contactId?: string | null;\n  /**\n   * Email associated with the buyer.\n   * @format EMAIL\n   */\n  email?: string | null;\n}\n\nexport interface UpdateBuyerInfoResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface UpdateBuyerEmailRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   * @readonly\n   */\n  _id?: string;\n  /** @format EMAIL */\n  email?: string | null;\n}\n\nexport interface UpdateBuyerEmailResponse {\n  order?: Order;\n}\n\nexport interface UpdateOrderShippingAddressRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n  /** Shipping address and contact details to be updated. */\n  shippingAddress?: AddressWithContact;\n}\n\nexport interface UpdateOrderShippingAddressResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface UpdateBillingContactDetailsRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   * @readonly\n   */\n  _id?: string;\n  /** Contact details. */\n  addressContactDetails?: FullAddressContactDetails;\n}\n\nexport interface UpdateBillingContactDetailsResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface UpdateOrderLineItemRequest {\n  /**\n   * Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /** Order line item to update */\n  lineItem: OrderLineItem;\n}\n\nexport interface UpdateOrderLineItemResponse {\n  /** Updated order data */\n  order?: Order;\n}\n\nexport interface UpdateOrderLineItemsRequest {\n  /**\n   * Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Order line items to update\n   * @minSize 1\n   * @maxSize 300\n   */\n  lineItems?: MaskedOrderLineItem[];\n}\n\nexport interface MaskedOrderLineItem {\n  /** Order line item to update */\n  lineItem?: OrderLineItem;\n}\n\nexport interface UpdateOrderLineItemsResponse {\n  /** Updated order data */\n  order?: Order;\n}\n\nexport interface AddInternalActivityRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n  /** Activity info. */\n  activity?: InternalActivity;\n}\n\nexport interface InternalActivity extends InternalActivityContentOneOf {\n  /** Order refunded. */\n  orderRefunded?: OrderRefunded;\n  /** Order placed. */\n  orderPlaced?: OrderPlaced;\n  /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */\n  orderPaid?: OrderPaid;\n  /** Order shipping status set as fulfilled. */\n  orderFulfilled?: OrderFulfilled;\n  /** Order shipping status set as not fulfilled. */\n  orderNotFulfilled?: OrderNotFulfilled;\n  /** Order canceled. */\n  orderCanceled?: OrderCanceled;\n  /** Download link was sent (relevant for orders with digital line items). */\n  downloadLinkSent?: DownloadLinkSent;\n  /** Shipping tracking number added to order. */\n  trackingNumberAdded?: TrackingNumberAdded;\n  /** Shipping tracking number was edited. */\n  trackingNumberEdited?: TrackingNumberEdited;\n  /** Shipping tracking link added to order. */\n  trackingLinkAdded?: TrackingLinkAdded;\n  /** An email confirmation of order shipment was sent. */\n  shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;\n  /** Invoice was added to order. */\n  invoiceAdded?: InvoiceAdded;\n  /** Invoice sent to customer via email. */\n  invoiceSent?: InvoiceSent;\n  /** Email sent to fulfiller. */\n  fulfillerEmailSent?: FulfillerEmailSent;\n  /** Shipping address was updated. */\n  shippingAddressEdited?: ShippingAddressEdited;\n  /** Order email was updated. */\n  emailEdited?: EmailEdited;\n  /** Email notification for pickup sent. */\n  pickupReadyEmailSent?: PickupReadyEmailSent;\n  /** Order created as a result of items exchange. */\n  orderCreatedFromExchange?: OrderCreatedFromExchange;\n  /** New exchange order created. */\n  newExchangeOrderCreated?: NewExchangeOrderCreated;\n  /** Order partially paid. During the checkout for orders with deposit items. */\n  orderPartiallyPaid?: OrderPartiallyPaid;\n  /** Draft order changes applied */\n  draftOrderChangesApplied?: DraftOrderChangesApplied;\n  /** Payment method is saved for order */\n  savedPaymentMethod?: SavedPaymentMethod;\n  /**\n   * Details of an initiated refund process.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  refundInitiated?: RefundInitiated;\n  /**\n   * Details of a refunded payment.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefunded?: PaymentRefunded;\n  /**\n   * Details of a failed payment refund.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefundFailed?: PaymentRefundFailed;\n  /**\n   * Details of refund to store credit.\n   * @internal\n   */\n  refundedAsStoreCredit?: RefundedAsStoreCredit;\n  /** Details of a pending payment */\n  paymentPending?: PaymentPending;\n  /** Details of a canceled payment */\n  paymentCanceled?: PaymentCanceled;\n  /** Details of a declined payment */\n  paymentDeclined?: PaymentDeclined;\n  /** Order pending */\n  orderPending?: OrderPending;\n  /** Order rejected */\n  orderRejected?: OrderRejected;\n  /**\n   * Receipt was added for associated payment\n   * @internal\n   */\n  receiptCreated?: ReceiptCreated;\n  /**\n   * Receipt sent to customer\n   * @internal\n   */\n  receiptSent?: ReceiptSent;\n  /**\n   * Chargeback created for one of the order's payments.\n   * @internal\n   */\n  chargebackCreated?: ChargebackCreated;\n  /**\n   * Chargeback reversed for one of the order's payments.\n   * @internal\n   */\n  chargebackReversed?: ChargebackReversed;\n  /**\n   * Internal activity ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Internal activity author's email.\n   * @format EMAIL\n   * @readonly\n   */\n  authorEmail?: string | null;\n  /**\n   * Internal activity creation date and time.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n}\n\n/** @oneof */\nexport interface InternalActivityContentOneOf {\n  /** Order refunded. */\n  orderRefunded?: OrderRefunded;\n  /** Order placed. */\n  orderPlaced?: OrderPlaced;\n  /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */\n  orderPaid?: OrderPaid;\n  /** Order shipping status set as fulfilled. */\n  orderFulfilled?: OrderFulfilled;\n  /** Order shipping status set as not fulfilled. */\n  orderNotFulfilled?: OrderNotFulfilled;\n  /** Order canceled. */\n  orderCanceled?: OrderCanceled;\n  /** Download link was sent (relevant for orders with digital line items). */\n  downloadLinkSent?: DownloadLinkSent;\n  /** Shipping tracking number added to order. */\n  trackingNumberAdded?: TrackingNumberAdded;\n  /** Shipping tracking number was edited. */\n  trackingNumberEdited?: TrackingNumberEdited;\n  /** Shipping tracking link added to order. */\n  trackingLinkAdded?: TrackingLinkAdded;\n  /** An email confirmation of order shipment was sent. */\n  shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;\n  /** Invoice was added to order. */\n  invoiceAdded?: InvoiceAdded;\n  /** Invoice sent to customer via email. */\n  invoiceSent?: InvoiceSent;\n  /** Email sent to fulfiller. */\n  fulfillerEmailSent?: FulfillerEmailSent;\n  /** Shipping address was updated. */\n  shippingAddressEdited?: ShippingAddressEdited;\n  /** Order email was updated. */\n  emailEdited?: EmailEdited;\n  /** Email notification for pickup sent. */\n  pickupReadyEmailSent?: PickupReadyEmailSent;\n  /** Order created as a result of items exchange. */\n  orderCreatedFromExchange?: OrderCreatedFromExchange;\n  /** New exchange order created. */\n  newExchangeOrderCreated?: NewExchangeOrderCreated;\n  /** Order partially paid. During the checkout for orders with deposit items. */\n  orderPartiallyPaid?: OrderPartiallyPaid;\n  /** Draft order changes applied */\n  draftOrderChangesApplied?: DraftOrderChangesApplied;\n  /** Payment method is saved for order */\n  savedPaymentMethod?: SavedPaymentMethod;\n  /**\n   * Details of an initiated refund process.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  refundInitiated?: RefundInitiated;\n  /**\n   * Details of a refunded payment.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefunded?: PaymentRefunded;\n  /**\n   * Details of a failed payment refund.\n   *\n   * > **Note:** A single `refund_initiated` activity can result in multiple `payment_refunded` or `payment_refund_failed` activities.\n   * > In these cases, the `refund_id` will be identical across the activities.\n   * @internal\n   */\n  paymentRefundFailed?: PaymentRefundFailed;\n  /**\n   * Details of refund to store credit.\n   * @internal\n   */\n  refundedAsStoreCredit?: RefundedAsStoreCredit;\n  /** Details of a pending payment */\n  paymentPending?: PaymentPending;\n  /** Details of a canceled payment */\n  paymentCanceled?: PaymentCanceled;\n  /** Details of a declined payment */\n  paymentDeclined?: PaymentDeclined;\n  /** Order pending */\n  orderPending?: OrderPending;\n  /** Order rejected */\n  orderRejected?: OrderRejected;\n  /**\n   * Receipt was added for associated payment\n   * @internal\n   */\n  receiptCreated?: ReceiptCreated;\n  /**\n   * Receipt sent to customer\n   * @internal\n   */\n  receiptSent?: ReceiptSent;\n  /**\n   * Chargeback created for one of the order's payments.\n   * @internal\n   */\n  chargebackCreated?: ChargebackCreated;\n  /**\n   * Chargeback reversed for one of the order's payments.\n   * @internal\n   */\n  chargebackReversed?: ChargebackReversed;\n}\n\n/** Order placed */\nexport interface OrderPlaced {}\n\n/** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */\nexport interface OrderPaid {}\n\n/** Order shipping status set as fulfilled */\nexport interface OrderFulfilled {}\n\n/** Order shipping status set as not fulfilled */\nexport interface OrderNotFulfilled {}\n\n/** Order canceled */\nexport interface OrderCanceled {}\n\n/** A download link was sent (relevant for orders with digital line items) */\nexport interface DownloadLinkSent {}\n\n/** Shipping tracking number was set */\nexport interface TrackingNumberAdded {}\n\n/** Shipping tracking number was edited */\nexport interface TrackingNumberEdited {}\n\n/** Shipping tracking link was set */\nexport interface TrackingLinkAdded {}\n\n/** An email confirmation of order shipment was sent */\nexport interface ShippingConfirmationEmailSent {}\n\n/** Invoice was set in the order */\nexport interface InvoiceAdded {}\n\n/** Invoice sent to customer via email */\nexport interface InvoiceSent {}\n\n/** Email was sent to fulfiller */\nexport interface FulfillerEmailSent {}\n\n/** Shipping address was updated */\nexport interface ShippingAddressEdited {}\n\n/** Order email was updated */\nexport interface EmailEdited {}\n\n/** An email notification for pickup was sent */\nexport interface PickupReadyEmailSent {}\n\n/** Order marked as partially paid when an online transaction was confirmed with partial minimal required amount of total sum */\nexport interface OrderPartiallyPaid {}\n\n/** Order reject */\nexport interface OrderPending {}\n\n/** Order reject */\nexport interface OrderRejected {}\n\nexport interface AddInternalActivityResponse {\n  /** Updated order. */\n  order?: Order;\n  /**\n   * ID of the added internal activity.\n   * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.\n   * @format GUID\n   */\n  activityId?: string;\n}\n\nexport interface AddActivityRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /** Activity info. */\n  activity: PublicActivity;\n}\n\nexport interface PublicActivity extends PublicActivityContentOneOf {\n  /** Custom activity details. */\n  customActivity?: CustomActivity;\n  /** Merchant commment. */\n  merchantComment?: MerchantComment;\n}\n\n/** @oneof */\nexport interface PublicActivityContentOneOf {\n  /** Custom activity details. */\n  customActivity?: CustomActivity;\n  /** Merchant commment. */\n  merchantComment?: MerchantComment;\n}\n\nexport interface AddActivityResponse {\n  /** Updated order. */\n  order?: Order;\n  /**\n   * ID of the added activity.\n   * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.\n   * @format GUID\n   */\n  activityId?: string;\n}\n\nexport interface AddActivitiesRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Activities to add.\n   * @minSize 1\n   * @maxSize 300\n   */\n  activities?: PublicActivity[];\n}\n\nexport interface AddActivitiesResponse {\n  /** Updated order. */\n  order?: Order;\n  /**\n   * IDs of the added activities.\n   * Use this IDs to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activities) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activities) the activities.\n   * @format GUID\n   */\n  activityIds?: string[];\n}\n\nexport interface UpdateActivityRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /**\n   * ID of the activity to update.\n   * @format GUID\n   */\n  activityId: string;\n  /** Activity info. */\n  activity: PublicActivity;\n}\n\nexport interface UpdateActivityResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface DeleteActivityRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /**\n   * ID of the activity to delete.\n   * @format GUID\n   */\n  activityId: string;\n}\n\nexport interface DeleteActivityResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface UpdateLineItemsDescriptionLinesRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n  /**\n   * Line items.\n   * @minSize 1\n   * @maxSize 300\n   */\n  lineItems?: LineItemUpdate[];\n}\n\nexport interface LineItemUpdate {\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Description lines' info.\n   * If description line already exists for this name, it will be replaced.\n   * @minSize 1\n   * @maxSize 20\n   */\n  descriptionLines?: DescriptionLine[];\n}\n\nexport interface UpdateLineItemsDescriptionLinesResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface MarkOrderAsSeenByHumanRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface MarkOrderAsSeenByHumanResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface CancelOrderRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /** Whether to send an order canceled email to the buyer. */\n  sendOrderCanceledEmail?: boolean;\n  /**\n   * Custom note to be added to the email (optional).\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n  /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */\n  restockAllItems?: boolean;\n}\n\nexport interface CancelOrderResponse {\n  /** Canceled order. */\n  order?: Order;\n}\n\nexport interface OrderCanceledEventOrderCanceled {\n  /** The order that was cancelled */\n  order?: Order;\n  /** Should restock all items on that order */\n  restockAllItems?: boolean;\n  /** Should send a confirmation mail to the customer */\n  sendOrderCanceledEmail?: boolean;\n  /** Personal note added to the email */\n  customMessage?: string | null;\n}\n\nexport interface UpdateOrderStatusRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /** New order status. */\n  status: OrderStatusWithLiterals;\n}\n\nexport interface UpdateOrderStatusResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface MarkAsFulfilledRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface MarkAsFulfilledResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\n/** Triggered when the fulfillment status of an order is updated */\nexport interface FulfillmentStatusUpdated {\n  /** The order that was updated */\n  order?: Order;\n  /** The previous status (before the update) */\n  previousFulfillmentStatus?: FulfillmentStatusWithLiterals;\n  /** the new status (after the update) */\n  newFulfillmentStatus?: FulfillmentStatusWithLiterals;\n  /** the action that caused this update */\n  action?: string;\n}\n\nexport interface BulkMarkAsFulfilledRequest {\n  /**\n   * IDs of orders to be marked as fulfilled.\n   * @minSize 1\n   * @maxSize 1000\n   */\n  ids?: string[];\n  /** Whether to return the full updated order entities in the response. */\n  returnFullEntity?: boolean;\n}\n\nexport interface BulkMarkAsFulfilledResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkMarkAsFulfilledByFilterRequest {\n  /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */\n  filter?: Record<string, any> | null;\n}\n\nexport interface BulkMarkAsFulfilledByFilterResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface MarkAsUnfulfilledRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface MarkAsUnfulfilledResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\nexport interface BulkMarkAsUnfulfilledRequest {\n  /**\n   * IDs of orders to be marked as not fulfilled.\n   * @minSize 1\n   * @maxSize 1000\n   */\n  ids?: string[];\n  /** Whether to return the full updated order entities in the response. */\n  returnFullEntity?: boolean;\n}\n\nexport interface BulkMarkAsUnfulfilledResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkMarkAsUnfulfilledByFilterRequest {\n  /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */\n  filter?: Record<string, any> | null;\n}\n\nexport interface BulkMarkAsUnfulfilledByFilterResponse {\n  /** Items updated by bulk action. */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkSetBusinessLocationRequest {\n  /**\n   * IDs of orders to update location for.\n   * @minSize 1\n   * @maxSize 100\n   * @format GUID\n   */\n  orderIds?: string[];\n  /** Business location. */\n  businessLocation?: Location;\n}\n\nexport interface BulkSetBusinessLocationResponse {\n  /**\n   * Bulk action results.\n   * @minSize 1\n   * @maxSize 100\n   */\n  results?: BulkSetBusinessLocationResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkSetBusinessLocationResult {\n  itemMetadata?: ItemMetadata;\n}\n\nexport interface V1MarkOrderAsPaidRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface V1MarkOrderAsPaidResponse {\n  /** Updated order. */\n  order?: Order;\n}\n\n/** Triggered when the payment status of an order is updated */\nexport interface PaymentStatusUpdated {\n  /** The order that was updated */\n  order?: Order;\n  /** The previous status (before the update) */\n  previousPaymentStatus?: PaymentStatusWithLiterals;\n}\n\nexport interface V1BulkMarkOrdersAsPaidRequest {\n  /**\n   * IDs of orders to mark as paid.\n   * @minSize 1\n   * @maxSize 100\n   * @minLength 1\n   * @maxLength 100\n   */\n  ids?: string[];\n}\n\nexport interface V1BulkMarkOrdersAsPaidResponse {\n  /**\n   * Items updated by the bulk action.\n   * The Order entity within the results optimistically changes its payment status to paid, however this process is async.\n   */\n  results?: BulkOrderResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface V1CreatePaymentGatewayOrderRequest {\n  /**\n   * eCom Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  ecomOrderId?: string;\n}\n\nexport interface V1CreatePaymentGatewayOrderResponse {\n  /** ID of the order created in the payment gateway */\n  paymentGatewayOrderId?: string;\n}\n\nexport interface GetShipmentsRequest {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n}\n\nexport interface GetShipmentsResponse {\n  shipmentIds?: string[];\n}\n\nexport interface AggregateOrdersRequest {\n  /** Filter applied to original data */\n  filter?: Record<string, any> | null;\n  /** This is an object defining aggregation itself */\n  aggregation: Record<string, any> | null;\n  /**\n   * Optional custom separator string that can be used to override default separator value '|'\n   * for hierarchical responses of multifaceted aggregation requests like:\n   * '{\"aggregation\": {\"example_request_key\": {\"$count\" : [\"deliveryMethod\", \"shippingRegion\"]}}}'\n   * with example response for default '|' separator like:\n   * '{\"aggregates\" :{\"example_request_key\": {\"(Mail|Region 1)\": 5, \"(Pickup|Region 2)\": 10}}}'\n   * @minLength 1\n   * @maxLength 100\n   */\n  hierarchySeparatorOverride?: string | null;\n}\n\nexport interface AggregateOrdersResponse {\n  aggregates?: Record<string, any> | null;\n}\n\nexport interface DecrementItemsQuantityRequest {\n  /**\n   * Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id?: string;\n  /**\n   * Which items to decrement, and how much to decrement from each one\n   * @minSize 1\n   * @maxSize 300\n   */\n  decrementData?: DecrementData[];\n}\n\nexport interface DecrementData {\n  /**\n   * ID of the line item being decremented.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity being decremented.\n   * @min 1\n   * @max 100000\n   */\n  decrementBy?: number;\n  /** Whether to restock the line item (triggers inventory update). */\n  restock?: boolean;\n}\n\nexport interface DecrementItemsQuantityResponse {\n  /** Updated order data */\n  order?: Order;\n}\n\nexport interface BulkUpdateOrderTagsRequest {\n  /**\n   * IDs of orders to update tags for.\n   * @minSize 1\n   * @maxSize 100\n   * @format GUID\n   */\n  orderIds: string[];\n  /** Tags to be added to orders */\n  assignTags?: Tags;\n  /** Tags to be removed from orders */\n  unassignTags?: Tags;\n}\n\nexport interface BulkUpdateOrderTagsResponse {\n  /**\n   * @minSize 1\n   * @maxSize 100\n   */\n  results?: BulkUpdateOrderTagsResult[];\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkUpdateOrderTagsResult {\n  itemMetadata?: ItemMetadata;\n}\n\nexport interface Task {\n  key?: TaskKey;\n  executeAt?: Date | null;\n  payload?: string | null;\n}\n\nexport interface TaskKey {\n  appId?: string;\n  instanceId?: string;\n  subjectId?: string | null;\n}\n\nexport interface TaskAction extends TaskActionActionOneOf {\n  complete?: Complete;\n  cancel?: Cancel;\n  reschedule?: Reschedule;\n}\n\n/** @oneof */\nexport interface TaskActionActionOneOf {\n  complete?: Complete;\n  cancel?: Cancel;\n  reschedule?: Reschedule;\n}\n\nexport interface Complete {}\n\nexport interface Cancel {}\n\nexport interface Reschedule {\n  executeAt?: Date | null;\n  payload?: string | null;\n}\n\nexport interface InvoiceSentEvent {\n  _id?: IdAndVersion;\n  /** @readonly */\n  data?: InvoiceFields;\n  /** @readonly */\n  status?: InvoiceStatusWithLiterals;\n}\n\nexport interface IdAndVersion {\n  /** @format GUID */\n  _id?: string | null;\n  version?: number | null;\n}\n\nexport interface InvoiceFields {\n  /** The invoice number allocated the invoice by the server. The number is limited to at most 11 digits. */\n  number?: string | null;\n  /**\n   * The invoice 3-letter currency code in [ISO-4217 alphabetic](https://www.iso.org/iso-4217-currency-codes.html) format.\n   * @format CURRENCY\n   */\n  currencyCode?: string | null;\n  /** The invoice customer. The customer must be a contact of the site, with an email. */\n  customer?: Customer;\n  /**\n   * Invoice dates: issue date and due date are mandatory and provided when the invoice is created.\n   * Last seen date is the optional date when the invoice was last seen be UoU.\n   */\n  dates?: InvoiceDates;\n  /**\n   * Line items containing the details of the products or services relevant to the invoice, with their name, prices,\n   * and quantity. There must be at least one line item on the invoice.\n   */\n  lineItems?: LineItems;\n  /**\n   * Locale of the invoice, containing the language.\n   * This field is not mandatory but is used for display purposes, to determine the appearance of numbers and dates\n   * on the invoice.\n   */\n  locale?: Locale;\n  /**\n   * The totals on the invoice.\n   * The totals.subtotal, totals.total and totals.taxed_amount are calculated by the server based on the line items.\n   * Alternatively, these fields can be provided in the invoice creation request, in this case, these values are fixed.\n   * The totals contain fees and a discount, that apply to the invoice.\n   */\n  totals?: TotalPrice;\n  /** An optional discount on the invoice. */\n  discount?: Discount;\n  /** The taxes of the invoice. */\n  taxes?: CalculatedTaxes;\n  /** The payments on the invoice. The invoice has status paid if its payments cover the invoice total. */\n  payments?: Payments;\n  /** Invoice metadata */\n  metaData?: MetaData;\n  /**\n   * Not used\n   * @deprecated\n   */\n  creationAdditional_BIInformation?: string | null;\n  /**\n   * The balance and amount paid on the invoice.\n   * This read-only field is calculated based on the invoice totals and payments.\n   * @readonly\n   */\n  dynamicTotals?: InvoiceDynamicPriceTotals;\n  /** The invoice title */\n  title?: string | null;\n  /** Invoice custom fields */\n  customFields?: CustomFieldValue[];\n  /**\n   * Not used\n   * @deprecated\n   */\n  designTemplateId?: string | null;\n  /**\n   * Not used\n   * @deprecated\n   */\n  createOrder?: boolean | null;\n  /** The optional deposit of the invoice */\n  deposit?: Deposit;\n  /** Associated checkout for this invoice */\n  ecomCheckoutId?: string | null;\n}\n\nexport interface Customer {\n  contactId?: string | null;\n  name?: string | null;\n  email?: Email;\n  address?: QuotesAddress;\n  phone?: Phone;\n  company?: Company;\n  firstName?: string | null;\n  lastName?: string | null;\n  billingAddress?: CommonAddress;\n  shippingAddress?: CommonAddress;\n}\n\nexport interface Email {\n  address?: string;\n}\n\nexport interface QuotesAddress {\n  street?: string | null;\n  city?: string | null;\n  zip?: string | null;\n  state?: string | null;\n  country?: string | null;\n  /** @readonly */\n  description?: AddressDescription;\n}\n\nexport interface AddressDescription {\n  content?: string;\n  placement?: PlacementWithLiterals;\n}\n\nexport enum Placement {\n  Unknown = 'Unknown',\n  Replace = 'Replace',\n  Before = 'Before',\n  After = 'After',\n}\n\n/** @enumType */\nexport type PlacementWithLiterals =\n  | Placement\n  | 'Unknown'\n  | 'Replace'\n  | 'Before'\n  | 'After';\n\nexport interface Phone {\n  number?: string;\n}\n\nexport interface Company {\n  name?: string;\n  _id?: string | null;\n}\n\n/** Physical address */\nexport interface CommonAddress extends CommonAddressStreetOneOf {\n  /** Street name and number. */\n  streetAddress?: StreetAddress;\n  /** Main address line, usually street and number as free text. */\n  addressLine1?: string | null;\n  /**\n   * Country code.\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /** Subdivision shorthand. Usually, a short code (2 or 3 letters) that represents a state, region, prefecture, or province. e.g. NY */\n  subdivision?: string | null;\n  /** City name. */\n  city?: string | null;\n  /** Zip/postal code. */\n  postalCode?: string | null;\n  /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */\n  addressLine2?: string | null;\n}\n\n/** @oneof */\nexport interface CommonAddressStreetOneOf {\n  /** Street name and number. */\n  streetAddress?: StreetAddress;\n  /** Main address line, usually street and number as free text. */\n  addressLine?: string | null;\n}\n\nexport interface Subdivision {\n  /** Short subdivision code. */\n  code?: string;\n  /** Subdivision full name. */\n  name?: string;\n}\n\nexport enum SubdivisionType {\n  UNKNOWN_SUBDIVISION_TYPE = 'UNKNOWN_SUBDIVISION_TYPE',\n  /** State */\n  ADMINISTRATIVE_AREA_LEVEL_1 = 'ADMINISTRATIVE_AREA_LEVEL_1',\n  /** County */\n  ADMINISTRATIVE_AREA_LEVEL_2 = 'ADMINISTRATIVE_AREA_LEVEL_2',\n  /** City/town */\n  ADMINISTRATIVE_AREA_LEVEL_3 = 'ADMINISTRATIVE_AREA_LEVEL_3',\n  /** Neighborhood/quarter */\n  ADMINISTRATIVE_AREA_LEVEL_4 = 'ADMINISTRATIVE_AREA_LEVEL_4',\n  /** Street/block */\n  ADMINISTRATIVE_AREA_LEVEL_5 = 'ADMINISTRATIVE_AREA_LEVEL_5',\n  /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */\n  COUNTRY = 'COUNTRY',\n}\n\n/** @enumType */\nexport type SubdivisionTypeWithLiterals =\n  | SubdivisionType\n  | 'UNKNOWN_SUBDIVISION_TYPE'\n  | 'ADMINISTRATIVE_AREA_LEVEL_1'\n  | 'ADMINISTRATIVE_AREA_LEVEL_2'\n  | 'ADMINISTRATIVE_AREA_LEVEL_3'\n  | 'ADMINISTRATIVE_AREA_LEVEL_4'\n  | 'ADMINISTRATIVE_AREA_LEVEL_5'\n  | 'COUNTRY';\n\n/** Subdivision Concordance values */\nexport interface StandardDetails {\n  /**\n   * subdivision iso-3166-2 code according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). e.g. US-NY, GB-SCT, NO-30\n   * @maxLength 20\n   */\n  iso31662?: string | null;\n}\n\nexport interface InvoiceDates {\n  /** use UTC midnight date to set the issue date according to the site time zone */\n  issueDate?: Date | null;\n  /** use UTC midnight date to set the due date according to the site time zone */\n  dueDate?: Date | null;\n  /** <a href=\"http://joda-time.sourceforge.net/timezones.html\">Valid time zones</a> */\n  timeZoneCode?: string | null;\n  /**\n   * ignored in request use in response to get the site time zone\n   * @readonly\n   */\n  lastSeenDate?: Date | null;\n}\n\nexport interface LineItems {\n  lineItems?: LineItem[];\n}\n\nexport interface LineItem {\n  /** @format GUID */\n  _id?: string;\n  name?: string;\n  description?: string | null;\n  price?: BigDecimalWrapper;\n  taxedTotal?: BigDecimalWrapper;\n  quantity?: BigDecimalWrapper;\n  taxes?: LineItemTax[];\n  /** The source of the line item */\n  source?: Source;\n  /** The line-item level metadata. */\n  metadata?: LineItemMetaData;\n}\n\nexport interface BigDecimalWrapper {\n  serializedValue?: number;\n}\n\nexport interface LineItemTax {\n  name?: string;\n  rate?: BigDecimalWrapper;\n  code?: string | null;\n}\n\nexport interface Source {\n  /**\n   * Source app or service ID.\n   * @readonly\n   */\n  sourceId?: string;\n  /**\n   * App or service type.\n   * @readonly\n   */\n  sourceType?: SourceTypeWithLiterals;\n}\n\nexport enum SourceType {\n  UNKNOWN_SOURCE_TYPE = 'UNKNOWN_SOURCE_TYPE',\n  WIX_APP = 'WIX_APP',\n  EXTERNAL = 'EXTERNAL',\n  ADMIN = 'ADMIN',\n  OTHER = 'OTHER',\n}\n\n/** @enumType */\nexport type SourceTypeWithLiterals =\n  | SourceType\n  | 'UNKNOWN_SOURCE_TYPE'\n  | 'WIX_APP'\n  | 'EXTERNAL'\n  | 'ADMIN'\n  | 'OTHER';\n\nexport interface LineItemMetaData {\n  metadata?: Record<string, string>;\n}\n\nexport interface Locale {\n  /** ISO 639 alpha-2 or alpha-3 language code, or a language subtag */\n  language?: string;\n  /** An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. */\n  country?: string | null;\n  invariant?: string | null;\n}\n\nexport interface TotalPrice {\n  /** the subtotal of the line items without the tax reduction */\n  subtotal?: BigDecimalWrapper;\n  /** the total price taking into account the itemized fees and the taxes */\n  total?: BigDecimalWrapper;\n  fees?: ItemizedFee[];\n  discountAmount?: BigDecimalWrapper;\n  taxedAmount?: BigDecimalWrapper;\n}\n\nexport interface ItemizedFee {\n  name?: string;\n  price?: BigDecimalWrapper;\n}\n\nexport interface Discount extends DiscountOneDiscountTypeOneOf {\n  /** Discount as percentage value. */\n  percentage?: BigDecimalWrapper;\n}\n\n/** @oneof */\nexport interface DiscountOneDiscountTypeOneOf {\n  /** Discount as percentage value. */\n  percentage?: BigDecimalWrapper;\n}\n\nexport interface CalculatedTaxes {\n  /** consider calculated or not - cannot enforce set */\n  taxes?: CalculatedTax[];\n}\n\nexport interface CalculatedTax {\n  name?: string;\n  rate?: BigDecimalWrapper;\n  /** the costs on which the taxes are applied */\n  taxable?: BigDecimalWrapper;\n  /** the taxes as a result of the */\n  taxed?: BigDecimalWrapper;\n  code?: string | null;\n}\n\nexport interface Payments {\n  payments?: InvoicesPayment[];\n}\n\nexport interface InvoicesPayment {\n  /** document */\n  _id?: string;\n  type?: string;\n  amount?: BigDecimalWrapper;\n  date?: Date | null;\n  /**\n   * The orderId of the order in cashier associated with the payment.\n   * This field is populated for external payments that are charged by invoices via AddPayment endpoint.\n   */\n  orderId?: string | null;\n  /**\n   * The transactionId corresponding to the orderId of the payment which are returned by cashier.\n   * This field is populated for external payments that are charged by invoices via AddPayment endpoint as well.\n   */\n  transactionId?: string | null;\n}\n\nexport interface MetaData {\n  notes?: string | null;\n  legalTerms?: string | null;\n  sourceUrl?: string | null;\n  sourceProperties?: Record<string, string>;\n  source?: string | null;\n  sourceRefId?: string | null;\n  /** Optional indicator whether to allow editing of the invoice by other applications other than the source. Default is true. */\n  allowEditByOthers?: boolean | null;\n}\n\nexport interface InvoiceDynamicPriceTotals {\n  paidAmount?: BigDecimalWrapper;\n  balance?: BigDecimalWrapper;\n}\n\n/**\n * A custom field value is used to add additional data to a financial document or to a financial document template.\n * The custom field value may be based on a custom field definition.\n */\nexport interface CustomFieldValue {\n  /**\n   * The unique id of the custom field value\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * The display name of the custom field value\n   * @maxLength 50\n   */\n  displayName?: string;\n  /** The optional namespace of the custom field value. This field may be used to indicate intended usage or source. */\n  namespace?: string | null;\n  /** The group of the custom field indicates its intended placement in the financial document */\n  group?: CustomFieldGroupWithLiterals;\n  /** The value of the custom field */\n  value?: Value;\n  /**\n   * The optional key of the custom field definition on which the custom field value is based\n   * @maxLength 50\n   */\n  originCustomFieldKey?: string | null;\n}\n\nexport enum CustomFieldGroup {\n  UNKNOWN_CUSTOM_FIELD_GROUP = 'UNKNOWN_CUSTOM_FIELD_GROUP',\n  BUSINESS_DETAILS = 'BUSINESS_DETAILS',\n  CUSTOMER_DETAILS = 'CUSTOMER_DETAILS',\n  DOCUMENT = 'DOCUMENT',\n  FOOTER = 'FOOTER',\n  OTHER = 'OTHER',\n}\n\n/** @enumType */\nexport type CustomFieldGroupWithLiterals =\n  | CustomFieldGroup\n  | 'UNKNOWN_CUSTOM_FIELD_GROUP'\n  | 'BUSINESS_DETAILS'\n  | 'CUSTOMER_DETAILS'\n  | 'DOCUMENT'\n  | 'FOOTER'\n  | 'OTHER';\n\nexport interface Value {\n  value?: string;\n  valueType?: ValueTypeWithLiterals;\n}\n\nexport enum ValueType {\n  UNKNOWN_VALUE_TYPE = 'UNKNOWN_VALUE_TYPE',\n  STRING = 'STRING',\n  DATE = 'DATE',\n  BOOLEAN = 'BOOLEAN',\n  NUMBER = 'NUMBER',\n}\n\n/** @enumType */\nexport type ValueTypeWithLiterals =\n  | ValueType\n  | 'UNKNOWN_VALUE_TYPE'\n  | 'STRING'\n  | 'DATE'\n  | 'BOOLEAN'\n  | 'NUMBER';\n\nexport interface Deposit {\n  /**\n   * The flat amount of the deposit. The flat amount of the deposit must be less than the invoice total.\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gt:0.00 }\n   */\n  flatAmount?: string;\n  /**\n   * The read-only percentage value of the deposit.\n   * It is computed according to the flat_amount and the invoice total and is rounded to 2 digits precision.\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gt:0.00, lte:100 }\n   * @readonly\n   */\n  percentage?: string;\n  /** The type of the deposit. The default is FLAT. */\n  type?: DepositTypeWithLiterals;\n}\n\nexport enum DepositType {\n  UNKNOWN = 'UNKNOWN',\n  FLAT = 'FLAT',\n  PERCENTAGE = 'PERCENTAGE',\n}\n\n/** @enumType */\nexport type DepositTypeWithLiterals =\n  | DepositType\n  | 'UNKNOWN'\n  | 'FLAT'\n  | 'PERCENTAGE';\n\n/**\n * InvoiceStatus allowed transitions based on current status:\n * Draft -> Deleted, Paid, Partially Paid, Sent\n * Sent -> Draft, Deleted, Void, Paid, Partially Paid, Processing, (Overdue)\n * Processing -> PartiallyPaid, Paid, Sent\n * Paid -> Void\n * PartiallyPaid -> Void, (PartialAndOverdue)\n * Void -> Deleted\n * Deleted\n */\nexport enum InvoiceStatus {\n  Draft = 'Draft',\n  Sent = 'Sent',\n  Processing = 'Processing',\n  Paid = 'Paid',\n  Overdue = 'Overdue',\n  Void = 'Void',\n  Deleted = 'Deleted',\n  PartiallyPaid = 'PartiallyPaid',\n  PartialAndOverdue = 'PartialAndOverdue',\n}\n\n/** @enumType */\nexport type InvoiceStatusWithLiterals =\n  | InvoiceStatus\n  | 'Draft'\n  | 'Sent'\n  | 'Processing'\n  | 'Paid'\n  | 'Overdue'\n  | 'Void'\n  | 'Deleted'\n  | 'PartiallyPaid'\n  | 'PartialAndOverdue';\n\nexport interface TriggerSideEffectsFromLegacyData {\n  storeId?: string;\n  orderId?: string;\n  ordersExperiments?: OrdersExperiments;\n}\n\n/** @docsIgnore */\nexport type PreparePaymentCollectionApplicationErrors =\n  | {\n      code?: 'PAYMENT_METHODS_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_CANCELED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_AMOUNT';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_ALREADY_PAID';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'NO_ASSOCIATED_ECOM_ORDER';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type RecordManuallyCollectedPaymentApplicationErrors =\n  | {\n      code?: 'ORDER_ALREADY_PAID';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_AMOUNT';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_CANCELED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type PaymentCollectionMarkOrderAsPaidApplicationErrors =\n  | {\n      code?: 'ORDER_ALREADY_PAID';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_GATEWAY_ID_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type PaymentCollectionCreatePaymentGatewayOrderApplicationErrors =\n  | {\n      code?: 'ORDER_ALREADY_PAID';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_CANCELED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type TriggerRefundApplicationErrors =\n  | {\n      code?: 'PAYMENTS_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'REFUND_NOT_AVAILABLE';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_AMOUNT';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type VoidAuthorizedPaymentsApplicationErrors =\n  | {\n      code?: 'PAYMENT_ALREADY_VOIDED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_CAPTURED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_AUTHORIZED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_GATEWAY_ID_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type CaptureAuthorizedPaymentsApplicationErrors =\n  | {\n      code?: 'INVALID_AMOUNT';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'NOT_REGULAR_ONLINE_PAYMENT';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_VOIDED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_CAPTURED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_AUTHORIZED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_GATEWAY_ID_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_HAS_PENDING_CAPTURE';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type GetOrderApplicationErrors = {\n  code?: 'ORDER_NOT_FOUND';\n  description?: string;\n  data?: Record<string, any>;\n};\n/** @docsIgnore */\nexport type CreateOrderApplicationErrors = {\n  code?: 'PURCHASED_DATE_CANNOT_BE_IN_FUTURE';\n  description?: string;\n  data?: Record<string, any>;\n};\n/** @docsIgnore */\nexport type UpdateOrderApplicationErrors =\n  | {\n      code?: 'ORDER_IS_PENDING';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_IS_REJECTED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type CommitDeltasApplicationErrors = {\n  code?: 'EMPTY_DELTAS_TO_COMMIT';\n  description?: string;\n  data?: Record<string, any>;\n};\n/** @docsIgnore */\nexport type CancelOrderApplicationErrors =\n  | {\n      code?: 'ORDER_HAS_AUTHORIZED_TRANSACTION';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_IS_PENDING';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_IS_REJECTED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type UpdateOrderStatusApplicationErrors =\n  | {\n      code?: 'STATUS_NOT_SUPPORTED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'UNSUPPORTED_TRANSITION';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'STATUS_ALREADY_SET';\n      description?: string;\n      data?: Record<string, any>;\n    };\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface OrderApprovedEnvelope {\n  data: OrderApproved;\n  metadata: EventMetadata;\n}\n\n/** @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_ORDERS\n * @webhook\n * @eventType wix.ecom.v1.order_approved\n * @slug approved\n */\nexport declare function onOrderApproved(\n  handler: (event: OrderApprovedEnvelope) => void | Promise<void>\n): void;\n\nexport interface OrderUpdatedEnvelope {\n  entity: Order;\n  metadata: EventMetadata;\n}\n\n/** @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_ORDERS\n * @webhook\n * @eventType wix.ecom.v1.order_updated\n * @slug updated\n */\nexport declare function onOrderUpdated(\n  handler: (event: OrderUpdatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface OrderCanceledEnvelope {\n  data: OrderCanceledEventOrderCanceled;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when an order is canceled.\n * Learn more about [eCommerce webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_ORDERS\n * @webhook\n * @eventType wix.ecom.v1.order_canceled\n * @serviceIdentifier com.wix.ecom.orders.v1.Orders\n * @slug canceled\n */\nexport declare function onOrderCanceled(\n  handler: (event: OrderCanceledEnvelope) => void | Promise<void>\n): void;\n\nexport interface OrderCreatedEnvelope {\n  entity: Order;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when an order is created.\n * Learn more about [webhook payload structure](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/order-object-conversion#webhook-conversion-table).\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_ORDERS\n * @webhook\n * @eventType wix.ecom.v1.order_created\n * @serviceIdentifier com.wix.ecom.orders.v1.Orders\n * @slug created\n */\nexport declare function onOrderCreated(\n  handler: (event: OrderCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface OrderPaymentStatusUpdatedEnvelope {\n  data: PaymentStatusUpdated;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when an order's payment status is updated.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_ORDERS\n * @webhook\n * @eventType wix.ecom.v1.order_payment_status_updated\n * @serviceIdentifier com.wix.ecom.orders.v1.Orders\n * @slug payment_status_updated\n */\nexport declare function onOrderPaymentStatusUpdated(\n  handler: (event: OrderPaymentStatusUpdatedEnvelope) => void | Promise<void>\n): void;\n\n/**\n * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.\n * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.\n * 2nd step is an actual charge of prepared payment gateway order. This could be done either\n * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)\n * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)\n * @param ecomOrderId - Ecom order ID.\n * @param amount - Amount to collect\n * @public\n * @documentationMaturity preview\n * @requiredField amount\n * @requiredField ecomOrderId\n * @permissionId ECOM.COLLECT_PAYMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection\n */\nexport async function preparePaymentCollection(\n  ecomOrderId: string,\n  amount: Price,\n  options?: PreparePaymentCollectionOptions\n): Promise<\n  NonNullablePaths<\n    PreparePaymentCollectionResponse,\n    `paymentGatewayOrderId`,\n    2\n  > & {\n    __applicationErrorsType?: PreparePaymentCollectionApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n    amount: amount,\n    paymentGatewayOrderId: options?.paymentGatewayOrderId,\n    delayedCapture: options?.delayedCapture,\n    delayedCaptureSettings: options?.delayedCaptureSettings,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.preparePaymentCollection(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ecomOrderId: '$[0]',\n          amount: '$[1]',\n          paymentGatewayOrderId: '$[2].paymentGatewayOrderId',\n          delayedCapture: '$[2].delayedCapture',\n          delayedCaptureSettings: '$[2].delayedCaptureSettings',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId', 'amount', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface PreparePaymentCollectionOptions {\n  /**\n   * Optional parameter. When present, payment collection will be performed using given payment gateway order.\n   * Existing payment gateway order will be updated with a new amount.\n   * When parameter is absent, new payment gateway order will be created and used for payment collection.\n   */\n  paymentGatewayOrderId?: string | null;\n  /**\n   * Whether to delay capture of the payment.\n   * Default: false\n   * @deprecated Whether to delay capture of the payment.\n   * Default: false\n   * @replacedBy delayed_capture_settings.scheduled_action\n   * @targetRemovalDate 2024-09-30\n   */\n  delayedCapture?: boolean;\n  /** Delayed capture payment settings */\n  delayedCaptureSettings?: DelayedCaptureSettings;\n}\n\n/**\n * Provides payment collectability status for given order. If payment collection is possible\n * response will contain collectable amount for given ecom order. If not - response will contain\n * reason why payment collection is not possible.\n * @param ecomOrderId - Ecom order ID.\n * @public\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @permissionId ECOM.COLLECT_PAYMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus\n */\nexport async function getPaymentCollectabilityStatus(\n  ecomOrderId: string\n): Promise<\n  NonNullablePaths<\n    GetPaymentCollectabilityStatusResponse,\n    `status` | `amount.amount` | `amount.formattedAmount`,\n    3\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1Order.getPaymentCollectabilityStatus(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ecomOrderId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Records and approves new manual payment with provided custom amount on given order.\n * Existing pending payments are ignored.\n * Custom amount is expected to be less or equal remaining amount to be paid on order (affected by approved payments, refunds and gift card payments)\n * @param orderId - Order ID.\n * @param amount - Amount to be recorded as approved manual payment for given order\n * @internal\n * @documentationMaturity preview\n * @requiredField amount\n * @requiredField orderId\n * @permissionId ECOM.COLLECT_PAYMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.RecordManuallyCollectedPayment\n */\nexport async function recordManuallyCollectedPayment(\n  orderId: string,\n  amount: Price\n): Promise<\n  void & {\n    __applicationErrorsType?: RecordManuallyCollectedPaymentApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    amount: amount,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1Order.recordManuallyCollectedPayment(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]', amount: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'amount']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Marks the order as paid. `order.paymentStatus` field *eventually* changes to `PAID`.\n * In case the order already has an offline payment transaction associated with it\n * (usually when manual payment method is chosen at checkout) - This transaction will become approved.\n * In case the order has no payment transactions associated with it\n * (usually when the item is set to be paid offline after checkout or when an order is created from the backoffice) - A payment transaction\n * will be created and approved.\n * @param ecomOrderId - Ecom order ID.\n * @internal\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.MarkOrderAsPaid\n */\nexport async function paymentCollectionMarkOrderAsPaid(\n  ecomOrderId: string\n): Promise<\n  NonNullablePaths<\n    MarkOrderAsPaidResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  > & {\n    __applicationErrorsType?: PaymentCollectionMarkOrderAsPaidApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1Order.paymentCollectionMarkOrderAsPaid(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ecomOrderId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Marks multiple orders as paid. `order.paymentStatus` field *eventually* changes to `PAID`.\n * @param ecomOrderIds - IDs of orders to mark as paid.\n * @internal\n * @documentationMaturity preview\n * @requiredField ecomOrderIds\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.BulkMarkOrdersAsPaid\n */\nexport async function paymentCollectionBulkMarkOrdersAsPaid(\n  ecomOrderIds: string[]\n): Promise<\n  NonNullablePaths<\n    BulkMarkOrdersAsPaidResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.item.number`\n    | `results.${number}.item.buyerInfo.visitorId`\n    | `results.${number}.item.buyerInfo.memberId`\n    | `results.${number}.item.paymentStatus`\n    | `results.${number}.item.fulfillmentStatus`\n    | `results.${number}.item.weightUnit`\n    | `results.${number}.item.taxIncludedInPrices`\n    | `results.${number}.item.shippingInfo.title`\n    | `results.${number}.item.status`\n    | `results.${number}.item.attributionSource`\n    | `results.${number}.item.createdBy.userId`\n    | `results.${number}.item.createdBy.memberId`\n    | `results.${number}.item.createdBy.visitorId`\n    | `results.${number}.item.createdBy.appId`\n    | `results.${number}.item.channelInfo.type`\n    | `results.${number}.item.businessLocation._id`\n    | `results.${number}.item.businessLocation.name`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderIds: ecomOrderIds,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1Order.paymentCollectionBulkMarkOrdersAsPaid(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'results.item.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'results.item.billingInfo.address' },\n            {\n              path: 'results.item.shippingInfo.logistics.shippingDestination.address',\n            },\n            {\n              path: 'results.item.shippingInfo.logistics.pickupDetails.address',\n            },\n            { path: 'results.item.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ecomOrderIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Checks whether this order can be refunded.\n * @param ecomOrderId - Order ID.\n * @internal\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @permissionId ECOM.READ_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetRefundabilityStatus\n */\nexport async function getRefundabilityStatus(\n  ecomOrderId: string\n): Promise<\n  NonNullablePaths<\n    GetRefundabilityStatusResponse,\n    | `refundabilities`\n    | `refundabilities.${number}.nonRefundableReason`\n    | `refundabilities.${number}.manuallyRefundableReason`\n    | `refundabilities.${number}.paymentId`\n    | `refundabilities.${number}.refundabilityStatus`\n    | `refundablePerItem`,\n    4\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.getRefundabilityStatus(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ecomOrderId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Call this endpoint to create an order in the payment gateway system. The amount of the order would be either:\n * 1. An explicit amount provided in the request, or;\n * 2. If an explicit amount is not provided - the remaining amount to complete the payment of that eCom order.\n * As a result, an ID of the created payment gateway order would be returned.\n * You can then use Wix Payments APIs to approve that order or collect payment, which will eventually change the eCom order state (e.g mark it as paid).\n * @param ecomOrderId - Ecom order ID.\n * @internal\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CreatePaymentGatewayOrder\n */\nexport async function paymentCollectionCreatePaymentGatewayOrder(\n  ecomOrderId: string,\n  options?: PaymentCollectionCreatePaymentGatewayOrderOptions\n): Promise<\n  NonNullablePaths<\n    CreatePaymentGatewayOrderResponse,\n    `paymentGatewayOrderId`,\n    2\n  > & {\n    __applicationErrorsType?: PaymentCollectionCreatePaymentGatewayOrderApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n    chargedBy: options?.chargedBy,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1Order.paymentCollectionCreatePaymentGatewayOrder(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ecomOrderId: '$[0]',\n          chargedBy: '$[1].chargedBy',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface PaymentCollectionCreatePaymentGatewayOrderOptions {\n  /** Information about the user who initiated the payment. */\n  chargedBy?: ChargedBy;\n}\n\n/** @param ecomOrderId - Order ID.\n * @param memberId - The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member\n * but a user which is using the membership on behalf of the a member\n * @internal\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @requiredField memberId\n * @requiredField options.membershipCharges.appId\n * @requiredField options.membershipCharges.catalogReference\n * @requiredField options.membershipCharges.catalogReference.appId\n * @requiredField options.membershipCharges.catalogReference.catalogItemId\n * @requiredField options.membershipCharges.membershipId\n * @requiredField options.membershipCharges.membershipName\n * @requiredField options.membershipCharges.membershipName.original\n * @requiredField options.membershipCharges.rootCatalogItemId\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.ChargeMemberships\n */\nexport async function chargeMemberships(\n  ecomOrderId: string,\n  memberId: string,\n  options?: NonNullablePaths<\n    ChargeMembershipsOptions,\n    | `membershipCharges.${number}.appId`\n    | `membershipCharges.${number}.catalogReference`\n    | `membershipCharges.${number}.catalogReference.appId`\n    | `membershipCharges.${number}.catalogReference.catalogItemId`\n    | `membershipCharges.${number}.membershipId`\n    | `membershipCharges.${number}.membershipName`\n    | `membershipCharges.${number}.membershipName.original`\n    | `membershipCharges.${number}.rootCatalogItemId`,\n    5\n  >\n): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n    memberId: memberId,\n    membershipCharges: options?.membershipCharges,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.chargeMemberships(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ecomOrderId: '$[0]',\n          memberId: '$[1]',\n          membershipCharges: '$[2].membershipCharges',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId', 'memberId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ChargeMembershipsOptions {\n  /**\n   * List of items to be paid by memberships\n   * @minSize 1\n   * @maxSize 300\n   */\n  membershipCharges?: MembershipChargeItem[];\n}\n\n/**\n * Calls corresponding payment providers and creates refund transactions for requested payments.\n * Updates order transactions based on refund results.\n * For requested payments with `TriggerRefundRequest.payments.external_refund = true` will not call payment providers and\n * will only update order transactions.\n * @param ecomOrderId - The order this refund related to\n * @param payments - Refund operations information\n * @internal\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @requiredField payments\n * @requiredField payments.paymentId\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.TriggerRefund\n */\nexport async function triggerRefund(\n  ecomOrderId: string,\n  payments: NonNullablePaths<PaymentRefund, `paymentId`, 2>[],\n  options?: TriggerRefundOptions\n): Promise<\n  NonNullablePaths<\n    TriggerRefundResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`\n    | `failedPaymentIds`\n    | `failedPaymentIds.${number}.originalIndex`\n    | `failedPaymentIds.${number}.success`\n    | `failedPaymentIds.${number}.error.code`\n    | `failedPaymentIds.${number}.error.description`,\n    7\n  > & {\n    __applicationErrorsType?: TriggerRefundApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n    payments: payments,\n    details: options?.details,\n    sideEffects: options?.sideEffects,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.triggerRefund(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ecomOrderId: '$[0]',\n          payments: '$[1]',\n          details: '$[2].details',\n          sideEffects: '$[2].sideEffects',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId', 'payments', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface TriggerRefundOptions {\n  /** Business model of a refund */\n  details?: RefundDetails;\n  /** Side effect details related to refund */\n  sideEffects?: RefundSideEffects;\n}\n\n/**\n * Void authorized payments\n * Transaction statuses for related payments will be updated in async way\n * @param ecomOrderId - Wix eCommerce order ID\n * @param paymentIds - Payment IDs\n * @public\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @requiredField paymentIds\n * @permissionId ECOM.ORDER_VOID_AUTHORIZED_PAYMENT\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments\n */\nexport async function voidAuthorizedPayments(\n  ecomOrderId: string,\n  paymentIds: string[]\n): Promise<\n  NonNullablePaths<\n    VoidAuthorizedPaymentsResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  > & {\n    __applicationErrorsType?: VoidAuthorizedPaymentsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n    paymentIds: paymentIds,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.voidAuthorizedPayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ecomOrderId: '$[0]', paymentIds: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId', 'paymentIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Capture authorized payments\n * Transaction statuses for related payments will be updated in async way\n * @param ecomOrderId - Wix eCommerce order ID\n * @param payments - Capture payments information\n * @public\n * @documentationMaturity preview\n * @requiredField ecomOrderId\n * @requiredField payments\n * @requiredField payments.paymentId\n * @permissionId ECOM.ORDER_CAPTURE_AUTHORIZED_PAYMENT\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments\n */\nexport async function captureAuthorizedPayments(\n  ecomOrderId: string,\n  payments: NonNullablePaths<PaymentCapture, `paymentId`, 2>[]\n): Promise<\n  NonNullablePaths<\n    CaptureAuthorizedPaymentsResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  > & {\n    __applicationErrorsType?: CaptureAuthorizedPaymentsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ecomOrderId: ecomOrderId,\n    payments: payments,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.captureAuthorizedPayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ecomOrderId: '$[0]', payments: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ecomOrderId', 'payments']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves an order.\n *\n *\n * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.\n *\n * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).\n * @param _id - ID of the order to retrieve.\n * @public\n * @requiredField _id\n * @permissionId ECOM.READ_ORDERS\n * @permissionId ECOM.ORDER_READ_ALL_EXTENDED_FIELDS\n * @applicableIdentity APP\n * @returns Fulfilled - The requested order.\n * @fqn com.wix.ecom.orders.v1.Orders.GetOrder\n */\nexport async function getOrder(_id: string): Promise<\n  NonNullablePaths<\n    Order,\n    | `number`\n    | `lineItems`\n    | `lineItems.${number}._id`\n    | `lineItems.${number}.productName.original`\n    | `lineItems.${number}.catalogReference.catalogItemId`\n    | `lineItems.${number}.catalogReference.appId`\n    | `lineItems.${number}.quantity`\n    | `lineItems.${number}.totalDiscount.amount`\n    | `lineItems.${number}.totalDiscount.formattedAmount`\n    | `lineItems.${number}.physicalProperties.shippable`\n    | `lineItems.${number}.itemType.preset`\n    | `lineItems.${number}.itemType.custom`\n    | `lineItems.${number}.paymentOption`\n    | `lineItems.${number}.taxDetails.taxRate`\n    | `lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `lineItems.${number}.digitalFile.fileId`\n    | `lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `lineItems.${number}.priceDescription.original`\n    | `lineItems.${number}.taxableAddress.addressType`\n    | `buyerInfo.visitorId`\n    | `buyerInfo.memberId`\n    | `paymentStatus`\n    | `fulfillmentStatus`\n    | `weightUnit`\n    | `taxIncludedInPrices`\n    | `billingInfo.address.streetAddress.number`\n    | `billingInfo.address.streetAddress.name`\n    | `billingInfo.contactDetails.vatId._id`\n    | `billingInfo.contactDetails.vatId.type`\n    | `shippingInfo.title`\n    | `shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `status`\n    | `taxInfo.taxBreakdown`\n    | `taxInfo.taxBreakdown.${number}.taxName`\n    | `taxInfo.taxBreakdown.${number}.taxType`\n    | `taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `taxInfo.taxBreakdown.${number}.rate`\n    | `appliedDiscounts`\n    | `appliedDiscounts.${number}.coupon._id`\n    | `appliedDiscounts.${number}.coupon.code`\n    | `appliedDiscounts.${number}.coupon.name`\n    | `appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `appliedDiscounts.${number}.discountRule._id`\n    | `appliedDiscounts.${number}.discountRule.name.original`\n    | `appliedDiscounts.${number}.discountType`\n    | `activities`\n    | `activities.${number}.customActivity.appId`\n    | `activities.${number}.customActivity.type`\n    | `activities.${number}.merchantComment.message`\n    | `activities.${number}.orderRefunded.manual`\n    | `activities.${number}.orderRefunded.reason`\n    | `activities.${number}.type`\n    | `attributionSource`\n    | `createdBy.userId`\n    | `createdBy.memberId`\n    | `createdBy.visitorId`\n    | `createdBy.appId`\n    | `channelInfo.type`\n    | `customFields`\n    | `customFields.${number}.title`\n    | `balanceSummary.balance.amount`\n    | `balanceSummary.balance.formattedAmount`\n    | `additionalFees`\n    | `additionalFees.${number}.name`\n    | `additionalFees.${number}._id`\n    | `tags.privateTags.tagIds`\n    | `businessLocation._id`\n    | `businessLocation.name`,\n    6\n  > & {\n    __applicationErrorsType?: GetOrderApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixEcomV1Order.getOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )?.order!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a list of orders, given the provided paging, filtering, and sorting.\n *\n *\n * Search Orders runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n * - `filter: {\"status\": {\"$ne\": \"INITIALIZED\"}}` - other order statuses can be queried, but orders with `status: \"INITIALIZED\"` are never returned\n *\n * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).\n *\n * To learn about working with _Search_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and\n * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n * @param search - Search options.\n * @public\n * @requiredField search\n * @permissionId ECOM.READ_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.SearchOrders\n */\nexport async function searchOrders(\n  search: OrderSearch\n): Promise<\n  NonNullablePaths<\n    SearchOrdersResponse,\n    | `orders`\n    | `orders.${number}.number`\n    | `orders.${number}.buyerInfo.visitorId`\n    | `orders.${number}.buyerInfo.memberId`\n    | `orders.${number}.paymentStatus`\n    | `orders.${number}.fulfillmentStatus`\n    | `orders.${number}.weightUnit`\n    | `orders.${number}.taxIncludedInPrices`\n    | `orders.${number}.shippingInfo.title`\n    | `orders.${number}.status`\n    | `orders.${number}.attributionSource`\n    | `orders.${number}.createdBy.userId`\n    | `orders.${number}.createdBy.memberId`\n    | `orders.${number}.createdBy.visitorId`\n    | `orders.${number}.createdBy.appId`\n    | `orders.${number}.channelInfo.type`\n    | `orders.${number}.balanceSummary.balance.amount`\n    | `orders.${number}.balanceSummary.balance.formattedAmount`\n    | `orders.${number}.businessLocation._id`\n    | `orders.${number}.businessLocation.name`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ search: search });\n\n  const reqOpts = ambassadorWixEcomV1Order.searchOrders(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'orders.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'orders.billingInfo.address' },\n            {\n              path: 'orders.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'orders.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'orders.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { search: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['search']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface OrderSearchSpec extends SearchSpec {\n  paging: 'cursor';\n  wql: [\n    {\n      operators: ['$eq', '$in', '$ne', '$nin'];\n      fields: [\n        'channelInfo.type',\n        'fulfillmentStatus',\n        'paymentStatus',\n        'shippingInfo.region.name',\n        'shippingInfo.title',\n        'status'\n      ];\n      sort: 'BOTH';\n    },\n    {\n      operators: '*';\n      fields: [\n        '_createdDate',\n        '_updatedDate',\n        'balanceSummary.authorized.amount',\n        'balanceSummary.pending.amount',\n        'balanceSummary.pendingRefund.amount',\n        'billingInfo.contactDetails.firstName',\n        'billingInfo.contactDetails.lastName',\n        'businessLocation._id',\n        'businessLocation.name',\n        'buyerInfo.email',\n        'number',\n        'priceSummary.total.amount',\n        'purchasedDate',\n        'shippingInfo.logistics.deliveryTime',\n        'shippingInfo.logistics.deliveryTimeSlot.from',\n        'shippingInfo.logistics.deliveryTimeSlot.to'\n      ];\n      sort: 'BOTH';\n    },\n    {\n      operators: '*';\n      fields: ['archived', 'seenByAHuman'];\n      sort: 'NONE';\n    },\n    {\n      operators: ['$eq', '$in', '$ne', '$nin'];\n      fields: [\n        '_id',\n        'buyerInfo.contactId',\n        'buyerInfo.memberId',\n        'channelInfo.externalOrderId',\n        'checkoutId',\n        'createdBy.userId',\n        'lineItems.subscriptionInfo._id'\n      ];\n      sort: 'NONE';\n    },\n    {\n      operators: ['$hasAll', '$hasSome'];\n      fields: [\n        'lineItems.catalogReference.appId',\n        'lineItems.catalogReference.catalogItemId',\n        'lineItems.locations._id'\n      ];\n      sort: 'NONE';\n    },\n    {\n      operators: ['$hasAll', '$hasSome'];\n      fields: [\n        'fulfillmentStatusesAggregate.statuses',\n        'lineItems.productName.original'\n      ];\n      sort: 'BOTH';\n    }\n  ];\n}\n\nexport type CommonSearchWithEntityContext = SearchSdkType<\n  Order,\n  OrderSearchSpec\n>;\nexport type OrderSearch = {\n  /** \n  Cursor paging options.\n\n  Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).  \n  */\n  cursorPaging?: {\n    /** \n  Maximum number of items to return in the results. \n  @max: 100 \n  */\n    limit?:\n      | NonNullable<CommonSearchWithEntityContext['cursorPaging']>['limit']\n      | null;\n    /** \n  Pointer to the next or previous page in the list of results.\n\n  Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n  Not relevant for the first request. \n  @maxLength: 16000 \n  */\n    cursor?:\n      | NonNullable<CommonSearchWithEntityContext['cursorPaging']>['cursor']\n      | null;\n  };\n  /** \n  Filter object.\n\n  Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).  \n  */\n  filter?: CommonSearchWithEntityContext['filter'] | null;\n  /** \n  List of sort objects.\n\n  Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting). \n  @maxSize: 4 \n  */\n  sort?: {\n    /** \n  Name of the field to sort by. \n  @maxLength: 512 \n  */\n    fieldName?: NonNullable<\n      CommonSearchWithEntityContext['sort']\n    >[number]['fieldName'];\n    /** \n  Sort order.  \n  */\n    order?: NonNullable<CommonSearchWithEntityContext['sort']>[number]['order'];\n  }[];\n};\n\n/**\n * Creates an order.\n *\n *\n * The `createOrder()` function returns a Promise that resolves when the order is created.\n *\n * > **Notes:**\n * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.\n * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.\n * @param order - Order info.\n * @public\n * @requiredField order\n * @requiredField order.billingInfo.contactDetails\n * @requiredField order.channelInfo\n * @requiredField order.currencyConversionDetails.conversionRate\n * @requiredField order.currencyConversionDetails.originalCurrency\n * @requiredField order.lineItems\n * @requiredField order.lineItems.catalogReference.appId\n * @requiredField order.lineItems.catalogReference.catalogItemId\n * @requiredField order.lineItems.itemType\n * @requiredField order.lineItems.price\n * @requiredField order.lineItems.productName\n * @requiredField order.lineItems.productName.original\n * @requiredField order.lineItems.quantity\n * @requiredField order.priceSummary\n * @permissionId ECOM.CREATE_ORDERS\n * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS\n * @applicableIdentity APP\n * @returns Newly created order.\n * @fqn com.wix.ecom.orders.v1.Orders.CreateOrder\n */\nexport async function createOrder(\n  order: NonNullablePaths<\n    Order,\n    | `billingInfo.contactDetails`\n    | `channelInfo`\n    | `currencyConversionDetails.conversionRate`\n    | `currencyConversionDetails.originalCurrency`\n    | `lineItems`\n    | `lineItems.${number}.catalogReference.appId`\n    | `lineItems.${number}.catalogReference.catalogItemId`\n    | `lineItems.${number}.itemType`\n    | `lineItems.${number}.price`\n    | `lineItems.${number}.productName`\n    | `lineItems.${number}.productName.original`\n    | `lineItems.${number}.quantity`\n    | `priceSummary`,\n    5\n  >,\n  options?: CreateOrderOptions\n): Promise<\n  NonNullablePaths<\n    Order,\n    | `number`\n    | `lineItems`\n    | `lineItems.${number}._id`\n    | `lineItems.${number}.productName.original`\n    | `lineItems.${number}.catalogReference.catalogItemId`\n    | `lineItems.${number}.catalogReference.appId`\n    | `lineItems.${number}.quantity`\n    | `lineItems.${number}.totalDiscount.amount`\n    | `lineItems.${number}.totalDiscount.formattedAmount`\n    | `lineItems.${number}.physicalProperties.shippable`\n    | `lineItems.${number}.itemType.preset`\n    | `lineItems.${number}.itemType.custom`\n    | `lineItems.${number}.paymentOption`\n    | `lineItems.${number}.taxDetails.taxRate`\n    | `lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `lineItems.${number}.digitalFile.fileId`\n    | `lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `lineItems.${number}.priceDescription.original`\n    | `lineItems.${number}.taxableAddress.addressType`\n    | `buyerInfo.visitorId`\n    | `buyerInfo.memberId`\n    | `paymentStatus`\n    | `fulfillmentStatus`\n    | `weightUnit`\n    | `taxIncludedInPrices`\n    | `billingInfo.address.streetAddress.number`\n    | `billingInfo.address.streetAddress.name`\n    | `billingInfo.contactDetails.vatId._id`\n    | `billingInfo.contactDetails.vatId.type`\n    | `shippingInfo.title`\n    | `shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `status`\n    | `taxInfo.taxBreakdown`\n    | `taxInfo.taxBreakdown.${number}.taxName`\n    | `taxInfo.taxBreakdown.${number}.taxType`\n    | `taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `taxInfo.taxBreakdown.${number}.rate`\n    | `appliedDiscounts`\n    | `appliedDiscounts.${number}.coupon._id`\n    | `appliedDiscounts.${number}.coupon.code`\n    | `appliedDiscounts.${number}.coupon.name`\n    | `appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `appliedDiscounts.${number}.discountRule._id`\n    | `appliedDiscounts.${number}.discountRule.name.original`\n    | `appliedDiscounts.${number}.discountType`\n    | `activities`\n    | `activities.${number}.customActivity.appId`\n    | `activities.${number}.customActivity.type`\n    | `activities.${number}.merchantComment.message`\n    | `activities.${number}.orderRefunded.manual`\n    | `activities.${number}.orderRefunded.reason`\n    | `activities.${number}.type`\n    | `attributionSource`\n    | `createdBy.userId`\n    | `createdBy.memberId`\n    | `createdBy.visitorId`\n    | `createdBy.appId`\n    | `channelInfo.type`\n    | `customFields`\n    | `customFields.${number}.title`\n    | `balanceSummary.balance.amount`\n    | `balanceSummary.balance.formattedAmount`\n    | `additionalFees`\n    | `additionalFees.${number}.name`\n    | `additionalFees.${number}._id`\n    | `tags.privateTags.tagIds`\n    | `businessLocation._id`\n    | `businessLocation.name`,\n    6\n  > & {\n    __applicationErrorsType?: CreateOrderApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({\n      order: order,\n      settings: options?.settings,\n    }),\n    [\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'order.lineItems.image' }],\n      },\n      {\n        transformFn: transformSDKAddressToRESTAddress,\n        paths: [\n          { path: 'order.billingInfo.address' },\n          { path: 'order.shippingInfo.logistics.shippingDestination.address' },\n          { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n          { path: 'order.recipientInfo.address' },\n        ],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixEcomV1Order.createOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )?.order!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { order: '$[0]', settings: '$[1].settings' },\n        singleArgumentUnchanged: false,\n      },\n      ['order', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CreateOrderOptions {\n  /** Determine order lifecycle */\n  settings?: OrderCreationSettings;\n}\n\n/**\n * Updates an order.\n *\n *\n * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.\n *\n * Currently, the following fields can be updated:\n * + `order.buyerInfo.email`\n * + `order.buyerLanguage`\n * + `order.weightUnit`\n * + `order.billingInfo.address`\n * + `order.billingInfo.contactDetails`\n * + `order.archived`\n * + `order.attributionSource`\n * + `order.seenByAHuman`\n * + `order.recipientInfo.address`\n * + `order.recipientInfo.contactDetails`\n * + `order.shippingInfo.logistics.shippingDestination.address`\n * + `order.shippingInfo.logistics.shippingDestination.contactDetails`\n *\n * To update a field's value, include the new value in the `order` object in the method parameters.\n * To remove a field's value, pass `null`.\n *\n * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.\n *\n * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).\n * @param _id - Order ID.\n * @public\n * @requiredField _id\n * @requiredField order\n * @permissionId ECOM.MODIFY_ORDERS\n * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS\n * @applicableIdentity APP\n * @returns Newly created order.\n * @fqn com.wix.ecom.orders.v1.Orders.UpdateOrder\n */\nexport async function updateOrder(\n  _id: string,\n  order: UpdateOrder\n): Promise<\n  NonNullablePaths<\n    Order,\n    | `number`\n    | `lineItems`\n    | `lineItems.${number}._id`\n    | `lineItems.${number}.productName.original`\n    | `lineItems.${number}.catalogReference.catalogItemId`\n    | `lineItems.${number}.catalogReference.appId`\n    | `lineItems.${number}.quantity`\n    | `lineItems.${number}.totalDiscount.amount`\n    | `lineItems.${number}.totalDiscount.formattedAmount`\n    | `lineItems.${number}.physicalProperties.shippable`\n    | `lineItems.${number}.itemType.preset`\n    | `lineItems.${number}.itemType.custom`\n    | `lineItems.${number}.paymentOption`\n    | `lineItems.${number}.taxDetails.taxRate`\n    | `lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `lineItems.${number}.digitalFile.fileId`\n    | `lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `lineItems.${number}.priceDescription.original`\n    | `lineItems.${number}.taxableAddress.addressType`\n    | `buyerInfo.visitorId`\n    | `buyerInfo.memberId`\n    | `paymentStatus`\n    | `fulfillmentStatus`\n    | `weightUnit`\n    | `taxIncludedInPrices`\n    | `billingInfo.address.streetAddress.number`\n    | `billingInfo.address.streetAddress.name`\n    | `billingInfo.contactDetails.vatId._id`\n    | `billingInfo.contactDetails.vatId.type`\n    | `shippingInfo.title`\n    | `shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `status`\n    | `taxInfo.taxBreakdown`\n    | `taxInfo.taxBreakdown.${number}.taxName`\n    | `taxInfo.taxBreakdown.${number}.taxType`\n    | `taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `taxInfo.taxBreakdown.${number}.rate`\n    | `appliedDiscounts`\n    | `appliedDiscounts.${number}.coupon._id`\n    | `appliedDiscounts.${number}.coupon.code`\n    | `appliedDiscounts.${number}.coupon.name`\n    | `appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `appliedDiscounts.${number}.discountRule._id`\n    | `appliedDiscounts.${number}.discountRule.name.original`\n    | `appliedDiscounts.${number}.discountType`\n    | `activities`\n    | `activities.${number}.customActivity.appId`\n    | `activities.${number}.customActivity.type`\n    | `activities.${number}.merchantComment.message`\n    | `activities.${number}.orderRefunded.manual`\n    | `activities.${number}.orderRefunded.reason`\n    | `activities.${number}.type`\n    | `attributionSource`\n    | `createdBy.userId`\n    | `createdBy.memberId`\n    | `createdBy.visitorId`\n    | `createdBy.appId`\n    | `channelInfo.type`\n    | `customFields`\n    | `customFields.${number}.title`\n    | `balanceSummary.balance.amount`\n    | `balanceSummary.balance.formattedAmount`\n    | `additionalFees`\n    | `additionalFees.${number}.name`\n    | `additionalFees.${number}._id`\n    | `tags.privateTags.tagIds`\n    | `businessLocation._id`\n    | `businessLocation.name`,\n    6\n  > & {\n    __applicationErrorsType?: UpdateOrderApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({ order: { ...order, id: _id } }),\n    [\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'order.lineItems.image' }],\n      },\n      {\n        transformFn: transformSDKAddressToRESTAddress,\n        paths: [\n          { path: 'order.billingInfo.address' },\n          { path: 'order.shippingInfo.logistics.shippingDestination.address' },\n          { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n          { path: 'order.recipientInfo.address' },\n        ],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixEcomV1Order.updateOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )?.order!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { order: '$[1]' },\n        explicitPathsToArguments: { 'order.id': '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'order']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateOrder {\n  /**\n   * Order ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Order number displayed in the site owner's dashboard (auto-generated).\n   * @readonly\n   */\n  number?: string;\n  /**\n   * Date and time the order was created.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Order line items.\n   * @minSize 1\n   * @maxSize 300\n   * @readonly\n   */\n  lineItems?: OrderLineItem[];\n  /** Buyer information. */\n  buyerInfo?: BuyerInfo;\n  /** Order payment status. */\n  paymentStatus?: PaymentStatusWithLiterals;\n  /**\n   * Order fulfillment status.\n   * @readonly\n   */\n  fulfillmentStatus?: FulfillmentStatusWithLiterals;\n  /**\n   * Language for communication with the buyer. Defaults to the site language.\n   * For a site that supports multiple languages, this is the language the buyer selected.\n   */\n  buyerLanguage?: string | null;\n  /** Weight measurement unit - defaults to site's weight unit. */\n  weightUnit?: WeightUnitWithLiterals;\n  /**\n   * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency?: string | null;\n  /** Currency conversion details. For use with multi-currency sites. */\n  currencyConversionDetails?: CurrencyConversionDetails;\n  /**\n   * Whether tax is included in line item prices.\n   * @immutable\n   */\n  taxIncludedInPrices?: boolean;\n  /**\n   * Site language in which original values are shown.\n   * @readonly\n   * @immutable\n   */\n  siteLanguage?: string | null;\n  /**\n   * Order price summary.\n   * @readonly\n   */\n  priceSummary?: PriceSummary;\n  /** Billing address and contact details. */\n  billingInfo?: AddressWithContact;\n  /** Shipping info and selected shipping option details. */\n  shippingInfo?: V1ShippingInformation;\n  /**\n   * [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer.\n   * @maxLength 1000\n   */\n  buyerNote?: string | null;\n  /** Order status. */\n  status?: OrderStatusWithLiterals;\n  /** Whether order is archived. */\n  archived?: boolean | null;\n  /**\n   * Tax summary.\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * @deprecated Tax summary.\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * @replacedBy tax_info\n   * @targetRemovalDate 2024-09-30\n   */\n  taxSummary?: TaxSummary;\n  /** Tax information. */\n  taxInfo?: OrderTaxInfo;\n  /**\n   * Applied discounts.\n   * @maxSize 320\n   */\n  appliedDiscounts?: AppliedDiscount[];\n  /**\n   * Order activities.\n   * @readonly\n   * @maxSize 1000\n   */\n  activities?: Activity[];\n  /** Order attribution source. */\n  attributionSource?: AttributionSourceWithLiterals;\n  /**\n   * ID of the order's initiator.\n   * @readonly\n   */\n  createdBy?: CreatedBy;\n  /** Information about the sales channel that submitted this order. */\n  channelInfo?: ChannelInfo;\n  /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */\n  seenByAHuman?: boolean | null;\n  /**\n   * Checkout ID.\n   * @format GUID\n   */\n  checkoutId?: string | null;\n  /** Custom fields. */\n  customFields?: CustomField[];\n  /**\n   * Balance summary.\n   * @readonly\n   */\n  balanceSummary?: BalanceSummary;\n  /**\n   * Additional fees applied to the order.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFee[];\n  /**\n   * Custom field data for the order object.\n   *\n   * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.\n   */\n  extendedFields?: ExtendedFields;\n  /**\n   * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.\n   * @format GUID\n   */\n  purchaseFlowId?: string | null;\n  /**\n   * Order recipient address and contact details.\n   *\n   * This field may differ from the address in `shippingInfo.logistics` when:\n   * + The chosen shipping option is pickup point or store pickup.\n   * + No shipping option is selected.\n   */\n  recipientInfo?: AddressWithContact;\n  /**\n   * Order tags.\n   *\n   * [Tags](https://dev.wix.com/docs/rest/business-management/tags/introduction) are labels attached to entities, allowing for flexible categorization and data management.\n   */\n  tags?: Tags;\n  /**\n   * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * Used for migration from external systems.\n   * @immutable\n   */\n  purchasedDate?: Date | null;\n  /** Order Location */\n  businessLocation?: Location;\n  /**\n   * Pay after free trial price summary. Price summary that should be paid for subscriptions after free trial period.\n   * @readonly\n   */\n  payAfterFreeTrial?: PriceSummary;\n}\n\n/**\n * Updates up to 100 orders.\n *\n *\n * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.\n *\n * Currently, the following fields can be updated:\n * + `order.buyerInfo.email`\n * + `order.buyerLanguage`\n * + `order.weightUnit`\n * + `order.billingInfo.address`\n * + `order.billingInfo.contactDetails`\n * + `order.archived`\n * + `order.attributionSource`\n * + `order.seenByAHuman`\n * + `order.recipientInfo.address`\n * + `order.recipientInfo.contactDetails`\n * + `order.shippingInfo.logistics.shippingDestination.address`\n * + `order.shippingInfo.logistics.shippingDestination.contactDetails`\n *\n * To update a field's value, include the new value in the `orders.order` object in the method parameters.\n * To remove a field's value, pass `null`.\n *\n * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.\n *\n * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).\n * @param orders - Orders to update.\n * @public\n * @requiredField orders\n * @requiredField orders.order\n * @requiredField orders.order._id\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.BulkUpdateOrders\n */\nexport async function bulkUpdateOrders(\n  orders: NonNullablePaths<MaskedOrder, `order` | `order._id`, 3>[],\n  options?: BulkUpdateOrdersOptions\n): Promise<\n  NonNullablePaths<\n    BulkUpdateOrdersResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.item.number`\n    | `results.${number}.item.buyerInfo.visitorId`\n    | `results.${number}.item.buyerInfo.memberId`\n    | `results.${number}.item.paymentStatus`\n    | `results.${number}.item.fulfillmentStatus`\n    | `results.${number}.item.weightUnit`\n    | `results.${number}.item.taxIncludedInPrices`\n    | `results.${number}.item.shippingInfo.title`\n    | `results.${number}.item.status`\n    | `results.${number}.item.attributionSource`\n    | `results.${number}.item.createdBy.userId`\n    | `results.${number}.item.createdBy.memberId`\n    | `results.${number}.item.createdBy.visitorId`\n    | `results.${number}.item.createdBy.appId`\n    | `results.${number}.item.channelInfo.type`\n    | `results.${number}.item.businessLocation._id`\n    | `results.${number}.item.businessLocation.name`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({\n      orders: orders,\n      returnEntity: options?.returnEntity,\n    }),\n    [\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'orders.order.lineItems.image' }],\n      },\n      {\n        transformFn: transformSDKAddressToRESTAddress,\n        paths: [\n          { path: 'orders.order.billingInfo.address' },\n          {\n            path: 'orders.order.shippingInfo.logistics.shippingDestination.address',\n          },\n          { path: 'orders.order.shippingInfo.logistics.pickupDetails.address' },\n          { path: 'orders.order.recipientInfo.address' },\n        ],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixEcomV1Order.bulkUpdateOrders(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'results.item.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'results.item.billingInfo.address' },\n            {\n              path: 'results.item.shippingInfo.logistics.shippingDestination.address',\n            },\n            {\n              path: 'results.item.shippingInfo.logistics.pickupDetails.address',\n            },\n            { path: 'results.item.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orders: '$[0]',\n          returnEntity: '$[1].returnEntity',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orders', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkUpdateOrdersOptions {\n  /**\n   * Whether to return the full order entities.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n}\n\n/** @param _id - Order id to be updated\n * @internal\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField options.changes\n * @requiredField options.changes.priceSummary.subtotal\n * @requiredField options.changes.priceSummary.total\n * @permissionId ECOM.ORDERS_DELTAS_COMMIT\n * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.CommitDeltas\n */\nexport async function commitDeltas(\n  _id: string,\n  options?: NonNullablePaths<\n    CommitDeltasOptions,\n    `changes` | `changes.priceSummary.subtotal` | `changes.priceSummary.total`,\n    4\n  >\n): Promise<\n  NonNullablePaths<\n    CommitDeltasResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  > & {\n    __applicationErrorsType?: CommitDeltasApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({\n      id: _id,\n      draftOrderId: options?.draftOrderId,\n      changes: options?.changes,\n      commitSettings: options?.commitSettings,\n      reason: options?.reason,\n    }),\n    [\n      {\n        transformFn: transformSDKAddressToRESTAddress,\n        paths: [\n          {\n            path: 'changes.changedShippingInfo.logistics.shippingDestination.address',\n          },\n          {\n            path: 'changes.changedShippingInfo.logistics.pickupDetails.address',\n          },\n          { path: 'changes.changedBillingInfo.address' },\n          { path: 'changes.changedRecipientInfo.address' },\n        ],\n      },\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'changes.lineItems.lineItem.image' }],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixEcomV1Order.commitDeltas(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]',\n          draftOrderId: '$[1].draftOrderId',\n          changes: '$[1].changes',\n          commitSettings: '$[1].commitSettings',\n          reason: '$[1].reason',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CommitDeltasOptions {\n  /**\n   * Draft order Id representing this change.\n   * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get\n   * @format GUID\n   */\n  draftOrderId?: string;\n  /** Draft order changes to be applied */\n  changes: DraftOrderDiffs;\n  /** Side-effects to happen after order is updated */\n  commitSettings?: DraftOrderCommitSettings;\n  /**\n   * Reason for edit, given by user (optional).\n   * @maxLength 200\n   */\n  reason?: string | null;\n}\n\n/** @internal\n * @documentationMaturity preview\n * @requiredField identifiers\n * @requiredField identifiers._id\n * @requiredField identifiers.lineItemId\n * @requiredField lineItem\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.UpdateOrderLineItem\n * @deprecated\n * @targetRemovalDate 2024-02-15\n */\nexport async function updateOrderLineItem(\n  identifiers: NonNullablePaths<\n    UpdateOrderLineItemIdentifiers,\n    `_id` | `lineItemId`,\n    2\n  >,\n  lineItem: UpdateOrderLineItem\n): Promise<\n  NonNullablePaths<\n    UpdateOrderLineItemResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({\n      id: identifiers?._id,\n      lineItem: { ...lineItem, id: identifiers?.lineItemId },\n    }),\n    [\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'lineItem.image' }],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixEcomV1Order.updateOrderLineItem(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { lineItem: '$[1]' },\n        explicitPathsToArguments: {\n          id: '$[0]._id',\n          'lineItem.id': '$[0].lineItemId',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers', 'lineItem']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateOrderLineItemIdentifiers {\n  /**\n   * Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /**\n   * Line item ID.\n   * @immutable\n   */\n  lineItemId?: string;\n}\n\nexport interface UpdateOrderLineItem {\n  /**\n   * Line item ID.\n   * @immutable\n   */\n  _id?: string;\n  /**\n   * Item name.\n   * + Stores - `product.name`\n   * + Bookings - `service.info.name`\n   * + Events - `ticket.name`\n   */\n  productName?: ProductName;\n  /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */\n  catalogReference?: CatalogReference;\n  /**\n   * Line item quantity.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n  /**\n   * Total discount for this line item's entire quantity.\n   * @readonly\n   */\n  totalDiscount?: Price;\n  /**\n   * Line item description lines. Used for display purposes for the cart, checkout and order.\n   * @maxSize 20\n   */\n  descriptionLines?: DescriptionLine[];\n  /** Line item image. */\n  image?: string;\n  /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */\n  physicalProperties?: PhysicalProperties;\n  /** Item type. Either a preset type or custom. */\n  itemType?: ItemType;\n  /**\n   * Fulfiller ID. Field is empty when the line item is self-fulfilled.\n   *\n   * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://www.wix.com/velo/reference/wix-ecom-backend/orderfulfillments/listfulfillmentsforsingleorder).\n   * @format GUID\n   */\n  fulfillerId?: string | null;\n  /**\n   * Number of items that were refunded.\n   * @max 100000\n   */\n  refundQuantity?: number | null;\n  /**\n   * Number of items restocked.\n   * @max 100000\n   */\n  restockQuantity?: number | null;\n  /** Line item price after line item discounts for display purposes. */\n  price?: Price;\n  /**\n   * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.\n   * @readonly\n   */\n  priceBeforeDiscounts?: Price;\n  /**\n   * Total price after discounts, and before tax.\n   * @readonly\n   */\n  totalPriceBeforeTax?: Price;\n  /**\n   * Total price after all discounts and tax.\n   * @readonly\n   */\n  totalPriceAfterTax?: Price;\n  /**\n   * Type of selected payment option for current item.\n   *\n   * Default: `FULL_PAYMENT_ONLINE`\n   */\n  paymentOption?: PaymentOptionTypeWithLiterals;\n  /**\n   * Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Tax details for this line item.\n   * @deprecated Deprecated. Use `taxInfo` instead.\n   * This field will be removed on September 30, 2024.\n   * Tax details for this line item.\n   * @replacedBy tax_info\n   * @targetRemovalDate 2024-09-30\n   */\n  taxDetails?: ItemTaxFullDetails;\n  /** Represents all the relevant tax details for a specific line item. */\n  taxInfo?: LineItemTaxInfo;\n  /** Digital file identifier, relevant only for items with type DIGITAL. */\n  digitalFile?: DigitalFile;\n  /** Subscription info. */\n  subscriptionInfo?: SubscriptionInfo;\n  /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - \"Starts at $67\". */\n  priceDescription?: PriceDescription;\n  /**\n   * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `\"DEPOSIT_ONLINE\"`.\n   * @readonly\n   */\n  depositAmount?: Price;\n  /**\n   * Line item locations.\n   *\n   * The location's total quantity must not exceed the line item quantity.\n   * @maxSize 5\n   */\n  locations?: LocationAndQuantity[];\n  /** Address used for tax calculation. */\n  taxableAddress?: TaxableAddress;\n  /**\n   * ID of the app managing the inventory.\n   * @internal\n   * @format GUID\n   */\n  inventoryAppId?: string | null;\n  /**\n   * Custom extended fields for the line item object.\n   *\n   * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.\n   */\n  extendedFields?: ExtendedFields;\n  /**\n   * Modifier groups that were added to the item.\n   * @readonly\n   * @maxSize 10\n   */\n  modifierGroups?: ModifierGroup[];\n}\n\n/**\n * Adds a merchant comment to an order.\n * > **Note:** Activities with type CustomActivity not supported\n * @param _id - Order ID.\n * @param activity - Activity info.\n * @internal\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField activity\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.AddActivity\n * @deprecated\n * @replacedBy com.wix.ecom.orders.v1.OrdersService.AddActivities\n * @targetRemovalDate 2024-11-01\n */\nexport async function addActivity(\n  _id: string,\n  activity: PublicActivity\n): Promise<\n  NonNullablePaths<\n    AddActivityResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`\n    | `activityId`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    activity: activity,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.addActivity(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', activity: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'activity']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates an order's activity.\n * @param activity - Activity info.\n * @internal\n * @documentationMaturity preview\n * @requiredField activity\n * @requiredField identifiers\n * @requiredField identifiers._id\n * @requiredField identifiers.activityId\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.UpdateActivity\n */\nexport async function updateActivity(\n  identifiers: NonNullablePaths<\n    UpdateActivityIdentifiers,\n    `_id` | `activityId`,\n    2\n  >,\n  activity: PublicActivity\n): Promise<\n  NonNullablePaths<\n    UpdateActivityResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: identifiers?._id,\n    activityId: identifiers?.activityId,\n    activity: activity,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.updateActivity(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]._id',\n          activityId: '$[0].activityId',\n          activity: '$[1]',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers', 'activity']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateActivityIdentifiers {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /**\n   * ID of the activity to update.\n   * @format GUID\n   */\n  activityId: string;\n}\n\n/**\n * Delete's an order's activity.\n *\n * Only custom activities and merchant comments can be deleted.\n * @internal\n * @documentationMaturity preview\n * @requiredField identifiers\n * @requiredField identifiers._id\n * @requiredField identifiers.activityId\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.DeleteActivity\n */\nexport async function deleteActivity(\n  identifiers: NonNullablePaths<\n    DeleteActivityIdentifiers,\n    `_id` | `activityId`,\n    2\n  >\n): Promise<\n  NonNullablePaths<\n    DeleteActivityResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: identifiers?._id,\n    activityId: identifiers?.activityId,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.deleteActivity(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]._id',\n          activityId: '$[0].activityId',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface DeleteActivityIdentifiers {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  _id: string;\n  /**\n   * ID of the activity to delete.\n   * @format GUID\n   */\n  activityId: string;\n}\n\n/**\n * Cancels an order.\n *\n *\n * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.\n * @param _id - Order ID.\n * @public\n * @requiredField _id\n * @permissionId ECOM.MODIFY_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.CancelOrder\n */\nexport async function cancelOrder(\n  _id: string,\n  options?: CancelOrderOptions\n): Promise<\n  NonNullablePaths<\n    CancelOrderResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  > & {\n    __applicationErrorsType?: CancelOrderApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    sendOrderCanceledEmail: options?.sendOrderCanceledEmail,\n    customMessage: options?.customMessage,\n    restockAllItems: options?.restockAllItems,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.cancelOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]',\n          sendOrderCanceledEmail: '$[1].sendOrderCanceledEmail',\n          customMessage: '$[1].customMessage',\n          restockAllItems: '$[1].restockAllItems',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CancelOrderOptions {\n  /** Whether to send an order canceled email to the buyer. */\n  sendOrderCanceledEmail?: boolean;\n  /**\n   * Custom note to be added to the email (optional).\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n  /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */\n  restockAllItems?: boolean;\n}\n\n/**\n * Updates order status.\n *\n * >CANCELED and REJECTED are final statuses. Update from either of those will fail.\n * >Updates into INITIALIZED are not supported.\n *\n * Approving order:\n * APPROVED status can be set while order has one of [INITIALIZED, PENDING] statuses.\n *\n * Approving an order which was created with CreateOrderRequest.settings.order_approval_strategy = PAYMENT_METHOD_SAVED\n * will cause an error.\n *\n * Setting PENDING status:\n * Only orders in INITIALIZED status can be updated into PENDING.\n * @param orderId - Order ID.\n * @param status - New order status.\n * @internal\n * @documentationMaturity preview\n * @requiredField orderId\n * @requiredField status\n * @permissionId ECOM.ORDER_UPDATE_STATUS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.UpdateOrderStatus\n */\nexport async function updateOrderStatus(\n  orderId: string,\n  status: OrderStatusWithLiterals\n): Promise<\n  NonNullablePaths<\n    UpdateOrderStatusResponse,\n    | `order.number`\n    | `order.lineItems`\n    | `order.lineItems.${number}._id`\n    | `order.lineItems.${number}.productName.original`\n    | `order.lineItems.${number}.catalogReference.catalogItemId`\n    | `order.lineItems.${number}.catalogReference.appId`\n    | `order.lineItems.${number}.quantity`\n    | `order.lineItems.${number}.totalDiscount.amount`\n    | `order.lineItems.${number}.totalDiscount.formattedAmount`\n    | `order.lineItems.${number}.physicalProperties.shippable`\n    | `order.lineItems.${number}.itemType.preset`\n    | `order.lineItems.${number}.itemType.custom`\n    | `order.lineItems.${number}.paymentOption`\n    | `order.lineItems.${number}.taxDetails.taxRate`\n    | `order.lineItems.${number}.taxInfo.taxIncludedInPrice`\n    | `order.lineItems.${number}.digitalFile.fileId`\n    | `order.lineItems.${number}.subscriptionInfo.cycleNumber`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionOptionTitle`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.frequency`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.autoRenewal`\n    | `order.lineItems.${number}.subscriptionInfo.subscriptionSettings.enableCustomerCancellation`\n    | `order.lineItems.${number}.priceDescription.original`\n    | `order.lineItems.${number}.taxableAddress.addressType`\n    | `order.buyerInfo.visitorId`\n    | `order.buyerInfo.memberId`\n    | `order.paymentStatus`\n    | `order.fulfillmentStatus`\n    | `order.weightUnit`\n    | `order.taxIncludedInPrices`\n    | `order.billingInfo.address.streetAddress.number`\n    | `order.billingInfo.address.streetAddress.name`\n    | `order.billingInfo.contactDetails.vatId._id`\n    | `order.billingInfo.contactDetails.vatId.type`\n    | `order.shippingInfo.title`\n    | `order.shippingInfo.logistics.pickupDetails.pickupMethod`\n    | `order.status`\n    | `order.taxInfo.taxBreakdown`\n    | `order.taxInfo.taxBreakdown.${number}.taxName`\n    | `order.taxInfo.taxBreakdown.${number}.taxType`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdiction`\n    | `order.taxInfo.taxBreakdown.${number}.jurisdictionType`\n    | `order.taxInfo.taxBreakdown.${number}.rate`\n    | `order.appliedDiscounts`\n    | `order.appliedDiscounts.${number}.coupon._id`\n    | `order.appliedDiscounts.${number}.coupon.code`\n    | `order.appliedDiscounts.${number}.coupon.name`\n    | `order.appliedDiscounts.${number}.merchantDiscount.discountReason`\n    | `order.appliedDiscounts.${number}.discountRule._id`\n    | `order.appliedDiscounts.${number}.discountRule.name.original`\n    | `order.appliedDiscounts.${number}.discountType`\n    | `order.activities`\n    | `order.activities.${number}.customActivity.appId`\n    | `order.activities.${number}.customActivity.type`\n    | `order.activities.${number}.merchantComment.message`\n    | `order.activities.${number}.orderRefunded.manual`\n    | `order.activities.${number}.orderRefunded.reason`\n    | `order.activities.${number}.type`\n    | `order.attributionSource`\n    | `order.createdBy.userId`\n    | `order.createdBy.memberId`\n    | `order.createdBy.visitorId`\n    | `order.createdBy.appId`\n    | `order.channelInfo.type`\n    | `order.customFields`\n    | `order.customFields.${number}.title`\n    | `order.balanceSummary.balance.amount`\n    | `order.balanceSummary.balance.formattedAmount`\n    | `order.additionalFees`\n    | `order.additionalFees.${number}.name`\n    | `order.additionalFees.${number}._id`\n    | `order.tags.privateTags.tagIds`\n    | `order.businessLocation._id`\n    | `order.businessLocation.name`,\n    7\n  > & {\n    __applicationErrorsType?: UpdateOrderStatusApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    status: status,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.updateOrderStatus(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'order.lineItems.image' }],\n        },\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [\n            { path: 'order.billingInfo.address' },\n            {\n              path: 'order.shippingInfo.logistics.shippingDestination.address',\n            },\n            { path: 'order.shippingInfo.logistics.pickupDetails.address' },\n            { path: 'order.recipientInfo.address' },\n          ],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]', status: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'status']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/** @internal\n * @documentationMaturity preview\n * @requiredField options.aggregation\n * @permissionId ECOM.READ_ORDERS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.AggregateOrders\n */\nexport async function aggregateOrders(\n  options?: NonNullablePaths<AggregateOrdersOptions, `aggregation`, 2>\n): Promise<AggregateOrdersResponse> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    filter: options?.filter,\n    aggregation: options?.aggregation,\n    hierarchySeparatorOverride: options?.hierarchySeparatorOverride,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.aggregateOrders(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          filter: '$[0].filter',\n          aggregation: '$[0].aggregation',\n          hierarchySeparatorOverride: '$[0].hierarchySeparatorOverride',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface AggregateOrdersOptions {\n  /** Filter applied to original data */\n  filter?: Record<string, any> | null;\n  /** This is an object defining aggregation itself */\n  aggregation: Record<string, any> | null;\n  /**\n   * Optional custom separator string that can be used to override default separator value '|'\n   * for hierarchical responses of multifaceted aggregation requests like:\n   * '{\"aggregation\": {\"example_request_key\": {\"$count\" : [\"deliveryMethod\", \"shippingRegion\"]}}}'\n   * with example response for default '|' separator like:\n   * '{\"aggregates\" :{\"example_request_key\": {\"(Mail|Region 1)\": 5, \"(Pickup|Region 2)\": 10}}}'\n   * @minLength 1\n   * @maxLength 100\n   */\n  hierarchySeparatorOverride?: string | null;\n}\n\n/**\n * Synchronously update tags on multiple orders, by list of order IDs.\n *\n * > **Note:** If the same tag is passed to both the `assignTags` and `unassignTags` fields, it will be assigned.\n * @param orderIds - IDs of orders to update tags for.\n * @public\n * @requiredField orderIds\n * @permissionId ECOM.MODIFY_ORDERS\n * @permissionId ECOM.ORDER_MODIFY_PRIVATE_TAGS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags\n */\nexport async function bulkUpdateOrderTags(\n  orderIds: string[],\n  options?: BulkUpdateOrderTagsOptions\n): Promise<\n  NonNullablePaths<\n    BulkUpdateOrderTagsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderIds: orderIds,\n    assignTags: options?.assignTags,\n    unassignTags: options?.unassignTags,\n  });\n\n  const reqOpts = ambassadorWixEcomV1Order.bulkUpdateOrderTags(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderIds: '$[0]',\n          assignTags: '$[1].assignTags',\n          unassignTags: '$[1].unassignTags',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderIds', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkUpdateOrderTagsOptions {\n  /** Tags to be added to orders */\n  assignTags?: Tags;\n  /** Tags to be removed from orders */\n  unassignTags?: Tags;\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixEcomOrdersV1OrdersUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    _: [\n      {\n        srcPath: '/_api/ecom-orders',\n        destPath: '',\n      },\n      {\n        srcPath: '/_api/orders',\n        destPath: '',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/ecom-orders',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/bulk/orders',\n        destPath: '/v1/bulk/orders',\n      },\n      {\n        srcPath: '/ecom/v1/orders',\n        destPath: '/v1/orders',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nfunction resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'api._api_base_domain_': [\n      {\n        srcPath: '/payments-collector',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/payments-collector',\n        destPath: '/v1/payments-collector',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/ecom/v1/payments-collector',\n        destPath: '/v1/payments-collector',\n      },\n      {\n        srcPath: '/_api/v1/payments-collector',\n        destPath: '/v1/payments-collector',\n      },\n      {\n        srcPath: '/v1/payments-collector',\n        destPath: '/v1/payments-collector',\n      },\n      {\n        srcPath: '/_api/payments-collector',\n        destPath: '/v1/payments-collector',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_orders';\n\n/**\n * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.\n * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.\n * 2nd step is an actual charge of prepared payment gateway order. This could be done either\n * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)\n * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)\n */\nexport function preparePaymentCollection(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __preparePaymentCollection({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath:\n          '/v1/payments-collector/orders/{ecomOrderId}/prepare-payment-collection',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __preparePaymentCollection;\n}\n\n/**\n * Provides payment collectability status for given order. If payment collection is possible\n * response will contain collectable amount for given ecom order. If not - response will contain\n * reason why payment collection is not possible.\n */\nexport function getPaymentCollectabilityStatus(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __getPaymentCollectabilityStatus({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath:\n          '/v1/payments-collector/orders/{ecomOrderId}/payment-collectability-status',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getPaymentCollectabilityStatus;\n}\n\n/**\n * Records and approves new manual payment with provided custom amount on given order.\n * Existing pending payments are ignored.\n * Custom amount is expected to be less or equal remaining amount to be paid on order (affected by approved payments, refunds and gift card payments)\n */\nexport function recordManuallyCollectedPayment(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __recordManuallyCollectedPayment({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.RecordManuallyCollectedPayment',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath: '/v1/payments-collector/orders/{orderId}/manual-payment',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __recordManuallyCollectedPayment;\n}\n\n/**\n * Marks the order as paid. `order.paymentStatus` field *eventually* changes to `PAID`.\n * In case the order already has an offline payment transaction associated with it\n * (usually when manual payment method is chosen at checkout) - This transaction will become approved.\n * In case the order has no payment transactions associated with it\n * (usually when the item is set to be paid offline after checkout or when an order is created from the backoffice) - A payment transaction\n * will be created and approved.\n */\nexport function paymentCollectionMarkOrderAsPaid(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __paymentCollectionMarkOrderAsPaid({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.MarkOrderAsPaid',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath: '/v1/payments-collector/orders/{ecomOrderId}/mark-as-paid',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __paymentCollectionMarkOrderAsPaid;\n}\n\n/** Marks multiple orders as paid. `order.paymentStatus` field *eventually* changes to `PAID`. */\nexport function paymentCollectionBulkMarkOrdersAsPaid(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __paymentCollectionBulkMarkOrdersAsPaid({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.BulkMarkOrdersAsPaid',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath: '/v1/bulk/payments-collector/mark-as-paid',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n              { path: 'results.item.purchasedDate' },\n              { path: 'results.item.lineItems.image.urlExpirationDate' },\n              { path: 'results.item.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'results.item.shippingInfo.logistics.deliverByDate' },\n              {\n                path: 'results.item.shippingInfo.logistics.deliveryTimeSlot.from',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.deliveryTimeSlot.to',\n              },\n              { path: 'results.item.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'results.item.lineItems.image.focalPoint.x' },\n              { path: 'results.item.lineItems.image.focalPoint.y' },\n              { path: 'results.item.lineItems.physicalProperties.weight' },\n              { path: 'results.item.billingInfo.address.geocode.latitude' },\n              { path: 'results.item.billingInfo.address.geocode.longitude' },\n              {\n                path: 'results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'results.item.recipientInfo.address.geocode.latitude' },\n              { path: 'results.item.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __paymentCollectionBulkMarkOrdersAsPaid;\n}\n\n/** Checks whether this order can be refunded. */\nexport function getRefundabilityStatus(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __getRefundabilityStatus({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetRefundabilityStatus',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath: '/v1/payments-collector/orders/{ecomOrderId}/refundability',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getRefundabilityStatus;\n}\n\n/**\n * Call this endpoint to create an order in the payment gateway system. The amount of the order would be either:\n * 1. An explicit amount provided in the request, or;\n * 2. If an explicit amount is not provided - the remaining amount to complete the payment of that eCom order.\n * As a result, an ID of the created payment gateway order would be returned.\n * You can then use Wix Payments APIs to approve that order or collect payment, which will eventually change the eCom order state (e.g mark it as paid).\n */\nexport function paymentCollectionCreatePaymentGatewayOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __paymentCollectionCreatePaymentGatewayOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CreatePaymentGatewayOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath:\n          '/v1/payments-collector/orders/{ecomOrderId}/create-payment-gateway-order',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __paymentCollectionCreatePaymentGatewayOrder;\n}\n\nexport function chargeMemberships(payload: object): RequestOptionsFactory<any> {\n  function __chargeMemberships({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'membershipCharges.serviceProperties.scheduledDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.ChargeMemberships',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath:\n          '/v1/payments-collector/orders/{ecomOrderId}/charge-membership',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n    };\n\n    return metadata;\n  }\n\n  return __chargeMemberships;\n}\n\n/**\n * Calls corresponding payment providers and creates refund transactions for requested payments.\n * Updates order transactions based on refund results.\n * For requested payments with `TriggerRefundRequest.payments.external_refund = true` will not call payment providers and\n * will only update order transactions.\n */\nexport function triggerRefund(payload: object): RequestOptionsFactory<any> {\n  function __triggerRefund({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.TriggerRefund',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath: '/v1/payments-collector/orders/{ecomOrderId}/trigger-refund',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __triggerRefund;\n}\n\n/**\n * Void authorized payments\n * Transaction statuses for related payments will be updated in async way\n */\nexport function voidAuthorizedPayments(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __voidAuthorizedPayments({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath:\n          '/v1/payments-collector/orders/{ecomOrderId}/void-authorized-payments',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __voidAuthorizedPayments;\n}\n\n/**\n * Capture authorized payments\n * Transaction statuses for related payments will be updated in async way\n */\nexport function captureAuthorizedPayments(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __captureAuthorizedPayments({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({\n        protoPath:\n          '/v1/payments-collector/orders/{ecomOrderId}/capture-authorized-payments',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __captureAuthorizedPayments;\n}\n\n/**\n * Retrieves an order.\n *\n *\n * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.\n *\n * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).\n */\nexport function getOrder(payload: object): RequestOptionsFactory<any> {\n  function __getOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'GET' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.GetOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getOrder;\n}\n\n/**\n * Retrieves a list of orders, given the provided paging, filtering, and sorting.\n *\n *\n * Search Orders runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n * - `filter: {\"status\": {\"$ne\": \"INITIALIZED\"}}` - other order statuses can be queried, but orders with `status: \"INITIALIZED\"` are never returned\n *\n * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).\n *\n * To learn about working with _Search_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and\n * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n */\nexport function searchOrders(payload: object): RequestOptionsFactory<any> {\n  function __searchOrders({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.SearchOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/search',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orders.createdDate' },\n              { path: 'orders.updatedDate' },\n              { path: 'orders.purchasedDate' },\n              { path: 'orders.lineItems.image.urlExpirationDate' },\n              { path: 'orders.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'orders.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'orders.shippingInfo.logistics.deliverByDate' },\n              { path: 'orders.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'orders.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'orders.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'orders.lineItems.image.focalPoint.x' },\n              { path: 'orders.lineItems.image.focalPoint.y' },\n              { path: 'orders.lineItems.physicalProperties.weight' },\n              { path: 'orders.billingInfo.address.geocode.latitude' },\n              { path: 'orders.billingInfo.address.geocode.longitude' },\n              {\n                path: 'orders.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'orders.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'orders.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'orders.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'orders.recipientInfo.address.geocode.latitude' },\n              { path: 'orders.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __searchOrders;\n}\n\n/**\n * Creates an order.\n *\n *\n * The `createOrder()` function returns a Promise that resolves when the order is created.\n *\n * > **Notes:**\n * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.\n * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.\n */\nexport function createOrder(payload: object): RequestOptionsFactory<any> {\n  function __createOrder({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'order.createdDate' },\n          { path: 'order.updatedDate' },\n          { path: 'order.purchasedDate' },\n          { path: 'order.lineItems.image.urlExpirationDate' },\n          { path: 'order.lineItems.digitalFile.expirationDate' },\n          {\n            path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n          },\n          { path: 'order.shippingInfo.logistics.deliverByDate' },\n          { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n          { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n          { path: 'order.activities.createdDate' },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          { path: 'order.lineItems.image.focalPoint.x' },\n          { path: 'order.lineItems.image.focalPoint.y' },\n          { path: 'order.lineItems.physicalProperties.weight' },\n          { path: 'order.billingInfo.address.geocode.latitude' },\n          { path: 'order.billingInfo.address.geocode.longitude' },\n          {\n            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n          },\n          {\n            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n          },\n          {\n            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n          },\n          {\n            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n          },\n          { path: 'order.recipientInfo.address.geocode.latitude' },\n          { path: 'order.recipientInfo.address.geocode.longitude' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.CreateOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createOrder;\n}\n\n/**\n * Updates an order.\n *\n *\n * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.\n *\n * Currently, the following fields can be updated:\n * + `order.buyerInfo.email`\n * + `order.buyerLanguage`\n * + `order.weightUnit`\n * + `order.billingInfo.address`\n * + `order.billingInfo.contactDetails`\n * + `order.archived`\n * + `order.attributionSource`\n * + `order.seenByAHuman`\n * + `order.recipientInfo.address`\n * + `order.recipientInfo.contactDetails`\n * + `order.shippingInfo.logistics.shippingDestination.address`\n * + `order.shippingInfo.logistics.shippingDestination.contactDetails`\n *\n * To update a field's value, include the new value in the `order` object in the method parameters.\n * To remove a field's value, pass `null`.\n *\n * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.\n *\n * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).\n */\nexport function updateOrder(payload: object): RequestOptionsFactory<any> {\n  function __updateOrder({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'order.createdDate' },\n          { path: 'order.updatedDate' },\n          { path: 'order.purchasedDate' },\n          { path: 'order.lineItems.image.urlExpirationDate' },\n          { path: 'order.lineItems.digitalFile.expirationDate' },\n          {\n            path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n          },\n          { path: 'order.shippingInfo.logistics.deliverByDate' },\n          { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n          { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n          { path: 'order.activities.createdDate' },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          { path: 'order.lineItems.image.focalPoint.x' },\n          { path: 'order.lineItems.image.focalPoint.y' },\n          { path: 'order.lineItems.physicalProperties.weight' },\n          { path: 'order.billingInfo.address.geocode.latitude' },\n          { path: 'order.billingInfo.address.geocode.longitude' },\n          {\n            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n          },\n          {\n            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n          },\n          {\n            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n          },\n          {\n            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n          },\n          { path: 'order.recipientInfo.address.geocode.latitude' },\n          { path: 'order.recipientInfo.address.geocode.longitude' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.UpdateOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{order.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateOrder;\n}\n\n/**\n * Updates up to 100 orders.\n *\n *\n * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.\n *\n * Currently, the following fields can be updated:\n * + `order.buyerInfo.email`\n * + `order.buyerLanguage`\n * + `order.weightUnit`\n * + `order.billingInfo.address`\n * + `order.billingInfo.contactDetails`\n * + `order.archived`\n * + `order.attributionSource`\n * + `order.seenByAHuman`\n * + `order.recipientInfo.address`\n * + `order.recipientInfo.contactDetails`\n * + `order.shippingInfo.logistics.shippingDestination.address`\n * + `order.shippingInfo.logistics.shippingDestination.contactDetails`\n *\n * To update a field's value, include the new value in the `orders.order` object in the method parameters.\n * To remove a field's value, pass `null`.\n *\n * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.\n *\n * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).\n */\nexport function bulkUpdateOrders(payload: object): RequestOptionsFactory<any> {\n  function __bulkUpdateOrders({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'orders.fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'orders.order.createdDate' },\n          { path: 'orders.order.updatedDate' },\n          { path: 'orders.order.purchasedDate' },\n          { path: 'orders.order.lineItems.image.urlExpirationDate' },\n          { path: 'orders.order.lineItems.digitalFile.expirationDate' },\n          {\n            path: 'orders.order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n          },\n          { path: 'orders.order.shippingInfo.logistics.deliverByDate' },\n          { path: 'orders.order.shippingInfo.logistics.deliveryTimeSlot.from' },\n          { path: 'orders.order.shippingInfo.logistics.deliveryTimeSlot.to' },\n          { path: 'orders.order.activities.createdDate' },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          { path: 'orders.order.lineItems.image.focalPoint.x' },\n          { path: 'orders.order.lineItems.image.focalPoint.y' },\n          { path: 'orders.order.lineItems.physicalProperties.weight' },\n          { path: 'orders.order.billingInfo.address.geocode.latitude' },\n          { path: 'orders.order.billingInfo.address.geocode.longitude' },\n          {\n            path: 'orders.order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n          },\n          {\n            path: 'orders.order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n          },\n          {\n            path: 'orders.order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n          },\n          {\n            path: 'orders.order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n          },\n          { path: 'orders.order.recipientInfo.address.geocode.latitude' },\n          { path: 'orders.order.recipientInfo.address.geocode.longitude' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.BulkUpdateOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/bulk/orders/update',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n              { path: 'results.item.purchasedDate' },\n              { path: 'results.item.lineItems.image.urlExpirationDate' },\n              { path: 'results.item.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'results.item.shippingInfo.logistics.deliverByDate' },\n              {\n                path: 'results.item.shippingInfo.logistics.deliveryTimeSlot.from',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.deliveryTimeSlot.to',\n              },\n              { path: 'results.item.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'results.item.lineItems.image.focalPoint.x' },\n              { path: 'results.item.lineItems.image.focalPoint.y' },\n              { path: 'results.item.lineItems.physicalProperties.weight' },\n              { path: 'results.item.billingInfo.address.geocode.latitude' },\n              { path: 'results.item.billingInfo.address.geocode.longitude' },\n              {\n                path: 'results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'results.item.recipientInfo.address.geocode.latitude' },\n              { path: 'results.item.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkUpdateOrders;\n}\n\nexport function commitDeltas(payload: object): RequestOptionsFactory<any> {\n  function __commitDeltas({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'changes.changedShippingInfo.logistics.deliverByDate' },\n          {\n            path: 'changes.changedShippingInfo.logistics.deliveryTimeSlot.from',\n          },\n          { path: 'changes.changedShippingInfo.logistics.deliveryTimeSlot.to' },\n          { path: 'changes.lineItems.lineItem.image.urlExpirationDate' },\n          { path: 'changes.lineItems.lineItem.digitalFile.expirationDate' },\n          {\n            path: 'changes.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate',\n          },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          {\n            path: 'changes.changedShippingInfo.logistics.shippingDestination.address.geocode.latitude',\n          },\n          {\n            path: 'changes.changedShippingInfo.logistics.shippingDestination.address.geocode.longitude',\n          },\n          {\n            path: 'changes.changedShippingInfo.logistics.pickupDetails.address.geocode.latitude',\n          },\n          {\n            path: 'changes.changedShippingInfo.logistics.pickupDetails.address.geocode.longitude',\n          },\n          { path: 'changes.changedBillingInfo.address.geocode.latitude' },\n          { path: 'changes.changedBillingInfo.address.geocode.longitude' },\n          { path: 'changes.changedRecipientInfo.address.geocode.latitude' },\n          { path: 'changes.changedRecipientInfo.address.geocode.longitude' },\n          { path: 'changes.lineItems.lineItem.physicalProperties.weight' },\n          { path: 'changes.lineItems.lineItem.image.focalPoint.x' },\n          { path: 'changes.lineItems.lineItem.image.focalPoint.y' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.CommitDeltas',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}/commit-deltas',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __commitDeltas;\n}\n\n/** @deprecated Will be removed on 2024-02-15. */\nexport function updateOrderLineItem(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updateOrderLineItem({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'lineItem.image.urlExpirationDate' },\n          { path: 'lineItem.digitalFile.expirationDate' },\n          { path: 'lineItem.subscriptionInfo.subscriptionSettings.startDate' },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          { path: 'lineItem.image.focalPoint.x' },\n          { path: 'lineItem.image.focalPoint.y' },\n          { path: 'lineItem.physicalProperties.weight' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.UpdateOrderLineItem',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}/line-item/{lineItem.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateOrderLineItem;\n}\n\n/**\n * Adds a merchant comment to an order.\n * > **Note:** Activities with type CustomActivity not supported\n * @deprecated It has been replaced with com.wix.ecom.orders.v1.OrdersService.AddActivities(), and will be removed on 2024-11-01.\n */\nexport function addActivity(payload: object): RequestOptionsFactory<any> {\n  function __addActivity({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.AddActivity',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}/activities',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __addActivity;\n}\n\n/** Updates an order's activity. */\nexport function updateActivity(payload: object): RequestOptionsFactory<any> {\n  function __updateActivity({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.UpdateActivity',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}/activities/{activityId}',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateActivity;\n}\n\n/**\n * Delete's an order's activity.\n *\n * Only custom activities and merchant comments can be deleted.\n */\nexport function deleteActivity(payload: object): RequestOptionsFactory<any> {\n  function __deleteActivity({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.DeleteActivity',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}/activities/{activityId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __deleteActivity;\n}\n\n/**\n * Cancels an order.\n *\n *\n * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.\n */\nexport function cancelOrder(payload: object): RequestOptionsFactory<any> {\n  function __cancelOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.CancelOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{id}/cancel',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __cancelOrder;\n}\n\n/**\n * Updates order status.\n *\n * >CANCELED and REJECTED are final statuses. Update from either of those will fail.\n * >Updates into INITIALIZED are not supported.\n *\n * Approving order:\n * APPROVED status can be set while order has one of [INITIALIZED, PENDING] statuses.\n *\n * Approving an order which was created with CreateOrderRequest.settings.order_approval_strategy = PAYMENT_METHOD_SAVED\n * will cause an error.\n *\n * Setting PENDING status:\n * Only orders in INITIALIZED status can be updated into PENDING.\n */\nexport function updateOrderStatus(payload: object): RequestOptionsFactory<any> {\n  function __updateOrderStatus({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.UpdateOrderStatus',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/{orderId}/update-status',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'order.createdDate' },\n              { path: 'order.updatedDate' },\n              { path: 'order.purchasedDate' },\n              { path: 'order.lineItems.image.urlExpirationDate' },\n              { path: 'order.lineItems.digitalFile.expirationDate' },\n              {\n                path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',\n              },\n              { path: 'order.shippingInfo.logistics.deliverByDate' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },\n              { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },\n              { path: 'order.activities.createdDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'order.lineItems.image.focalPoint.x' },\n              { path: 'order.lineItems.image.focalPoint.y' },\n              { path: 'order.lineItems.physicalProperties.weight' },\n              { path: 'order.billingInfo.address.geocode.latitude' },\n              { path: 'order.billingInfo.address.geocode.longitude' },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',\n              },\n              {\n                path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',\n              },\n              { path: 'order.recipientInfo.address.geocode.latitude' },\n              { path: 'order.recipientInfo.address.geocode.longitude' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateOrderStatus;\n}\n\nexport function aggregateOrders(payload: object): RequestOptionsFactory<any> {\n  function __aggregateOrders({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.AggregateOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/orders/aggregate',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __aggregateOrders;\n}\n\n/**\n * Synchronously update tags on multiple orders, by list of order IDs.\n *\n * > **Note:** If the same tag is passed to both the `assignTags` and `unassignTags` fields, it will be assigned.\n */\nexport function bulkUpdateOrderTags(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkUpdateOrderTags({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersV1OrdersUrl({\n        protoPath: '/v1/bulk/orders/update-tags',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkUpdateOrderTags;\n}\n"],"mappings":"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","names":["addActivity","aggregateOrders","bulkUpdateOrderTags","bulkUpdateOrders","cancelOrder","captureAuthorizedPayments","chargeMemberships","commitDeltas","createOrder","deleteActivity","getOrder","getPaymentCollectabilityStatus","getRefundabilityStatus","paymentCollectionBulkMarkOrdersAsPaid","paymentCollectionCreatePaymentGatewayOrder","paymentCollectionMarkOrderAsPaid","preparePaymentCollection","recordManuallyCollectedPayment","searchOrders","triggerRefund","updateActivity","updateOrder","updateOrderLineItem","updateOrderStatus","voidAuthorizedPayments","import_float","import_timestamp","import_rest_modules","payload","import_address","import_image","import_transform_paths","DescriptionLineType","ItemTypeItemType","PaymentOptionType","JurisdictionType","SubscriptionFrequency","AdjustmentType","TaxableAddressType","PaymentStatus","FulfillmentStatus","WeightUnit","VatType","PickupMethod","OrderStatus","DiscountType","DiscountReason","LineItemQuantityChangeType","ActivityType","AttributionSource","ChannelType","PreviewEmailType","WebhookIdentityType","ScheduledAction","DurationUnit","PaymentCollectabilityStatus","RefundableStatus","NonRefundableReason","ManuallyRefundableReason","RestockType","TransactionStatus","AuthorizationCaptureStatus","AuthorizationVoidStatus","Reason","ActionType","ChargebackStatus","MembershipPaymentStatus","RefundStatus","VersioningMode","SortOrder","OrderApprovalStrategy","DeltaPaymentOptionType","InventoryAction","Placement","SubdivisionType","SourceType","CustomFieldGroup","ValueType","DepositType","InvoiceStatus","preparePaymentCollection","sdkTransformError","getPaymentCollectabilityStatus","recordManuallyCollectedPayment","paymentCollectionMarkOrderAsPaid","paymentCollectionBulkMarkOrdersAsPaid","getRefundabilityStatus","paymentCollectionCreatePaymentGatewayOrder","chargeMemberships","triggerRefund","voidAuthorizedPayments","captureAuthorizedPayments","getOrder","searchOrders","createOrder","updateOrder","bulkUpdateOrders","commitDeltas","updateOrderLineItem","addActivity","updateActivity","deleteActivity","cancelOrder","updateOrderStatus","aggregateOrders","bulkUpdateOrderTags"]}