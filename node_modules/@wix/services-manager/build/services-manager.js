import { SignalsServiceDefinition } from '@wix/services-definitions/core-services/signals';
import { SignalsServiceFactory } from './core-services/signals/service.js';
export function createServicesManager(servicesBindings, parentServicesManager) {
    const coreRegisteredServices = createServicesMap().addService(SignalsServiceDefinition, SignalsServiceFactory);
    const bindingsByDefinition = new Map([
        ...(servicesBindings ? servicesBindings.registeredServices : []),
        ...coreRegisteredServices.registeredServices,
    ].map((service) => [service.definition.toString(), service]));
    const initializedServices = new Map();
    const manager = {
        getService(definition) {
            if (!initializedServices.has(definition.toString())) {
                const service = bindingsByDefinition.get(definition.toString());
                if (!service) {
                    if (parentServicesManager) {
                        return parentServicesManager.getService(definition);
                    }
                    throw new Error(`Service ${definition} is not provided`);
                }
                initializedServices.set(definition.toString(), service.impl({
                    config: service.config,
                    getService: manager.getService,
                }));
            }
            return initializedServices.get(definition.toString());
        },
        hasService(definition) {
            return bindingsByDefinition.has(definition.toString());
        },
        addService(definition, impl, config) {
            if (!manager.hasService(definition)) {
                bindingsByDefinition.set(definition.toString(), {
                    definition,
                    impl,
                    config: config || {},
                });
                // Immediately initialize the service if not already initialized
                if (!initializedServices.has(definition.toString())) {
                    initializedServices.set(definition.toString(), impl({
                        config: config || {},
                        getService: manager.getService,
                    }));
                }
            }
            else {
                // this needs meaningful error message
                throw new Error(`Service ${definition.toString()} is already provided`);
            }
        },
        addServices(servicesToAdd) {
            // First, check for duplicates
            servicesToAdd.registeredServices.forEach(({ definition }) => {
                if (manager.hasService(definition)) {
                    throw new Error(`Service ${definition.toString()} is already provided`);
                }
            });
            // Register all definitions first
            servicesToAdd.registeredServices.forEach(({ definition, impl, config }) => {
                bindingsByDefinition.set(definition.toString(), {
                    definition,
                    impl,
                    config: config || {},
                });
            });
            // Then initialize all, but only if not already initialized
            servicesToAdd.registeredServices.forEach(({ definition, impl, config }) => {
                if (!initializedServices.has(definition.toString())) {
                    initializedServices.set(definition.toString(), impl({
                        config: config || {},
                        getService: manager.getService,
                    }));
                }
            });
        },
    };
    // Then initialize all, but only if not already initialized
    bindingsByDefinition.forEach(({ definition, impl, config }) => {
        if (!initializedServices.has(definition.toString())) {
            initializedServices.set(definition, impl({
                config: config || {},
                getService: manager.getService,
            }));
        }
    });
    return manager;
}
export function createServicesMap(registeredServices = []) {
    return {
        registeredServices,
        addService(definition, impl, config) {
            return createServicesMap([
                ...registeredServices,
                { definition, impl, config },
            ]);
        },
    };
}
