import { useSignals } from '@preact/signals-react/runtime';
import { WixContext } from '@wix/sdk-react-context';
import React, { createContext, useContext, useState, } from 'react';
import { ProvideComponentServiceDefinition } from './core-services/provide-component/index.js';
import { createServicesManager } from '@wix/services-manager';
export function ServicesManagerProvider({ servicesManager, children, }) {
    const getProvidedComponent = () => {
        const provideComponentService = servicesManager.hasService(ProvideComponentServiceDefinition)
            ? servicesManager.getService(ProvideComponentServiceDefinition)
            : {
                getAllTopComponents: () => null,
                getAllBottomComponents: () => null,
            };
        return {
            TopComponents: provideComponentService?.getAllTopComponents(),
            BottomComponents: provideComponentService?.getAllBottomComponents(),
        };
    };
    const { TopComponents, BottomComponents } = getProvidedComponent();
    return (React.createElement(WixContext.Provider, { value: {
            getService: servicesManager.getService,
        } },
        TopComponents && React.createElement(TopComponents, null),
        children,
        BottomComponents && React.createElement(BottomComponents, null)));
}
export function useGetService() {
    const maybeContext = useContext(WixContext);
    if (!maybeContext) {
        throw new Error('No ServiceManagerProvider found in the component tree, make sure to wrap your app with ServicesManagerProvider');
    }
    return maybeContext.getService;
}
export function useService(service) {
    const getService = useGetService();
    useSignals();
    return getService(service);
}
export function useServices(services) {
    const getService = useGetService();
    if (!getService) {
        throw new Error('No ServiceManagerProvider found in the component tree, make sure to wrap your app with ServicesManagerProvider');
    }
    return services.map((service) => getService(service));
}
const InternalServicesManagerContext = createContext(undefined);
export function WixServices(props) {
    const parentServicesManager = useContext(InternalServicesManagerContext);
    const [servicesManager] = useState(() => createServicesManager(props.servicesMap, parentServicesManager));
    return (React.createElement(InternalServicesManagerContext.Provider, { value: servicesManager },
        React.createElement(ServicesManagerProvider, { servicesManager: servicesManager }, props.children)));
}
