import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { InfoSection, CreateInfoSectionValidationErrors, GetInfoSectionOptions, GetOrCreateInfoSectionOptions, GetOrCreateInfoSectionResponse, GetOrCreateInfoSectionValidationErrors, BulkGetOrCreateInfoSectionsOptions, BulkGetOrCreateInfoSectionsResponse, BulkGetOrCreateInfoSectionsValidationErrors, UpdateInfoSection, UpdateInfoSectionOptions, QueryInfoSectionsOptions, InfoSectionsQueryBuilder, BulkCreateInfoSectionsOptions, BulkCreateInfoSectionsResponse, BulkCreateInfoSectionsValidationErrors, MaskedInfoSection, BulkUpdateInfoSectionsOptions, BulkUpdateInfoSectionsResponse, BulkDeleteInfoSectionsResponse, InfoSectionCreatedEnvelope, InfoSectionDeletedEnvelope, InfoSectionUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, Alignment, AlignmentWithLiterals, AnchorData, App, AppEmbedData, AppEmbedDataAppDataOneOf, AppType, AppTypeWithLiterals, ApplicationError, AspectRatio, AspectRatioWithLiterals, AudioData, Background, BackgroundBackgroundOneOf, BackgroundType, BackgroundTypeWithLiterals, BaseEventMetadata, BlockquoteData, BookingData, Border, BorderColors, BulkActionMetadata, BulkCreateInfoSectionsRequest, BulkDeleteInfoSectionsRequest, BulkGetOrCreateInfoSectionsRequest, BulkInfoSectionItemResult, BulkInfoSectionResult, BulkUpdateInfoSectionsRequest, BulletedListData, ButtonData, ButtonDataType, ButtonDataTypeWithLiterals, ButtonStyles, CaptionData, CardStyles, CellStyle, CodeBlockData, CollapsibleListData, ColorData, Colors, CreateInfoSectionRequest, CreateInfoSectionResponse, Crop, CropWithLiterals, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomTag, Decoration, DecorationDataOneOf, DecorationType, DecorationTypeWithLiterals, DeleteInfoSectionRequest, DeleteInfoSectionResponse, Design, Dimensions, Direction, DirectionWithLiterals, DividerData, DividerDataAlignment, DividerDataAlignmentWithLiterals, DocumentStyle, DomainEvent, DomainEventBodyOneOf, EmbedData, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventData, EventMetadata, File, FileData, FileSource, FileSourceDataOneOf, FontSizeData, FontType, FontTypeWithLiterals, GIF, GIFData, GIFType, GIFTypeWithLiterals, GalleryData, GalleryOptions, GalleryOptionsLayout, GetInfoSectionRequest, GetInfoSectionResponse, GetOrCreateInfoSectionRequest, Gradient, HTMLData, HTMLDataDataOneOf, HeadingData, Height, IdentificationData, IdentificationDataIdOneOf, Image, ImageData, ImageDataStyles, ImageStyles, InfoSectionForGetOrCreate, InfoSectionsQueryResult, InitialExpandedItems, InitialExpandedItemsWithLiterals, InvalidateCache, InvalidateCacheGetByOneOf, Item, ItemDataOneOf, ItemMetadata, ItemStyle, Layout, LayoutCellData, LayoutType, LayoutTypeWithLiterals, LayoutWithLiterals, LineStyle, LineStyleWithLiterals, Link, LinkData, LinkDataOneOf, LinkPreviewData, LinkPreviewDataStyles, ListValue, MapData, MapSettings, MapType, MapTypeWithLiterals, Media, MentionData, MessageEnvelope, Metadata, Node, NodeDataOneOf, NodeStyle, NodeType, NodeTypeWithLiterals, NullValue, NullValueWithLiterals, Oembed, Option, OptionDesign, OptionLayout, OrderedListData, Orientation, OrientationWithLiterals, PDFSettings, Page, ParagraphData, Permissions, Placement, PlacementWithLiterals, PlaybackOptions, PluginContainerData, PluginContainerDataAlignment, PluginContainerDataAlignmentWithLiterals, PluginContainerDataWidth, PluginContainerDataWidthDataOneOf, Poll, PollData, PollDataLayout, PollDesign, PollLayout, PollLayoutDirection, PollLayoutDirectionWithLiterals, PollLayoutType, PollLayoutTypeWithLiterals, Position, PositionWithLiterals, PricingData, QueryInfoSectionsRequest, QueryInfoSectionsResponse, Rel, RequestedFields, RequestedFieldsWithLiterals, Resizing, ResizingWithLiterals, RestoreInfo, RibbonStyles, RichContent, Settings, SortOrder, SortOrderWithLiterals, Sorting, Source, SourceWithLiterals, Spoiler, SpoilerData, Styles, StylesBorder, StylesPosition, StylesPositionWithLiterals, TableCellData, TableData, Target, TargetWithLiterals, TextAlignment, TextAlignmentWithLiterals, TextData, TextNodeStyle, TextStyle, Thumbnails, ThumbnailsAlignment, ThumbnailsAlignmentWithLiterals, Type, TypeWithLiterals, URI, UpdateInfoSectionRequest, UpdateInfoSectionResponse, VerticalAlignment, VerticalAlignmentWithLiterals, Video, VideoData, ViewMode, ViewModeWithLiterals, ViewRole, ViewRoleWithLiterals, VoteRole, VoteRoleWithLiterals, WebhookIdentityType, WebhookIdentityTypeWithLiterals, Width, WidthType, WidthTypeWithLiterals, WidthWithLiterals } from './index.typings.js';

declare function createInfoSection$1(httpClient: HttpClient): CreateInfoSectionSignature;
interface CreateInfoSectionSignature {
    /**
     * Creates an info section.
     *
     * To assign the info section to a product, include the `infoSection.id` or `infoSection.uniqueName`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Info section to create.
     * @returns Created info section.
     */
    (infoSection: NonNullablePaths<InfoSection, `title` | `uniqueName`, 2>): Promise<NonNullablePaths<InfoSection, `uniqueName` | `title`, 2> & {
        __validationErrorsType?: CreateInfoSectionValidationErrors;
    }>;
}
declare function getInfoSection$1(httpClient: HttpClient): GetInfoSectionSignature;
interface GetInfoSectionSignature {
    /**
     * Retrieves an info section.
     * @param - Info section ID.
     * @returns Info section.
     */
    (infoSectionId: string, options?: GetInfoSectionOptions): Promise<NonNullablePaths<InfoSection, `uniqueName` | `title`, 2>>;
}
declare function getOrCreateInfoSection$1(httpClient: HttpClient): GetOrCreateInfoSectionSignature;
interface GetOrCreateInfoSectionSignature {
    /**
     * Retrieves an info section by ID or `uniqueName`, or creates an info section if one with the passed `uniqueName` doesn't exist.
     *
     * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
     */
    (options?: GetOrCreateInfoSectionOptions): Promise<NonNullablePaths<GetOrCreateInfoSectionResponse, `infoSection.uniqueName` | `infoSection.title`, 3> & {
        __validationErrorsType?: GetOrCreateInfoSectionValidationErrors;
    }>;
}
declare function bulkGetOrCreateInfoSections$1(httpClient: HttpClient): BulkGetOrCreateInfoSectionsSignature;
interface BulkGetOrCreateInfoSectionsSignature {
    /**
     * Retrieves multiple info sections by ID or `uniqueName`, or creates multiple info sections if those with the passed `uniqueName` don't exist.
     *
     * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
     */
    (options?: BulkGetOrCreateInfoSectionsOptions): Promise<NonNullablePaths<BulkGetOrCreateInfoSectionsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.uniqueName` | `results.${number}.item.title` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __validationErrorsType?: BulkGetOrCreateInfoSectionsValidationErrors;
    }>;
}
declare function updateInfoSection$1(httpClient: HttpClient): UpdateInfoSectionSignature;
interface UpdateInfoSectionSignature {
    /**
     * Updates an info section.
     *
     *
     * Each time the info section is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the info section.
     * This ensures you're working with the latest info section and prevents unintended overwrites.
     * @param - Info section ID.
     * @returns Updated info section.
     */
    (_id: string, infoSection: NonNullablePaths<UpdateInfoSection, `revision`, 2>, options?: UpdateInfoSectionOptions): Promise<NonNullablePaths<InfoSection, `uniqueName` | `title`, 2>>;
}
declare function deleteInfoSection$1(httpClient: HttpClient): DeleteInfoSectionSignature;
interface DeleteInfoSectionSignature {
    /**
     * Deletes an info section.
     *
     * > **Note:** Deleting an info section will also remove it from all products it is assigned to.
     * @param - Info section ID
     */
    (infoSectionId: string): Promise<void>;
}
declare function queryInfoSections$1(httpClient: HttpClient): QueryInfoSectionsSignature;
interface QueryInfoSectionsSignature {
    /**
     * Retrieves a list of up to 100 info sections, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Info Sections runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Info Sections: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/info-sections-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryInfoSectionsOptions): InfoSectionsQueryBuilder;
}
declare function bulkCreateInfoSections$1(httpClient: HttpClient): BulkCreateInfoSectionsSignature;
interface BulkCreateInfoSectionsSignature {
    /**
     * Creates multiple info sections.
     * @param - Info sections to create.
     */
    (infoSections: NonNullablePaths<InfoSection, `title` | `uniqueName`, 2>[], options?: BulkCreateInfoSectionsOptions): Promise<NonNullablePaths<BulkCreateInfoSectionsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.uniqueName` | `results.${number}.item.title` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __validationErrorsType?: BulkCreateInfoSectionsValidationErrors;
    }>;
}
declare function bulkUpdateInfoSections$1(httpClient: HttpClient): BulkUpdateInfoSectionsSignature;
interface BulkUpdateInfoSectionsSignature {
    /**
     * Updates multiple info sections.
     *
     * Each time an info section is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an info section.
     * This ensures you're working with the latest info section and prevents unintended overwrites.
     * @param - List of info sections to update.
     */
    (infoSections: NonNullablePaths<MaskedInfoSection, `infoSection._id` | `infoSection.revision`, 3>[], options?: BulkUpdateInfoSectionsOptions): Promise<NonNullablePaths<BulkUpdateInfoSectionsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.uniqueName` | `results.${number}.item.title` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkDeleteInfoSections$1(httpClient: HttpClient): BulkDeleteInfoSectionsSignature;
interface BulkDeleteInfoSectionsSignature {
    /**
     * Deletes multiple info sections.
     * @param - IDs of info sections to delete.
     */
    (infoSectionIds: string[]): Promise<NonNullablePaths<BulkDeleteInfoSectionsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onInfoSectionCreated$1: EventDefinition<InfoSectionCreatedEnvelope, "wix.stores.catalog.v3.info_section_created">;
declare const onInfoSectionDeleted$1: EventDefinition<InfoSectionDeletedEnvelope, "wix.stores.catalog.v3.info_section_deleted">;
declare const onInfoSectionUpdated$1: EventDefinition<InfoSectionUpdatedEnvelope, "wix.stores.catalog.v3.info_section_updated">;

declare const createInfoSection: MaybeContext<BuildRESTFunction<typeof createInfoSection$1> & typeof createInfoSection$1>;
declare const getInfoSection: MaybeContext<BuildRESTFunction<typeof getInfoSection$1> & typeof getInfoSection$1>;
declare const getOrCreateInfoSection: MaybeContext<BuildRESTFunction<typeof getOrCreateInfoSection$1> & typeof getOrCreateInfoSection$1>;
declare const bulkGetOrCreateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateInfoSections$1> & typeof bulkGetOrCreateInfoSections$1>;
declare const updateInfoSection: MaybeContext<BuildRESTFunction<typeof updateInfoSection$1> & typeof updateInfoSection$1>;
declare const deleteInfoSection: MaybeContext<BuildRESTFunction<typeof deleteInfoSection$1> & typeof deleteInfoSection$1>;
declare const queryInfoSections: MaybeContext<BuildRESTFunction<typeof queryInfoSections$1> & typeof queryInfoSections$1>;
declare const bulkCreateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkCreateInfoSections$1> & typeof bulkCreateInfoSections$1>;
declare const bulkUpdateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkUpdateInfoSections$1> & typeof bulkUpdateInfoSections$1>;
declare const bulkDeleteInfoSections: MaybeContext<BuildRESTFunction<typeof bulkDeleteInfoSections$1> & typeof bulkDeleteInfoSections$1>;
/**
 * Triggered when an info section is created.
 */
declare const onInfoSectionCreated: BuildEventDefinition<typeof onInfoSectionCreated$1> & typeof onInfoSectionCreated$1;
/**
 * Triggered when an info section is deleted.
 */
declare const onInfoSectionDeleted: BuildEventDefinition<typeof onInfoSectionDeleted$1> & typeof onInfoSectionDeleted$1;
/**
 * Triggered when an info section is updated.
 */
declare const onInfoSectionUpdated: BuildEventDefinition<typeof onInfoSectionUpdated$1> & typeof onInfoSectionUpdated$1;

export { BulkCreateInfoSectionsOptions, BulkCreateInfoSectionsResponse, BulkCreateInfoSectionsValidationErrors, BulkDeleteInfoSectionsResponse, BulkGetOrCreateInfoSectionsOptions, BulkGetOrCreateInfoSectionsResponse, BulkGetOrCreateInfoSectionsValidationErrors, BulkUpdateInfoSectionsOptions, BulkUpdateInfoSectionsResponse, CreateInfoSectionValidationErrors, GetInfoSectionOptions, GetOrCreateInfoSectionOptions, GetOrCreateInfoSectionResponse, GetOrCreateInfoSectionValidationErrors, InfoSection, InfoSectionCreatedEnvelope, InfoSectionDeletedEnvelope, InfoSectionUpdatedEnvelope, InfoSectionsQueryBuilder, MaskedInfoSection, QueryInfoSectionsOptions, UpdateInfoSection, UpdateInfoSectionOptions, bulkCreateInfoSections, bulkDeleteInfoSections, bulkGetOrCreateInfoSections, bulkUpdateInfoSections, createInfoSection, deleteInfoSection, getInfoSection, getOrCreateInfoSection, onInfoSectionCreated, onInfoSectionDeleted, onInfoSectionUpdated, queryInfoSections, updateInfoSection };
