"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  ChargeType: () => ChargeType,
  DeleteStatus: () => DeleteStatus,
  DestinationScope: () => DestinationScope,
  Namespace: () => Namespace,
  SiteCreatedContext: () => SiteCreatedContext,
  SortOrder: () => SortOrder,
  State: () => State,
  WebhookIdentityType: () => WebhookIdentityType,
  addDeliveryCarrier: () => addDeliveryCarrier2,
  addDeliveryRegion: () => addDeliveryRegion2,
  createDeliveryProfile: () => createDeliveryProfile2,
  deleteDeliveryProfile: () => deleteDeliveryProfile2,
  getDeliveryProfile: () => getDeliveryProfile2,
  getDeliveryProfileByDeliveryRegionId: () => getDeliveryProfileByDeliveryRegionId2,
  listDeliveryCarriers: () => listDeliveryCarriers2,
  listInstalledDeliveryCarriers: () => listInstalledDeliveryCarriers2,
  queryDeliveryProfiles: () => queryDeliveryProfiles2,
  removeDeliveryCarrier: () => removeDeliveryCarrier2,
  removeDeliveryRegion: () => removeDeliveryRegion2,
  updateCarrierSettings: () => updateCarrierSettings2,
  updateDeliveryCarrier: () => updateDeliveryCarrier2,
  updateDeliveryProfile: () => updateDeliveryProfile2,
  updateDeliveryRegion: () => updateDeliveryRegion2,
  updateExtendedFields: () => updateExtendedFields2
});
module.exports = __toCommonJS(index_typings_exports);

// src/ecom-v1-delivery-profile-delivery-profile.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-delivery-profile-delivery-profile.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/list-delivery-carriers",
        destPath: "/v1/list-delivery-carriers"
      },
      {
        srcPath: "/ecom/v1/list-delivery-carrier-details",
        destPath: "/v1/list-delivery-carrier-details"
      },
      {
        srcPath: "/ecom/v1/delivery-profiles",
        destPath: "/v1/delivery-profiles"
      },
      {
        srcPath: "/ecom/v1/delivery-carriers",
        destPath: "/v1/delivery-carriers"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/delivery-profiles-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/delivery-profiles",
        destPath: "/v1/delivery-profiles"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/v1/delivery-profiles",
        destPath: "/v1/delivery-profiles"
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/delivery-profiles",
        destPath: "/v1/delivery-profiles"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_delivery-profile";
function createDeliveryProfile(payload) {
  function __createDeliveryProfile({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "deliveryProfile.createdDate" },
          { path: "deliveryProfile.updatedDate" },
          { path: "deliveryProfile.deliveryRegions.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.CreateDeliveryProfile",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createDeliveryProfile;
}
function getDeliveryProfile(payload) {
  function __getDeliveryProfile({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "GET",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.GetDeliveryProfile",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfileId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getDeliveryProfile;
}
function updateDeliveryProfile(payload) {
  function __updateDeliveryProfile({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "deliveryProfile.createdDate" },
          { path: "deliveryProfile.updatedDate" },
          { path: "deliveryProfile.deliveryRegions.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "PATCH",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateDeliveryProfile",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfile.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateDeliveryProfile;
}
function deleteDeliveryProfile(payload) {
  function __deleteDeliveryProfile({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "DELETE",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.DeleteDeliveryProfile",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfileId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteDeliveryProfile;
}
function queryDeliveryProfiles(payload) {
  function __queryDeliveryProfiles({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "GET",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.QueryDeliveryProfiles",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/query",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfiles.createdDate" },
            { path: "deliveryProfiles.updatedDate" },
            { path: "deliveryProfiles.deliveryRegions.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
            protoPath: "/v1/delivery-profiles/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryDeliveryProfiles;
}
function addDeliveryRegion(payload) {
  function __addDeliveryRegion({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "deliveryRegion.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.AddDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfileId}/delivery-region",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDeliveryRegion;
}
function updateDeliveryRegion(payload) {
  function __updateDeliveryRegion({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "deliveryRegion.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "PATCH",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfileId}/delivery-region/{deliveryRegion.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateDeliveryRegion;
}
function getDeliveryProfileByDeliveryRegionId(payload) {
  function __getDeliveryProfileByDeliveryRegionId({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "GET",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.GetDeliveryProfileByDeliveryRegionId",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/delivery-regions/{deliveryRegionId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getDeliveryProfileByDeliveryRegionId;
}
function removeDeliveryRegion(payload) {
  function __removeDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "DELETE",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.RemoveDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfileId}/delivery-region/{deliveryRegionId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDeliveryRegion;
}
function addDeliveryCarrier(payload) {
  function __addDeliveryCarrier({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.AddDeliveryCarrier",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/add-delivery-carrier",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDeliveryCarrier;
}
function removeDeliveryCarrier(payload) {
  function __removeDeliveryCarrier({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.RemoveDeliveryCarrier",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/remove-delivery-carrier",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDeliveryCarrier;
}
function updateDeliveryCarrier(payload) {
  function __updateDeliveryCarrier({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "PATCH",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateDeliveryCarrier",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/update-delivery-carrier",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateDeliveryCarrier;
}
function listInstalledDeliveryCarriers(payload) {
  function __listInstalledDeliveryCarriers({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "GET",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.ListInstalledDeliveryCarriers",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/installed-carriers",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __listInstalledDeliveryCarriers;
}
function listDeliveryCarriers(payload) {
  function __listDeliveryCarriers({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.ListDeliveryCarriers",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{deliveryProfileId}/delivery-carriers",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __listDeliveryCarriers;
}
function updateCarrierSettings(payload) {
  function __updateCarrierSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateCarrierSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-carriers/update-settings",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __updateCarrierSettings;
}
function updateExtendedFields(payload) {
  function __updateExtendedFields({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.delivery_profile",
      method: "POST",
      methodFqn: "wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateExtendedFields",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryprofileV1DeliveryProfilesUrl({
        protoPath: "/v1/delivery-profiles/{id}/update-extended-fields",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "deliveryProfile.createdDate" },
            { path: "deliveryProfile.updatedDate" },
            { path: "deliveryProfile.deliveryRegions.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateExtendedFields;
}

// src/ecom-v1-delivery-profile-delivery-profile.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var ChargeType = /* @__PURE__ */ ((ChargeType2) => {
  ChargeType2["HANDLING_FEE"] = "HANDLING_FEE";
  return ChargeType2;
})(ChargeType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var DestinationScope = /* @__PURE__ */ ((DestinationScope2) => {
  DestinationScope2["SPECIFIC_DESTINATIONS"] = "SPECIFIC_DESTINATIONS";
  DestinationScope2["WORLDWIDE"] = "WORLDWIDE";
  return DestinationScope2;
})(DestinationScope || {});
var State = /* @__PURE__ */ ((State2) => {
  State2["UNKNOWN"] = "UNKNOWN";
  State2["ENABLED"] = "ENABLED";
  State2["DISABLED"] = "DISABLED";
  State2["PENDING"] = "PENDING";
  State2["DEMO"] = "DEMO";
  return State2;
})(State || {});
var SiteCreatedContext = /* @__PURE__ */ ((SiteCreatedContext2) => {
  SiteCreatedContext2["OTHER"] = "OTHER";
  SiteCreatedContext2["FROM_TEMPLATE"] = "FROM_TEMPLATE";
  SiteCreatedContext2["DUPLICATE_BY_SITE_TRANSFER"] = "DUPLICATE_BY_SITE_TRANSFER";
  SiteCreatedContext2["DUPLICATE"] = "DUPLICATE";
  SiteCreatedContext2["OLD_SITE_TRANSFER"] = "OLD_SITE_TRANSFER";
  SiteCreatedContext2["FLASH"] = "FLASH";
  return SiteCreatedContext2;
})(SiteCreatedContext || {});
var Namespace = /* @__PURE__ */ ((Namespace2) => {
  Namespace2["UNKNOWN_NAMESPACE"] = "UNKNOWN_NAMESPACE";
  Namespace2["WIX"] = "WIX";
  Namespace2["SHOUT_OUT"] = "SHOUT_OUT";
  Namespace2["ALBUMS"] = "ALBUMS";
  Namespace2["WIX_STORES_TEST_DRIVE"] = "WIX_STORES_TEST_DRIVE";
  Namespace2["HOTELS"] = "HOTELS";
  Namespace2["CLUBS"] = "CLUBS";
  Namespace2["ONBOARDING_DRAFT"] = "ONBOARDING_DRAFT";
  Namespace2["DEV_SITE"] = "DEV_SITE";
  Namespace2["LOGOS"] = "LOGOS";
  Namespace2["VIDEO_MAKER"] = "VIDEO_MAKER";
  Namespace2["PARTNER_DASHBOARD"] = "PARTNER_DASHBOARD";
  Namespace2["DEV_CENTER_COMPANY"] = "DEV_CENTER_COMPANY";
  Namespace2["HTML_DRAFT"] = "HTML_DRAFT";
  Namespace2["SITELESS_BUSINESS"] = "SITELESS_BUSINESS";
  Namespace2["CREATOR_ECONOMY"] = "CREATOR_ECONOMY";
  Namespace2["DASHBOARD_FIRST"] = "DASHBOARD_FIRST";
  Namespace2["ANYWHERE"] = "ANYWHERE";
  Namespace2["HEADLESS"] = "HEADLESS";
  Namespace2["ACCOUNT_MASTER_CMS"] = "ACCOUNT_MASTER_CMS";
  Namespace2["RISE"] = "RISE";
  Namespace2["BRANDED_FIRST"] = "BRANDED_FIRST";
  Namespace2["NOWNIA"] = "NOWNIA";
  Namespace2["UGC_TEMPLATE"] = "UGC_TEMPLATE";
  Namespace2["CODUX"] = "CODUX";
  Namespace2["MEDIA_DESIGN_CREATOR"] = "MEDIA_DESIGN_CREATOR";
  Namespace2["SHARED_BLOG_ENTERPRISE"] = "SHARED_BLOG_ENTERPRISE";
  Namespace2["STANDALONE_FORMS"] = "STANDALONE_FORMS";
  Namespace2["STANDALONE_EVENTS"] = "STANDALONE_EVENTS";
  Namespace2["MIMIR"] = "MIMIR";
  Namespace2["TWINS"] = "TWINS";
  return Namespace2;
})(Namespace || {});
var DeleteStatus = /* @__PURE__ */ ((DeleteStatus2) => {
  DeleteStatus2["UNKNOWN"] = "UNKNOWN";
  DeleteStatus2["TRASH"] = "TRASH";
  DeleteStatus2["DELETED"] = "DELETED";
  DeleteStatus2["PENDING_PURGE"] = "PENDING_PURGE";
  DeleteStatus2["PURGED_EXTERNALLY"] = "PURGED_EXTERNALLY";
  return DeleteStatus2;
})(DeleteStatus || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createDeliveryProfile2(deliveryProfile) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfile
  });
  const reqOpts = createDeliveryProfile(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.deliveryProfile;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { deliveryProfile: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["deliveryProfile"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getDeliveryProfile2(deliveryProfileId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfileId
  });
  const reqOpts = getDeliveryProfile(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.deliveryProfile;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { deliveryProfileId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["deliveryProfileId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateDeliveryProfile2(_id, deliveryProfile) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfile: { ...deliveryProfile, id: _id }
  });
  const reqOpts = updateDeliveryProfile(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.deliveryProfile;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { deliveryProfile: "$[1]" },
        explicitPathsToArguments: { "deliveryProfile.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "deliveryProfile"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteDeliveryProfile2(deliveryProfileId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfileId
  });
  const reqOpts = deleteDeliveryProfile(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { deliveryProfileId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["deliveryProfileId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryDeliveryProfiles2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryDeliveryProfiles(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.deliveryProfiles,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function addDeliveryRegion2(deliveryProfileId, deliveryRegion, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfileId,
    deliveryRegion,
    revision: options?.revision
  });
  const reqOpts = addDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryProfileId: "$[0]",
          deliveryRegion: "$[1]",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryProfileId", "deliveryRegion", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateDeliveryRegion2(identifiers, deliveryRegion, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfileId: identifiers?.deliveryProfileId,
    deliveryRegion: { ...deliveryRegion, id: identifiers?.deliveryRegionId },
    revision: options?.revision
  });
  const reqOpts = updateDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { deliveryRegion: "$[1]" },
        explicitPathsToArguments: {
          deliveryProfileId: "$[0].deliveryProfileId",
          "deliveryRegion.id": "$[0].deliveryRegionId",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "deliveryRegion", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getDeliveryProfileByDeliveryRegionId2(deliveryRegionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryRegionId
  });
  const reqOpts = getDeliveryProfileByDeliveryRegionId(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { deliveryRegionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["deliveryRegionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDeliveryRegion2(identifiers, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfileId: identifiers?.deliveryProfileId,
    deliveryRegionId: identifiers?.deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = removeDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryProfileId: "$[0].deliveryProfileId",
          deliveryRegionId: "$[0].deliveryRegionId",
          revision: "$[1].revision"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addDeliveryCarrier2(deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryRegionId,
    deliveryCarrier: options?.deliveryCarrier
  });
  const reqOpts = addDeliveryCarrier(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryRegionId: "$[0]",
          deliveryCarrier: "$[1].deliveryCarrier"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDeliveryCarrier2(deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryRegionId,
    appId: options?.appId
  });
  const reqOpts = removeDeliveryCarrier(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryRegionId: "$[0]",
          appId: "$[1].appId"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateDeliveryCarrier2(deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryRegionId,
    deliveryCarrier: options?.deliveryCarrier
  });
  const reqOpts = updateDeliveryCarrier(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryRegionId: "$[0]",
          deliveryCarrier: "$[1].deliveryCarrier"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listInstalledDeliveryCarriers2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = listInstalledDeliveryCarriers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listDeliveryCarriers2(deliveryProfileId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    deliveryProfileId,
    appIds: options?.appIds
  });
  const reqOpts = listDeliveryCarriers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryProfileId: "$[0]",
          appIds: "$[1].appIds"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryProfileId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCarrierSettings2(carrierId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    carrierId,
    rowId: options?.rowId,
    active: options?.active
  });
  const reqOpts = updateCarrierSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          carrierId: "$[0]",
          rowId: "$[1].rowId",
          active: "$[1].active"
        },
        singleArgumentUnchanged: false
      },
      ["carrierId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateExtendedFields2(_id, namespace, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    namespace,
    namespaceData: options?.namespaceData
  });
  const reqOpts = updateExtendedFields(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          namespace: "$[1]",
          namespaceData: "$[2].namespaceData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "namespace", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ChargeType,
  DeleteStatus,
  DestinationScope,
  Namespace,
  SiteCreatedContext,
  SortOrder,
  State,
  WebhookIdentityType,
  addDeliveryCarrier,
  addDeliveryRegion,
  createDeliveryProfile,
  deleteDeliveryProfile,
  getDeliveryProfile,
  getDeliveryProfileByDeliveryRegionId,
  listDeliveryCarriers,
  listInstalledDeliveryCarriers,
  queryDeliveryProfiles,
  removeDeliveryCarrier,
  removeDeliveryRegion,
  updateCarrierSettings,
  updateDeliveryCarrier,
  updateDeliveryProfile,
  updateDeliveryRegion,
  updateExtendedFields
});
//# sourceMappingURL=index.typings.js.map