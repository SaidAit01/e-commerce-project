// src/ecom-v1-checkout-checkout.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTBytesToSDKBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomCheckoutApiV1CheckoutServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/checkout",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_checkout";
function createCheckout(payload) {
  function __createCheckout({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "checkoutInfo.createdDate" },
          { path: "checkoutInfo.updatedDate" },
          { path: "checkoutInfo.lineItems.media.urlExpirationDate" },
          {
            path: "checkoutInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "checkoutInfo.lineItems.serviceProperties.scheduledDate" },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkoutInfo.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "checkoutInfo.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "checkoutInfo.subscriptionCharges.charges.cycleBillingDate" },
          { path: "lineItems.media.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "checkoutInfo.lineItems.media.focalPoint.x" },
          { path: "checkoutInfo.lineItems.media.focalPoint.y" },
          { path: "lineItems.media.focalPoint.x" },
          { path: "lineItems.media.focalPoint.y" },
          { path: "checkoutInfo.lineItems.physicalProperties.weight" },
          {
            path: "checkoutInfo.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "checkoutInfo.billingInfo.address.geocode.latitude" },
          { path: "checkoutInfo.billingInfo.address.geocode.longitude" },
          {
            path: "checkoutInfo.shippingInfo.shippingDestination.address.geocode.latitude"
          },
          {
            path: "checkoutInfo.shippingInfo.shippingDestination.address.geocode.longitude"
          },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "checkoutInfo.appliedDiscounts.merchantDiscount.percentage" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.CreateCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCheckout;
}
function getCheckout(payload) {
  function __getCheckout({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCheckout;
}
function getCheckoutByCartId(payload) {
  function __getCheckoutByCartId({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutByCartId",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/by-cart-id/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCheckoutByCartId;
}
function getWixCheckoutUrl(payload) {
  function __getWixCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetWixCheckoutURL",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/wix-checkout-url",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getWixCheckoutUrl;
}
function getCheckoutUrl(payload) {
  function __getCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutURL",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/checkout-url",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getCheckoutUrl;
}
function updateCheckout(payload) {
  function __updateCheckout({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "checkout.createdDate" },
          { path: "checkout.updatedDate" },
          { path: "checkout.lineItems.media.urlExpirationDate" },
          {
            path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "checkout.lineItems.serviceProperties.scheduledDate" },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "checkout.subscriptionCharges.charges.cycleBillingDate" },
          { path: "lineItems.media.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "checkout.lineItems.media.focalPoint.x" },
          { path: "checkout.lineItems.media.focalPoint.y" },
          { path: "lineItems.media.focalPoint.x" },
          { path: "lineItems.media.focalPoint.y" },
          { path: "checkout.lineItems.physicalProperties.weight" },
          {
            path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "checkout.billingInfo.address.geocode.latitude" },
          { path: "checkout.billingInfo.address.geocode.longitude" },
          {
            path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
          },
          {
            path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
          },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "checkout.appliedDiscounts.merchantDiscount.percentage" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "PATCH",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.UpdateCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{checkout.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCheckout;
}
function removeCoupon(payload) {
  function __removeCoupon({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveCoupon",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-coupon",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeCoupon;
}
function removeGiftCard(payload) {
  function __removeGiftCard({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveGiftCard",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeGiftCard;
}
function removeOverrideCheckoutUrl(payload) {
  function __removeOverrideCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveOverrideCheckoutUrl",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-override-checkout-url",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeOverrideCheckoutUrl;
}
function addToCheckout(payload) {
  function __addToCheckout({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItems.media.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItems.media.focalPoint.x" },
          { path: "lineItems.media.focalPoint.y" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.AddToCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/add-to-checkout",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addToCheckout;
}
function removeLineItems(payload) {
  function __removeLineItems({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveLineItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeLineItems;
}
function createOrder(payload) {
  function __createOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.CreateOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/create-order",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __createOrder;
}
function createOrderAndCharge(payload) {
  function __createOrderAndCharge({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.CreateOrderAndCharge",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/create-order-and-charge",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __createOrderAndCharge;
}
function markCheckoutAsCompletedAndRedirectToUrl(payload) {
  function __markCheckoutAsCompletedAndRedirectToUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.MarkCheckoutAsCompletedAndRedirectToUrl",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/mark-checkout-as-completed-and-redirect-to-url",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __markCheckoutAsCompletedAndRedirectToUrl;
}
function markCheckoutAsCompleted(payload) {
  function __markCheckoutAsCompleted({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.MarkCheckoutAsCompleted",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/mark-as-completed",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __markCheckoutAsCompleted;
}
function updateLineItemsQuantity(payload) {
  function __updateLineItemsQuantity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.UpdateLineItemsQuantity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/update-line-items-quantity",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLineItemsQuantity;
}
function getCheckoutPaymentSettings(payload) {
  function __getCheckoutPaymentSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutPaymentSettings",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/payment-settings",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getCheckoutPaymentSettings;
}

// src/ecom-v1-checkout-checkout.meta.ts
function createCheckout2() {
  const payload = {};
  const getRequestOptions = createCheckout(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getCheckout2() {
  const payload = { id: ":id" };
  const getRequestOptions = getCheckout(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/checkouts/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getCheckoutByCartId2() {
  const payload = { id: ":id" };
  const getRequestOptions = getCheckoutByCartId(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/checkouts/by-cart-id/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getWixCheckoutUrl2() {
  const payload = { id: ":id" };
  const getRequestOptions = getWixCheckoutUrl(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/checkouts/{id}/wix-checkout-url",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getCheckoutUrl2() {
  const payload = { id: ":id" };
  const getRequestOptions = getCheckoutUrl(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/checkouts/{id}/checkout-url",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateCheckout2() {
  const payload = { checkout: { id: ":checkoutId" } };
  const getRequestOptions = updateCheckout(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/checkouts/{checkout.id}",
    pathParams: { checkoutId: "checkoutId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeCoupon2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeCoupon(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/remove-coupon",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeGiftCard2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeGiftCard(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/remove-gift-card",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeOverrideCheckoutUrl2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeOverrideCheckoutUrl(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/remove-override-checkout-url",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function addToCheckout2() {
  const payload = { id: ":id" };
  const getRequestOptions = addToCheckout(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/add-to-checkout",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeLineItems2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeLineItems(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/remove-line-items",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createOrder2() {
  const payload = { id: ":id" };
  const getRequestOptions = createOrder(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/create-order",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createOrderAndCharge2() {
  const payload = { id: ":id" };
  const getRequestOptions = createOrderAndCharge(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/create-order-and-charge",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function markCheckoutAsCompletedAndRedirectToUrl2() {
  const payload = {};
  const getRequestOptions = markCheckoutAsCompletedAndRedirectToUrl(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/checkouts/mark-checkout-as-completed-and-redirect-to-url",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function markCheckoutAsCompleted2() {
  const payload = { id: ":id" };
  const getRequestOptions = markCheckoutAsCompleted(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/mark-as-completed",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateLineItemsQuantity2() {
  const payload = { id: ":id" };
  const getRequestOptions = updateLineItemsQuantity(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/checkouts/{id}/update-line-items-quantity",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getCheckoutPaymentSettings2() {
  const payload = { id: ":id" };
  const getRequestOptions = getCheckoutPaymentSettings(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/checkouts/{id}/payment-settings",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
export {
  addToCheckout2 as addToCheckout,
  createCheckout2 as createCheckout,
  createOrder2 as createOrder,
  createOrderAndCharge2 as createOrderAndCharge,
  getCheckout2 as getCheckout,
  getCheckoutByCartId2 as getCheckoutByCartId,
  getCheckoutPaymentSettings2 as getCheckoutPaymentSettings,
  getCheckoutUrl2 as getCheckoutUrl,
  getWixCheckoutUrl2 as getWixCheckoutUrl,
  markCheckoutAsCompleted2 as markCheckoutAsCompleted,
  markCheckoutAsCompletedAndRedirectToUrl2 as markCheckoutAsCompletedAndRedirectToUrl,
  removeCoupon2 as removeCoupon,
  removeGiftCard2 as removeGiftCard,
  removeLineItems2 as removeLineItems,
  removeOverrideCheckoutUrl2 as removeOverrideCheckoutUrl,
  updateCheckout2 as updateCheckout,
  updateLineItemsQuantity2 as updateLineItemsQuantity
};
//# sourceMappingURL=meta.mjs.map