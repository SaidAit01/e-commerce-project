"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  AdditionalFeeSource: () => AdditionalFeeSource,
  ChannelInfoChannelType: () => ChannelInfoChannelType,
  ChannelType: () => ChannelType,
  ChargeType: () => ChargeType,
  CommonVatType: () => CommonVatType,
  DescriptionLineType: () => DescriptionLineType,
  DiscountDiscountType: () => DiscountDiscountType,
  DiscountType: () => DiscountType,
  FallbackReason: () => FallbackReason,
  FileType: () => FileType,
  GetCheckoutPaymentSettingsResponsePaymentOption: () => GetCheckoutPaymentSettingsResponsePaymentOption,
  IdentityType: () => IdentityType,
  ItemAvailabilityStatus: () => ItemAvailabilityStatus,
  ItemTypeItemType: () => ItemTypeItemType,
  JurisdictionType: () => JurisdictionType,
  LineItemType: () => LineItemType,
  ManualCalculationReason: () => ManualCalculationReason,
  MediaItemType: () => MediaItemType,
  NameInLineItem: () => NameInLineItem,
  NameInOther: () => NameInOther,
  PaymentOptionType: () => PaymentOptionType,
  PickupMethod: () => PickupMethod,
  RateType: () => RateType,
  RuleType: () => RuleType,
  Severity: () => Severity,
  SubscriptionFrequency: () => SubscriptionFrequency,
  SuggestedFix: () => SuggestedFix,
  TaxableAddressType: () => TaxableAddressType,
  VatType: () => VatType,
  WebhookIdentityType: () => WebhookIdentityType,
  WeightUnit: () => WeightUnit,
  addToCheckout: () => addToCheckout4,
  createCheckout: () => createCheckout4,
  createOrder: () => createOrder4,
  createOrderAndCharge: () => createOrderAndCharge4,
  getCheckout: () => getCheckout4,
  getCheckoutByCartId: () => getCheckoutByCartId4,
  getCheckoutPaymentSettings: () => getCheckoutPaymentSettings4,
  getCheckoutUrl: () => getCheckoutUrl4,
  getWixCheckoutUrl: () => getWixCheckoutUrl4,
  markCheckoutAsCompleted: () => markCheckoutAsCompleted4,
  markCheckoutAsCompletedAndRedirectToUrl: () => markCheckoutAsCompletedAndRedirectToUrl4,
  onCheckoutCompleted: () => onCheckoutCompleted2,
  onCheckoutCreated: () => onCheckoutCreated2,
  onCheckoutDeleted: () => onCheckoutDeleted2,
  onCheckoutUpdated: () => onCheckoutUpdated2,
  removeCoupon: () => removeCoupon4,
  removeGiftCard: () => removeGiftCard4,
  removeLineItems: () => removeLineItems4,
  removeOverrideCheckoutUrl: () => removeOverrideCheckoutUrl4,
  updateCheckout: () => updateCheckout4,
  updateLineItemsQuantity: () => updateLineItemsQuantity4
});
module.exports = __toCommonJS(index_exports);

// src/ecom-v1-checkout-checkout.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_address3 = require("@wix/sdk-runtime/transformations/address");
var import_float3 = require("@wix/sdk-runtime/transformations/float");
var import_image3 = require("@wix/sdk-runtime/transformations/image");
var import_page_url_v23 = require("@wix/sdk-runtime/transformations/page-url-v2");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/ecom-v1-checkout-checkout.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-checkout-checkout.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_bytes = require("@wix/sdk-runtime/transformations/bytes");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomCheckoutApiV1CheckoutServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/checkout",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/v1/checkouts",
        destPath: "/v1/checkouts"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_checkout";
function createCheckout(payload) {
  function __createCheckout({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "checkoutInfo.createdDate" },
          { path: "checkoutInfo.updatedDate" },
          { path: "checkoutInfo.lineItems.media.urlExpirationDate" },
          {
            path: "checkoutInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "checkoutInfo.lineItems.serviceProperties.scheduledDate" },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkoutInfo.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "checkoutInfo.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "checkoutInfo.subscriptionCharges.charges.cycleBillingDate" },
          { path: "lineItems.media.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "checkoutInfo.lineItems.media.focalPoint.x" },
          { path: "checkoutInfo.lineItems.media.focalPoint.y" },
          { path: "lineItems.media.focalPoint.x" },
          { path: "lineItems.media.focalPoint.y" },
          { path: "checkoutInfo.lineItems.physicalProperties.weight" },
          {
            path: "checkoutInfo.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "checkoutInfo.billingInfo.address.geocode.latitude" },
          { path: "checkoutInfo.billingInfo.address.geocode.longitude" },
          {
            path: "checkoutInfo.shippingInfo.shippingDestination.address.geocode.latitude"
          },
          {
            path: "checkoutInfo.shippingInfo.shippingDestination.address.geocode.longitude"
          },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "checkoutInfo.appliedDiscounts.merchantDiscount.percentage" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.CreateCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCheckout;
}
function getCheckout(payload) {
  function __getCheckout({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCheckout;
}
function getCheckoutByCartId(payload) {
  function __getCheckoutByCartId({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutByCartId",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/by-cart-id/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCheckoutByCartId;
}
function getWixCheckoutUrl(payload) {
  function __getWixCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetWixCheckoutURL",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/wix-checkout-url",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getWixCheckoutUrl;
}
function getCheckoutUrl(payload) {
  function __getCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutURL",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/checkout-url",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getCheckoutUrl;
}
function updateCheckout(payload) {
  function __updateCheckout({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "checkout.createdDate" },
          { path: "checkout.updatedDate" },
          { path: "checkout.lineItems.media.urlExpirationDate" },
          {
            path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "checkout.lineItems.serviceProperties.scheduledDate" },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "checkout.subscriptionCharges.charges.cycleBillingDate" },
          { path: "lineItems.media.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "checkout.lineItems.media.focalPoint.x" },
          { path: "checkout.lineItems.media.focalPoint.y" },
          { path: "lineItems.media.focalPoint.x" },
          { path: "lineItems.media.focalPoint.y" },
          { path: "checkout.lineItems.physicalProperties.weight" },
          {
            path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "checkout.billingInfo.address.geocode.latitude" },
          { path: "checkout.billingInfo.address.geocode.longitude" },
          {
            path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
          },
          {
            path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
          },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "checkout.appliedDiscounts.merchantDiscount.percentage" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "PATCH",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.UpdateCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{checkout.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCheckout;
}
function removeCoupon(payload) {
  function __removeCoupon({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveCoupon",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-coupon",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeCoupon;
}
function removeGiftCard(payload) {
  function __removeGiftCard({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveGiftCard",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeGiftCard;
}
function removeOverrideCheckoutUrl(payload) {
  function __removeOverrideCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveOverrideCheckoutUrl",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-override-checkout-url",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeOverrideCheckoutUrl;
}
function addToCheckout(payload) {
  function __addToCheckout({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItems.media.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItems.media.focalPoint.x" },
          { path: "lineItems.media.focalPoint.y" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.AddToCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/add-to-checkout",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addToCheckout;
}
function removeLineItems(payload) {
  function __removeLineItems({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.RemoveLineItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/remove-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeLineItems;
}
function createOrder(payload) {
  function __createOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.CreateOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/create-order",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __createOrder;
}
function createOrderAndCharge(payload) {
  function __createOrderAndCharge({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.CreateOrderAndCharge",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/create-order-and-charge",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __createOrderAndCharge;
}
function markCheckoutAsCompletedAndRedirectToUrl(payload) {
  function __markCheckoutAsCompletedAndRedirectToUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.MarkCheckoutAsCompletedAndRedirectToUrl",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/mark-checkout-as-completed-and-redirect-to-url",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __markCheckoutAsCompletedAndRedirectToUrl;
}
function markCheckoutAsCompleted(payload) {
  function __markCheckoutAsCompleted({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.MarkCheckoutAsCompleted",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/mark-as-completed",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __markCheckoutAsCompleted;
}
function updateLineItemsQuantity(payload) {
  function __updateLineItemsQuantity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "POST",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.UpdateLineItemsQuantity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/update-line-items-quantity",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkout.createdDate" },
            { path: "checkout.updatedDate" },
            { path: "checkout.lineItems.media.urlExpirationDate" },
            {
              path: "checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "checkout.lineItems.serviceProperties.scheduledDate" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            {
              path: "checkout.membershipOptions.eligibleMemberships.expirationDate"
            },
            {
              path: "checkout.membershipOptions.invalidMemberships.membership.expirationDate"
            },
            { path: "checkout.subscriptionCharges.charges.cycleBillingDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "checkout.lineItems.media.focalPoint.x" },
            { path: "checkout.lineItems.media.focalPoint.y" },
            { path: "checkout.lineItems.physicalProperties.weight" },
            {
              path: "checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "checkout.billingInfo.address.geocode.latitude" },
            { path: "checkout.billingInfo.address.geocode.longitude" },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.shippingDestination.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "checkout.appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLineItemsQuantity;
}
function getCheckoutPaymentSettings(payload) {
  function __getCheckoutPaymentSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout",
      method: "GET",
      methodFqn: "com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutPaymentSettings",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
        protoPath: "/v1/checkouts/{id}/payment-settings",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getCheckoutPaymentSettings;
}

// src/ecom-v1-checkout-checkout.universal.ts
var import_address = require("@wix/sdk-runtime/transformations/address");
var import_address2 = require("@wix/sdk-runtime/transformations/address");
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_image2 = require("@wix/sdk-runtime/transformations/image");
var import_page_url_v2 = require("@wix/sdk-runtime/transformations/page-url-v2");
var import_page_url_v22 = require("@wix/sdk-runtime/transformations/page-url-v2");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var ItemAvailabilityStatus = /* @__PURE__ */ ((ItemAvailabilityStatus2) => {
  ItemAvailabilityStatus2["AVAILABLE"] = "AVAILABLE";
  ItemAvailabilityStatus2["NOT_FOUND"] = "NOT_FOUND";
  ItemAvailabilityStatus2["NOT_AVAILABLE"] = "NOT_AVAILABLE";
  ItemAvailabilityStatus2["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
  return ItemAvailabilityStatus2;
})(ItemAvailabilityStatus || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var CommonVatType = /* @__PURE__ */ ((CommonVatType2) => {
  CommonVatType2["UNSPECIFIED"] = "UNSPECIFIED";
  CommonVatType2["CPF"] = "CPF";
  CommonVatType2["CNPJ"] = "CNPJ";
  return CommonVatType2;
})(CommonVatType || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var ChargeType = /* @__PURE__ */ ((ChargeType2) => {
  ChargeType2["HANDLING_FEE"] = "HANDLING_FEE";
  ChargeType2["INSURANCE"] = "INSURANCE";
  return ChargeType2;
})(ChargeType || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var RateType = /* @__PURE__ */ ((RateType2) => {
  RateType2["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
  RateType2["MANUAL_RATE"] = "MANUAL_RATE";
  RateType2["AUTO_RATE"] = "AUTO_RATE";
  RateType2["FALLBACK_RATE"] = "FALLBACK_RATE";
  return RateType2;
})(RateType || {});
var ManualCalculationReason = /* @__PURE__ */ ((ManualCalculationReason2) => {
  ManualCalculationReason2["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
  ManualCalculationReason2["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
  return ManualCalculationReason2;
})(ManualCalculationReason || {});
var FallbackReason = /* @__PURE__ */ ((FallbackReason2) => {
  FallbackReason2["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
  FallbackReason2["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
  return FallbackReason2;
})(FallbackReason || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var AdditionalFeeSource = /* @__PURE__ */ ((AdditionalFeeSource2) => {
  AdditionalFeeSource2["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
  AdditionalFeeSource2["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
  AdditionalFeeSource2["ITEM"] = "ITEM";
  AdditionalFeeSource2["MANUAL"] = "MANUAL";
  AdditionalFeeSource2["SHIPPING"] = "SHIPPING";
  return AdditionalFeeSource2;
})(AdditionalFeeSource || {});
var Severity = /* @__PURE__ */ ((Severity2) => {
  Severity2["WARNING"] = "WARNING";
  Severity2["ERROR"] = "ERROR";
  return Severity2;
})(Severity || {});
var NameInOther = /* @__PURE__ */ ((NameInOther2) => {
  NameInOther2["OTHER_DEFAULT"] = "OTHER_DEFAULT";
  return NameInOther2;
})(NameInOther || {});
var NameInLineItem = /* @__PURE__ */ ((NameInLineItem2) => {
  NameInLineItem2["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
  return NameInLineItem2;
})(NameInLineItem || {});
var SuggestedFix = /* @__PURE__ */ ((SuggestedFix2) => {
  SuggestedFix2["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
  SuggestedFix2["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
  return SuggestedFix2;
})(SuggestedFix || {});
var GetCheckoutPaymentSettingsResponsePaymentOption = /* @__PURE__ */ ((GetCheckoutPaymentSettingsResponsePaymentOption2) => {
  GetCheckoutPaymentSettingsResponsePaymentOption2["UNKNOWN_PAYMENT_OPTION"] = "UNKNOWN_PAYMENT_OPTION";
  GetCheckoutPaymentSettingsResponsePaymentOption2["MANUAL"] = "MANUAL";
  return GetCheckoutPaymentSettingsResponsePaymentOption2;
})(GetCheckoutPaymentSettingsResponsePaymentOption || {});
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["CONTACT"] = "CONTACT";
  return IdentityType2;
})(IdentityType || {});
var LineItemType = /* @__PURE__ */ ((LineItemType2) => {
  LineItemType2["UNSPECIFIED_LINE_ITEM_TYPE"] = "UNSPECIFIED_LINE_ITEM_TYPE";
  LineItemType2["PHYSICAL"] = "PHYSICAL";
  LineItemType2["DIGITAL"] = "DIGITAL";
  LineItemType2["CUSTOM_AMOUNT_ITEM"] = "CUSTOM_AMOUNT_ITEM";
  return LineItemType2;
})(LineItemType || {});
var MediaItemType = /* @__PURE__ */ ((MediaItemType2) => {
  MediaItemType2["UNSPECIFIED_MEDIA_TYPE_ITEM"] = "UNSPECIFIED_MEDIA_TYPE_ITEM";
  MediaItemType2["IMAGE"] = "IMAGE";
  return MediaItemType2;
})(MediaItemType || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED_TAX_TYPE"] = "UNSPECIFIED_TAX_TYPE";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var DiscountDiscountType = /* @__PURE__ */ ((DiscountDiscountType2) => {
  DiscountDiscountType2["UNDEFINED"] = "UNDEFINED";
  DiscountDiscountType2["AMOUNT"] = "AMOUNT";
  DiscountDiscountType2["PERCENT"] = "PERCENT";
  return DiscountDiscountType2;
})(DiscountDiscountType || {});
var ChannelInfoChannelType = /* @__PURE__ */ ((ChannelInfoChannelType2) => {
  ChannelInfoChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelInfoChannelType2["WEB"] = "WEB";
  ChannelInfoChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelInfoChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  return ChannelInfoChannelType2;
})(ChannelInfoChannelType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCheckout2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      checkoutInfo: options?.checkoutInfo,
      couponCode: options?.couponCode,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems,
      channelType: options?.channelType,
      giftCardCode: options?.giftCardCode,
      overrideCheckoutUrl: options?.overrideCheckoutUrl,
      giftCardRedeemAmount: options?.giftCardRedeemAmount
    }),
    [
      {
        transformFn: import_page_url_v2.transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "checkoutInfo.lineItems.url" },
          { path: "lineItems.url" },
          { path: "customLineItems.url" }
        ]
      },
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [
          { path: "checkoutInfo.lineItems.media" },
          { path: "checkoutInfo.lineItems.catalogOverrideFields.image" },
          { path: "lineItems.media" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      },
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [
          { path: "checkoutInfo.billingInfo.address" },
          { path: "checkoutInfo.shippingInfo.shippingDestination.address" },
          {
            path: "checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
          },
          {
            path: "checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ]
  );
  const reqOpts = createCheckout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    )?.checkout;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          checkoutInfo: "$[0].checkoutInfo",
          couponCode: "$[0].couponCode",
          lineItems: "$[0].lineItems",
          customLineItems: "$[0].customLineItems",
          channelType: "$[0].channelType",
          giftCardCode: "$[0].giftCardCode",
          overrideCheckoutUrl: "$[0].overrideCheckoutUrl",
          giftCardRedeemAmount: "$[0].giftCardRedeemAmount"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCheckout2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getCheckout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    )?.checkout;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCheckoutByCartId2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getCheckoutByCartId(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getWixCheckoutUrl2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getWixCheckoutUrl(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCheckoutUrl2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getCheckoutUrl(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCheckout2(_id, checkout, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      checkout: { ...checkout, id: _id },
      couponCode: options?.couponCode,
      giftCardCode: options?.giftCardCode,
      overrideCheckoutUrl: options?.overrideCheckoutUrl,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems,
      giftCardRedeemAmount: options?.giftCardRedeemAmount
    }),
    [
      {
        transformFn: import_page_url_v2.transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "checkout.lineItems.url" },
          { path: "lineItems.url" },
          { path: "customLineItems.url" }
        ]
      },
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [
          { path: "checkout.lineItems.media" },
          { path: "checkout.lineItems.catalogOverrideFields.image" },
          { path: "lineItems.media" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      },
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [
          { path: "checkout.billingInfo.address" },
          { path: "checkout.shippingInfo.shippingDestination.address" },
          {
            path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
          },
          {
            path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ]
  );
  const reqOpts = updateCheckout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    )?.checkout;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { checkout: "$[1]" },
        explicitPathsToArguments: {
          "checkout.id": "$[0]",
          couponCode: "$[2].couponCode",
          giftCardCode: "$[2].giftCardCode",
          overrideCheckoutUrl: "$[2].overrideCheckoutUrl",
          lineItems: "$[2].lineItems",
          customLineItems: "$[2].customLineItems",
          giftCardRedeemAmount: "$[2].giftCardRedeemAmount"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "checkout", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeCoupon2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = removeCoupon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeGiftCard2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = removeGiftCard(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeOverrideCheckoutUrl2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = removeOverrideCheckoutUrl(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addToCheckout2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      id: _id,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems
    }),
    [
      {
        transformFn: import_page_url_v2.transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "lineItems.url" }, { path: "customLineItems.url" }]
      },
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [
          { path: "lineItems.media" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      }
    ]
  );
  const reqOpts = addToCheckout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          lineItems: "$[1].lineItems",
          customLineItems: "$[1].customLineItems"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeLineItems2(_id, lineItemIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    lineItemIds
  });
  const reqOpts = removeLineItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", lineItemIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "lineItemIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createOrder2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    savePaymentMethod: options?.savePaymentMethod,
    delayCapture: options?.delayCapture
  });
  const reqOpts = createOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          savePaymentMethod: "$[1].savePaymentMethod",
          delayCapture: "$[1].delayCapture"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createOrderAndCharge2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    paymentToken: options?.paymentToken,
    savePaymentMethod: options?.savePaymentMethod,
    delayCapture: options?.delayCapture
  });
  const reqOpts = createOrderAndCharge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          paymentToken: "$[1].paymentToken",
          savePaymentMethod: "$[1].savePaymentMethod",
          delayCapture: "$[1].delayCapture"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function markCheckoutAsCompletedAndRedirectToUrl2(token) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ token });
  const reqOpts = markCheckoutAsCompletedAndRedirectToUrl(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { token: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["token"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function markCheckoutAsCompleted2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = markCheckoutAsCompleted(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateLineItemsQuantity2(_id, lineItems) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    lineItems
  });
  const reqOpts = updateLineItemsQuantity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "checkout.lineItems.url" }]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "checkout.lineItems.media" },
            { path: "checkout.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "checkout.billingInfo.address" },
            { path: "checkout.shippingInfo.shippingDestination.address" },
            {
              path: "checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", lineItems: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "lineItems"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCheckoutPaymentSettings2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getCheckoutPaymentSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-checkout-checkout.public.ts
function createCheckout3(httpClient) {
  return (options) => createCheckout2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getCheckout3(httpClient) {
  return (_id) => getCheckout2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function getCheckoutByCartId3(httpClient) {
  return (_id) => getCheckoutByCartId2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function getWixCheckoutUrl3(httpClient) {
  return (_id) => getWixCheckoutUrl2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function getCheckoutUrl3(httpClient) {
  return (_id) => getCheckoutUrl2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateCheckout3(httpClient) {
  return (_id, checkout, options) => updateCheckout2(
    _id,
    checkout,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeCoupon3(httpClient) {
  return (_id) => removeCoupon2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeGiftCard3(httpClient) {
  return (_id) => removeGiftCard2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeOverrideCheckoutUrl3(httpClient) {
  return (_id) => removeOverrideCheckoutUrl2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function addToCheckout3(httpClient) {
  return (_id, options) => addToCheckout2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeLineItems3(httpClient) {
  return (_id, lineItemIds) => removeLineItems2(
    _id,
    lineItemIds,
    // @ts-ignore
    { httpClient }
  );
}
function createOrder3(httpClient) {
  return (_id, options) => createOrder2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function createOrderAndCharge3(httpClient) {
  return (_id, options) => createOrderAndCharge2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function markCheckoutAsCompletedAndRedirectToUrl3(httpClient) {
  return (token) => markCheckoutAsCompletedAndRedirectToUrl2(
    token,
    // @ts-ignore
    { httpClient }
  );
}
function markCheckoutAsCompleted3(httpClient) {
  return (_id) => markCheckoutAsCompleted2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateLineItemsQuantity3(httpClient) {
  return (_id, lineItems) => updateLineItemsQuantity2(
    _id,
    lineItems,
    // @ts-ignore
    { httpClient }
  );
}
function getCheckoutPaymentSettings3(httpClient) {
  return (_id) => getCheckoutPaymentSettings2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
var onCheckoutCompleted = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.checkout_completed",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "data.checkout.createdDate" },
          { path: "data.checkout.updatedDate" },
          {
            path: "data.checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "data.checkout.lineItems.serviceProperties.scheduledDate" },
          {
            path: "data.checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "data.checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "data.checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "data.checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "data.checkout.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "data.checkout.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          {
            path: "data.checkout.subscriptionCharges.charges.cycleBillingDate"
          },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url_v23.transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: "data.checkout.lineItems.url" }]
      },
      {
        transformFn: import_image3.transformRESTImageToSDKImage,
        paths: [
          { path: "data.checkout.lineItems.media" },
          { path: "data.checkout.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: import_float3.transformRESTFloatToSDKFloat,
        paths: [
          { path: "data.checkout.lineItems.physicalProperties.weight" },
          {
            path: "data.checkout.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          {
            path: "data.checkout.appliedDiscounts.merchantDiscount.percentage"
          }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [
          { path: "data.checkout.billingInfo.address" },
          { path: "data.checkout.shippingInfo.shippingDestination.address" },
          {
            path: "data.checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
          },
          {
            path: "data.checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ])
  )
)();
var onCheckoutCreated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.checkout_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          {
            path: "entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.lineItems.serviceProperties.scheduledDate" },
          {
            path: "entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "entity.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "entity.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "entity.subscriptionCharges.charges.cycleBillingDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url_v23.transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: "entity.lineItems.url" }]
      },
      {
        transformFn: import_image3.transformRESTImageToSDKImage,
        paths: [
          { path: "entity.lineItems.media" },
          { path: "entity.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: import_float3.transformRESTFloatToSDKFloat,
        paths: [
          { path: "entity.lineItems.physicalProperties.weight" },
          {
            path: "entity.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "entity.appliedDiscounts.merchantDiscount.percentage" }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [
          { path: "entity.billingInfo.address" },
          { path: "entity.shippingInfo.shippingDestination.address" },
          {
            path: "entity.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
          },
          {
            path: "entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ])
  )
)();
var onCheckoutDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.checkout_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          {
            path: "undefined.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "undefined.lineItems.serviceProperties.scheduledDate" },
          {
            path: "undefined.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "undefined.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "undefined.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "undefined.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "undefined.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "undefined.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "undefined.subscriptionCharges.charges.cycleBillingDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url_v23.transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: "undefined.lineItems.url" }]
      },
      {
        transformFn: import_image3.transformRESTImageToSDKImage,
        paths: [
          { path: "undefined.lineItems.media" },
          { path: "undefined.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: import_float3.transformRESTFloatToSDKFloat,
        paths: [
          { path: "undefined.lineItems.physicalProperties.weight" },
          {
            path: "undefined.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "undefined.appliedDiscounts.merchantDiscount.percentage" }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [
          { path: "undefined.billingInfo.address" },
          { path: "undefined.shippingInfo.shippingDestination.address" },
          {
            path: "undefined.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
          },
          {
            path: "undefined.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ])
  )
)();
var onCheckoutUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.checkout_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          {
            path: "entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.lineItems.serviceProperties.scheduledDate" },
          {
            path: "entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
          },
          {
            path: "entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          },
          {
            path: "entity.membershipOptions.eligibleMemberships.expirationDate"
          },
          {
            path: "entity.membershipOptions.invalidMemberships.membership.expirationDate"
          },
          { path: "entity.subscriptionCharges.charges.cycleBillingDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url_v23.transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: "entity.lineItems.url" }]
      },
      {
        transformFn: import_image3.transformRESTImageToSDKImage,
        paths: [
          { path: "entity.lineItems.media" },
          { path: "entity.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: import_float3.transformRESTFloatToSDKFloat,
        paths: [
          { path: "entity.lineItems.physicalProperties.weight" },
          {
            path: "entity.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "entity.appliedDiscounts.merchantDiscount.percentage" }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [
          { path: "entity.billingInfo.address" },
          { path: "entity.shippingInfo.shippingDestination.address" },
          {
            path: "entity.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
          },
          {
            path: "entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ])
  )
)();

// src/ecom-v1-checkout-checkout.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createCheckout4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createCheckout3);
var getCheckout4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getCheckout3);
var getCheckoutByCartId4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getCheckoutByCartId3);
var getWixCheckoutUrl4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getWixCheckoutUrl3);
var getCheckoutUrl4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getCheckoutUrl3);
var updateCheckout4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateCheckout3);
var removeCoupon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeCoupon3);
var removeGiftCard4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeGiftCard3);
var removeOverrideCheckoutUrl4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeOverrideCheckoutUrl3);
var addToCheckout4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addToCheckout3);
var removeLineItems4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeLineItems3);
var createOrder4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createOrder3);
var createOrderAndCharge4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createOrderAndCharge3);
var markCheckoutAsCompletedAndRedirectToUrl4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(
  markCheckoutAsCompletedAndRedirectToUrl3
);
var markCheckoutAsCompleted4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(markCheckoutAsCompleted3);
var updateLineItemsQuantity4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateLineItemsQuantity3);
var getCheckoutPaymentSettings4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getCheckoutPaymentSettings3);
var onCheckoutCompleted2 = (0, import_event_definition_modules.createEventModule)(
  onCheckoutCompleted
);
var onCheckoutCreated2 = (0, import_event_definition_modules.createEventModule)(onCheckoutCreated);
var onCheckoutDeleted2 = (0, import_event_definition_modules.createEventModule)(onCheckoutDeleted);
var onCheckoutUpdated2 = (0, import_event_definition_modules.createEventModule)(onCheckoutUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AdditionalFeeSource,
  ChannelInfoChannelType,
  ChannelType,
  ChargeType,
  CommonVatType,
  DescriptionLineType,
  DiscountDiscountType,
  DiscountType,
  FallbackReason,
  FileType,
  GetCheckoutPaymentSettingsResponsePaymentOption,
  IdentityType,
  ItemAvailabilityStatus,
  ItemTypeItemType,
  JurisdictionType,
  LineItemType,
  ManualCalculationReason,
  MediaItemType,
  NameInLineItem,
  NameInOther,
  PaymentOptionType,
  PickupMethod,
  RateType,
  RuleType,
  Severity,
  SubscriptionFrequency,
  SuggestedFix,
  TaxableAddressType,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addToCheckout,
  createCheckout,
  createOrder,
  createOrderAndCharge,
  getCheckout,
  getCheckoutByCartId,
  getCheckoutPaymentSettings,
  getCheckoutUrl,
  getWixCheckoutUrl,
  markCheckoutAsCompleted,
  markCheckoutAsCompletedAndRedirectToUrl,
  onCheckoutCompleted,
  onCheckoutCreated,
  onCheckoutDeleted,
  onCheckoutUpdated,
  removeCoupon,
  removeGiftCard,
  removeLineItems,
  removeOverrideCheckoutUrl,
  updateCheckout,
  updateLineItemsQuantity
});
//# sourceMappingURL=index.js.map