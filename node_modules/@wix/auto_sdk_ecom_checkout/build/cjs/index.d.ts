import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { CreateCheckoutOptions, Checkout, CreateCheckoutApplicationErrors, GetCheckoutByCartIdResponse, GetCheckoutURLResponse, UpdateCheckout, UpdateCheckoutOptions, UpdateCheckoutApplicationErrors, RemoveCouponResponse, RemoveGiftCardResponse, RemoveOverrideCheckoutUrlResponse, AddToCheckoutOptions, AddToCheckoutResponse, AddToCheckoutApplicationErrors, RemoveLineItemsResponse, CreateOrderOptions, CreateOrderResponse, CreateOrderApplicationErrors, RawHttpResponse, MarkCheckoutAsCompletedAndRedirectToUrlApplicationErrors, LineItemQuantityUpdate, UpdateLineItemsQuantityResponse, CheckoutCompletedEnvelope, CheckoutCreatedEnvelope, CheckoutDeletedEnvelope, CheckoutUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, AddToCheckoutRequest, AdditionalFee, AdditionalFeeSource, AdditionalFeeSourceWithLiterals, Address, AddressAddressLine1OptionsOneOf, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApiAddress, ApplicableLineItems, ApplicationError, AppliedCoupon, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BillingInfo, BuyerInfo, BuyerInfoIdOneOf, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, CatalogOverrideFields, CatalogReference, ChannelInfo, ChannelInfoChannelType, ChannelInfoChannelTypeWithLiterals, ChannelType, ChannelTypeWithLiterals, Charge, ChargeDetails, ChargeType, ChargeTypeWithLiterals, CheckoutMarkedAsCompleted, Color, CommonVatId, CommonVatType, CommonVatTypeWithLiterals, ConversionInfo, Coupon, CreateCheckoutRequest, CreateCheckoutResponse, CreateOrderAndChargeApplicationErrors, CreateOrderAndChargeOptions, CreateOrderAndChargeRequest, CreateOrderAndChargeResponse, CreateOrderAndChargeResponseIdOneOf, CreateOrderRequest, CreateOrderResponseIdOneOf, CreatedBy, CreatedByIdOneOf, CustomContentReference, CustomField, CustomLineItem, CustomSettings, CustomTextFieldSelection, DeleteCheckoutRequest, DeleteCheckoutResponse, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineTypeWithLiterals, DescriptionLineValueOneOf, Details, DetailsKindOneOf, Discount, DiscountDiscountType, DiscountDiscountTypeWithLiterals, DiscountRule, DiscountRuleName, DiscountType, DiscountTypeWithLiterals, DomainEvent, DomainEventBodyOneOf, DoublePaymentErrorData, DoublePaymentErrorDataIdOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, ExternalReference, FallbackReason, FallbackReasonWithLiterals, FieldViolation, FileType, FileTypeWithLiterals, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, FullName, GetCheckoutByCartIdRequest, GetCheckoutPaymentSettingsRequest, GetCheckoutPaymentSettingsResponse, GetCheckoutPaymentSettingsResponsePaymentOption, GetCheckoutPaymentSettingsResponsePaymentOptionWithLiterals, GetCheckoutRequest, GetCheckoutResponse, GetCheckoutURLRequest, GetCheckoutWithAllExtendedFieldsRequest, GetCheckoutWithAllExtendedFieldsResponse, GetWixCheckoutURLRequest, GetWixCheckoutURLResponse, GiftCard, Group, HeadersEntry, IdentificationData, IdentificationDataIdOneOf, IdentityType, IdentityTypeWithLiterals, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemAvailabilityStatusWithLiterals, ItemModifier, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, ItemTypeItemTypeWithLiterals, JurisdictionType, JurisdictionTypeWithLiterals, LineItem, LineItemDiscount, LineItemType, LineItemTypeWithLiterals, ManualCalculationReason, ManualCalculationReasonWithLiterals, MarkCheckoutAsCompletedAndRedirectToUrlRequest, MarkCheckoutAsCompletedRequest, MarkCheckoutAsCompletedResponse, MediaItem, MediaItemType, MediaItemTypeWithLiterals, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MerchantDiscountInput, MessageEnvelope, ModifierGroup, MultiCurrencyPrice, NameInLineItem, NameInLineItemWithLiterals, NameInOther, NameInOtherWithLiterals, OptionSelection, Other, OtherCharge, PaymentErrorResponseData, PaymentOption, PaymentOptionType, PaymentOptionTypeWithLiterals, PhysicalProperties, PickupAddress, PickupDetails, PickupMethod, PickupMethodWithLiterals, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductDetails, ProductName, RateType, RateTypeWithLiterals, RedeemErrorData, Region, RemoveCouponRequest, RemoveGiftCardRequest, RemoveLineItemsRequest, RemoveOverrideCheckoutUrlRequest, RestoreInfo, RuleType, RuleTypeWithLiterals, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, ServiceProperties, Severity, SeverityWithLiterals, ShipmentDetails, ShippingCalculationErrorData, ShippingCalculationErrorDataShippingCalculationErrorOneOf, ShippingInfo, ShippingOption, ShippingPrice, ShippingRegion, StoreSettings, Street, StreetAddress, Subscription, SubscriptionCharges, SubscriptionCreated, SubscriptionFrequency, SubscriptionFrequencyWithLiterals, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SuggestedFixWithLiterals, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, TaxableAddressTypeWithLiterals, Title, Totals, TranslatableString, UpdateCheckoutRequest, UpdateCheckoutResponse, UpdateLineItemsQuantityRequest, UpdatedCheckoutMessage, V1BuyerInfo, V1CustomField, V1ItemModifier, V1LineItem, V1ModifierGroup, V1PickupDetails, V1ShippingInfo, V1ShippingInfoDetailsOneOf, V1SubscriptionOptionInfo, V1SubscriptionSettings, ValidationError, VatId, VatType, VatTypeWithLiterals, Violation, ViolationsList, WebhookIdentityType, WebhookIdentityTypeWithLiterals, WeightUnit, WeightUnitWithLiterals } from './index.typings.js';

declare function createCheckout$1(httpClient: HttpClient): CreateCheckoutSignature;
interface CreateCheckoutSignature {
    /**
     * Creates a checkout.
     *
     * A checkout must include at least 1 item in `lineItems` or `customLineItems`.
     *
     * If passing `checkoutInfo.customFields`, then `checkoutInfo.customFields.value` is a required field.
     * @param - Checkout creation options.
     * @returns Newly created checkout.
     */
    (options?: NonNullablePaths<CreateCheckoutOptions, `channelType` | `checkoutInfo.customFields.${number}.value` | `checkoutInfo.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkoutInfo.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkoutInfo.membershipOptions.selectedMemberships.memberships.${number}.lineItemIds` | `customLineItems.${number}.descriptionLines.${number}.name` | `customLineItems.${number}.itemType` | `customLineItems.${number}.modifierGroups.${number}.modifiers.${number}.label` | `customLineItems.${number}.price` | `customLineItems.${number}.productName` | `customLineItems.${number}.quantity` | `lineItems.${number}.catalogReference` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.quantity`, 8>): Promise<NonNullablePaths<Checkout, `lineItems` | `lineItems.${number}.quantity` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.productName.original` | `lineItems.${number}.price.amount` | `lineItems.${number}.price.convertedAmount` | `lineItems.${number}.price.formattedAmount` | `lineItems.${number}.price.formattedConvertedAmount` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.availability.status` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.subscriptionOptionInfo.title.original` | `lineItems.${number}.subscriptionOptionInfo.description.original` | `lineItems.${number}.paymentOption` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.customLineItem` | `lineItems.${number}.catalogOverrideFields.paymentOption.value` | `lineItems.${number}.priceUndetermined` | `lineItems.${number}.fixedQuantity` | `lineItems.${number}.savePaymentMethod` | `lineItems.${number}.taxableAddress.addressType` | `lineItems.${number}.membersOnly` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.selectedCarrierServiceOption.code` | `shippingInfo.selectedCarrierServiceOption.title` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `shippingInfo.selectedCarrierServiceOption.otherCharges` | `shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `shippingInfo.region._id` | `shippingInfo.region.name` | `shippingInfo.carrierServiceOptions` | `shippingInfo.carrierServiceOptions.${number}.carrierId` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `conversionCurrency` | `calculationErrors.generalShippingCalculationError.applicationError.code` | `calculationErrors.generalShippingCalculationError.applicationError.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `calculationErrors.carrierErrors.errors` | `calculationErrors.carrierErrors.errors.${number}.carrierId` | `calculationErrors.orderValidationErrors` | `giftCard._id` | `giftCard.obfuscatedCode` | `giftCard.appId` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `customFields` | `customFields.${number}.title` | `weightUnit` | `taxSummary.calculationDetails.manualRateReason` | `taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `taxSummary.calculationDetails.rateType` | `currency` | `channelType` | `siteLanguage` | `buyerLanguage` | `completed` | `taxIncludedInPrice` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `membershipOptions.eligibleMemberships` | `membershipOptions.eligibleMemberships.${number}._id` | `membershipOptions.eligibleMemberships.${number}.appId` | `membershipOptions.eligibleMemberships.${number}.name.original` | `membershipOptions.eligibleMemberships.${number}.credits.total` | `membershipOptions.eligibleMemberships.${number}.credits.remaining` | `membershipOptions.invalidMemberships` | `membershipOptions.invalidMemberships.${number}.reason` | `membershipOptions.selectedMemberships.memberships` | `membershipOptions.selectedMemberships.memberships.${number}._id` | `membershipOptions.selectedMemberships.memberships.${number}.appId` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}.source` | `violations` | `violations.${number}.severity` | `violations.${number}.target.other.name` | `violations.${number}.target.lineItem.name` | `customSettings.lockGiftCard` | `customSettings.lockCouponCode` | `customSettings.disabledPolicyAgreementCheckbox` | `customSettings.disabledManualPayment` | `customContentReference.appId` | `customContentReference.componentId` | `externalReference.appId` | `paymentCurrency`, 7> & {
        __applicationErrorsType?: CreateCheckoutApplicationErrors;
    }>;
}
declare function getCheckout$1(httpClient: HttpClient): GetCheckoutSignature;
interface GetCheckoutSignature {
    /**
     * Retrieves a checkout.
     * @param - Checkout ID.
     * @returns Retrieved checkout.
     */
    (_id: string): Promise<NonNullablePaths<Checkout, `lineItems` | `lineItems.${number}.quantity` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.productName.original` | `lineItems.${number}.price.amount` | `lineItems.${number}.price.convertedAmount` | `lineItems.${number}.price.formattedAmount` | `lineItems.${number}.price.formattedConvertedAmount` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.availability.status` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.subscriptionOptionInfo.title.original` | `lineItems.${number}.subscriptionOptionInfo.description.original` | `lineItems.${number}.paymentOption` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.customLineItem` | `lineItems.${number}.catalogOverrideFields.paymentOption.value` | `lineItems.${number}.priceUndetermined` | `lineItems.${number}.fixedQuantity` | `lineItems.${number}.savePaymentMethod` | `lineItems.${number}.taxableAddress.addressType` | `lineItems.${number}.membersOnly` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.selectedCarrierServiceOption.code` | `shippingInfo.selectedCarrierServiceOption.title` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `shippingInfo.selectedCarrierServiceOption.otherCharges` | `shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `shippingInfo.region._id` | `shippingInfo.region.name` | `shippingInfo.carrierServiceOptions` | `shippingInfo.carrierServiceOptions.${number}.carrierId` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `conversionCurrency` | `calculationErrors.generalShippingCalculationError.applicationError.code` | `calculationErrors.generalShippingCalculationError.applicationError.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `calculationErrors.carrierErrors.errors` | `calculationErrors.carrierErrors.errors.${number}.carrierId` | `calculationErrors.orderValidationErrors` | `giftCard._id` | `giftCard.obfuscatedCode` | `giftCard.appId` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `customFields` | `customFields.${number}.title` | `weightUnit` | `taxSummary.calculationDetails.manualRateReason` | `taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `taxSummary.calculationDetails.rateType` | `currency` | `channelType` | `siteLanguage` | `buyerLanguage` | `completed` | `taxIncludedInPrice` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `membershipOptions.eligibleMemberships` | `membershipOptions.eligibleMemberships.${number}._id` | `membershipOptions.eligibleMemberships.${number}.appId` | `membershipOptions.eligibleMemberships.${number}.name.original` | `membershipOptions.eligibleMemberships.${number}.credits.total` | `membershipOptions.eligibleMemberships.${number}.credits.remaining` | `membershipOptions.invalidMemberships` | `membershipOptions.invalidMemberships.${number}.reason` | `membershipOptions.selectedMemberships.memberships` | `membershipOptions.selectedMemberships.memberships.${number}._id` | `membershipOptions.selectedMemberships.memberships.${number}.appId` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}.source` | `violations` | `violations.${number}.severity` | `violations.${number}.target.other.name` | `violations.${number}.target.lineItem.name` | `customSettings.lockGiftCard` | `customSettings.lockCouponCode` | `customSettings.disabledPolicyAgreementCheckbox` | `customSettings.disabledManualPayment` | `customContentReference.appId` | `customContentReference.componentId` | `externalReference.appId` | `paymentCurrency`, 7>>;
}
declare function getCheckoutByCartId$1(httpClient: HttpClient): GetCheckoutByCartIdSignature;
interface GetCheckoutByCartIdSignature {
    /**
     * Retrieves the checkout associated with a specified cart.
     * @param - Cart ID.
     */
    (_id: string): Promise<NonNullablePaths<GetCheckoutByCartIdResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8>>;
}
declare function getCheckoutUrl$1(httpClient: HttpClient): GetCheckoutUrlSignature;
interface GetCheckoutUrlSignature {
    /**
     * Retrieves the checkout page URL of a specified checkout.
     *
     * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
     * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     * @param - Checkout ID.
     */
    (_id: string): Promise<NonNullablePaths<GetCheckoutURLResponse, `checkoutUrl`, 2>>;
}
declare function updateCheckout$1(httpClient: HttpClient): UpdateCheckoutSignature;
interface UpdateCheckoutSignature {
    /**
     * Updates a checkout.
     *
     * Use this method to update checkout fields such as billing and shipping info, or to add a coupon code or gift card.
     *
     * To update a checkout's `lineItems`, `completed` status, or to remove coupons and gift cards, see these methods:
     * + Add to Checkout: Add line items to the checkout.
     * + Update Line Items Quantity: Update the quantity of 1 or more line items in the checkout.
     * + Remove Line Items: Remove a line item from the checkout.
     * + Mark Checkout As Completed: To update `completed` to `true` if the checkout was completed through a non-Wix orders or payments system.
     * + Remove Coupon: To remove an applied coupon from the checkout.
     * + Remove Gift Card: To remove an applied gift card from the checkout.
     *
     * >**Notes:**
     * > + If nothing is passed in the request, the call will fail.
     * > + The `checkout.buyerInfo.email` may not be removed once it is set.
     * @param - Checkout ID.
     * @param - Checkout update options.
     * @returns Updated checkout.
     */
    (_id: string, checkout: NonNullablePaths<UpdateCheckout, `customFields.${number}.value` | `membershipOptions.selectedMemberships.memberships.${number}._id` | `membershipOptions.selectedMemberships.memberships.${number}.appId` | `membershipOptions.selectedMemberships.memberships.${number}.lineItemIds`, 6>, options?: NonNullablePaths<UpdateCheckoutOptions, `customLineItems.${number}.descriptionLines.${number}.name` | `customLineItems.${number}.itemType` | `customLineItems.${number}.modifierGroups.${number}.modifiers.${number}.label` | `customLineItems.${number}.productName` | `customLineItems.${number}.quantity` | `lineItems.${number}.catalogReference` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.quantity`, 8>): Promise<NonNullablePaths<Checkout, `lineItems` | `lineItems.${number}.quantity` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.productName.original` | `lineItems.${number}.price.amount` | `lineItems.${number}.price.convertedAmount` | `lineItems.${number}.price.formattedAmount` | `lineItems.${number}.price.formattedConvertedAmount` | `lineItems.${number}.taxDetails.taxRate` | `lineItems.${number}.availability.status` | `lineItems.${number}.physicalProperties.shippable` | `lineItems.${number}.itemType.preset` | `lineItems.${number}.itemType.custom` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `lineItems.${number}.subscriptionOptionInfo.title.original` | `lineItems.${number}.subscriptionOptionInfo.description.original` | `lineItems.${number}.paymentOption` | `lineItems.${number}.priceDescription.original` | `lineItems.${number}.customLineItem` | `lineItems.${number}.catalogOverrideFields.paymentOption.value` | `lineItems.${number}.priceUndetermined` | `lineItems.${number}.fixedQuantity` | `lineItems.${number}.savePaymentMethod` | `lineItems.${number}.taxableAddress.addressType` | `lineItems.${number}.membersOnly` | `billingInfo.address.streetAddress.number` | `billingInfo.address.streetAddress.name` | `billingInfo.contactDetails.vatId._id` | `billingInfo.contactDetails.vatId.type` | `shippingInfo.selectedCarrierServiceOption.code` | `shippingInfo.selectedCarrierServiceOption.title` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `shippingInfo.selectedCarrierServiceOption.otherCharges` | `shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `shippingInfo.region._id` | `shippingInfo.region.name` | `shippingInfo.carrierServiceOptions` | `shippingInfo.carrierServiceOptions.${number}.carrierId` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `conversionCurrency` | `calculationErrors.generalShippingCalculationError.applicationError.code` | `calculationErrors.generalShippingCalculationError.applicationError.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `calculationErrors.carrierErrors.errors` | `calculationErrors.carrierErrors.errors.${number}.carrierId` | `calculationErrors.orderValidationErrors` | `giftCard._id` | `giftCard.obfuscatedCode` | `giftCard.appId` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `customFields` | `customFields.${number}.title` | `weightUnit` | `taxSummary.calculationDetails.manualRateReason` | `taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `taxSummary.calculationDetails.rateType` | `currency` | `channelType` | `siteLanguage` | `buyerLanguage` | `completed` | `taxIncludedInPrice` | `createdBy.userId` | `createdBy.memberId` | `createdBy.visitorId` | `createdBy.appId` | `membershipOptions.eligibleMemberships` | `membershipOptions.eligibleMemberships.${number}._id` | `membershipOptions.eligibleMemberships.${number}.appId` | `membershipOptions.eligibleMemberships.${number}.name.original` | `membershipOptions.eligibleMemberships.${number}.credits.total` | `membershipOptions.eligibleMemberships.${number}.credits.remaining` | `membershipOptions.invalidMemberships` | `membershipOptions.invalidMemberships.${number}.reason` | `membershipOptions.selectedMemberships.memberships` | `membershipOptions.selectedMemberships.memberships.${number}._id` | `membershipOptions.selectedMemberships.memberships.${number}.appId` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}.source` | `violations` | `violations.${number}.severity` | `violations.${number}.target.other.name` | `violations.${number}.target.lineItem.name` | `customSettings.lockGiftCard` | `customSettings.lockCouponCode` | `customSettings.disabledPolicyAgreementCheckbox` | `customSettings.disabledManualPayment` | `customContentReference.appId` | `customContentReference.componentId` | `externalReference.appId` | `paymentCurrency`, 7> & {
        __applicationErrorsType?: UpdateCheckoutApplicationErrors;
    }>;
}
declare function removeCoupon$1(httpClient: HttpClient): RemoveCouponSignature;
interface RemoveCouponSignature {
    /**
     * Removes the coupon from a specified checkout.
     * @param - ID of the checkout to remove the coupon from.
     */
    (_id: string): Promise<NonNullablePaths<RemoveCouponResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8>>;
}
declare function removeGiftCard$1(httpClient: HttpClient): RemoveGiftCardSignature;
interface RemoveGiftCardSignature {
    /**
     * Removes the gift card from a specified checkout.
     *
     * A checkout can only hold 1 gift card.
     * @param - ID of the checkout to remove the gift card from.
     */
    (_id: string): Promise<NonNullablePaths<RemoveGiftCardResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8>>;
}
declare function removeOverrideCheckoutUrl$1(httpClient: HttpClient): RemoveOverrideCheckoutUrlSignature;
interface RemoveOverrideCheckoutUrlSignature {
    /**
     * Removes the `overrideCheckoutUrl` from a specified checkout.
     *
     * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
     * Wix checkout page URL.
     * @param - ID of the checkout to remove the override checkout url from.
     */
    (_id: string): Promise<NonNullablePaths<RemoveOverrideCheckoutUrlResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8>>;
}
declare function addToCheckout$1(httpClient: HttpClient): AddToCheckoutSignature;
interface AddToCheckoutSignature {
    /**
     * Adds catalog line items and/or custom line items to a checkout.
     *
     * When adding catalog ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)) items
     * to a checkout, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
     * @param - Checkout ID.
     * @param - Items to be added to checkout.
     */
    (_id: string, options?: NonNullablePaths<AddToCheckoutOptions, `customLineItems.${number}.descriptionLines.${number}.name` | `customLineItems.${number}.itemType` | `customLineItems.${number}.modifierGroups.${number}.modifiers.${number}.label` | `customLineItems.${number}.productName` | `customLineItems.${number}.quantity` | `lineItems.${number}.catalogReference` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.quantity`, 8>): Promise<NonNullablePaths<AddToCheckoutResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8> & {
        __applicationErrorsType?: AddToCheckoutApplicationErrors;
    }>;
}
declare function removeLineItems$1(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from the specified checkout.
     * @param - ID of the checkout to remove line items from.
     * @param - IDs of the line items to remove from the checkout.
     *
     * To find the IDs of the checkout line items you'd like to remove,
     * pass the checkout ID to Get Checkout and look for the IDs under
     * `lineItems`.
     */
    (_id: string, lineItemIds: string[]): Promise<NonNullablePaths<RemoveLineItemsResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8>>;
}
declare function createOrder$1(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order from a specified checkout.
     *
     * For an order to be created from a checkout, the following requirements must be met:
     * + A checkout cannot have calculation errors. Pass the checkout ID to Get Checkout and review the `calculationErrors` field.
     * + A checkout must have at least 1 line item or custom line item.
     * + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
     * + If there is a payment to be made, meaning that `priceSummary.total` is greater than `0`, the `billingInfo.address` field are required.
     * + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields are required.
     * + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field are required.
     * @param - Checkout ID.
     * @param - Additional order creation options.
     */
    (_id: string, options?: CreateOrderOptions): Promise<NonNullablePaths<CreateOrderResponse, `orderId` | `subscriptionId`, 2> & {
        __applicationErrorsType?: CreateOrderApplicationErrors;
    }>;
}
declare function markCheckoutAsCompletedAndRedirectToUrl$1(httpClient: HttpClient): MarkCheckoutAsCompletedAndRedirectToUrlSignature;
interface MarkCheckoutAsCompletedAndRedirectToUrlSignature {
    /**
     * Marks a checkout as completed and redirects to a specified URL.
     * @param - Server-signed JWT token with required information to complete checkout
     */
    (token: string): Promise<NonNullablePaths<RawHttpResponse, `body` | `headers` | `headers.${number}.key` | `headers.${number}.value`, 4> & {
        __applicationErrorsType?: MarkCheckoutAsCompletedAndRedirectToUrlApplicationErrors;
    }>;
}
declare function markCheckoutAsCompleted$1(httpClient: HttpClient): MarkCheckoutAsCompletedSignature;
interface MarkCheckoutAsCompletedSignature {
    /**
     * Sets `completed` to `true` to mark a checkout as completed.
     *
     * When an order is completed through Wix, the `completed` field in the associated checkout object
     * will automatically be updated to `true`. If an order is completed through a separate system,
     * use this method to manually mark the checkout as completed.
     * @param - Checkout ID.
     */
    (_id: string): Promise<void>;
}
declare function updateLineItemsQuantity$1(httpClient: HttpClient): UpdateLineItemsQuantitySignature;
interface UpdateLineItemsQuantitySignature {
    /**
     * Updates the quantity of one or more line items in a checkout.
     *
     * This method is only for updating the quantity of line items. To entirely remove a line item from
     * the checkout, use the Remove Line Items method.
     * To add a new line item to the checkout, use the Add to Checkout method.
     *
     * This method checks the amount of stock remaining for this line item. If the specified `quantity`
     * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
     * of remaining stock.
     * @param - Checkout ID.
     * @param - Line item info to update.
     */
    (_id: string, lineItems: NonNullablePaths<LineItemQuantityUpdate, `_id` | `quantity`, 2>[]): Promise<NonNullablePaths<UpdateLineItemsQuantityResponse, `checkout.lineItems` | `checkout.lineItems.${number}.quantity` | `checkout.lineItems.${number}.catalogReference.catalogItemId` | `checkout.lineItems.${number}.catalogReference.appId` | `checkout.lineItems.${number}.productName.original` | `checkout.lineItems.${number}.price.amount` | `checkout.lineItems.${number}.price.convertedAmount` | `checkout.lineItems.${number}.price.formattedAmount` | `checkout.lineItems.${number}.price.formattedConvertedAmount` | `checkout.lineItems.${number}.taxDetails.taxRate` | `checkout.lineItems.${number}.availability.status` | `checkout.lineItems.${number}.physicalProperties.shippable` | `checkout.lineItems.${number}.itemType.preset` | `checkout.lineItems.${number}.itemType.custom` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.frequency` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.autoRenewal` | `checkout.lineItems.${number}.subscriptionOptionInfo.subscriptionSettings.enableCustomerCancellation` | `checkout.lineItems.${number}.subscriptionOptionInfo.title.original` | `checkout.lineItems.${number}.subscriptionOptionInfo.description.original` | `checkout.lineItems.${number}.paymentOption` | `checkout.lineItems.${number}.priceDescription.original` | `checkout.lineItems.${number}.customLineItem` | `checkout.lineItems.${number}.catalogOverrideFields.paymentOption.value` | `checkout.lineItems.${number}.priceUndetermined` | `checkout.lineItems.${number}.fixedQuantity` | `checkout.lineItems.${number}.savePaymentMethod` | `checkout.lineItems.${number}.taxableAddress.addressType` | `checkout.lineItems.${number}.membersOnly` | `checkout.billingInfo.address.streetAddress.number` | `checkout.billingInfo.address.streetAddress.name` | `checkout.billingInfo.contactDetails.vatId._id` | `checkout.billingInfo.contactDetails.vatId.type` | `checkout.shippingInfo.selectedCarrierServiceOption.code` | `checkout.shippingInfo.selectedCarrierServiceOption.title` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `checkout.shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges` | `checkout.shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `checkout.shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `checkout.shippingInfo.region._id` | `checkout.shippingInfo.region.name` | `checkout.shippingInfo.carrierServiceOptions` | `checkout.shippingInfo.carrierServiceOptions.${number}.carrierId` | `checkout.buyerInfo.visitorId` | `checkout.buyerInfo.memberId` | `checkout.conversionCurrency` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.code` | `checkout.calculationErrors.generalShippingCalculationError.applicationError.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `checkout.calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `checkout.calculationErrors.carrierErrors.errors` | `checkout.calculationErrors.carrierErrors.errors.${number}.carrierId` | `checkout.calculationErrors.orderValidationErrors` | `checkout.giftCard._id` | `checkout.giftCard.obfuscatedCode` | `checkout.giftCard.appId` | `checkout.appliedDiscounts` | `checkout.appliedDiscounts.${number}.coupon._id` | `checkout.appliedDiscounts.${number}.coupon.code` | `checkout.appliedDiscounts.${number}.coupon.name` | `checkout.appliedDiscounts.${number}.discountRule._id` | `checkout.appliedDiscounts.${number}.discountRule.name.original` | `checkout.appliedDiscounts.${number}.discountType` | `checkout.customFields` | `checkout.customFields.${number}.title` | `checkout.weightUnit` | `checkout.taxSummary.calculationDetails.manualRateReason` | `checkout.taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `checkout.taxSummary.calculationDetails.rateType` | `checkout.currency` | `checkout.channelType` | `checkout.siteLanguage` | `checkout.buyerLanguage` | `checkout.completed` | `checkout.taxIncludedInPrice` | `checkout.createdBy.userId` | `checkout.createdBy.memberId` | `checkout.createdBy.visitorId` | `checkout.createdBy.appId` | `checkout.membershipOptions.eligibleMemberships` | `checkout.membershipOptions.eligibleMemberships.${number}._id` | `checkout.membershipOptions.eligibleMemberships.${number}.appId` | `checkout.membershipOptions.eligibleMemberships.${number}.name.original` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.total` | `checkout.membershipOptions.eligibleMemberships.${number}.credits.remaining` | `checkout.membershipOptions.invalidMemberships` | `checkout.membershipOptions.invalidMemberships.${number}.reason` | `checkout.membershipOptions.selectedMemberships.memberships` | `checkout.membershipOptions.selectedMemberships.memberships.${number}._id` | `checkout.membershipOptions.selectedMemberships.memberships.${number}.appId` | `checkout.additionalFees` | `checkout.additionalFees.${number}.name` | `checkout.additionalFees.${number}.source` | `checkout.violations` | `checkout.violations.${number}.severity` | `checkout.violations.${number}.target.other.name` | `checkout.violations.${number}.target.lineItem.name` | `checkout.customSettings.lockGiftCard` | `checkout.customSettings.lockCouponCode` | `checkout.customSettings.disabledPolicyAgreementCheckbox` | `checkout.customSettings.disabledManualPayment` | `checkout.customContentReference.appId` | `checkout.customContentReference.componentId` | `checkout.externalReference.appId` | `checkout.paymentCurrency`, 8>>;
}
declare const onCheckoutCompleted$1: EventDefinition<CheckoutCompletedEnvelope, "wix.ecom.v1.checkout_completed">;
declare const onCheckoutCreated$1: EventDefinition<CheckoutCreatedEnvelope, "wix.ecom.v1.checkout_created">;
declare const onCheckoutDeleted$1: EventDefinition<CheckoutDeletedEnvelope, "wix.ecom.v1.checkout_deleted">;
declare const onCheckoutUpdated$1: EventDefinition<CheckoutUpdatedEnvelope, "wix.ecom.v1.checkout_updated">;

declare const createCheckout: MaybeContext<BuildRESTFunction<typeof createCheckout$1> & typeof createCheckout$1>;
declare const getCheckout: MaybeContext<BuildRESTFunction<typeof getCheckout$1> & typeof getCheckout$1>;
declare const getCheckoutByCartId: MaybeContext<BuildRESTFunction<typeof getCheckoutByCartId$1> & typeof getCheckoutByCartId$1>;
declare const getCheckoutUrl: MaybeContext<BuildRESTFunction<typeof getCheckoutUrl$1> & typeof getCheckoutUrl$1>;
declare const updateCheckout: MaybeContext<BuildRESTFunction<typeof updateCheckout$1> & typeof updateCheckout$1>;
declare const removeCoupon: MaybeContext<BuildRESTFunction<typeof removeCoupon$1> & typeof removeCoupon$1>;
declare const removeGiftCard: MaybeContext<BuildRESTFunction<typeof removeGiftCard$1> & typeof removeGiftCard$1>;
declare const removeOverrideCheckoutUrl: MaybeContext<BuildRESTFunction<typeof removeOverrideCheckoutUrl$1> & typeof removeOverrideCheckoutUrl$1>;
declare const addToCheckout: MaybeContext<BuildRESTFunction<typeof addToCheckout$1> & typeof addToCheckout$1>;
declare const removeLineItems: MaybeContext<BuildRESTFunction<typeof removeLineItems$1> & typeof removeLineItems$1>;
declare const createOrder: MaybeContext<BuildRESTFunction<typeof createOrder$1> & typeof createOrder$1>;
declare const markCheckoutAsCompletedAndRedirectToUrl: MaybeContext<BuildRESTFunction<typeof markCheckoutAsCompletedAndRedirectToUrl$1> & typeof markCheckoutAsCompletedAndRedirectToUrl$1>;
declare const markCheckoutAsCompleted: MaybeContext<BuildRESTFunction<typeof markCheckoutAsCompleted$1> & typeof markCheckoutAsCompleted$1>;
declare const updateLineItemsQuantity: MaybeContext<BuildRESTFunction<typeof updateLineItemsQuantity$1> & typeof updateLineItemsQuantity$1>;
/**
 * Triggered when an order created from this checkout is successfully paid for or when a checkout is marked as completed.
 */
declare const onCheckoutCompleted: BuildEventDefinition<typeof onCheckoutCompleted$1> & typeof onCheckoutCompleted$1;
/**
 * Triggered when a checkout is created.
 */
declare const onCheckoutCreated: BuildEventDefinition<typeof onCheckoutCreated$1> & typeof onCheckoutCreated$1;
/**
 * Triggered when a checkout is deleted.
 */
declare const onCheckoutDeleted: BuildEventDefinition<typeof onCheckoutDeleted$1> & typeof onCheckoutDeleted$1;
/**
 * Triggered when a checkout is updated.
 */
declare const onCheckoutUpdated: BuildEventDefinition<typeof onCheckoutUpdated$1> & typeof onCheckoutUpdated$1;

export { AddToCheckoutApplicationErrors, AddToCheckoutOptions, AddToCheckoutResponse, Checkout, CheckoutCompletedEnvelope, CheckoutCreatedEnvelope, CheckoutDeletedEnvelope, CheckoutUpdatedEnvelope, CreateCheckoutApplicationErrors, CreateCheckoutOptions, CreateOrderApplicationErrors, CreateOrderOptions, CreateOrderResponse, GetCheckoutByCartIdResponse, GetCheckoutURLResponse, LineItemQuantityUpdate, MarkCheckoutAsCompletedAndRedirectToUrlApplicationErrors, RawHttpResponse, RemoveCouponResponse, RemoveGiftCardResponse, RemoveLineItemsResponse, RemoveOverrideCheckoutUrlResponse, UpdateCheckout, UpdateCheckoutApplicationErrors, UpdateCheckoutOptions, UpdateLineItemsQuantityResponse, addToCheckout, createCheckout, createOrder, getCheckout, getCheckoutByCartId, getCheckoutUrl, markCheckoutAsCompleted, markCheckoutAsCompletedAndRedirectToUrl, onCheckoutCompleted, onCheckoutCreated, onCheckoutDeleted, onCheckoutUpdated, removeCoupon, removeGiftCard, removeLineItems, removeOverrideCheckoutUrl, updateCheckout, updateLineItemsQuantity };
