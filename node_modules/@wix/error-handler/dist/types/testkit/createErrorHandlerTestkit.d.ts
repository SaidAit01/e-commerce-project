/// <reference types="jest" />
/// <reference types="node" />
import { Environment } from '@wix/fe-essentials/core';
import { EventEmitter } from 'events';
import { ErrorHandlerEssentials, PlatformShowError } from '@wix/error-handler-core/types';
import { TranslateAsync } from '../services/translations';
import { ErrorHandlerHttpClientMock } from './ErrorHandlerHttpClientMock';
import { RenderResult } from '@testing-library/react';
import { ErrorHandlerSdkHttpClient } from './SdkHttpClient';
export interface CreateErrorHandlerTestkitOptions {
    environment?: Partial<ErrorHandlerEssentials['environment']> & Partial<Environment>;
    biDefaultsOverrides?: ErrorHandlerEssentials['biDefaultsOverrides'];
    experiments?: {
        bag: Record<string, string>;
        async?: boolean;
    };
    translations?: {
        pause?: boolean;
    };
    showError?: PlatformShowError | 'wds';
}
export declare function createErrorHandlerTestkit(options?: CreateErrorHandlerTestkitOptions): {
    context: import("@wix/fe-essentials-standalone/testkit").TestContext;
    essentials: import("@wix/fe-essentials/core").Essentials;
    errorHandler: import("..").ErrorHandler;
    showError: PlatformShowError | jest.Mock<any, any>;
    events: EventEmitter<[never]>;
    t: TranslateAsync;
    onlineManager: {
        onLine: boolean;
    };
    httpClient: ErrorHandlerHttpClientMock;
    webWindow: {
        location: {
            reload: () => void;
            readonly href: string;
        };
        open: () => void;
    };
    state: {
        renderResult: RenderResult<typeof import("@testing-library/dom/types/queries"), HTMLElement> | null;
    };
    sdkHttpClient: ErrorHandlerSdkHttpClient;
};
//# sourceMappingURL=createErrorHandlerTestkit.d.ts.map