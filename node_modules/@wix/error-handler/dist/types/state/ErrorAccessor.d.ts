import { ErrorDetails, ErrorHandlerError, MinimalHttpError, ErrorHandlerState } from '@wix/error-handler-core/types';
export interface ErrorAccessorParams {
    readonly error: unknown;
}
export declare class ErrorAccessor {
    readonly inputError: unknown;
    _error?: Error | null;
    _httpError?: MinimalHttpError | null;
    _errorDetails?: ErrorDetails | null;
    constructor(params: ErrorAccessorParams);
    get error(): (Error & ErrorHandlerError) | null;
    /**
     * The message of the JS error, for example: `Network Error`
     */
    get exceptionMessage(): string | undefined;
    /**
     * Error object from the http client, including the http response
     */
    get httpError(): MinimalHttpError | null;
    get errorHandlerState(): ErrorHandlerState | null;
    /**
     * errno symbolic name** like `ENETUNREACH`, Not http status code
     * This code is how the browser represents the error
     */
    get clientCode(): string | undefined;
    /**
     * The http response of the error
     */
    get errorResponse(): {
        data?: {} | null | undefined;
        status?: number | undefined;
    } | undefined;
    /**
     * The http status code of the http response, numeric value (e.g. 404)
     */
    get statusCode(): number | undefined;
    /**
     * The data (JSON) of the http response
     */
    get errorData(): {} | null | undefined;
    /**
     * The details of the error, if available
     */
    get errorDetails(): ErrorDetails | null;
    get errorMessage(): string | undefined;
    get applicationError(): import("@wix/error-handler-core/types").ApplicationError<string, Record<string, any>> | undefined;
    get validationError(): import("@wix/error-handler-core/types").ValidationError | undefined;
}
//# sourceMappingURL=ErrorAccessor.d.ts.map