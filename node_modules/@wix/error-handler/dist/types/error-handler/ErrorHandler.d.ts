import type { IErrorHandler } from '@wix/fe-essentials/http-client';
import { ApplicationError, ErrorCodesMap, ErrorCodesMapConditionalEnforcement, ErrorHandlerAPI, ErrorHandlerEssentials, HandleErrorOptions, OnlineManager, PlatformShowError, ResolvedError, ShowErrorProps } from '@wix/error-handler-core/types';
import { ErrorAccessor } from '../state/ErrorAccessor';
import { TranslationsState } from '../state/TranslationsState';
import { ErrorResolution } from '../state/ErrorResolution';
import { CommonErrorsMapState } from '../state/CommonErrorsMapState';
import { ErrorHandlerV2 } from './ErrorHandlerV2';
export interface ErrorHandlerParams extends ErrorHandlerEssentials {
    readonly showError?: PlatformShowError;
    readonly onlineManager?: OnlineManager;
    readonly webWindow?: typeof window;
}
export declare class ErrorHandler implements IErrorHandler, ErrorHandlerAPI {
    readonly environment: {
        artifactId: string;
        fullArtifactId?: string | undefined;
        version?: string | null | undefined;
    };
    readonly biDefaultsOverrides: {
        hostingEnvironment?: string | undefined;
        app_id?: string | undefined;
    } | undefined;
    readonly biLogger: import("@wix/error-handler-core/types").BiLogger;
    readonly errorMonitor: import("@wix/error-handler-core/types").ErrorMonitor;
    readonly experiments: import("@wix/error-handler-core/types").Experiments | undefined;
    readonly platformShowError: PlatformShowError | undefined;
    readonly translations: TranslationsState;
    readonly commonErrorsMapState: CommonErrorsMapState;
    readonly onlineManager: OnlineManager;
    readonly webWindow?: Partial<typeof window>;
    _skipWaitTranslations?: boolean;
    v2: ErrorHandlerV2;
    constructor(params: ErrorHandlerParams);
    private _setErrorHandlerSessionId;
    private _setErrorHandlerResolvedError;
    _setErrorHandlerErrorCodesMap(errorAccessor: ErrorAccessor, options?: {
        errorCodesMap?: ErrorCodesMap;
    }): void;
    private _isErrorHandlerDisabled;
    handleError: (error: unknown, options?: HandleErrorOptions) => void;
    _resolveError(errorAccessor: ErrorAccessor, options?: {
        errorCodesMap?: ErrorCodesMap;
    }): ErrorResolution | undefined;
    withErrorHandler: <T>(fn: () => Promise<T>, options: {
        errorCodesMap: ErrorCodesMapConditionalEnforcement<T>;
    }) => Promise<T>;
    getResolvedError: <TApplicationError extends ApplicationError<string, Record<string, any>> = ApplicationError<string, Record<string, any>>>(error: unknown) => ResolvedError<TApplicationError>;
    reportRetryAttempt: (error: unknown) => void;
    showError: (error: unknown, props?: Partial<ShowErrorProps> | null) => void;
    toJSON(): {};
}
//# sourceMappingURL=ErrorHandler.d.ts.map