/// <reference types="node" />
import type { EventEmitter } from 'events';
export type Arguments<T> = [T] extends [(...args: infer U) => any] ? U : [T] extends [void] ? [] : [T];
interface TypedEventEmitter<Events> {
    addListener<E extends keyof Events>(event: E, listener: Events[E]): this;
    on<E extends keyof Events>(event: E, listener: Events[E]): this;
    once<E extends keyof Events>(event: E, listener: Events[E]): this;
    off<E extends keyof Events>(event: E, listener: Events[E]): this;
    removeAllListeners<E extends keyof Events>(event?: E): this;
    removeListener<E extends keyof Events>(event: E, listener: Events[E]): this;
    emit<E extends keyof Events>(event: E, ...args: Arguments<Events[E]>): boolean;
    listeners<E extends keyof Events>(event: E): Events[E][];
}
export type TypedEmitter<Events> = Omit<EventEmitter, keyof TypedEventEmitter<Events>> & TypedEventEmitter<Events>;
export {};
//# sourceMappingURL=typedEmitter.d.ts.map