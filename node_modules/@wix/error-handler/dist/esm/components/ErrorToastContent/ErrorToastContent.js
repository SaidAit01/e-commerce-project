import { Box, CloseButton, CopyClipboard, Popover, Text, TextButton } from '@wix/design-system';
import { DuplicateSmall, InfoCircleSmall } from '@wix/wix-ui-icons-common';
import React, { memo, useEffect, useState } from 'react';
const PopoverContent = /*#__PURE__*/memo(function PopoverContent(props) {
  const {
    requestId,
    errorHandler
  } = props;
  const {
    translations: {
      translate: t
    }
  } = errorHandler;
  return /*#__PURE__*/React.createElement(Box, {
    direction: "vertical",
    gap: "SP2"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Text, {
    dataHook: "info-description",
    size: "small",
    skin: "standard",
    weight: "thin"
  }, t('errorHandler.requestID.tooltip.description'))), /*#__PURE__*/React.createElement(Box, {
    marginTop: 2
  }, /*#__PURE__*/React.createElement(CopyClipboard, {
    value: requestId
  }, _ref => {
    let {
      isCopied,
      copyToClipboard
    } = _ref;
    return /*#__PURE__*/React.createElement(TextButton, {
      prefixIcon: /*#__PURE__*/React.createElement(DuplicateSmall, null),
      size: "small",
      onClick: () => {
        copyToClipboard();
      }
    }, isCopied ? t('errorHandler.requestID.tooltip.cta.copied-success') : t('errorHandler.requestID.tooltip.cta'));
  })));
});
const RequestInfo = /*#__PURE__*/memo(function RequestInfo(props) {
  const {
    errorHandler,
    requestId,
    shown,
    setShown
  } = props;
  return /*#__PURE__*/React.createElement(Box, {
    gap: 1,
    dataHook: "request-info"
  }, /*#__PURE__*/React.createElement(Text, {
    dataHook: "info-request-id",
    size: "small",
    weight: "thin",
    light: true,
    secondary: true
  }, `Request ID: ${requestId}`), /*#__PURE__*/React.createElement(Popover, {
    showArrow: true,
    animate: true,
    placement: "auto",
    shown: shown,
    onMouseEnter: () => setShown(true),
    onMouseLeave: () => setShown(false),
    appendTo: "parent",
    dataHook: "info-popover"
  }, /*#__PURE__*/React.createElement(Popover.Element, null, /*#__PURE__*/React.createElement(TextButton, {
    onClick: () => setShown(true),
    as: "button"
  }, /*#__PURE__*/React.createElement(InfoCircleSmall, {
    fill: "var(--wsr-color-D40, #868aa5)"
  }))), /*#__PURE__*/React.createElement(Popover.Content, null, /*#__PURE__*/React.createElement(Box, {
    width: "350px",
    position: "relative",
    padding: "SP5"
  }, /*#__PURE__*/React.createElement(Box, {
    position: "absolute",
    top: "6px",
    right: "12px"
  }, /*#__PURE__*/React.createElement(CloseButton, {
    size: "medium",
    onClick: () => setShown(false),
    skin: "dark"
  })), /*#__PURE__*/React.createElement(PopoverContent, {
    errorHandler: errorHandler,
    requestId: requestId
  })))));
});
export function ErrorToastContent(props) {
  const {
    dataHook,
    message,
    requestId,
    errorHandler
  } = props;
  const {
    translations
  } = errorHandler;
  const [shown, setShown] = useState(false);
  const [ready, setReady] = useState(translations._ready);
  useEffect(() => {
    if (ready) {
      return;
    }
    translations.getInitPromise().then(() => {
      setReady(true);
    });
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    dataHook: dataHook,
    direction: "vertical"
  }, message, requestId && ready && /*#__PURE__*/React.createElement(RequestInfo, {
    errorHandler: errorHandler,
    requestId: requestId,
    shown: shown,
    setShown: setShown
  }));
}
//# sourceMappingURL=ErrorToastContent.js.map