import { testkit } from '@wix/fe-essentials-standalone/testkit';
import { EventEmitter } from 'events';
import { createErrorHandlerFromEssentials } from '../essentials/createErrorHandlerFromEssentials';
import { initI18n } from '@wix/fe-essentials/i18n';
import { TranslationsState } from '../state/TranslationsState';
import { createChildEssentials } from './createChildEssentials';
import { ErrorHandlerHttpClientMock } from './ErrorHandlerHttpClientMock';
import { showErrorWds } from './showErrorWds';
import { ErrorHandlerSdkHttpClient } from './SdkHttpClient';
import { httpClient as originalSdkHttpClient } from '@wix/essentials';
function isExperiments(experiments) {
  return experiments && experiments.experiments;
}
export function createErrorHandlerTestkit(options) {
  if (options === void 0) {
    options = {};
  }
  const context = testkit.getTestContext({
    environment: {
      ...options.environment
    }
  });
  const essentials = context.createChildEssentials({});
  const essentialsTestkit = testkit.essentialsTestkit;
  const state = {
    renderResult: null
  };
  const showError = options.showError === 'wds' ? props => {
    state.renderResult = showErrorWds({
      ...props,
      errorHandler
    });
  } : options.showError ?? jest.fn();
  const events = new EventEmitter();
  Object.assign(essentials, {
    createChildEssentials: createChildEssentials({
      essentialsTestkit,
      options,
      context,
      events
    })
  });
  const experimentsOptions = options.experiments;
  const onlineManager = {
    onLine: true
  };
  const webWindow = {
    location: {
      reload: () => {},
      get href() {
        return window.location.href;
      }
    },
    open: () => {}
  };
  const errorHandler = createErrorHandlerFromEssentials(essentials, {
    environment: {
      artifactId: 'error-handler',
      ...options.environment
    },
    showError,
    webWindow: webWindow,
    biDefaultsOverrides: options.biDefaultsOverrides,
    onlineManager,
    createExperiments: experimentsOptions ? () => {
      const {
        experiments
      } = essentials.createChildEssentials({
        experiments: {
          bag: experimentsOptions.async ? {} : experimentsOptions.bag
        }
      });
      if (experimentsOptions.async) {
        new Promise(resolve => events.once('experiments-ready', resolve)).then(() => {
          if (isExperiments(experiments)) {
            Object.assign(experiments.experiments, experimentsOptions.bag);
          }
        });
      }
      return experiments;
    } : undefined
  });
  errorHandler._skipWaitTranslations = true;
  const translations = new TranslationsState({
    createI18n: i18nOptions => initI18n({
      ...i18nOptions,
      locale: essentials.environment.language
    })
  });
  const t = async (key, params) => (await translations.getTranslateFn())(key, params);
  const httpClient = new ErrorHandlerHttpClientMock(essentials.httpClient, errorHandler);
  const sdkHttpClient = new ErrorHandlerSdkHttpClient(originalSdkHttpClient, errorHandler.v2);
  return {
    context,
    essentials,
    errorHandler,
    showError,
    events,
    t,
    onlineManager,
    httpClient,
    webWindow,
    state,
    sdkHttpClient
  };
}
//# sourceMappingURL=createErrorHandlerTestkit.js.map