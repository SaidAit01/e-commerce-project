import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { reportErrorBi } from './reportErrorBi';
import { createErrorResolution } from './createErrorResolution';
import { createBiLoggerWithDefaults } from '../util/createBiLoggerWithDefaults';
import { ErrorAccessor } from '../state/ErrorAccessor';
import { TranslationsState } from '../state/TranslationsState';
import { reportErrorResolutionBi } from './reportErrorResolutionBi';
import { v4 as uuid } from 'uuid';
import { reportGetResolvedErrorBi } from './reportGetResolvedErrorBi';
import { reportShowErrorBi } from './reportShowErrorBi';
import { CommonErrorsMapState } from '../state/CommonErrorsMapState';
import { fallbackMessage } from '../fallbackMessage';
import { reportErrorRetryBi } from './reportErrorRetryBi';
import { ErrorHandlerV2 } from './ErrorHandlerV2';
import { dedupeRequestId } from '../util/dedupeRequestId';
export class ErrorHandler {
  constructor(params) {
    var _this = this;
    _defineProperty(this, "environment", void 0);
    _defineProperty(this, "biDefaultsOverrides", void 0);
    _defineProperty(this, "biLogger", void 0);
    _defineProperty(this, "errorMonitor", void 0);
    _defineProperty(this, "experiments", void 0);
    _defineProperty(this, "platformShowError", void 0);
    _defineProperty(this, "translations", void 0);
    _defineProperty(this, "commonErrorsMapState", void 0);
    _defineProperty(this, "onlineManager", void 0);
    _defineProperty(this, "webWindow", void 0);
    _defineProperty(this, "_skipWaitTranslations", void 0);
    _defineProperty(this, "v2", void 0);
    _defineProperty(this, "handleError", function (error, options) {
      if (options === void 0) {
        options = {};
      }
      if (_this._isErrorHandlerDisabled()) {
        return;
      }
      const {
        errorMonitor
      } = _this;
      try {
        const errorAccessor = new ErrorAccessor({
          error
        });
        _this._setErrorHandlerSessionId(errorAccessor);
        reportErrorBi(_this, {
          errorAccessor,
          requestOptions: options.requestOptions
        });
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
      }
    });
    _defineProperty(this, "withErrorHandler", async (fn, options) => {
      try {
        return await fn();
      } catch (error) {
        const errorAccessor = new ErrorAccessor({
          error
        });
        this._setErrorHandlerErrorCodesMap(errorAccessor, options);
        if (process.env.NODE_ENV === 'test' && !this._skipWaitTranslations) {
          await this.commonErrorsMapState.getInitPromise();
        }
        throw error;
      }
    });
    _defineProperty(this, "getResolvedError", error => {
      const {
        errorMonitor
      } = this;
      try {
        const errorAccessor = new ErrorAccessor({
          error
        });
        const {
          applicationError,
          validationError,
          httpError,
          errorHandlerState
        } = errorAccessor;
        const errorResolution = this._resolveError(errorAccessor);
        const resolvedError = errorHandlerState == null ? void 0 : errorHandlerState.resolvedError;
        const message = (resolvedError == null ? void 0 : resolvedError.message) ?? fallbackMessage;
        reportGetResolvedErrorBi(this, {
          message,
          action: resolvedError == null ? void 0 : resolvedError.action,
          errorAccessor,
          errorResolution
        });
        return {
          message,
          action: resolvedError == null ? void 0 : resolvedError.action,
          validationError,
          applicationError: applicationError,
          httpError,
          requestId: dedupeRequestId(httpError == null ? void 0 : httpError.requestId)
        };
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
        throw e;
      }
    });
    _defineProperty(this, "reportRetryAttempt", error => {
      const {
        errorMonitor
      } = this;
      try {
        const errorAccessor = new ErrorAccessor({
          error
        });
        reportErrorRetryBi(this, {
          errorAccessor
        });
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
      }
    });
    _defineProperty(this, "showError", (error, props) => {
      const {
        platformShowError,
        errorMonitor
      } = this;
      if (!platformShowError) {
        return;
      }
      try {
        var _errorAccessor$httpEr;
        const errorAccessor = new ErrorAccessor({
          error
        });
        const {
          errorHandlerState
        } = errorAccessor;
        this._resolveError(errorAccessor);
        const resolvedError = errorHandlerState == null ? void 0 : errorHandlerState.resolvedError;
        const showErrorProps = {
          ...resolvedError,
          ...props
        };
        const message = (props == null ? void 0 : props.message) ?? (resolvedError == null ? void 0 : resolvedError.message) ?? fallbackMessage;
        const action = (props == null ? void 0 : props.action) ?? (resolvedError == null ? void 0 : resolvedError.action);
        reportShowErrorBi(this, {
          message,
          action,
          errorAccessor
        });
        platformShowError({
          ...showErrorProps,
          requestId: dedupeRequestId((_errorAccessor$httpEr = errorAccessor.httpError) == null ? void 0 : _errorAccessor$httpEr.requestId),
          message,
          action: action != null && action.onClick ? {
            text: action.text,
            onClick: action.onClick
          } : undefined
        });
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
      }
    });
    this.environment = params.environment;
    this.biDefaultsOverrides = params.biDefaultsOverrides;
    this.biLogger = createBiLoggerWithDefaults(params);
    this.errorMonitor = params.createErrorMonitor({
      dsn: 'https://831e1d96e7944c6aae0c9ed9d6babd35@sentry.wixpress.com/5896'
    });
    this.experiments = params.createExperiments == null ? void 0 : params.createExperiments({
      scopes: ['error-handler']
    });
    this.platformShowError = params.showError;
    this.translations = new TranslationsState(params);
    this.onlineManager = params.onlineManager ?? (typeof navigator !== 'undefined' ? navigator : {
      onLine: true
    });
    this.webWindow = params.webWindow ?? (typeof window !== 'undefined' ? window : undefined);
    this.commonErrorsMapState = new CommonErrorsMapState(this);
    this.v2 = new ErrorHandlerV2(this);
  }
  _setErrorHandlerSessionId(errorAccessor) {
    const {
      errorHandlerState
    } = errorAccessor;
    if (!errorHandlerState) {
      return;
    }
    errorHandlerState.sessionId = uuid();
  }
  _setErrorHandlerResolvedError(errorAccessor, errorResolution) {
    const {
      errorHandlerState
    } = errorAccessor;
    if (!errorHandlerState) {
      return;
    }
    errorHandlerState.resolvedError = errorResolution.errorToShow;
  }
  _setErrorHandlerErrorCodesMap(errorAccessor, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      errorCodesMap
    } = options;
    reportErrorResolutionBi(this, {
      errorAccessor,
      errorCodesMap
    });
    const {
      errorHandlerState
    } = errorAccessor;
    if (!errorHandlerState) {
      return;
    }
    errorHandlerState.errorCodesMap = errorCodesMap;
  }
  _isErrorHandlerDisabled() {
    const {
      experiments
    } = this;
    return experiments != null && !experiments.enabled('specs.os.EnableErrorHandlerInEditor');
  }
  _resolveError(errorAccessor, options) {
    var _errorAccessor$errorH;
    if (options === void 0) {
      options = {};
    }
    if (this._isErrorHandlerDisabled()) {
      return;
    }
    const errorCodesMap = options.errorCodesMap ?? ((_errorAccessor$errorH = errorAccessor.errorHandlerState) == null ? void 0 : _errorAccessor$errorH.errorCodesMap);
    const errorResolution = createErrorResolution(this, {
      errorAccessor,
      errorCodesMap
    });
    this._setErrorHandlerResolvedError(errorAccessor, errorResolution);
    return errorResolution;
  }
  toJSON() {
    return {};
  }
}
//# sourceMappingURL=ErrorHandler.js.map