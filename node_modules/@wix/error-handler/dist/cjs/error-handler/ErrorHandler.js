"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.ErrorHandler = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reportErrorBi = require("./reportErrorBi");
var _createErrorResolution = require("./createErrorResolution");
var _createBiLoggerWithDefaults = require("../util/createBiLoggerWithDefaults");
var _ErrorAccessor = require("../state/ErrorAccessor");
var _TranslationsState = require("../state/TranslationsState");
var _reportErrorResolutionBi = require("./reportErrorResolutionBi");
var _uuid = require("uuid");
var _reportGetResolvedErrorBi = require("./reportGetResolvedErrorBi");
var _reportShowErrorBi = require("./reportShowErrorBi");
var _CommonErrorsMapState = require("../state/CommonErrorsMapState");
var _fallbackMessage = require("../fallbackMessage");
var _reportErrorRetryBi = require("./reportErrorRetryBi");
var _ErrorHandlerV = require("./ErrorHandlerV2");
var _dedupeRequestId = require("../util/dedupeRequestId");
class ErrorHandler {
  constructor(params) {
    (0, _defineProperty2.default)(this, "environment", void 0);
    (0, _defineProperty2.default)(this, "biDefaultsOverrides", void 0);
    (0, _defineProperty2.default)(this, "biLogger", void 0);
    (0, _defineProperty2.default)(this, "errorMonitor", void 0);
    (0, _defineProperty2.default)(this, "experiments", void 0);
    (0, _defineProperty2.default)(this, "platformShowError", void 0);
    (0, _defineProperty2.default)(this, "translations", void 0);
    (0, _defineProperty2.default)(this, "commonErrorsMapState", void 0);
    (0, _defineProperty2.default)(this, "onlineManager", void 0);
    (0, _defineProperty2.default)(this, "webWindow", void 0);
    (0, _defineProperty2.default)(this, "_skipWaitTranslations", void 0);
    (0, _defineProperty2.default)(this, "v2", void 0);
    (0, _defineProperty2.default)(this, "handleError", (error, options = {}) => {
      if (this._isErrorHandlerDisabled()) {
        return;
      }
      const {
        errorMonitor
      } = this;
      try {
        const errorAccessor = new _ErrorAccessor.ErrorAccessor({
          error
        });
        this._setErrorHandlerSessionId(errorAccessor);
        (0, _reportErrorBi.reportErrorBi)(this, {
          errorAccessor,
          requestOptions: options.requestOptions
        });
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
      }
    });
    (0, _defineProperty2.default)(this, "withErrorHandler", async (fn, options) => {
      try {
        return await fn();
      } catch (error) {
        const errorAccessor = new _ErrorAccessor.ErrorAccessor({
          error
        });
        this._setErrorHandlerErrorCodesMap(errorAccessor, options);
        if (process.env.NODE_ENV === 'test' && !this._skipWaitTranslations) {
          await this.commonErrorsMapState.getInitPromise();
        }
        throw error;
      }
    });
    (0, _defineProperty2.default)(this, "getResolvedError", error => {
      const {
        errorMonitor
      } = this;
      try {
        const errorAccessor = new _ErrorAccessor.ErrorAccessor({
          error
        });
        const {
          applicationError,
          validationError,
          httpError,
          errorHandlerState
        } = errorAccessor;
        const errorResolution = this._resolveError(errorAccessor);
        const resolvedError = errorHandlerState == null ? void 0 : errorHandlerState.resolvedError;
        const message = (resolvedError == null ? void 0 : resolvedError.message) ?? _fallbackMessage.fallbackMessage;
        (0, _reportGetResolvedErrorBi.reportGetResolvedErrorBi)(this, {
          message,
          action: resolvedError == null ? void 0 : resolvedError.action,
          errorAccessor,
          errorResolution
        });
        return {
          message,
          action: resolvedError == null ? void 0 : resolvedError.action,
          validationError,
          applicationError: applicationError,
          httpError,
          requestId: (0, _dedupeRequestId.dedupeRequestId)(httpError == null ? void 0 : httpError.requestId)
        };
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
        throw e;
      }
    });
    (0, _defineProperty2.default)(this, "reportRetryAttempt", error => {
      const {
        errorMonitor
      } = this;
      try {
        const errorAccessor = new _ErrorAccessor.ErrorAccessor({
          error
        });
        (0, _reportErrorRetryBi.reportErrorRetryBi)(this, {
          errorAccessor
        });
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
      }
    });
    (0, _defineProperty2.default)(this, "showError", (error, props) => {
      const {
        platformShowError,
        errorMonitor
      } = this;
      if (!platformShowError) {
        return;
      }
      try {
        var _errorAccessor$httpEr;
        const errorAccessor = new _ErrorAccessor.ErrorAccessor({
          error
        });
        const {
          errorHandlerState
        } = errorAccessor;
        this._resolveError(errorAccessor);
        const resolvedError = errorHandlerState == null ? void 0 : errorHandlerState.resolvedError;
        const showErrorProps = {
          ...resolvedError,
          ...props
        };
        const message = (props == null ? void 0 : props.message) ?? (resolvedError == null ? void 0 : resolvedError.message) ?? _fallbackMessage.fallbackMessage;
        const action = (props == null ? void 0 : props.action) ?? (resolvedError == null ? void 0 : resolvedError.action);
        (0, _reportShowErrorBi.reportShowErrorBi)(this, {
          message,
          action,
          errorAccessor
        });
        platformShowError({
          ...showErrorProps,
          requestId: (0, _dedupeRequestId.dedupeRequestId)((_errorAccessor$httpEr = errorAccessor.httpError) == null ? void 0 : _errorAccessor$httpEr.requestId),
          message,
          action: action != null && action.onClick ? {
            text: action.text,
            onClick: action.onClick
          } : undefined
        });
      } catch (e) {
        console.error(e);
        errorMonitor.captureException(e);
      }
    });
    this.environment = params.environment;
    this.biDefaultsOverrides = params.biDefaultsOverrides;
    this.biLogger = (0, _createBiLoggerWithDefaults.createBiLoggerWithDefaults)(params);
    this.errorMonitor = params.createErrorMonitor({
      dsn: 'https://831e1d96e7944c6aae0c9ed9d6babd35@sentry.wixpress.com/5896'
    });
    this.experiments = params.createExperiments == null ? void 0 : params.createExperiments({
      scopes: ['error-handler']
    });
    this.platformShowError = params.showError;
    this.translations = new _TranslationsState.TranslationsState(params);
    this.onlineManager = params.onlineManager ?? (typeof navigator !== 'undefined' ? navigator : {
      onLine: true
    });
    this.webWindow = params.webWindow ?? (typeof window !== 'undefined' ? window : undefined);
    this.commonErrorsMapState = new _CommonErrorsMapState.CommonErrorsMapState(this);
    this.v2 = new _ErrorHandlerV.ErrorHandlerV2(this);
  }
  _setErrorHandlerSessionId(errorAccessor) {
    const {
      errorHandlerState
    } = errorAccessor;
    if (!errorHandlerState) {
      return;
    }
    errorHandlerState.sessionId = (0, _uuid.v4)();
  }
  _setErrorHandlerResolvedError(errorAccessor, errorResolution) {
    const {
      errorHandlerState
    } = errorAccessor;
    if (!errorHandlerState) {
      return;
    }
    errorHandlerState.resolvedError = errorResolution.errorToShow;
  }
  _setErrorHandlerErrorCodesMap(errorAccessor, options = {}) {
    const {
      errorCodesMap
    } = options;
    (0, _reportErrorResolutionBi.reportErrorResolutionBi)(this, {
      errorAccessor,
      errorCodesMap
    });
    const {
      errorHandlerState
    } = errorAccessor;
    if (!errorHandlerState) {
      return;
    }
    errorHandlerState.errorCodesMap = errorCodesMap;
  }
  _isErrorHandlerDisabled() {
    const {
      experiments
    } = this;
    return experiments != null && !experiments.enabled('specs.os.EnableErrorHandlerInEditor');
  }
  _resolveError(errorAccessor, options = {}) {
    var _errorAccessor$errorH;
    if (this._isErrorHandlerDisabled()) {
      return;
    }
    const errorCodesMap = options.errorCodesMap ?? ((_errorAccessor$errorH = errorAccessor.errorHandlerState) == null ? void 0 : _errorAccessor$errorH.errorCodesMap);
    const errorResolution = (0, _createErrorResolution.createErrorResolution)(this, {
      errorAccessor,
      errorCodesMap
    });
    this._setErrorHandlerResolvedError(errorAccessor, errorResolution);
    return errorResolution;
  }
  toJSON() {
    return {};
  }
}
exports.ErrorHandler = ErrorHandler;
//# sourceMappingURL=ErrorHandler.js.map