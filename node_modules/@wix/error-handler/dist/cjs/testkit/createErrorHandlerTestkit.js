"use strict";

exports.__esModule = true;
exports.createErrorHandlerTestkit = createErrorHandlerTestkit;
var _testkit = require("@wix/fe-essentials-standalone/testkit");
var _events = require("events");
var _createErrorHandlerFromEssentials = require("../essentials/createErrorHandlerFromEssentials");
var _i18n = require("@wix/fe-essentials/i18n");
var _TranslationsState = require("../state/TranslationsState");
var _createChildEssentials = require("./createChildEssentials");
var _ErrorHandlerHttpClientMock = require("./ErrorHandlerHttpClientMock");
var _showErrorWds = require("./showErrorWds");
var _SdkHttpClient = require("./SdkHttpClient");
var _essentials = require("@wix/essentials");
function isExperiments(experiments) {
  return experiments && experiments.experiments;
}
function createErrorHandlerTestkit(options = {}) {
  const context = _testkit.testkit.getTestContext({
    environment: {
      ...options.environment
    }
  });
  const essentials = context.createChildEssentials({});
  const essentialsTestkit = _testkit.testkit.essentialsTestkit;
  const state = {
    renderResult: null
  };
  const showError = options.showError === 'wds' ? props => {
    state.renderResult = (0, _showErrorWds.showErrorWds)({
      ...props,
      errorHandler
    });
  } : options.showError ?? jest.fn();
  const events = new _events.EventEmitter();
  Object.assign(essentials, {
    createChildEssentials: (0, _createChildEssentials.createChildEssentials)({
      essentialsTestkit,
      options,
      context,
      events
    })
  });
  const experimentsOptions = options.experiments;
  const onlineManager = {
    onLine: true
  };
  const webWindow = {
    location: {
      reload: () => {},
      get href() {
        return window.location.href;
      }
    },
    open: () => {}
  };
  const errorHandler = (0, _createErrorHandlerFromEssentials.createErrorHandlerFromEssentials)(essentials, {
    environment: {
      artifactId: 'error-handler',
      ...options.environment
    },
    showError,
    webWindow: webWindow,
    biDefaultsOverrides: options.biDefaultsOverrides,
    onlineManager,
    createExperiments: experimentsOptions ? () => {
      const {
        experiments
      } = essentials.createChildEssentials({
        experiments: {
          bag: experimentsOptions.async ? {} : experimentsOptions.bag
        }
      });
      if (experimentsOptions.async) {
        new Promise(resolve => events.once('experiments-ready', resolve)).then(() => {
          if (isExperiments(experiments)) {
            Object.assign(experiments.experiments, experimentsOptions.bag);
          }
        });
      }
      return experiments;
    } : undefined
  });
  errorHandler._skipWaitTranslations = true;
  const translations = new _TranslationsState.TranslationsState({
    createI18n: i18nOptions => (0, _i18n.initI18n)({
      ...i18nOptions,
      locale: essentials.environment.language
    })
  });
  const t = async (key, params) => (await translations.getTranslateFn())(key, params);
  const httpClient = new _ErrorHandlerHttpClientMock.ErrorHandlerHttpClientMock(essentials.httpClient, errorHandler);
  const sdkHttpClient = new _SdkHttpClient.ErrorHandlerSdkHttpClient(_essentials.httpClient, errorHandler.v2);
  return {
    context,
    essentials,
    errorHandler,
    showError,
    events,
    t,
    onlineManager,
    httpClient,
    webWindow,
    state,
    sdkHttpClient
  };
}
//# sourceMappingURL=createErrorHandlerTestkit.js.map