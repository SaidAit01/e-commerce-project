"use strict";

exports.__esModule = true;
exports.createMockHttpApplicationError = createMockHttpApplicationError;
exports.createMockHttpError = createMockHttpError;
exports.createMockHttpValidationError = createMockHttpValidationError;
exports.createMockNetworkError = createMockNetworkError;
var _httpClient = require("@wix/fe-essentials/http-client");
var _httpStatusCodes = require("http-status-codes");
function createMockHttpError(response, overrides) {
  var _overrides$response;
  const config = {
    ...(overrides == null ? void 0 : overrides.config)
  };
  return (0, _httpClient.createHttpError)({
    name: 'MockHttpError',
    message: response.message ?? 'MockHttpError',
    response: {
      status: response.status,
      statusText: (0, _httpStatusCodes.getReasonPhrase)(response.status),
      data: {
        message: response.message
      },
      headers: {
        'x-wix-request-id': response.requestId,
        ...(overrides == null || (_overrides$response = overrides.response) == null ? void 0 : _overrides$response.headers)
      },
      config,
      ...(overrides == null ? void 0 : overrides.response)
    },
    config,
    toJSON() {
      return this;
    },
    __CANCEL__: false,
    ...overrides
  });
}
function createMockHttpApplicationError(applicationError, response, overrides) {
  var _overrides$response2;
  const config = {
    ...(overrides == null ? void 0 : overrides.config)
  };
  return (0, _httpClient.createHttpError)({
    name: 'MockHttpApplicationError',
    message: response.message ?? 'MockHttpApplicationError',
    response: {
      status: response.status,
      statusText: (0, _httpStatusCodes.getReasonPhrase)(response.status),
      data: {
        message: response.message,
        details: {
          applicationError
        }
      },
      headers: {
        'x-wix-request-id': response.requestId,
        ...(overrides == null || (_overrides$response2 = overrides.response) == null ? void 0 : _overrides$response2.headers)
      },
      config,
      ...(overrides == null ? void 0 : overrides.response)
    },
    config,
    toJSON() {
      return this;
    },
    __CANCEL__: false,
    ...overrides
  });
}
function createMockHttpValidationError(validationError, response, overrides) {
  var _overrides$response3;
  const config = {
    ...(overrides == null ? void 0 : overrides.config)
  };
  return (0, _httpClient.createHttpError)({
    name: 'MockHttpValidationError',
    message: response.message ?? 'MockHttpValidationError',
    response: {
      status: response.status,
      statusText: (0, _httpStatusCodes.getReasonPhrase)(response.status),
      data: {
        message: response.message,
        details: {
          validationError
        }
      },
      headers: {
        'x-wix-request-id': response.requestId,
        ...(overrides == null || (_overrides$response3 = overrides.response) == null ? void 0 : _overrides$response3.headers)
      },
      config,
      ...(overrides == null ? void 0 : overrides.response)
    },
    config,
    toJSON() {
      return this;
    },
    __CANCEL__: false,
    ...overrides
  });
}
function createMockNetworkError(type) {
  return new Error(type);
}
//# sourceMappingURL=createMockHttpError.js.map