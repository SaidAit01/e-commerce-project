"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.ErrorAccessor = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _httpErrorDecoders = require("../util/httpErrorDecoders");
var _sdkErrorDecoders = require("../util/sdkErrorDecoders");
var _responseErrorDecoders = require("../util/responseErrorDecoders");
class ErrorAccessor {
  constructor(params) {
    (0, _defineProperty2.default)(this, "inputError", void 0);
    (0, _defineProperty2.default)(this, "_error", void 0);
    (0, _defineProperty2.default)(this, "_httpError", void 0);
    (0, _defineProperty2.default)(this, "_errorDetails", void 0);
    this.inputError = params.error;
  }
  get error() {
    const {
      inputError
    } = this;
    return this._error ?? (this._error = typeof Response !== 'undefined' && inputError instanceof Response ? inputError : inputError instanceof Error ? inputError : null);
  }

  /**
   * The message of the JS error, for example: `Network Error`
   */
  get exceptionMessage() {
    var _this$error;
    return (_this$error = this.error) == null ? void 0 : _this$error.message;
  }

  /**
   * Error object from the http client, including the http response
   */
  get httpError() {
    const {
      inputError
    } = this;
    return this._httpError ?? (this._httpError = (0, _httpErrorDecoders.isHttpError)(inputError) ? inputError : typeof Response !== 'undefined' && inputError instanceof Response ? (0, _responseErrorDecoders.responseToMinimalHttpError)(inputError) : (0, _sdkErrorDecoders.isSdkError)(inputError) ? (0, _sdkErrorDecoders.sdkErrorToMinimalHttpError)(inputError) : null);
  }
  get errorHandlerState() {
    const {
      error
    } = this;
    if (!error) {
      return null;
    }
    return error._errorHandlerState ?? (error._errorHandlerState = {});
  }

  /**
   * errno symbolic name** like `ENETUNREACH`, Not http status code
   * This code is how the browser represents the error
   */
  get clientCode() {
    var _this$httpError;
    return (_this$httpError = this.httpError) == null ? void 0 : _this$httpError.code;
  }

  /**
   * The http response of the error
   */
  get errorResponse() {
    var _this$httpError2;
    return (_this$httpError2 = this.httpError) == null ? void 0 : _this$httpError2.response;
  }

  /**
   * The http status code of the http response, numeric value (e.g. 404)
   */
  get statusCode() {
    var _this$errorResponse;
    return (_this$errorResponse = this.errorResponse) == null ? void 0 : _this$errorResponse.status;
  }

  /**
   * The data (JSON) of the http response
   */
  get errorData() {
    var _this$errorResponse2;
    return (_this$errorResponse2 = this.errorResponse) == null ? void 0 : _this$errorResponse2.data;
  }

  /**
   * The details of the error, if available
   */
  get errorDetails() {
    const {
      errorData
    } = this;
    return this._errorDetails ?? (this._errorDetails = (0, _httpErrorDecoders.responseDataHasDetails)(errorData) ? errorData.details : null);
  }
  get errorMessage() {
    const {
      errorData
    } = this;
    return (0, _httpErrorDecoders.responseDataHasMessage)(errorData) ? errorData.message : undefined;
  }
  get applicationError() {
    var _this$errorDetails;
    return (_this$errorDetails = this.errorDetails) == null ? void 0 : _this$errorDetails.applicationError;
  }
  get validationError() {
    var _this$errorDetails2;
    return (_this$errorDetails2 = this.errorDetails) == null ? void 0 : _this$errorDetails2.validationError;
  }
}
exports.ErrorAccessor = ErrorAccessor;
//# sourceMappingURL=ErrorAccessor.js.map