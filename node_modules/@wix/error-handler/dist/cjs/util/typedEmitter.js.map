{"version":3,"names":[],"sources":["../../../src/util/typedEmitter.ts"],"sourcesContent":["import type { EventEmitter } from 'events';\n\nexport type Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\ninterface TypedEventEmitter<Events> {\n  addListener<E extends keyof Events>(event: E, listener: Events[E]): this;\n  on<E extends keyof Events>(event: E, listener: Events[E]): this;\n  once<E extends keyof Events>(event: E, listener: Events[E]): this;\n  off<E extends keyof Events>(event: E, listener: Events[E]): this;\n  removeAllListeners<E extends keyof Events>(event?: E): this;\n  removeListener<E extends keyof Events>(event: E, listener: Events[E]): this;\n  emit<E extends keyof Events>(\n    event: E,\n    ...args: Arguments<Events[E]>\n  ): boolean;\n  listeners<E extends keyof Events>(event: E): Events[E][];\n}\n\nexport type TypedEmitter<Events> = Omit<\n  EventEmitter,\n  keyof TypedEventEmitter<Events>\n> &\n  TypedEventEmitter<Events>;\n"],"mappings":"","ignoreList":[]}