"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  createTaxRegion: () => createTaxRegion4,
  deleteTaxRegion: () => deleteTaxRegion4,
  getTaxRegion: () => getTaxRegion4,
  onTaxRegionCreated: () => onTaxRegionCreated2,
  onTaxRegionDeleted: () => onTaxRegionDeleted2,
  onTaxRegionUpdated: () => onTaxRegionUpdated2,
  queryTaxRegions: () => queryTaxRegions4,
  updateTaxRegion: () => updateTaxRegion4
});
module.exports = __toCommonJS(index_exports);

// src/billing-v1-tax-region-tax-regions.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/billing-v1-tax-region-tax-regions.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/billing-v1-tax-region-tax-regions.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixBillingV1TaxRegionsServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/billing/v1/tax-regions",
        destPath: "/v1/tax-regions"
      },
      {
        srcPath: "/billing/v1/bulk/tax-regions",
        destPath: "/v1/bulk/tax-regions"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/billing/v1/tax-regions",
        destPath: "/v1/tax-regions"
      },
      {
        srcPath: "/billing/v1/bulk/tax-regions",
        destPath: "/v1/bulk/tax-regions"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tax-regions";
function createTaxRegion(payload) {
  function __createTaxRegion({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxRegion.createdDate" },
          { path: "taxRegion.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxRegionsService.CreateTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegion.createdDate" },
            { path: "taxRegion.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createTaxRegion;
}
function getTaxRegion(payload) {
  function __getTaxRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "GET",
      methodFqn: "wix.billing.v1.TaxRegionsService.GetTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/{taxRegionId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegion.createdDate" },
            { path: "taxRegion.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTaxRegion;
}
function updateTaxRegion(payload) {
  function __updateTaxRegion({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxRegion.createdDate" },
          { path: "taxRegion.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "PATCH",
      methodFqn: "wix.billing.v1.TaxRegionsService.UpdateTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/{taxRegion.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegion.createdDate" },
            { path: "taxRegion.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateTaxRegion;
}
function deleteTaxRegion(payload) {
  function __deleteTaxRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "DELETE",
      methodFqn: "wix.billing.v1.TaxRegionsService.DeleteTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/{taxRegionId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteTaxRegion;
}
function queryTaxRegions(payload) {
  function __queryTaxRegions({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxRegionsService.QueryTaxRegions",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegions.createdDate" },
            { path: "taxRegions.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryTaxRegions;
}

// src/billing-v1-tax-region-tax-regions.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createTaxRegion2(taxRegion) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxRegion
  });
  const reqOpts = createTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxRegion;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxRegion: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxRegion"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTaxRegion2(taxRegionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxRegionId
  });
  const reqOpts = getTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxRegion;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxRegionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxRegionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateTaxRegion2(_id, taxRegion) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxRegion: { ...taxRegion, id: _id }
  });
  const reqOpts = updateTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxRegion;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { taxRegion: "$[1]" },
        explicitPathsToArguments: { "taxRegion.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "taxRegion"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteTaxRegion2(taxRegionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxRegionId
  });
  const reqOpts = deleteTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxRegionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxRegionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryTaxRegions2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryTaxRegions(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.taxRegions,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}

// src/billing-v1-tax-region-tax-regions.public.ts
function createTaxRegion3(httpClient) {
  return (taxRegion) => createTaxRegion2(
    taxRegion,
    // @ts-ignore
    { httpClient }
  );
}
function getTaxRegion3(httpClient) {
  return (taxRegionId) => getTaxRegion2(
    taxRegionId,
    // @ts-ignore
    { httpClient }
  );
}
function updateTaxRegion3(httpClient) {
  return (_id, taxRegion) => updateTaxRegion2(
    _id,
    taxRegion,
    // @ts-ignore
    { httpClient }
  );
}
function deleteTaxRegion3(httpClient) {
  return (taxRegionId) => deleteTaxRegion2(
    taxRegionId,
    // @ts-ignore
    { httpClient }
  );
}
function queryTaxRegions3(httpClient) {
  return () => queryTaxRegions2(
    // @ts-ignore
    { httpClient }
  );
}
var onTaxRegionCreated = (0, import_sdk_types.EventDefinition)(
  "wix.billing.v1.tax_region_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onTaxRegionDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.billing.v1.tax_region_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onTaxRegionUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.billing.v1.tax_region_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/billing-v1-tax-region-tax-regions.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createTaxRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createTaxRegion3);
var getTaxRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getTaxRegion3);
var updateTaxRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateTaxRegion3);
var deleteTaxRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteTaxRegion3);
var queryTaxRegions4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryTaxRegions3);
var onTaxRegionCreated2 = (0, import_event_definition_modules.createEventModule)(onTaxRegionCreated);
var onTaxRegionDeleted2 = (0, import_event_definition_modules.createEventModule)(onTaxRegionDeleted);
var onTaxRegionUpdated2 = (0, import_event_definition_modules.createEventModule)(onTaxRegionUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SortOrder,
  WebhookIdentityType,
  createTaxRegion,
  deleteTaxRegion,
  getTaxRegion,
  onTaxRegionCreated,
  onTaxRegionDeleted,
  onTaxRegionUpdated,
  queryTaxRegions,
  updateTaxRegion
});
//# sourceMappingURL=index.js.map