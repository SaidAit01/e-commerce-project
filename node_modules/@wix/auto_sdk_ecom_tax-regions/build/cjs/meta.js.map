{"version":3,"sources":["../../meta.ts","../../src/billing-v1-tax-region-tax-regions.http.ts","../../src/billing-v1-tax-region-tax-regions.meta.ts"],"sourcesContent":["export * from './src/billing-v1-tax-region-tax-regions.meta.js';\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixBillingV1TaxRegionsServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/billing/v1/tax-regions',\n        destPath: '/v1/tax-regions',\n      },\n      {\n        srcPath: '/billing/v1/bulk/tax-regions',\n        destPath: '/v1/bulk/tax-regions',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/billing/v1/tax-regions',\n        destPath: '/v1/tax-regions',\n      },\n      {\n        srcPath: '/billing/v1/bulk/tax-regions',\n        destPath: '/v1/bulk/tax-regions',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_tax-regions';\n\n/**\n * Creates a tax region.\n *\n * Tax regions require a tax calculator `appId`. Call List Tax Calculators to retrieve a list of available calculators for a site.\n *\n * Wix uses tax regions to calculate tax.\n * <!-- Subdivisions are supported for the following countries: `AU`, `BR`, `CA`, `FR`, `DE`, `IN`, `IT`, `MX`, `NL`, `ES`, `AE`, `GB`, `US` -->\n */\nexport function createTaxRegion(payload: object): RequestOptionsFactory<any> {\n  function __createTaxRegion({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'taxRegion.createdDate' },\n          { path: 'taxRegion.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.billing.v1.tax_region',\n      method: 'POST' as any,\n      methodFqn: 'wix.billing.v1.TaxRegionsService.CreateTaxRegion',\n      packageName: PACKAGE_NAME,\n      url: resolveWixBillingV1TaxRegionsServiceUrl({\n        protoPath: '/v1/tax-regions',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'taxRegion.createdDate' },\n              { path: 'taxRegion.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createTaxRegion;\n}\n\n/** Retrieves a tax region. */\nexport function getTaxRegion(payload: object): RequestOptionsFactory<any> {\n  function __getTaxRegion({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.billing.v1.tax_region',\n      method: 'GET' as any,\n      methodFqn: 'wix.billing.v1.TaxRegionsService.GetTaxRegion',\n      packageName: PACKAGE_NAME,\n      url: resolveWixBillingV1TaxRegionsServiceUrl({\n        protoPath: '/v1/tax-regions/{taxRegionId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'taxRegion.createdDate' },\n              { path: 'taxRegion.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getTaxRegion;\n}\n\n/**\n * Updates a tax region.\n *\n * Each time the tax region is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating the tax region.\n * This ensures you're working with the latest tax region and prevents\n * unintended overwrites.\n */\nexport function updateTaxRegion(payload: object): RequestOptionsFactory<any> {\n  function __updateTaxRegion({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'taxRegion.createdDate' },\n          { path: 'taxRegion.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.billing.v1.tax_region',\n      method: 'PATCH' as any,\n      methodFqn: 'wix.billing.v1.TaxRegionsService.UpdateTaxRegion',\n      packageName: PACKAGE_NAME,\n      url: resolveWixBillingV1TaxRegionsServiceUrl({\n        protoPath: '/v1/tax-regions/{taxRegion.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'taxRegion.createdDate' },\n              { path: 'taxRegion.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateTaxRegion;\n}\n\n/**\n * Deletes a tax region.\n *\n * When a tax region is deleted, tax is not calculated and zero tax will be returned for addresses in this region.\n */\nexport function deleteTaxRegion(payload: object): RequestOptionsFactory<any> {\n  function __deleteTaxRegion({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.billing.v1.tax_region',\n      method: 'DELETE' as any,\n      methodFqn: 'wix.billing.v1.TaxRegionsService.DeleteTaxRegion',\n      packageName: PACKAGE_NAME,\n      url: resolveWixBillingV1TaxRegionsServiceUrl({\n        protoPath: '/v1/tax-regions/{taxRegionId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteTaxRegion;\n}\n\n/**\n * Creates a query to retrieve a list of tax regions.\n *\n * The `queryTaxRegions()` function builds a query to retrieve a list of tax regions and returns a `TaxRegionsQueryBuilder` object.\n *\n * The returned object contains the query definition, which is typically used to run the query using the `find()` function.\n *\n * You can refine the query by chaining `TaxRegionsQueryBuilder` functions onto the query. `TaxRegionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxRegions()` returns.\n *\n * `queryTaxRegions()` runs with the following `TaxRegionsQueryBuilder` default that you can override:\n * + `ascending(\"_id\")`\n *\n * The functions that are chained to `queryTaxRegions()` are applied in the order they are called. For example, if you apply `ascending(\"country\")` and then `ascending(\"subdivision\")`, the results are sorted first by the `\"country\"`, and then, if there are multiple results with the same `\"country\"`, the items are sorted by `\"subdivision\"`.\n *\n * The following `TaxRegionsQueryBuilder` functions are supported for the `queryTaxRegions()` function. For a full description of the tax region object, see the object returned for the `items` property in `TaxRegionsQueryResult`.\n */\nexport function queryTaxRegions(payload: object): RequestOptionsFactory<any> {\n  function __queryTaxRegions({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.billing.v1.tax_region',\n      method: 'POST' as any,\n      methodFqn: 'wix.billing.v1.TaxRegionsService.QueryTaxRegions',\n      packageName: PACKAGE_NAME,\n      url: resolveWixBillingV1TaxRegionsServiceUrl({\n        protoPath: '/v1/tax-regions/query',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'taxRegions.createdDate' },\n              { path: 'taxRegions.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __queryTaxRegions;\n}\n","import * as ambassadorWixBillingV1TaxRegion from './billing-v1-tax-region-tax-regions.http.js';\nimport * as ambassadorWixBillingV1TaxRegionTypes from './billing-v1-tax-region-tax-regions.types.js';\nimport * as ambassadorWixBillingV1TaxRegionUniversalTypes from './billing-v1-tax-region-tax-regions.universal.js';\n\nexport type __PublicMethodMetaInfo<\n  K = string,\n  M = unknown,\n  T = unknown,\n  S = unknown,\n  Q = unknown,\n  R = unknown\n> = {\n  getUrl: (context: any) => string;\n  httpMethod: K;\n  path: string;\n  pathParams: M;\n  __requestType: T;\n  __originalRequestType: S;\n  __responseType: Q;\n  __originalResponseType: R;\n};\n\nexport function createTaxRegion(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixBillingV1TaxRegionUniversalTypes.CreateTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionTypes.CreateTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionUniversalTypes.CreateTaxRegionResponse,\n  ambassadorWixBillingV1TaxRegionTypes.CreateTaxRegionResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixBillingV1TaxRegion.createTaxRegion(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/tax-regions',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function getTaxRegion(): __PublicMethodMetaInfo<\n  'GET',\n  { taxRegionId: string },\n  ambassadorWixBillingV1TaxRegionUniversalTypes.GetTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionTypes.GetTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionUniversalTypes.GetTaxRegionResponse,\n  ambassadorWixBillingV1TaxRegionTypes.GetTaxRegionResponse\n> {\n  const payload = { taxRegionId: ':taxRegionId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixBillingV1TaxRegion.getTaxRegion(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v1/tax-regions/{taxRegionId}',\n    pathParams: { taxRegionId: 'taxRegionId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updateTaxRegion(): __PublicMethodMetaInfo<\n  'PATCH',\n  { taxRegionId: string },\n  ambassadorWixBillingV1TaxRegionUniversalTypes.UpdateTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionTypes.UpdateTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionUniversalTypes.UpdateTaxRegionResponse,\n  ambassadorWixBillingV1TaxRegionTypes.UpdateTaxRegionResponse\n> {\n  const payload = { taxRegion: { id: ':taxRegionId' } } as any;\n\n  const getRequestOptions =\n    ambassadorWixBillingV1TaxRegion.updateTaxRegion(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'PATCH',\n    path: '/v1/tax-regions/{taxRegion.id}',\n    pathParams: { taxRegionId: 'taxRegionId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function deleteTaxRegion(): __PublicMethodMetaInfo<\n  'DELETE',\n  { taxRegionId: string },\n  ambassadorWixBillingV1TaxRegionUniversalTypes.DeleteTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionTypes.DeleteTaxRegionRequest,\n  ambassadorWixBillingV1TaxRegionUniversalTypes.DeleteTaxRegionResponse,\n  ambassadorWixBillingV1TaxRegionTypes.DeleteTaxRegionResponse\n> {\n  const payload = { taxRegionId: ':taxRegionId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixBillingV1TaxRegion.deleteTaxRegion(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'DELETE',\n    path: '/v1/tax-regions/{taxRegionId}',\n    pathParams: { taxRegionId: 'taxRegionId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function queryTaxRegions(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixBillingV1TaxRegionUniversalTypes.QueryTaxRegionsRequest,\n  ambassadorWixBillingV1TaxRegionTypes.QueryTaxRegionsRequest,\n  ambassadorWixBillingV1TaxRegionUniversalTypes.QueryTaxRegionsResponse,\n  ambassadorWixBillingV1TaxRegionTypes.QueryTaxRegionsResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixBillingV1TaxRegion.queryTaxRegions(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/tax-regions/query',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n"],"mappings":"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","names":["createTaxRegion","deleteTaxRegion","getTaxRegion","queryTaxRegions","updateTaxRegion","import_timestamp","import_rest_modules","payload","createTaxRegion","getTaxRegion","updateTaxRegion","deleteTaxRegion","queryTaxRegions"]}