// src/billing-v1-tax-region-tax-regions.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/billing-v1-tax-region-tax-regions.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixBillingV1TaxRegionsServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/billing/v1/tax-regions",
        destPath: "/v1/tax-regions"
      },
      {
        srcPath: "/billing/v1/bulk/tax-regions",
        destPath: "/v1/bulk/tax-regions"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/billing/v1/tax-regions",
        destPath: "/v1/tax-regions"
      },
      {
        srcPath: "/billing/v1/bulk/tax-regions",
        destPath: "/v1/bulk/tax-regions"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tax-regions";
function createTaxRegion(payload) {
  function __createTaxRegion({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxRegion.createdDate" },
          { path: "taxRegion.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxRegionsService.CreateTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegion.createdDate" },
            { path: "taxRegion.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createTaxRegion;
}
function getTaxRegion(payload) {
  function __getTaxRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "GET",
      methodFqn: "wix.billing.v1.TaxRegionsService.GetTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/{taxRegionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegion.createdDate" },
            { path: "taxRegion.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTaxRegion;
}
function updateTaxRegion(payload) {
  function __updateTaxRegion({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxRegion.createdDate" },
          { path: "taxRegion.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "PATCH",
      methodFqn: "wix.billing.v1.TaxRegionsService.UpdateTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/{taxRegion.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegion.createdDate" },
            { path: "taxRegion.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateTaxRegion;
}
function deleteTaxRegion(payload) {
  function __deleteTaxRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "DELETE",
      methodFqn: "wix.billing.v1.TaxRegionsService.DeleteTaxRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/{taxRegionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteTaxRegion;
}
function queryTaxRegions(payload) {
  function __queryTaxRegions({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_region",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxRegionsService.QueryTaxRegions",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxRegionsServiceUrl({
        protoPath: "/v1/tax-regions/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxRegions.createdDate" },
            { path: "taxRegions.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryTaxRegions;
}

// src/billing-v1-tax-region-tax-regions.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createTaxRegion2(taxRegion) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxRegion
  });
  const reqOpts = createTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxRegion;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxRegion: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxRegion"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTaxRegion2(taxRegionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxRegionId
  });
  const reqOpts = getTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxRegion;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxRegionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxRegionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateTaxRegion2(_id, taxRegion) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxRegion: { ...taxRegion, id: _id }
  });
  const reqOpts = updateTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxRegion;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { taxRegion: "$[1]" },
        explicitPathsToArguments: { "taxRegion.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "taxRegion"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteTaxRegion2(taxRegionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxRegionId
  });
  const reqOpts = deleteTaxRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxRegionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxRegionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryTaxRegions2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryTaxRegions(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.taxRegions,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
export {
  SortOrder,
  WebhookIdentityType,
  createTaxRegion2 as createTaxRegion,
  deleteTaxRegion2 as deleteTaxRegion,
  getTaxRegion2 as getTaxRegion,
  queryTaxRegions2 as queryTaxRegions,
  updateTaxRegion2 as updateTaxRegion
};
//# sourceMappingURL=index.typings.mjs.map