import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { TaxRegion, CreateTaxRegionApplicationErrors, UpdateTaxRegion, UpdateTaxRegionApplicationErrors, TaxRegionsQueryBuilder, TaxRegionCreatedEnvelope, TaxRegionDeletedEnvelope, TaxRegionUpdatedEnvelope } from './index.typings.mjs';
export { ActionEvent, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkCreateTaxRegionRequest, BulkCreateTaxRegionResponse, BulkCreateTaxRegionResult, BulkRestoreTaxRegionsRequest, BulkRestoreTaxRegionsResponse, BulkRestoreTaxRegionsResult, ConflictErrorDetails, CreateOrGetTaxRegionWithoutValidationRequest, CreateOrGetTaxRegionWithoutValidationResponse, CreateTaxRegionRequest, CreateTaxRegionResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteTaxRegionRequest, DeleteTaxRegionResponse, DeleteTaxRegionWithoutDomainEventsRequest, DeleteTaxRegionWithoutDomainEventsResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, GetTaxRegionRequest, GetTaxRegionResponse, IdentificationData, IdentificationDataIdOneOf, ItemMetadata, MessageEnvelope, QueryTaxRegionsRequest, QueryTaxRegionsResponse, RestoreInfo, SortOrder, SortOrderWithLiterals, Sorting, TaxRegionsQueryResult, UpdateTaxRegionRequest, UpdateTaxRegionResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function createTaxRegion$1(httpClient: HttpClient): CreateTaxRegionSignature;
interface CreateTaxRegionSignature {
    /**
     * Creates a tax region.
     *
     * Tax regions require a tax calculator `appId`. Call List Tax Calculators to retrieve a list of available calculators for a site.
     *
     * Wix uses tax regions to calculate tax.
     * <!-- Subdivisions are supported for the following countries: `AU`, `BR`, `CA`, `FR`, `DE`, `IN`, `IT`, `MX`, `NL`, `ES`, `AE`, `GB`, `US` -->
     * @param - Tax region to create.
     * @returns Created tax region.
     */
    (taxRegion: NonNullablePaths<TaxRegion, `appId` | `country` | `taxIncludedInPrice`, 2>): Promise<NonNullablePaths<TaxRegion, `country` | `subdivision` | `appId` | `taxIncludedInPrice`, 2> & {
        __applicationErrorsType?: CreateTaxRegionApplicationErrors;
    }>;
}
declare function getTaxRegion$1(httpClient: HttpClient): GetTaxRegionSignature;
interface GetTaxRegionSignature {
    /**
     * Retrieves a tax region.
     * @param - ID of the tax region to retrieve.
     * @returns Retrieved tax region.
     */
    (taxRegionId: string): Promise<NonNullablePaths<TaxRegion, `country` | `subdivision` | `appId` | `taxIncludedInPrice`, 2>>;
}
declare function updateTaxRegion$1(httpClient: HttpClient): UpdateTaxRegionSignature;
interface UpdateTaxRegionSignature {
    /**
     * Updates a tax region.
     *
     * Each time the tax region is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the tax region.
     * This ensures you're working with the latest tax region and prevents
     * unintended overwrites.
     * @param - Tax region ID.
     * @param - Tax region info.
     * @returns Updated tax region.
     */
    (_id: string, taxRegion: NonNullablePaths<UpdateTaxRegion, `revision`, 2>): Promise<NonNullablePaths<TaxRegion, `country` | `subdivision` | `appId` | `taxIncludedInPrice`, 2> & {
        __applicationErrorsType?: UpdateTaxRegionApplicationErrors;
    }>;
}
declare function deleteTaxRegion$1(httpClient: HttpClient): DeleteTaxRegionSignature;
interface DeleteTaxRegionSignature {
    /**
     * Deletes a tax region.
     *
     * When a tax region is deleted, tax is not calculated and zero tax will be returned for addresses in this region.
     * @param - ID of the tax region to delete.
     */
    (taxRegionId: string): Promise<void>;
}
declare function queryTaxRegions$1(httpClient: HttpClient): QueryTaxRegionsSignature;
interface QueryTaxRegionsSignature {
    /**
     * Creates a query to retrieve a list of tax regions.
     *
     * The `queryTaxRegions()` function builds a query to retrieve a list of tax regions and returns a `TaxRegionsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `TaxRegionsQueryBuilder` functions onto the query. `TaxRegionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxRegions()` returns.
     *
     * `queryTaxRegions()` runs with the following `TaxRegionsQueryBuilder` default that you can override:
     * + `ascending("_id")`
     *
     * The functions that are chained to `queryTaxRegions()` are applied in the order they are called. For example, if you apply `ascending("country")` and then `ascending("subdivision")`, the results are sorted first by the `"country"`, and then, if there are multiple results with the same `"country"`, the items are sorted by `"subdivision"`.
     *
     * The following `TaxRegionsQueryBuilder` functions are supported for the `queryTaxRegions()` function. For a full description of the tax region object, see the object returned for the `items` property in `TaxRegionsQueryResult`.
     */
    (): TaxRegionsQueryBuilder;
}
declare const onTaxRegionCreated$1: EventDefinition<TaxRegionCreatedEnvelope, "wix.billing.v1.tax_region_created">;
declare const onTaxRegionDeleted$1: EventDefinition<TaxRegionDeletedEnvelope, "wix.billing.v1.tax_region_deleted">;
declare const onTaxRegionUpdated$1: EventDefinition<TaxRegionUpdatedEnvelope, "wix.billing.v1.tax_region_updated">;

declare const createTaxRegion: MaybeContext<BuildRESTFunction<typeof createTaxRegion$1> & typeof createTaxRegion$1>;
declare const getTaxRegion: MaybeContext<BuildRESTFunction<typeof getTaxRegion$1> & typeof getTaxRegion$1>;
declare const updateTaxRegion: MaybeContext<BuildRESTFunction<typeof updateTaxRegion$1> & typeof updateTaxRegion$1>;
declare const deleteTaxRegion: MaybeContext<BuildRESTFunction<typeof deleteTaxRegion$1> & typeof deleteTaxRegion$1>;
declare const queryTaxRegions: MaybeContext<BuildRESTFunction<typeof queryTaxRegions$1> & typeof queryTaxRegions$1>;
/** */
declare const onTaxRegionCreated: BuildEventDefinition<typeof onTaxRegionCreated$1> & typeof onTaxRegionCreated$1;
/**
 * Triggered when a tax region is deleted.
 */
declare const onTaxRegionDeleted: BuildEventDefinition<typeof onTaxRegionDeleted$1> & typeof onTaxRegionDeleted$1;
/**
 * Triggered when a tax region is updated.
 */
declare const onTaxRegionUpdated: BuildEventDefinition<typeof onTaxRegionUpdated$1> & typeof onTaxRegionUpdated$1;

export { CreateTaxRegionApplicationErrors, TaxRegion, TaxRegionCreatedEnvelope, TaxRegionDeletedEnvelope, TaxRegionUpdatedEnvelope, TaxRegionsQueryBuilder, UpdateTaxRegion, UpdateTaxRegionApplicationErrors, createTaxRegion, deleteTaxRegion, getTaxRegion, onTaxRegionCreated, onTaxRegionDeleted, onTaxRegionUpdated, queryTaxRegions, updateTaxRegion };
