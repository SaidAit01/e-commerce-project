import { CreateTaxRegionRequest as CreateTaxRegionRequest$1, CreateTaxRegionResponse as CreateTaxRegionResponse$1, GetTaxRegionRequest as GetTaxRegionRequest$1, GetTaxRegionResponse as GetTaxRegionResponse$1, UpdateTaxRegionRequest as UpdateTaxRegionRequest$1, UpdateTaxRegionResponse as UpdateTaxRegionResponse$1, DeleteTaxRegionRequest as DeleteTaxRegionRequest$1, DeleteTaxRegionResponse as DeleteTaxRegionResponse$1, QueryTaxRegionsRequest as QueryTaxRegionsRequest$1, QueryTaxRegionsResponse as QueryTaxRegionsResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

/**
 * A tax region uses a location to define a specific tax treatment.
 * A location is defined by `country` and `subdivision`. The tax region also
 * dictates whether or not tax is included in the displayed price.
 */
interface TaxRegion {
    /**
     * Tax region ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * 2-letter country code in [ISO-3166 alpha-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format.
     * @format COUNTRY
     * @minLength 2
     */
    country?: string;
    /**
     * Subdivision (such as state, prefecture, or province) in [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
     * @maxLength 50
     */
    subdivision?: string;
    /**
     * The tax calculator ID to use to calculate tax for this region.
     *
     * Call List Tax Calculators to retrieve a list of available calculators for a site.
     * @format GUID
     */
    appId?: string;
    /** Whether tax is included in the price. */
    taxIncludedInPrice?: boolean;
    /**
     * Revision number, which increments by 1 each time the tax region is updated.
     * To prevent conflicting changes, the current revision must be passed when updating the tax region.
     *
     * Ignored when creating a tax region.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tax region was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the tax region was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface CreateTaxRegionRequest {
    /** Tax region to create. */
    taxRegion: TaxRegion;
}
interface CreateTaxRegionResponse {
    /** Created tax region. */
    taxRegion?: TaxRegion;
}
interface GetTaxRegionRequest {
    /**
     * ID of the tax region to retrieve.
     * @format GUID
     */
    taxRegionId: string;
}
interface GetTaxRegionResponse {
    /** Retrieved tax region. */
    taxRegion?: TaxRegion;
}
interface UpdateTaxRegionRequest {
    /** Tax region info to update. */
    taxRegion: TaxRegion;
}
interface UpdateTaxRegionResponse {
    /** Updated tax region. */
    taxRegion?: TaxRegion;
}
interface DeleteTaxRegionRequest {
    /**
     * ID of the tax region to delete.
     * @format GUID
     */
    taxRegionId: string;
}
interface DeleteTaxRegionResponse {
}
interface QueryTaxRegionsRequest {
    /** Query options. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryTaxRegionsResponse {
    /** Retrieved tax regions. */
    taxRegions?: TaxRegion[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createTaxRegion(): __PublicMethodMetaInfo<'POST', {}, CreateTaxRegionRequest$1, CreateTaxRegionRequest, CreateTaxRegionResponse$1, CreateTaxRegionResponse>;
declare function getTaxRegion(): __PublicMethodMetaInfo<'GET', {
    taxRegionId: string;
}, GetTaxRegionRequest$1, GetTaxRegionRequest, GetTaxRegionResponse$1, GetTaxRegionResponse>;
declare function updateTaxRegion(): __PublicMethodMetaInfo<'PATCH', {
    taxRegionId: string;
}, UpdateTaxRegionRequest$1, UpdateTaxRegionRequest, UpdateTaxRegionResponse$1, UpdateTaxRegionResponse>;
declare function deleteTaxRegion(): __PublicMethodMetaInfo<'DELETE', {
    taxRegionId: string;
}, DeleteTaxRegionRequest$1, DeleteTaxRegionRequest, DeleteTaxRegionResponse$1, DeleteTaxRegionResponse>;
declare function queryTaxRegions(): __PublicMethodMetaInfo<'POST', {}, QueryTaxRegionsRequest$1, QueryTaxRegionsRequest, QueryTaxRegionsResponse$1, QueryTaxRegionsResponse>;

export { type __PublicMethodMetaInfo, createTaxRegion, deleteTaxRegion, getTaxRegion, queryTaxRegions, updateTaxRegion };
