import { NonNullablePaths } from '@wix/sdk-types';

interface OrderPaymentRequest {
    /**
     * Order payment request ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Additional parameters to identify the source of the order payment request.
     * @immutable
     */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: StatusWithLiterals;
    /**
     * Order ID.
     * @format GUID
     * @immutable
     */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     * @maxLength 100
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     * @immutable
     */
    amount?: Price;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @format CURRENCY
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     * @minLength 1
     * @maxLength 100
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for.
     * @minLength 1
     * @maxLength 200
     */
    title?: string;
    /**
     * Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for.
     * @maxLength 300
     */
    description?: string | null;
    /**
     * Time and date the order payment request expires.
     * @immutable
     */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Image to display to the customer on the payment page. */
    image?: string;
}
interface Source {
    /**
     * App Def ID that created the order payment request.
     * @format GUID
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    appId?: string | null;
    /**
     * Reference to an ID from an external system, indicating the original source of the order payment request.
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    externalId?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN_STATUS' | 'UNPAID' | 'PAID' | 'EXPIRED';
interface Price {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
declare enum PaymentMethod {
    UNKNOWN_PAYMENT_METHOD = "UNKNOWN_PAYMENT_METHOD",
    /** Manual payment. */
    MANUAL = "MANUAL"
}
/** @enumType */
type PaymentMethodWithLiterals = PaymentMethod | 'UNKNOWN_PAYMENT_METHOD' | 'MANUAL';
interface ActionLinks {
    /**
     * A general navigation action link rendered as an anchor in the UI.
     * @maxSize 1
     */
    general?: ActionLink[];
    /** An action link rendered as a button in error messages in the UI. */
    error?: ActionLink;
}
interface ActionLink {
    /**
     * Label.
     * @minLength 1
     * @maxLength 100
     */
    label?: string;
    /**
     * URL.
     * @format WEB_URL
     */
    url?: string;
}
/** Triggered when the order payment request status changes to paid */
interface OrderPaymentRequestPaid {
    /** Order payment request */
    orderPaymentRequest?: OrderPaymentRequest;
}
/** Triggered when the order payment request status changes to expired */
interface OrderPaymentRequestExpired {
    /** Order payment request */
    orderPaymentRequest?: OrderPaymentRequest;
}
/** Triggered when the order payment request status changes to voided */
interface OrderPaymentRequestVoided {
    /** Order payment request */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestResponse {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
    /**
     * Order payment request URL.
     * @minLength 1
     * @maxLength 100
     */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest {
    /**
     * ID of the OrderPaymentRequest to retrieve.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface DeleteOrderPaymentRequestRequest {
    /**
     * Id of the OrderPaymentRequest to delete.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse {
}
interface QueryOrderPaymentRequestsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse {
    /**
     * List of payment requests.
     * @maxSize 1000
     */
    orderPaymentRequests?: OrderPaymentRequest[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest {
    /**
     * Order Payment Request ID.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse {
    /**
     * Order Payment Request URL.
     * @minLength 1
     * @maxLength 100
     */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface VoidOrderPaymentRequestRequest {
    /**
     * ID of the order payment request to void.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface VoidOrderPaymentRequestResponse {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
/** @docsIgnore */
type GetOrderPaymentRequestApplicationErrors = {
    code?: 'ORDER_PAYMENT_REQUEST_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type UpdateOrderPaymentRequestApplicationErrors = {
    code?: 'CANNOT_UPDATE_PAID_ORDER_PAYMENT_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CANNOT_UPDATE_EXPIRED_ORDER_PAYMENT_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CANNOT_UPDATE_VOIDED_ORDER_PAYMENT_REQUEST';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type DeleteOrderPaymentRequestApplicationErrors = {
    code?: 'CANNOT_DELETE_PAID_ORDER_PAYMENT_REQUEST';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type GetOrderPaymentRequestUrlApplicationErrors = {
    code?: 'ORDER_PAYMENT_REQUEST_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ORDER_PAYMENT_REQUEST_PAGE_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type VoidOrderPaymentRequestApplicationErrors = {
    code?: 'ORDER_PAYMENT_REQUEST_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CANNOT_VOID_PAID_ORDER_PAYMENT_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CANNOT_VOID_EXPIRED_ORDER_PAYMENT_REQUEST';
    description?: string;
    data?: Record<string, any>;
};
/**
 * Creates a order payment request.
 * @public
 * @documentationMaturity preview
 * @requiredField options.orderPaymentRequest.amount
 * @requiredField options.orderPaymentRequest.orderId
 * @requiredField options.orderPaymentRequest.title
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_CREATE
 * @applicableIdentity APP
 * @returns The created OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.CreateOrderPaymentRequest
 */
declare function createOrderPaymentRequest(options?: NonNullablePaths<CreateOrderPaymentRequestOptions, `orderPaymentRequest.amount` | `orderPaymentRequest.orderId` | `orderPaymentRequest.title`, 3>): Promise<NonNullablePaths<OrderPaymentRequest, `source.externalId` | `status` | `orderId` | `amount.amount` | `amount.formattedAmount` | `currency` | `title`, 3>>;
interface CreateOrderPaymentRequestOptions {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
/**
 * Retrieves a order payment request.
 * @param orderPaymentRequestId - ID of the OrderPaymentRequest to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @applicableIdentity APP
 * @returns The requested OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequest
 */
declare function getOrderPaymentRequest(orderPaymentRequestId: string): Promise<NonNullablePaths<OrderPaymentRequest, `source.externalId` | `status` | `orderId` | `amount.amount` | `amount.formattedAmount` | `currency` | `title`, 3> & {
    __applicationErrorsType?: GetOrderPaymentRequestApplicationErrors;
}>;
/**
 * Updates a order payment request.
 *
 * Please note that only `UNPAID` payment requests can be updated.
 * @param _id - Order payment request ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField orderPaymentRequest
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_UPDATE
 * @applicableIdentity APP
 * @returns Updated OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateOrderPaymentRequest
 */
declare function updateOrderPaymentRequest(_id: string, orderPaymentRequest: UpdateOrderPaymentRequest): Promise<NonNullablePaths<OrderPaymentRequest, `source.externalId` | `status` | `orderId` | `amount.amount` | `amount.formattedAmount` | `currency` | `title`, 3> & {
    __applicationErrorsType?: UpdateOrderPaymentRequestApplicationErrors;
}>;
interface UpdateOrderPaymentRequest {
    /**
     * Order payment request ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Additional parameters to identify the source of the order payment request.
     * @immutable
     */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: StatusWithLiterals;
    /**
     * Order ID.
     * @format GUID
     * @immutable
     */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     * @maxLength 100
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     * @immutable
     */
    amount?: Price;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @format CURRENCY
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     * @minLength 1
     * @maxLength 100
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for.
     * @minLength 1
     * @maxLength 200
     */
    title?: string;
    /**
     * Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for.
     * @maxLength 300
     */
    description?: string | null;
    /**
     * Time and date the order payment request expires.
     * @immutable
     */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Image to display to the customer on the payment page. */
    image?: string;
}
/**
 * Deletes a order payment request.
 *
 * Please note that only `UNPAID` and `VOIDED` payment requests can be deleted.
 * @param orderPaymentRequestId - Id of the OrderPaymentRequest to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_DELETE
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.DeleteOrderPaymentRequest
 */
declare function deleteOrderPaymentRequest(orderPaymentRequestId: string): Promise<void & {
    __applicationErrorsType?: DeleteOrderPaymentRequestApplicationErrors;
}>;
/**
 * Retrieves a list of Payment Requests, given the provided [paging, filtering, and sorting][1].
 *
 * Query Payment Requests runs with these defaults, which you can override:
 * - `createdDate` is sorted in DESC order
 * - `cursorPaging.limit` is 100
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
 * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.QueryOrderPaymentRequests
 */
declare function queryOrderPaymentRequests(): OrderPaymentRequestsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface OrderPaymentRequestsQueryResult extends QueryCursorResult {
    items: OrderPaymentRequest[];
    query: OrderPaymentRequestsQueryBuilder;
    next: () => Promise<OrderPaymentRequestsQueryResult>;
    prev: () => Promise<OrderPaymentRequestsQueryResult>;
}
interface OrderPaymentRequestsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'amount.amount' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'orderId' | 'orderNumber' | 'amount.amount' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'orderId' | 'orderNumber' | 'amount.amount' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'orderId' | 'orderNumber' | 'amount.amount' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'orderId' | 'orderNumber' | 'amount.amount' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description', value: string) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any[]) => OrderPaymentRequestsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: any) => OrderPaymentRequestsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'source.appId' | 'source.externalId' | 'status' | 'orderId' | 'orderNumber' | 'paymentGatewayOrderId' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate', value: boolean) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'status' | 'orderNumber' | 'amount.amount' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate'>) => OrderPaymentRequestsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'status' | 'orderNumber' | 'amount.amount' | 'title' | 'description' | 'expirationDate' | '_createdDate' | '_updatedDate'>) => OrderPaymentRequestsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => OrderPaymentRequestsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => OrderPaymentRequestsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<OrderPaymentRequestsQueryResult>;
}
/**
 * Retrieves the order payment request page URL of a specified order payment request.
 * @param orderPaymentRequestId - Order Payment Request ID.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequestURL
 */
declare function getOrderPaymentRequestUrl(orderPaymentRequestId: string): Promise<NonNullablePaths<GetOrderPaymentRequestURLResponse, `orderPaymentRequestUrl`, 2> & {
    __applicationErrorsType?: GetOrderPaymentRequestUrlApplicationErrors;
}>;
/**
 * Updates extended fields of a order payment request
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_UPDATE
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateExtendedFields
 */
declare function updateExtendedFields(_id: string, namespace: string, options: NonNullablePaths<UpdateExtendedFieldsOptions, `namespaceData`, 2>): Promise<NonNullablePaths<UpdateExtendedFieldsResponse, `orderPaymentRequest.source.externalId` | `orderPaymentRequest.status` | `orderPaymentRequest.orderId` | `orderPaymentRequest.amount.amount` | `orderPaymentRequest.amount.formattedAmount` | `orderPaymentRequest.currency` | `orderPaymentRequest.title`, 4>>;
interface UpdateExtendedFieldsOptions {
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}

export { type ActionEvent, type ActionLink, type ActionLinks, type CreateOrderPaymentRequestOptions, type CreateOrderPaymentRequestRequest, type CreateOrderPaymentRequestResponse, type CursorPaging, type CursorPagingMetadata, type CursorQuery, type CursorQueryPagingMethodOneOf, type Cursors, type DeleteOrderPaymentRequestApplicationErrors, type DeleteOrderPaymentRequestRequest, type DeleteOrderPaymentRequestResponse, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type ExtendedFields, type GetOrderPaymentRequestApplicationErrors, type GetOrderPaymentRequestRequest, type GetOrderPaymentRequestResponse, type GetOrderPaymentRequestURLRequest, type GetOrderPaymentRequestURLResponse, type GetOrderPaymentRequestUrlApplicationErrors, type IdentificationData, type IdentificationDataIdOneOf, type MessageEnvelope, type OrderPaymentRequest, type OrderPaymentRequestExpired, type OrderPaymentRequestPaid, type OrderPaymentRequestVoided, type OrderPaymentRequestsQueryBuilder, type OrderPaymentRequestsQueryResult, PaymentMethod, type PaymentMethodWithLiterals, type Price, type QueryOrderPaymentRequestsRequest, type QueryOrderPaymentRequestsResponse, type RestoreInfo, SortOrder, type SortOrderWithLiterals, type Sorting, type Source, Status, type StatusWithLiterals, type UpdateExtendedFieldsOptions, type UpdateExtendedFieldsRequest, type UpdateExtendedFieldsResponse, type UpdateOrderPaymentRequest, type UpdateOrderPaymentRequestApplicationErrors, type UpdateOrderPaymentRequestRequest, type UpdateOrderPaymentRequestResponse, type VoidOrderPaymentRequestApplicationErrors, type VoidOrderPaymentRequestRequest, type VoidOrderPaymentRequestResponse, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, createOrderPaymentRequest, deleteOrderPaymentRequest, getOrderPaymentRequest, getOrderPaymentRequestUrl, queryOrderPaymentRequests, updateExtendedFields, updateOrderPaymentRequest };
