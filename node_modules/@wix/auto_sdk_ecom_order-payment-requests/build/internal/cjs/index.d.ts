import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { CreateOrderPaymentRequestOptions, OrderPaymentRequest, GetOrderPaymentRequestApplicationErrors, UpdateOrderPaymentRequest, UpdateOrderPaymentRequestApplicationErrors, DeleteOrderPaymentRequestApplicationErrors, OrderPaymentRequestsQueryBuilder, GetOrderPaymentRequestURLResponse, GetOrderPaymentRequestUrlApplicationErrors, UpdateExtendedFieldsOptions, UpdateExtendedFieldsResponse, VoidOrderPaymentRequestApplicationErrors } from './index.typings.js';
export { ActionEvent, ActionLink, ActionLinks, CreateOrderPaymentRequestRequest, CreateOrderPaymentRequestResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteOrderPaymentRequestRequest, DeleteOrderPaymentRequestResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ExtendedFields, GetOrderPaymentRequestRequest, GetOrderPaymentRequestResponse, GetOrderPaymentRequestURLRequest, IdentificationData, IdentificationDataIdOneOf, MessageEnvelope, OrderPaymentRequestExpired, OrderPaymentRequestPaid, OrderPaymentRequestVoided, OrderPaymentRequestsQueryResult, PaymentMethod, PaymentMethodWithLiterals, Price, QueryOrderPaymentRequestsRequest, QueryOrderPaymentRequestsResponse, RestoreInfo, SortOrder, SortOrderWithLiterals, Sorting, Source, Status, StatusWithLiterals, UpdateExtendedFieldsRequest, UpdateOrderPaymentRequestRequest, UpdateOrderPaymentRequestResponse, VoidOrderPaymentRequestRequest, VoidOrderPaymentRequestResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function createOrderPaymentRequest$1(httpClient: HttpClient): CreateOrderPaymentRequestSignature;
interface CreateOrderPaymentRequestSignature {
    /**
     * Creates a order payment request.
     * @returns The created OrderPaymentRequest.
     */
    (options?: NonNullablePaths<CreateOrderPaymentRequestOptions, `orderPaymentRequest.amount` | `orderPaymentRequest.orderId` | `orderPaymentRequest.title`, 3>): Promise<NonNullablePaths<OrderPaymentRequest, `source.externalId` | `status` | `orderId` | `amount.amount` | `amount.formattedAmount` | `currency` | `title`, 3>>;
}
declare function getOrderPaymentRequest$1(httpClient: HttpClient): GetOrderPaymentRequestSignature;
interface GetOrderPaymentRequestSignature {
    /**
     * Retrieves a order payment request.
     * @param - ID of the OrderPaymentRequest to retrieve.
     * @returns The requested OrderPaymentRequest.
     */
    (orderPaymentRequestId: string): Promise<NonNullablePaths<OrderPaymentRequest, `source.externalId` | `status` | `orderId` | `amount.amount` | `amount.formattedAmount` | `currency` | `title`, 3> & {
        __applicationErrorsType?: GetOrderPaymentRequestApplicationErrors;
    }>;
}
declare function updateOrderPaymentRequest$1(httpClient: HttpClient): UpdateOrderPaymentRequestSignature;
interface UpdateOrderPaymentRequestSignature {
    /**
     * Updates a order payment request.
     *
     * Please note that only `UNPAID` payment requests can be updated.
     * @param - Order payment request ID.
     * @returns Updated OrderPaymentRequest.
     */
    (_id: string, orderPaymentRequest: UpdateOrderPaymentRequest): Promise<NonNullablePaths<OrderPaymentRequest, `source.externalId` | `status` | `orderId` | `amount.amount` | `amount.formattedAmount` | `currency` | `title`, 3> & {
        __applicationErrorsType?: UpdateOrderPaymentRequestApplicationErrors;
    }>;
}
declare function deleteOrderPaymentRequest$1(httpClient: HttpClient): DeleteOrderPaymentRequestSignature;
interface DeleteOrderPaymentRequestSignature {
    /**
     * Deletes a order payment request.
     *
     * Please note that only `UNPAID` and `VOIDED` payment requests can be deleted.
     * @param - Id of the OrderPaymentRequest to delete.
     */
    (orderPaymentRequestId: string): Promise<void & {
        __applicationErrorsType?: DeleteOrderPaymentRequestApplicationErrors;
    }>;
}
declare function queryOrderPaymentRequests$1(httpClient: HttpClient): QueryOrderPaymentRequestsSignature;
interface QueryOrderPaymentRequestsSignature {
    /**
     * Retrieves a list of Payment Requests, given the provided [paging, filtering, and sorting][1].
     *
     * Query Payment Requests runs with these defaults, which you can override:
     * - `createdDate` is sorted in DESC order
     * - `cursorPaging.limit` is 100
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (): OrderPaymentRequestsQueryBuilder;
}
declare function getOrderPaymentRequestUrl$1(httpClient: HttpClient): GetOrderPaymentRequestUrlSignature;
interface GetOrderPaymentRequestUrlSignature {
    /**
     * Retrieves the order payment request page URL of a specified order payment request.
     * @param - Order Payment Request ID.
     */
    (orderPaymentRequestId: string): Promise<NonNullablePaths<GetOrderPaymentRequestURLResponse, `orderPaymentRequestUrl`, 2> & {
        __applicationErrorsType?: GetOrderPaymentRequestUrlApplicationErrors;
    }>;
}
declare function updateExtendedFields$1(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates extended fields of a order payment request
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: NonNullablePaths<UpdateExtendedFieldsOptions, `namespaceData`, 2>): Promise<NonNullablePaths<UpdateExtendedFieldsResponse, `orderPaymentRequest.source.externalId` | `orderPaymentRequest.status` | `orderPaymentRequest.orderId` | `orderPaymentRequest.amount.amount` | `orderPaymentRequest.amount.formattedAmount` | `orderPaymentRequest.currency` | `orderPaymentRequest.title`, 4>>;
}
/** @internal */
declare function voidOrderPaymentRequest$1(httpClient: HttpClient): VoidOrderPaymentRequestSignature;
interface VoidOrderPaymentRequestSignature {
    /**
     * Voids the given order payment request
     *
     * Please note that only `UNPAID` payment requests can be voided.
     * @param - ID of the order payment request to void.
     */
    (orderPaymentRequestId: string): Promise<void & {
        __applicationErrorsType?: VoidOrderPaymentRequestApplicationErrors;
    }>;
}

declare const createOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof createOrderPaymentRequest$1> & typeof createOrderPaymentRequest$1>;
declare const getOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof getOrderPaymentRequest$1> & typeof getOrderPaymentRequest$1>;
declare const updateOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof updateOrderPaymentRequest$1> & typeof updateOrderPaymentRequest$1>;
declare const deleteOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof deleteOrderPaymentRequest$1> & typeof deleteOrderPaymentRequest$1>;
declare const queryOrderPaymentRequests: MaybeContext<BuildRESTFunction<typeof queryOrderPaymentRequests$1> & typeof queryOrderPaymentRequests$1>;
declare const getOrderPaymentRequestUrl: MaybeContext<BuildRESTFunction<typeof getOrderPaymentRequestUrl$1> & typeof getOrderPaymentRequestUrl$1>;
declare const updateExtendedFields: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$1> & typeof updateExtendedFields$1>;
/** @internal */
declare const voidOrderPaymentRequest: MaybeContext<BuildRESTFunction<typeof voidOrderPaymentRequest$1> & typeof voidOrderPaymentRequest$1>;

export { CreateOrderPaymentRequestOptions, DeleteOrderPaymentRequestApplicationErrors, GetOrderPaymentRequestApplicationErrors, GetOrderPaymentRequestURLResponse, GetOrderPaymentRequestUrlApplicationErrors, OrderPaymentRequest, OrderPaymentRequestsQueryBuilder, UpdateExtendedFieldsOptions, UpdateExtendedFieldsResponse, UpdateOrderPaymentRequest, UpdateOrderPaymentRequestApplicationErrors, VoidOrderPaymentRequestApplicationErrors, createOrderPaymentRequest, deleteOrderPaymentRequest, getOrderPaymentRequest, getOrderPaymentRequestUrl, queryOrderPaymentRequests, updateExtendedFields, updateOrderPaymentRequest, voidOrderPaymentRequest };
