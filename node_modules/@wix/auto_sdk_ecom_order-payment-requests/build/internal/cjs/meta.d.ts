import { CreateOrderPaymentRequestRequest as CreateOrderPaymentRequestRequest$1, CreateOrderPaymentRequestResponse as CreateOrderPaymentRequestResponse$1, GetOrderPaymentRequestRequest as GetOrderPaymentRequestRequest$1, GetOrderPaymentRequestResponse as GetOrderPaymentRequestResponse$1, UpdateOrderPaymentRequestRequest as UpdateOrderPaymentRequestRequest$1, UpdateOrderPaymentRequestResponse as UpdateOrderPaymentRequestResponse$1, DeleteOrderPaymentRequestRequest as DeleteOrderPaymentRequestRequest$1, DeleteOrderPaymentRequestResponse as DeleteOrderPaymentRequestResponse$1, QueryOrderPaymentRequestsRequest as QueryOrderPaymentRequestsRequest$1, QueryOrderPaymentRequestsResponse as QueryOrderPaymentRequestsResponse$1, GetOrderPaymentRequestURLRequest as GetOrderPaymentRequestURLRequest$1, GetOrderPaymentRequestURLResponse as GetOrderPaymentRequestURLResponse$1, UpdateExtendedFieldsRequest as UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse as UpdateExtendedFieldsResponse$1, VoidOrderPaymentRequestRequest as VoidOrderPaymentRequestRequest$1, VoidOrderPaymentRequestResponse as VoidOrderPaymentRequestResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

interface OrderPaymentRequest {
    /**
     * Order payment request ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Additional parameters to identify the source of the order payment request.
     * @immutable
     */
    source?: Source;
    /**
     * status.
     * @readonly
     */
    status?: StatusWithLiterals;
    /**
     * Order ID.
     * @format GUID
     * @immutable
     */
    orderId?: string;
    /**
     * Order number.
     * @readonly
     * @maxLength 100
     */
    orderNumber?: string | null;
    /**
     * Amount to collect.
     * > **Note:** The amount can only be set once.
     * @immutable
     */
    amount?: Price;
    /**
     * Currency code. The value will always match the currency used in the order.
     * @format CURRENCY
     * @readonly
     */
    currency?: string;
    /**
     * Payment gateway order id which is associated with this payment request
     * @readonly
     * @minLength 1
     * @maxLength 100
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for.
     * @minLength 1
     * @maxLength 200
     */
    title?: string;
    /**
     * Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for.
     * @maxLength 300
     */
    description?: string | null;
    /**
     * Time and date the order payment request expires.
     * @immutable
     */
    expirationDate?: Date | null;
    /** [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls. */
    extendedFields?: ExtendedFields;
    /**
     * Date and time the OrderPaymentRequest was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the OrderPaymentRequest was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Image to display to the customer on the payment page. */
    image?: Image;
}
interface Source {
    /**
     * App Def ID that created the order payment request.
     * @format GUID
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    appId?: string | null;
    /**
     * Reference to an ID from an external system, indicating the original source of the order payment request.
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    externalId?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    UNPAID = "UNPAID",
    PAID = "PAID",
    EXPIRED = "EXPIRED"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN_STATUS' | 'UNPAID' | 'PAID' | 'EXPIRED';
interface Price {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface Image {
    /**
     * WixMedia image ID.
     * @maxLength 200
     */
    id?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /**
     * Image alt text.
     * @maxLength 200
     */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     * @maxLength 200
     */
    filename?: string | null;
}
interface CreateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be created. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface CreateOrderPaymentRequestResponse {
    /** The created OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
    /**
     * Order payment request URL.
     * @minLength 1
     * @maxLength 100
     */
    orderPaymentRequestUrl?: string;
}
interface GetOrderPaymentRequestRequest {
    /**
     * ID of the OrderPaymentRequest to retrieve.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestResponse {
    /** The requested OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestRequest {
    /** OrderPaymentRequest to be updated, may be partial. */
    orderPaymentRequest: OrderPaymentRequest;
}
interface UpdateOrderPaymentRequestResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface DeleteOrderPaymentRequestRequest {
    /**
     * Id of the OrderPaymentRequest to delete.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface DeleteOrderPaymentRequestResponse {
}
interface QueryOrderPaymentRequestsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryOrderPaymentRequestsResponse {
    /**
     * List of payment requests.
     * @maxSize 1000
     */
    orderPaymentRequests?: OrderPaymentRequest[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface GetOrderPaymentRequestURLRequest {
    /**
     * Order Payment Request ID.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface GetOrderPaymentRequestURLResponse {
    /**
     * Order Payment Request URL.
     * @minLength 1
     * @maxLength 100
     */
    orderPaymentRequestUrl?: string;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated OrderPaymentRequest. */
    orderPaymentRequest?: OrderPaymentRequest;
}
interface VoidOrderPaymentRequestRequest {
    /**
     * ID of the order payment request to void.
     * @format GUID
     */
    orderPaymentRequestId: string;
}
interface VoidOrderPaymentRequestResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createOrderPaymentRequest(): __PublicMethodMetaInfo<'POST', {}, CreateOrderPaymentRequestRequest$1, CreateOrderPaymentRequestRequest, CreateOrderPaymentRequestResponse$1, CreateOrderPaymentRequestResponse>;
declare function getOrderPaymentRequest(): __PublicMethodMetaInfo<'GET', {
    orderPaymentRequestId: string;
}, GetOrderPaymentRequestRequest$1, GetOrderPaymentRequestRequest, GetOrderPaymentRequestResponse$1, GetOrderPaymentRequestResponse>;
declare function updateOrderPaymentRequest(): __PublicMethodMetaInfo<'PATCH', {
    orderPaymentRequestId: string;
}, UpdateOrderPaymentRequestRequest$1, UpdateOrderPaymentRequestRequest, UpdateOrderPaymentRequestResponse$1, UpdateOrderPaymentRequestResponse>;
declare function deleteOrderPaymentRequest(): __PublicMethodMetaInfo<'DELETE', {
    orderPaymentRequestId: string;
}, DeleteOrderPaymentRequestRequest$1, DeleteOrderPaymentRequestRequest, DeleteOrderPaymentRequestResponse$1, DeleteOrderPaymentRequestResponse>;
declare function queryOrderPaymentRequests(): __PublicMethodMetaInfo<'POST', {}, QueryOrderPaymentRequestsRequest$1, QueryOrderPaymentRequestsRequest, QueryOrderPaymentRequestsResponse$1, QueryOrderPaymentRequestsResponse>;
declare function getOrderPaymentRequestUrl(): __PublicMethodMetaInfo<'POST', {}, GetOrderPaymentRequestURLRequest$1, GetOrderPaymentRequestURLRequest, GetOrderPaymentRequestURLResponse$1, GetOrderPaymentRequestURLResponse>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsRequest, UpdateExtendedFieldsResponse$1, UpdateExtendedFieldsResponse>;
declare function voidOrderPaymentRequest(): __PublicMethodMetaInfo<'POST', {}, VoidOrderPaymentRequestRequest$1, VoidOrderPaymentRequestRequest, VoidOrderPaymentRequestResponse$1, VoidOrderPaymentRequestResponse>;

export { type __PublicMethodMetaInfo, createOrderPaymentRequest, deleteOrderPaymentRequest, getOrderPaymentRequest, getOrderPaymentRequestUrl, queryOrderPaymentRequests, updateExtendedFields, updateOrderPaymentRequest, voidOrderPaymentRequest };
