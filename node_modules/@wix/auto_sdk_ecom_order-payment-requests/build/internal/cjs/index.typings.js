"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  PaymentMethod: () => PaymentMethod,
  SortOrder: () => SortOrder,
  Status: () => Status,
  WebhookIdentityType: () => WebhookIdentityType,
  createOrderPaymentRequest: () => createOrderPaymentRequest2,
  deleteOrderPaymentRequest: () => deleteOrderPaymentRequest2,
  getOrderPaymentRequest: () => getOrderPaymentRequest2,
  getOrderPaymentRequestUrl: () => getOrderPaymentRequestUrl2,
  queryOrderPaymentRequests: () => queryOrderPaymentRequests2,
  updateExtendedFields: () => updateExtendedFields2,
  updateOrderPaymentRequest: () => updateOrderPaymentRequest2,
  voidOrderPaymentRequest: () => voidOrderPaymentRequest2
});
module.exports = __toCommonJS(index_typings_exports);

// src/ecom-v1-order-payment-request-order-payment-requests.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-order-payment-request-order-payment-requests.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/order-payment-request",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/ecom/v1/order-payment-requests",
        destPath: "/v1/order-payment-requests"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/order-payment-requests",
        destPath: "/v1/order-payment-requests"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/order-payment-requests",
        destPath: "/v1/order-payment-requests"
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/order-payment-requests",
        destPath: "/v1/order-payment-requests"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-payment-requests";
function createOrderPaymentRequest(payload) {
  function __createOrderPaymentRequest({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "orderPaymentRequest.expirationDate" },
          { path: "orderPaymentRequest.createdDate" },
          { path: "orderPaymentRequest.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "POST",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.CreateOrderPaymentRequest",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        { protoPath: "/v1/order-payment-requests", data: serializedData, host }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderPaymentRequest.expirationDate" },
            { path: "orderPaymentRequest.createdDate" },
            { path: "orderPaymentRequest.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createOrderPaymentRequest;
}
function getOrderPaymentRequest(payload) {
  function __getOrderPaymentRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "GET",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequest",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        {
          protoPath: "/v1/order-payment-requests/{orderPaymentRequestId}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderPaymentRequest.expirationDate" },
            { path: "orderPaymentRequest.createdDate" },
            { path: "orderPaymentRequest.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrderPaymentRequest;
}
function updateOrderPaymentRequest(payload) {
  function __updateOrderPaymentRequest({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "orderPaymentRequest.expirationDate" },
          { path: "orderPaymentRequest.createdDate" },
          { path: "orderPaymentRequest.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "PATCH",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateOrderPaymentRequest",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        {
          protoPath: "/v1/order-payment-requests/{orderPaymentRequest.id}",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderPaymentRequest.expirationDate" },
            { path: "orderPaymentRequest.createdDate" },
            { path: "orderPaymentRequest.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrderPaymentRequest;
}
function deleteOrderPaymentRequest(payload) {
  function __deleteOrderPaymentRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "DELETE",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.DeleteOrderPaymentRequest",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        {
          protoPath: "/v1/order-payment-requests/{orderPaymentRequestId}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteOrderPaymentRequest;
}
function queryOrderPaymentRequests(payload) {
  function __queryOrderPaymentRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "POST",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.QueryOrderPaymentRequests",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        { protoPath: "/v1/order-payment-requests/query", data: payload, host }
      ),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderPaymentRequests.expirationDate" },
            { path: "orderPaymentRequests.createdDate" },
            { path: "orderPaymentRequests.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryOrderPaymentRequests;
}
function getOrderPaymentRequestUrl(payload) {
  function __getOrderPaymentRequestUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "POST",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequestURL",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        { protoPath: "/v1/order-payment-requests/url", data: payload, host }
      ),
      data: payload
    };
    return metadata;
  }
  return __getOrderPaymentRequestUrl;
}
function updateExtendedFields(payload) {
  function __updateExtendedFields({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "POST",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateExtendedFields",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        {
          protoPath: "/v1/order-payment-requests/{id}/update-extended-fields",
          data: payload,
          host
        }
      ),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderPaymentRequest.expirationDate" },
            { path: "orderPaymentRequest.createdDate" },
            { path: "orderPaymentRequest.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateExtendedFields;
}
function voidOrderPaymentRequest(payload) {
  function __voidOrderPaymentRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_payment_request",
      method: "POST",
      methodFqn: "wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.VoidOrderPaymentRequest",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrderPaymentRequestApiV1OrderPaymentRequestsServiceUrl(
        { protoPath: "/v1/order-payment-requests/void", data: payload, host }
      ),
      data: payload
    };
    return metadata;
  }
  return __voidOrderPaymentRequest;
}

// src/ecom-v1-order-payment-request-order-payment-requests.universal.ts
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_image2 = require("@wix/sdk-runtime/transformations/image");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  Status2["UNPAID"] = "UNPAID";
  Status2["PAID"] = "PAID";
  Status2["EXPIRED"] = "EXPIRED";
  return Status2;
})(Status || {});
var PaymentMethod = /* @__PURE__ */ ((PaymentMethod2) => {
  PaymentMethod2["UNKNOWN_PAYMENT_METHOD"] = "UNKNOWN_PAYMENT_METHOD";
  PaymentMethod2["MANUAL"] = "MANUAL";
  return PaymentMethod2;
})(PaymentMethod || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createOrderPaymentRequest2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      orderPaymentRequest: options?.orderPaymentRequest
    }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "orderPaymentRequest.image" }]
      }
    ]
  );
  const reqOpts = createOrderPaymentRequest(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "orderPaymentRequest.image" }]
        }
      ])
    )?.orderPaymentRequest;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderPaymentRequest: "$[0].orderPaymentRequest"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrderPaymentRequest2(orderPaymentRequestId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderPaymentRequestId
  });
  const reqOpts = getOrderPaymentRequest(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "orderPaymentRequest.image" }]
        }
      ])
    )?.orderPaymentRequest;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderPaymentRequestId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderPaymentRequestId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateOrderPaymentRequest2(_id, orderPaymentRequest) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      orderPaymentRequest: { ...orderPaymentRequest, id: _id }
    }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "orderPaymentRequest.image" }]
      }
    ]
  );
  const reqOpts = updateOrderPaymentRequest(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "orderPaymentRequest.image" }]
        }
      ])
    )?.orderPaymentRequest;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { orderPaymentRequest: "$[1]" },
        explicitPathsToArguments: { "orderPaymentRequest.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "orderPaymentRequest"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteOrderPaymentRequest2(orderPaymentRequestId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderPaymentRequestId
  });
  const reqOpts = deleteOrderPaymentRequest(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderPaymentRequestId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderPaymentRequestId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryOrderPaymentRequests2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryOrderPaymentRequests(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [
          {
            transformFn: import_image2.transformRESTImageToSDKImage,
            paths: [{ path: "orderPaymentRequests.image" }]
          }
        ])
      );
      return {
        items: transformedData?.orderPaymentRequests,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function getOrderPaymentRequestUrl2(orderPaymentRequestId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderPaymentRequestId
  });
  const reqOpts = getOrderPaymentRequestUrl(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderPaymentRequestId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderPaymentRequestId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateExtendedFields2(_id, namespace, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    namespace,
    namespaceData: options?.namespaceData
  });
  const reqOpts = updateExtendedFields(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "orderPaymentRequest.image" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          namespace: "$[1]",
          namespaceData: "$[2].namespaceData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "namespace", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function voidOrderPaymentRequest2(orderPaymentRequestId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderPaymentRequestId
  });
  const reqOpts = voidOrderPaymentRequest(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderPaymentRequestId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderPaymentRequestId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PaymentMethod,
  SortOrder,
  Status,
  WebhookIdentityType,
  createOrderPaymentRequest,
  deleteOrderPaymentRequest,
  getOrderPaymentRequest,
  getOrderPaymentRequestUrl,
  queryOrderPaymentRequests,
  updateExtendedFields,
  updateOrderPaymentRequest,
  voidOrderPaymentRequest
});
//# sourceMappingURL=index.typings.js.map