{"version":3,"sources":["../../../index.typings.ts","../../../src/stores-catalog-v3-ribbon-ribbons-v-3.universal.ts","../../../src/stores-catalog-v3-ribbon-ribbons-v-3.http.ts"],"sourcesContent":["export * from './src/stores-catalog-v3-ribbon-ribbons-v-3.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport { queryBuilder } from '@wix/sdk-runtime/query-builder';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, HttpResponse, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixStoresCatalogV3Ribbon from './stores-catalog-v3-ribbon-ribbons-v-3.http.js';\n// @ts-ignore\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\n/** A Ribbon is a visual element that you can assign to products to highlight them on your site. */\nexport interface Ribbon {\n  /**\n   * Ribbon ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the ribbon is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the ribbon.\n   *\n   * Ignored when creating a ribbon.\n   * @readonly\n   */\n  revision?: string | null;\n  /**\n   * Date and time the ribbon was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the ribbon was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Ribbon name.\n   * @minLength 1\n   * @maxLength 30\n   */\n  name?: string;\n  /**\n   * Number of products this ribbon is assigned to.\n   * > **Note:** Returned only when you pass `\"ASSIGNED_PRODUCT_COUNT\"` to the `fields` array in Ribbon API requests.\n   * @readonly\n   */\n  assignedProductCount?: number | null;\n}\n\nexport interface InvalidateCache extends InvalidateCacheGetByOneOf {\n  /**\n   * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  siteId?: string;\n  /** Invalidate by App */\n  app?: App;\n  /** Invalidate by page id */\n  page?: Page;\n  /** Invalidate by URI path */\n  uri?: URI;\n  /** Invalidate by file (for media files such as PDFs) */\n  file?: File;\n  /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */\n  customTag?: CustomTag;\n  /**\n   * tell us why you're invalidating the cache. You don't need to add your app name\n   * @maxLength 256\n   */\n  reason?: string | null;\n  /** Is local DS */\n  localDc?: boolean;\n  hardPurge?: boolean;\n}\n\n/** @oneof */\nexport interface InvalidateCacheGetByOneOf {\n  /**\n   * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  siteId?: string;\n  /** Invalidate by App */\n  app?: App;\n  /** Invalidate by page id */\n  page?: Page;\n  /** Invalidate by URI path */\n  uri?: URI;\n  /** Invalidate by file (for media files such as PDFs) */\n  file?: File;\n  /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */\n  customTag?: CustomTag;\n}\n\nexport interface App {\n  /**\n   * The AppDefId\n   * @minLength 1\n   */\n  appDefId?: string;\n  /**\n   * The instance Id\n   * @format GUID\n   */\n  instanceId?: string;\n}\n\nexport interface Page {\n  /**\n   * the msid the page is on\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Page ID\n   * @minLength 1\n   */\n  pageId?: string;\n}\n\nexport interface URI {\n  /**\n   * the msid the URI is on\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes\n   * @minLength 1\n   */\n  uriPath?: string;\n}\n\nexport interface File {\n  /**\n   * the msid the file is related to\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by filename (for media files such as PDFs)\n   * @minLength 1\n   * @maxLength 256\n   */\n  fileName?: string;\n}\n\nexport interface CustomTag {\n  /**\n   * the msid the tag is related to\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Tag to invalidate by\n   * @minLength 1\n   * @maxLength 256\n   */\n  tag?: string;\n}\n\nexport interface CreateRibbonRequest {\n  /** Ribbon to create. */\n  ribbon: Ribbon;\n}\n\nexport interface CreateRibbonResponse {\n  /** Created ribbon. */\n  ribbon?: Ribbon;\n}\n\nexport interface GetRibbonRequest {\n  /**\n   * Ribbon ID.\n   * @format GUID\n   */\n  ribbonId: string;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport enum RequestedFields {\n  UNKNOWN_REQUESTED_FIELD = 'UNKNOWN_REQUESTED_FIELD',\n  ASSIGNED_PRODUCT_COUNT = 'ASSIGNED_PRODUCT_COUNT',\n}\n\n/** @enumType */\nexport type RequestedFieldsWithLiterals =\n  | RequestedFields\n  | 'UNKNOWN_REQUESTED_FIELD'\n  | 'ASSIGNED_PRODUCT_COUNT';\n\nexport interface GetRibbonResponse {\n  /** Ribbon. */\n  ribbon?: Ribbon;\n}\n\nexport interface UpdateRibbonRequest {\n  /** Ribbon to update. */\n  ribbon: Ribbon;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface UpdateRibbonResponse {\n  /** Updated Ribbon. */\n  ribbon?: Ribbon;\n}\n\nexport interface DeleteRibbonRequest {\n  /**\n   * Ribbon ID.\n   * @format GUID\n   */\n  ribbonId: string;\n}\n\nexport interface DeleteRibbonResponse {}\n\nexport interface QueryRibbonsRequest {\n  /** Query options. */\n  query?: CursorQuery;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface CursorQuery extends CursorQueryPagingMethodOneOf {\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n  /**\n   * Filter object in the following format:\n   * `\"filter\" : {\n   * \"fieldName1\": \"value1\",\n   * \"fieldName2\":{\"$operator\":\"value2\"}\n   * }`\n   * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`\n   */\n  filter?: Record<string, any> | null;\n  /**\n   * Sort object in the following format:\n   * `[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`\n   * @maxSize 4\n   */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface CursorQueryPagingMethodOneOf {\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrderWithLiterals;\n}\n\nexport enum SortOrder {\n  /** Ascending order. */\n  ASC = 'ASC',\n  /** Descending order. */\n  DESC = 'DESC',\n}\n\n/** @enumType */\nexport type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface QueryRibbonsResponse {\n  /**\n   * List of ribbons.\n   * @minSize 1\n   * @maxSize 100\n   */\n  ribbons?: Ribbon[];\n  /** Details on the paged set of results returned. */\n  pagingMetadata?: CursorPagingMetadata;\n}\n\nexport interface CursorPagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Cursor strings that point to the next page, previous page, or both. */\n  cursors?: Cursors;\n  /**\n   * Whether there are more pages to retrieve following the current page.\n   *\n   * + `true`: Another page of results can be retrieved.\n   * + `false`: This is the last page.\n   */\n  hasNext?: boolean | null;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface BulkCreateRibbonsRequest {\n  /**\n   * Ribbons to create.\n   * @minSize 1\n   * @maxSize 100\n   */\n  ribbons: Ribbon[];\n  /**\n   * Whether to return the full created ribbon entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n}\n\nexport interface BulkCreateRibbonsResponse {\n  /**\n   * Ribbons created by bulk action.\n   * @maxSize 100\n   */\n  results?: V3BulkRibbonResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface V3BulkRibbonResult {\n  /** Bulk action metadata for ribbon. */\n  itemMetadata?: ItemMetadata;\n  /**\n   * Full ribbon entity.\n   *\n   * Returned only if `returnEntity: true` is passed in the request.\n   */\n  item?: Ribbon;\n}\n\nexport interface ItemMetadata {\n  /**\n   * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).\n   * @format GUID\n   */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface BulkUpdateRibbonsRequest {\n  /**\n   * List of ribbons to update.\n   * @minSize 1\n   * @maxSize 100\n   */\n  ribbons: MaskedRibbon[];\n  /**\n   * Whether to return the full updated ribbon entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface MaskedRibbon {\n  /** Ribbon to update. */\n  ribbon?: Ribbon;\n  /** Explicit list of fields to update. */\n  fieldMask?: string[];\n}\n\nexport interface BulkUpdateRibbonsResponse {\n  /**\n   * Ribbons updated by bulk action.\n   * @maxSize 100\n   */\n  results?: V3BulkRibbonResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface GetOrCreateRibbonRequest {\n  /**\n   * Ribbon name to retrieve or create.\n   * @minLength 1\n   * @maxLength 30\n   */\n  ribbonName: string;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface GetOrCreateRibbonResponse {\n  /** Ribbon. */\n  ribbon?: Ribbon;\n}\n\nexport interface BulkGetOrCreateRibbonsRequest {\n  /**\n   * Ribbon names to retrieve or create.\n   * @minLength 1\n   * @maxLength 30\n   * @minSize 1\n   * @maxSize 100\n   */\n  ribbonNames: string[];\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface BulkGetOrCreateRibbonsResponse {\n  /**\n   * Ribbons retrieved or created by bulk action.\n   * @maxSize 100\n   */\n  results?: V3BulkRibbonResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkDeleteRibbonsRequest {\n  /**\n   * IDs of ribbons to delete.\n   * @format GUID\n   * @minSize 1\n   * @maxSize 100\n   */\n  ribbonIds: string[];\n}\n\nexport interface BulkDeleteRibbonsResponse {\n  /**\n   * Ribbons deleted by bulk action.\n   * @maxSize 100\n   */\n  results?: BulkRibbonResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkRibbonResult {\n  /** Bulk action metadata for ribbon. */\n  itemMetadata?: ItemMetadata;\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface Empty {}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface RibbonCreatedEnvelope {\n  entity: Ribbon;\n  metadata: EventMetadata;\n}\n\n/** @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Read ribbons in v3 catalog\n * @permissionScopeId SCOPE.STORES.RIBBON_READ\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_READ\n * @permissionScope Manage Products\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Read Products\n * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Product write in v3 catalog\n * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE\n * @permissionScope Manage v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_WRITE\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId WIX_STORES.RIBBON_READ\n * @webhook\n * @eventType wix.stores.catalog.v3.ribbon_created\n * @slug created\n */\nexport declare function onRibbonCreated(\n  handler: (event: RibbonCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface RibbonDeletedEnvelope {\n  entity: Ribbon;\n  metadata: EventMetadata;\n}\n\n/** @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Read ribbons in v3 catalog\n * @permissionScopeId SCOPE.STORES.RIBBON_READ\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_READ\n * @permissionScope Manage Products\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Read Products\n * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Product write in v3 catalog\n * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE\n * @permissionScope Manage v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_WRITE\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId WIX_STORES.RIBBON_READ\n * @webhook\n * @eventType wix.stores.catalog.v3.ribbon_deleted\n * @slug deleted\n */\nexport declare function onRibbonDeleted(\n  handler: (event: RibbonDeletedEnvelope) => void | Promise<void>\n): void;\n\nexport interface RibbonUpdatedEnvelope {\n  entity: Ribbon;\n  metadata: EventMetadata;\n}\n\n/** @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Read ribbons in v3 catalog\n * @permissionScopeId SCOPE.STORES.RIBBON_READ\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_READ\n * @permissionScope Manage Products\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Read Products\n * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Product write in v3 catalog\n * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE\n * @permissionScope Manage v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_WRITE\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId WIX_STORES.RIBBON_READ\n * @webhook\n * @eventType wix.stores.catalog.v3.ribbon_updated\n * @slug updated\n */\nexport declare function onRibbonUpdated(\n  handler: (event: RibbonUpdatedEnvelope) => void | Promise<void>\n): void;\n\n/**\n * Creates a ribbon.\n *\n * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.\n * @param ribbon - Ribbon to create.\n * @public\n * @requiredField ribbon\n * @requiredField ribbon.name\n * @permissionId WIX_STORES.RIBBON_CREATE\n * @applicableIdentity APP\n * @returns Created ribbon.\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.CreateRibbon\n */\nexport async function createRibbon(\n  ribbon: NonNullablePaths<Ribbon, `name`, 2>\n): Promise<NonNullablePaths<Ribbon, `name`, 2>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ ribbon: ribbon });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.createRibbon(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ribbon: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbon']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a ribbon.\n * @param ribbonId - Ribbon ID.\n * @public\n * @requiredField ribbonId\n * @permissionId WIX_STORES.RIBBON_READ\n * @applicableIdentity APP\n * @returns Ribbon.\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.GetRibbon\n */\nexport async function getRibbon(\n  ribbonId: string,\n  options?: GetRibbonOptions\n): Promise<NonNullablePaths<Ribbon, `name`, 2>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbonId: ribbonId,\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.getRibbon(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ribbonId: '$[0]', fields: '$[1].fields' },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbonId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetRibbonOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Updates a ribbon.\n *\n *\n * Each time the ribbon is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating the ribbon.\n * This ensures you're working with the latest ribbon and prevents unintended overwrites.\n * @param _id - Ribbon ID.\n * @public\n * @requiredField _id\n * @requiredField ribbon\n * @requiredField ribbon.revision\n * @permissionId WIX_STORES.RIBBON_UPDATE\n * @applicableIdentity APP\n * @returns Updated Ribbon.\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.UpdateRibbon\n */\nexport async function updateRibbon(\n  _id: string,\n  ribbon: NonNullablePaths<UpdateRibbon, `revision`, 2>,\n  options?: UpdateRibbonOptions\n): Promise<NonNullablePaths<Ribbon, `name`, 2>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbon: { ...ribbon, id: _id },\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.updateRibbon(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { ribbon: '$[1]' },\n        explicitPathsToArguments: {\n          'ribbon.id': '$[0]',\n          fields: '$[2].fields',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'ribbon', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateRibbon {\n  /**\n   * Ribbon ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the ribbon is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the ribbon.\n   *\n   * Ignored when creating a ribbon.\n   * @readonly\n   */\n  revision?: string | null;\n  /**\n   * Date and time the ribbon was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the ribbon was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Ribbon name.\n   * @minLength 1\n   * @maxLength 30\n   */\n  name?: string;\n  /**\n   * Number of products this ribbon is assigned to.\n   * > **Note:** Returned only when you pass `\"ASSIGNED_PRODUCT_COUNT\"` to the `fields` array in Ribbon API requests.\n   * @readonly\n   */\n  assignedProductCount?: number | null;\n}\n\nexport interface UpdateRibbonOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Deletes a ribbon.\n *\n *\n * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.\n * @param ribbonId - Ribbon ID.\n * @public\n * @requiredField ribbonId\n * @permissionId WIX_STORES.RIBBON_DELETE\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.DeleteRibbon\n */\nexport async function deleteRibbon(ribbonId: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ ribbonId: ribbonId });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.deleteRibbon(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ribbonId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbonId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.\n * Pass supported values to the `fields` array in the request to include those fields in the response.\n *\n *\n * Query Brands runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n *\n * For field support for filters and sorting,\n * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).\n *\n * To learn about working with _Query_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),\n * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n * @public\n * @permissionId WIX_STORES.RIBBON_READ\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.QueryRibbons\n */\nexport function queryRibbons(\n  options?: QueryRibbonsOptions\n): RibbonsQueryBuilder {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  return queryBuilder<\n    Ribbon,\n    'CURSOR',\n    QueryRibbonsRequest,\n    QueryRibbonsResponse\n  >({\n    func: async (payload: QueryRibbonsRequest) => {\n      const reqOpts = ambassadorWixStoresCatalogV3Ribbon.queryRibbons({\n        ...payload,\n        ...(options ?? {}),\n      });\n\n      sideEffects?.onSiteCall?.();\n      try {\n        const result = await httpClient.request(reqOpts);\n        sideEffects?.onSuccess?.(result);\n        return result;\n      } catch (err) {\n        sideEffects?.onError?.(err);\n        throw err;\n      }\n    },\n    requestTransformer: (query: QueryRibbonsRequest['query']) => {\n      const args = [query, options] as [\n        QueryRibbonsRequest['query'],\n        QueryRibbonsOptions\n      ];\n      return renameKeysFromSDKRequestToRESTRequest({\n        ...args?.[1],\n        query: args?.[0],\n      });\n    },\n    responseTransformer: ({ data }: HttpResponse<QueryRibbonsResponse>) => {\n      const transformedData = renameKeysFromRESTResponseToSDKResponse(\n        transformPaths(data, [])\n      );\n\n      return {\n        items: transformedData?.ribbons,\n        pagingMetadata: transformedData?.pagingMetadata,\n      };\n    },\n    errorTransformer: (err: unknown) => {\n      const transformedError = sdkTransformError(err, {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { query: '$[0]' },\n        singleArgumentUnchanged: false,\n      });\n\n      throw transformedError;\n    },\n    pagingMethod: 'CURSOR',\n    transformationPaths: {},\n  });\n}\n\nexport interface QueryRibbonsOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[] | undefined;\n}\n\ninterface QueryCursorResult {\n  cursors: Cursors;\n  hasNext: () => boolean;\n  hasPrev: () => boolean;\n  length: number;\n  pageSize: number;\n}\n\nexport interface RibbonsQueryResult extends QueryCursorResult {\n  items: Ribbon[];\n  query: RibbonsQueryBuilder;\n  next: () => Promise<RibbonsQueryResult>;\n  prev: () => Promise<RibbonsQueryResult>;\n}\n\nexport interface RibbonsQueryBuilder {\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  eq: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ne: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ge: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  gt: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  le: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  lt: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `string`.\n   * @param string - String to compare against. Case-insensitive.\n   */\n  startsWith: (\n    propertyName: '_id' | 'name',\n    value: string\n  ) => RibbonsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `values`.\n   * @param values - List of values to compare against.\n   */\n  hasSome: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any[]\n  ) => RibbonsQueryBuilder;\n  in: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => RibbonsQueryBuilder;\n  exists: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: boolean\n  ) => RibbonsQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */\n  ascending: (\n    ...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>\n  ) => RibbonsQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */\n  descending: (\n    ...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>\n  ) => RibbonsQueryBuilder;\n  /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */\n  limit: (limit: number) => RibbonsQueryBuilder;\n  /** @param cursor - A pointer to specific record */\n  skipTo: (cursor: string) => RibbonsQueryBuilder;\n  find: () => Promise<RibbonsQueryResult>;\n}\n\n/**\n * Creates multiple ribbons.\n * @param ribbons - Ribbons to create.\n * @public\n * @requiredField ribbons\n * @requiredField ribbons.name\n * @permissionId WIX_STORES.RIBBON_CREATE\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkCreateRibbons\n */\nexport async function bulkCreateRibbons(\n  ribbons: NonNullablePaths<Ribbon, `name`, 2>[],\n  options?: BulkCreateRibbonsOptions\n): Promise<\n  NonNullablePaths<\n    BulkCreateRibbonsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.item.name`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbons: ribbons,\n    returnEntity: options?.returnEntity,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkCreateRibbons(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ribbons: '$[0]',\n          returnEntity: '$[1].returnEntity',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbons', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkCreateRibbonsOptions {\n  /**\n   * Whether to return the full created ribbon entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n}\n\n/**\n * Updates multiple ribbons.\n *\n * Each time a ribbon is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating a ribbon.\n * This ensures you're working with the latest ribbon and prevents unintended overwrites.\n * @param ribbons - List of ribbons to update.\n * @public\n * @requiredField ribbons\n * @requiredField ribbons.ribbon._id\n * @requiredField ribbons.ribbon.revision\n * @permissionId WIX_STORES.RIBBON_UPDATE\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkUpdateRibbons\n */\nexport async function bulkUpdateRibbons(\n  ribbons: NonNullablePaths<\n    MaskedRibbon,\n    `ribbon._id` | `ribbon.revision`,\n    3\n  >[],\n  options?: BulkUpdateRibbonsOptions\n): Promise<\n  NonNullablePaths<\n    BulkUpdateRibbonsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.item.name`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbons: ribbons,\n    returnEntity: options?.returnEntity,\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkUpdateRibbons(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ribbons: '$[0]',\n          returnEntity: '$[1].returnEntity',\n          fields: '$[1].fields',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbons', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkUpdateRibbonsOptions {\n  /**\n   * Whether to return the full updated ribbon entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.\n * @param ribbonName - Ribbon name to retrieve or create.\n * @public\n * @requiredField ribbonName\n * @permissionId WIX_STORES.RIBBON_GET_OR_CREATE\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.GetOrCreateRibbon\n */\nexport async function getOrCreateRibbon(\n  ribbonName: string,\n  options?: GetOrCreateRibbonOptions\n): Promise<NonNullablePaths<GetOrCreateRibbonResponse, `ribbon.name`, 3>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbonName: ribbonName,\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.getOrCreateRibbon(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ribbonName: '$[0]', fields: '$[1].fields' },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbonName', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetOrCreateRibbonOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.\n * @param ribbonNames - Ribbon names to retrieve or create.\n * @public\n * @requiredField ribbonNames\n * @permissionId WIX_STORES.RIBBON_GET_OR_CREATE\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkGetOrCreateRibbons\n */\nexport async function bulkGetOrCreateRibbons(\n  ribbonNames: string[],\n  options?: BulkGetOrCreateRibbonsOptions\n): Promise<\n  NonNullablePaths<\n    BulkGetOrCreateRibbonsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.item.name`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbonNames: ribbonNames,\n    fields: options?.fields,\n  });\n\n  const reqOpts =\n    ambassadorWixStoresCatalogV3Ribbon.bulkGetOrCreateRibbons(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          ribbonNames: '$[0]',\n          fields: '$[1].fields',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbonNames', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkGetOrCreateRibbonsOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Deletes multiple ribbons.\n * @param ribbonIds - IDs of ribbons to delete.\n * @public\n * @requiredField ribbonIds\n * @permissionId WIX_STORES.RIBBON_DELETE\n * @applicableIdentity APP\n * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkDeleteRibbons\n */\nexport async function bulkDeleteRibbons(\n  ribbonIds: string[]\n): Promise<\n  NonNullablePaths<\n    BulkDeleteRibbonsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    ribbonIds: ribbonIds,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkDeleteRibbons(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { ribbonIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['ribbonIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixStoresCatalogRibbonV3RibbonServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'manage._base_domain_': [\n      {\n        srcPath: '/ribbon',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/stores/v3/ribbons',\n        destPath: '/v3/ribbons',\n      },\n      {\n        srcPath: '/stores/v3/bulk/ribbons',\n        destPath: '/v3/bulk/ribbons',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/ribbon',\n        destPath: '',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/ribbon',\n        destPath: '',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/ribbon',\n        destPath: '',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/ribbon',\n        destPath: '',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/ribbon',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_stores_ribbons-v-3';\n\n/**\n * Creates a ribbon.\n *\n * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.\n */\nexport function createRibbon(payload: object): RequestOptionsFactory<any> {\n  function __createRibbon({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'ribbon.createdDate' }, { path: 'ribbon.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.CreateRibbon',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/ribbons',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ribbon.createdDate' },\n              { path: 'ribbon.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createRibbon;\n}\n\n/** Retrieves a ribbon. */\nexport function getRibbon(payload: object): RequestOptionsFactory<any> {\n  function __getRibbon({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'GET' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.GetRibbon',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/ribbons/{ribbonId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ribbon.createdDate' },\n              { path: 'ribbon.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getRibbon;\n}\n\n/**\n * Updates a ribbon.\n *\n *\n * Each time the ribbon is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating the ribbon.\n * This ensures you're working with the latest ribbon and prevents unintended overwrites.\n */\nexport function updateRibbon(payload: object): RequestOptionsFactory<any> {\n  function __updateRibbon({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'ribbon.createdDate' }, { path: 'ribbon.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'PATCH' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.UpdateRibbon',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/ribbons/{ribbon.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ribbon.createdDate' },\n              { path: 'ribbon.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateRibbon;\n}\n\n/**\n * Deletes a ribbon.\n *\n *\n * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.\n */\nexport function deleteRibbon(payload: object): RequestOptionsFactory<any> {\n  function __deleteRibbon({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'DELETE' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.DeleteRibbon',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/ribbons/{ribbonId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteRibbon;\n}\n\n/**\n * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.\n * Pass supported values to the `fields` array in the request to include those fields in the response.\n *\n *\n * Query Brands runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n *\n * For field support for filters and sorting,\n * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).\n *\n * To learn about working with _Query_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),\n * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n */\nexport function queryRibbons(payload: object): RequestOptionsFactory<any> {\n  function __queryRibbons({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.QueryRibbons',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/ribbons/query',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ribbons.createdDate' },\n              { path: 'ribbons.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __queryRibbons;\n}\n\n/** Creates multiple ribbons. */\nexport function bulkCreateRibbons(payload: object): RequestOptionsFactory<any> {\n  function __bulkCreateRibbons({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'ribbons.createdDate' },\n          { path: 'ribbons.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.BulkCreateRibbons',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/bulk/ribbons/create',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkCreateRibbons;\n}\n\n/**\n * Updates multiple ribbons.\n *\n * Each time a ribbon is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating a ribbon.\n * This ensures you're working with the latest ribbon and prevents unintended overwrites.\n */\nexport function bulkUpdateRibbons(payload: object): RequestOptionsFactory<any> {\n  function __bulkUpdateRibbons({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'ribbons.fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'ribbons.ribbon.createdDate' },\n          { path: 'ribbons.ribbon.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.BulkUpdateRibbons',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/bulk/ribbons/update',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkUpdateRibbons;\n}\n\n/** Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist. */\nexport function getOrCreateRibbon(payload: object): RequestOptionsFactory<any> {\n  function __getOrCreateRibbon({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.GetOrCreateRibbon',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/ribbons/get-or-create',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'ribbon.createdDate' },\n              { path: 'ribbon.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getOrCreateRibbon;\n}\n\n/** Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist. */\nexport function bulkGetOrCreateRibbons(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkGetOrCreateRibbons({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.stores.catalog.ribbon.v3.RibbonService.BulkGetOrCreateRibbons',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/bulk/ribbons/get-or-create',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkGetOrCreateRibbons;\n}\n\n/** Deletes multiple ribbons. */\nexport function bulkDeleteRibbons(payload: object): RequestOptionsFactory<any> {\n  function __bulkDeleteRibbons({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.ribbon',\n      method: 'POST' as any,\n      methodFqn: 'wix.stores.catalog.ribbon.v3.RibbonService.BulkDeleteRibbons',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({\n        protoPath: '/v3/bulk/ribbons/delete',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkDeleteRibbons;\n}\n"],"mappings":"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","names":["bulkCreateRibbons","bulkDeleteRibbons","bulkGetOrCreateRibbons","bulkUpdateRibbons","createRibbon","deleteRibbon","getOrCreateRibbon","getRibbon","queryRibbons","updateRibbon","import_timestamp","import_rest_modules","payload","import_transform_paths","RequestedFields","SortOrder","WebhookIdentityType","createRibbon","sdkTransformError","getRibbon","updateRibbon","deleteRibbon","queryRibbons","bulkCreateRibbons","bulkUpdateRibbons","getOrCreateRibbon","bulkGetOrCreateRibbons","bulkDeleteRibbons"]}