import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { Ribbon, GetRibbonOptions, UpdateRibbon, UpdateRibbonOptions, QueryRibbonsOptions, RibbonsQueryBuilder, BulkCreateRibbonsOptions, BulkCreateRibbonsResponse, MaskedRibbon, BulkUpdateRibbonsOptions, BulkUpdateRibbonsResponse, GetOrCreateRibbonOptions, GetOrCreateRibbonResponse, BulkGetOrCreateRibbonsOptions, BulkGetOrCreateRibbonsResponse, BulkDeleteRibbonsResponse, RibbonCreatedEnvelope, RibbonDeletedEnvelope, RibbonUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, App, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkCreateRibbonsRequest, BulkDeleteRibbonsRequest, BulkGetOrCreateRibbonsRequest, BulkRibbonResult, BulkUpdateRibbonsRequest, CreateRibbonRequest, CreateRibbonResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomTag, DeleteRibbonRequest, DeleteRibbonResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, GetOrCreateRibbonRequest, GetRibbonRequest, GetRibbonResponse, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, ItemMetadata, MessageEnvelope, Page, QueryRibbonsRequest, QueryRibbonsResponse, RequestedFields, RequestedFieldsWithLiterals, RestoreInfo, RibbonsQueryResult, SortOrder, SortOrderWithLiterals, Sorting, URI, UpdateRibbonRequest, UpdateRibbonResponse, V3BulkRibbonResult, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function createRibbon$1(httpClient: HttpClient): CreateRibbonSignature;
interface CreateRibbonSignature {
    /**
     * Creates a ribbon.
     *
     * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Ribbon to create.
     * @returns Created ribbon.
     */
    (ribbon: NonNullablePaths<Ribbon, `name`, 2>): Promise<NonNullablePaths<Ribbon, `name`, 2>>;
}
declare function getRibbon$1(httpClient: HttpClient): GetRibbonSignature;
interface GetRibbonSignature {
    /**
     * Retrieves a ribbon.
     * @param - Ribbon ID.
     * @returns Ribbon.
     */
    (ribbonId: string, options?: GetRibbonOptions): Promise<NonNullablePaths<Ribbon, `name`, 2>>;
}
declare function updateRibbon$1(httpClient: HttpClient): UpdateRibbonSignature;
interface UpdateRibbonSignature {
    /**
     * Updates a ribbon.
     *
     *
     * Each time the ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - Ribbon ID.
     * @returns Updated Ribbon.
     */
    (_id: string, ribbon: NonNullablePaths<UpdateRibbon, `revision`, 2>, options?: UpdateRibbonOptions): Promise<NonNullablePaths<Ribbon, `name`, 2>>;
}
declare function deleteRibbon$1(httpClient: HttpClient): DeleteRibbonSignature;
interface DeleteRibbonSignature {
    /**
     * Deletes a ribbon.
     *
     *
     * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.
     * @param - Ribbon ID.
     */
    (ribbonId: string): Promise<void>;
}
declare function queryRibbons$1(httpClient: HttpClient): QueryRibbonsSignature;
interface QueryRibbonsSignature {
    /**
     * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryRibbonsOptions): RibbonsQueryBuilder;
}
declare function bulkCreateRibbons$1(httpClient: HttpClient): BulkCreateRibbonsSignature;
interface BulkCreateRibbonsSignature {
    /**
     * Creates multiple ribbons.
     * @param - Ribbons to create.
     */
    (ribbons: NonNullablePaths<Ribbon, `name`, 2>[], options?: BulkCreateRibbonsOptions): Promise<NonNullablePaths<BulkCreateRibbonsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkUpdateRibbons$1(httpClient: HttpClient): BulkUpdateRibbonsSignature;
interface BulkUpdateRibbonsSignature {
    /**
     * Updates multiple ribbons.
     *
     * Each time a ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - List of ribbons to update.
     */
    (ribbons: NonNullablePaths<MaskedRibbon, `ribbon._id` | `ribbon.revision`, 3>[], options?: BulkUpdateRibbonsOptions): Promise<NonNullablePaths<BulkUpdateRibbonsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function getOrCreateRibbon$1(httpClient: HttpClient): GetOrCreateRibbonSignature;
interface GetOrCreateRibbonSignature {
    /**
     * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.
     * @param - Ribbon name to retrieve or create.
     */
    (ribbonName: string, options?: GetOrCreateRibbonOptions): Promise<NonNullablePaths<GetOrCreateRibbonResponse, `ribbon.name`, 3>>;
}
declare function bulkGetOrCreateRibbons$1(httpClient: HttpClient): BulkGetOrCreateRibbonsSignature;
interface BulkGetOrCreateRibbonsSignature {
    /**
     * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.
     * @param - Ribbon names to retrieve or create.
     */
    (ribbonNames: string[], options?: BulkGetOrCreateRibbonsOptions): Promise<NonNullablePaths<BulkGetOrCreateRibbonsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkDeleteRibbons$1(httpClient: HttpClient): BulkDeleteRibbonsSignature;
interface BulkDeleteRibbonsSignature {
    /**
     * Deletes multiple ribbons.
     * @param - IDs of ribbons to delete.
     */
    (ribbonIds: string[]): Promise<NonNullablePaths<BulkDeleteRibbonsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onRibbonCreated$1: EventDefinition<RibbonCreatedEnvelope, "wix.stores.catalog.v3.ribbon_created">;
declare const onRibbonDeleted$1: EventDefinition<RibbonDeletedEnvelope, "wix.stores.catalog.v3.ribbon_deleted">;
declare const onRibbonUpdated$1: EventDefinition<RibbonUpdatedEnvelope, "wix.stores.catalog.v3.ribbon_updated">;

declare const createRibbon: MaybeContext<BuildRESTFunction<typeof createRibbon$1> & typeof createRibbon$1>;
declare const getRibbon: MaybeContext<BuildRESTFunction<typeof getRibbon$1> & typeof getRibbon$1>;
declare const updateRibbon: MaybeContext<BuildRESTFunction<typeof updateRibbon$1> & typeof updateRibbon$1>;
declare const deleteRibbon: MaybeContext<BuildRESTFunction<typeof deleteRibbon$1> & typeof deleteRibbon$1>;
declare const queryRibbons: MaybeContext<BuildRESTFunction<typeof queryRibbons$1> & typeof queryRibbons$1>;
declare const bulkCreateRibbons: MaybeContext<BuildRESTFunction<typeof bulkCreateRibbons$1> & typeof bulkCreateRibbons$1>;
declare const bulkUpdateRibbons: MaybeContext<BuildRESTFunction<typeof bulkUpdateRibbons$1> & typeof bulkUpdateRibbons$1>;
declare const getOrCreateRibbon: MaybeContext<BuildRESTFunction<typeof getOrCreateRibbon$1> & typeof getOrCreateRibbon$1>;
declare const bulkGetOrCreateRibbons: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateRibbons$1> & typeof bulkGetOrCreateRibbons$1>;
declare const bulkDeleteRibbons: MaybeContext<BuildRESTFunction<typeof bulkDeleteRibbons$1> & typeof bulkDeleteRibbons$1>;
/** */
declare const onRibbonCreated: BuildEventDefinition<typeof onRibbonCreated$1> & typeof onRibbonCreated$1;
/** */
declare const onRibbonDeleted: BuildEventDefinition<typeof onRibbonDeleted$1> & typeof onRibbonDeleted$1;
/** */
declare const onRibbonUpdated: BuildEventDefinition<typeof onRibbonUpdated$1> & typeof onRibbonUpdated$1;

export { BulkCreateRibbonsOptions, BulkCreateRibbonsResponse, BulkDeleteRibbonsResponse, BulkGetOrCreateRibbonsOptions, BulkGetOrCreateRibbonsResponse, BulkUpdateRibbonsOptions, BulkUpdateRibbonsResponse, GetOrCreateRibbonOptions, GetOrCreateRibbonResponse, GetRibbonOptions, MaskedRibbon, QueryRibbonsOptions, Ribbon, RibbonCreatedEnvelope, RibbonDeletedEnvelope, RibbonUpdatedEnvelope, RibbonsQueryBuilder, UpdateRibbon, UpdateRibbonOptions, bulkCreateRibbons, bulkDeleteRibbons, bulkGetOrCreateRibbons, bulkUpdateRibbons, createRibbon, deleteRibbon, getOrCreateRibbon, getRibbon, onRibbonCreated, onRibbonDeleted, onRibbonUpdated, queryRibbons, updateRibbon };
