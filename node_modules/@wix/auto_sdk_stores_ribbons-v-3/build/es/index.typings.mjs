// src/stores-catalog-v3-ribbon-ribbons-v-3.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v3-ribbon-ribbons-v-3.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixStoresCatalogRibbonV3RibbonServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/ribbon",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/ribbons",
        destPath: "/v3/ribbons"
      },
      {
        srcPath: "/stores/v3/bulk/ribbons",
        destPath: "/v3/bulk/ribbons"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_ribbons-v-3";
function createRibbon(payload) {
  function __createRibbon({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ribbon.createdDate" }, { path: "ribbon.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.CreateRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createRibbon;
}
function getRibbon(payload) {
  function __getRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "GET",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.GetRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/{ribbonId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getRibbon;
}
function updateRibbon(payload) {
  function __updateRibbon({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ribbon.createdDate" }, { path: "ribbon.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "PATCH",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.UpdateRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/{ribbon.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateRibbon;
}
function deleteRibbon(payload) {
  function __deleteRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "DELETE",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.DeleteRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/{ribbonId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteRibbon;
}
function queryRibbons(payload) {
  function __queryRibbons({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.QueryRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbons.createdDate" },
            { path: "ribbons.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryRibbons;
}
function bulkCreateRibbons(payload) {
  function __bulkCreateRibbons({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "ribbons.createdDate" },
          { path: "ribbons.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkCreateRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateRibbons;
}
function bulkUpdateRibbons(payload) {
  function __bulkUpdateRibbons({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "ribbons.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "ribbons.ribbon.createdDate" },
          { path: "ribbons.ribbon.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkUpdateRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateRibbons;
}
function getOrCreateRibbon(payload) {
  function __getOrCreateRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.GetOrCreateRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/get-or-create",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrCreateRibbon;
}
function bulkGetOrCreateRibbons(payload) {
  function __bulkGetOrCreateRibbons({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkGetOrCreateRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/get-or-create",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkGetOrCreateRibbons;
}
function bulkDeleteRibbons(payload) {
  function __bulkDeleteRibbons({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkDeleteRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteRibbons;
}

// src/stores-catalog-v3-ribbon-ribbons-v-3.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var RequestedFields = /* @__PURE__ */ ((RequestedFields2) => {
  RequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  RequestedFields2["ASSIGNED_PRODUCT_COUNT"] = "ASSIGNED_PRODUCT_COUNT";
  return RequestedFields2;
})(RequestedFields || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createRibbon2(ribbon) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ ribbon });
  const reqOpts = createRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbon: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ribbon"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getRibbon2(ribbonId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbonId,
    fields: options?.fields
  });
  const reqOpts = getRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonId: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["ribbonId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateRibbon2(_id, ribbon, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbon: { ...ribbon, id: _id },
    fields: options?.fields
  });
  const reqOpts = updateRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { ribbon: "$[1]" },
        explicitPathsToArguments: {
          "ribbon.id": "$[0]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "ribbon", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteRibbon2(ribbonId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ ribbonId });
  const reqOpts = deleteRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ribbonId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryRibbons2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryRibbons({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.ribbons,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function bulkCreateRibbons2(ribbons, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbons,
    returnEntity: options?.returnEntity
  });
  const reqOpts = bulkCreateRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ribbons: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["ribbons", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateRibbons2(ribbons, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbons,
    returnEntity: options?.returnEntity,
    fields: options?.fields
  });
  const reqOpts = bulkUpdateRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ribbons: "$[0]",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["ribbons", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrCreateRibbon2(ribbonName, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbonName,
    fields: options?.fields
  });
  const reqOpts = getOrCreateRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonName: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["ribbonName", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkGetOrCreateRibbons2(ribbonNames, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbonNames,
    fields: options?.fields
  });
  const reqOpts = bulkGetOrCreateRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ribbonNames: "$[0]",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["ribbonNames", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteRibbons2(ribbonIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ribbonIds
  });
  const reqOpts = bulkDeleteRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ribbonIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  RequestedFields,
  SortOrder,
  WebhookIdentityType,
  bulkCreateRibbons2 as bulkCreateRibbons,
  bulkDeleteRibbons2 as bulkDeleteRibbons,
  bulkGetOrCreateRibbons2 as bulkGetOrCreateRibbons,
  bulkUpdateRibbons2 as bulkUpdateRibbons,
  createRibbon2 as createRibbon,
  deleteRibbon2 as deleteRibbon,
  getOrCreateRibbon2 as getOrCreateRibbon,
  getRibbon2 as getRibbon,
  queryRibbons2 as queryRibbons,
  updateRibbon2 as updateRibbon
};
//# sourceMappingURL=index.typings.mjs.map