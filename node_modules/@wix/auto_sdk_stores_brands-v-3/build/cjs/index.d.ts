import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { Brand, CreateBrandValidationErrors, GetBrandOptions, UpdateBrand, UpdateBrandOptions, QueryBrandsOptions, BrandsQueryBuilder, BulkCreateBrandsOptions, BulkCreateBrandsResponse, BulkCreateBrandsValidationErrors, MaskedBrand, BulkUpdateBrandsOptions, BulkUpdateBrandsResponse, GetOrCreateBrandOptions, GetOrCreateBrandResponse, BulkGetOrCreateBrandsOptions, BulkGetOrCreateBrandsResponse, BulkDeleteBrandsResponse, BrandCreatedEnvelope, BrandDeletedEnvelope, BrandUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, App, ApplicationError, BaseEventMetadata, BrandsQueryResult, BulkActionMetadata, BulkBrandsResult, BulkCreateBrandsRequest, BulkDeleteBrandsRequest, BulkDeleteBrandsResponseBulkBrandsResult, BulkGetOrCreateBrandsRequest, BulkUpdateBrandsRequest, CreateBrandRequest, CreateBrandResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomTag, DeleteBrandRequest, DeleteBrandResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, GetBrandRequest, GetBrandResponse, GetOrCreateBrandRequest, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, ItemMetadata, MessageEnvelope, Page, QueryBrandsRequest, QueryBrandsResponse, RequestedFields, RequestedFieldsWithLiterals, RestoreInfo, SortOrder, SortOrderWithLiterals, Sorting, URI, UpdateBrandRequest, UpdateBrandResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function createBrand$1(httpClient: HttpClient): CreateBrandSignature;
interface CreateBrandSignature {
    /**
     * Creates a brand.
     *
     * To assign the brand to a product, include the `brand.id` or `brand.name`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Brand to create.
     * @returns Created brand.
     */
    (brand: NonNullablePaths<Brand, `name`, 2>): Promise<NonNullablePaths<Brand, `name`, 2> & {
        __validationErrorsType?: CreateBrandValidationErrors;
    }>;
}
declare function getBrand$1(httpClient: HttpClient): GetBrandSignature;
interface GetBrandSignature {
    /**
     * Retrieves a brand.
     * @param - Brand ID.
     * @returns Brand.
     */
    (brandId: string, options?: GetBrandOptions): Promise<NonNullablePaths<Brand, `name`, 2>>;
}
declare function updateBrand$1(httpClient: HttpClient): UpdateBrandSignature;
interface UpdateBrandSignature {
    /**
     * Updates a brand.
     *
     * Each time the brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - Brand ID.
     * @returns Updated brand.
     */
    (_id: string, brand: NonNullablePaths<UpdateBrand, `revision`, 2>, options?: UpdateBrandOptions): Promise<NonNullablePaths<Brand, `name`, 2>>;
}
declare function deleteBrand$1(httpClient: HttpClient): DeleteBrandSignature;
interface DeleteBrandSignature {
    /**
     * Deletes a brand.
     *
     * > **Note:** Deleting a brand will also remove it from all products it is assigned to.
     * @param - Brand ID.
     */
    (brandId: string): Promise<void>;
}
declare function queryBrands$1(httpClient: HttpClient): QueryBrandsSignature;
interface QueryBrandsSignature {
    /**
     * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryBrandsOptions): BrandsQueryBuilder;
}
declare function bulkCreateBrands$1(httpClient: HttpClient): BulkCreateBrandsSignature;
interface BulkCreateBrandsSignature {
    /**
     * Creates multiple brands.
     * @param - Brands to create.
     */
    (brands: NonNullablePaths<Brand, `name`, 2>[], options?: BulkCreateBrandsOptions): Promise<NonNullablePaths<BulkCreateBrandsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __validationErrorsType?: BulkCreateBrandsValidationErrors;
    }>;
}
declare function bulkUpdateBrands$1(httpClient: HttpClient): BulkUpdateBrandsSignature;
interface BulkUpdateBrandsSignature {
    /**
     * Updates multiple brands.
     *
     * Each time a brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - List of brands to update.
     */
    (brands: NonNullablePaths<MaskedBrand, `brand._id` | `brand.revision`, 3>[], options?: BulkUpdateBrandsOptions): Promise<NonNullablePaths<BulkUpdateBrandsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function getOrCreateBrand$1(httpClient: HttpClient): GetOrCreateBrandSignature;
interface GetOrCreateBrandSignature {
    /**
     * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.
     * @param - Brand name to retrieve or create.
     */
    (brandName: string, options?: GetOrCreateBrandOptions): Promise<NonNullablePaths<GetOrCreateBrandResponse, `brand.name`, 3>>;
}
declare function bulkGetOrCreateBrands$1(httpClient: HttpClient): BulkGetOrCreateBrandsSignature;
interface BulkGetOrCreateBrandsSignature {
    /**
     * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.
     * @param - Brand names to retrieve or create.
     */
    (brandNames: string[], options?: BulkGetOrCreateBrandsOptions): Promise<NonNullablePaths<BulkGetOrCreateBrandsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkDeleteBrands$1(httpClient: HttpClient): BulkDeleteBrandsSignature;
interface BulkDeleteBrandsSignature {
    /**
     * Deletes multiple brands.
     * @param - IDs of brands to delete.
     */
    (brandIds: string[]): Promise<NonNullablePaths<BulkDeleteBrandsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onBrandCreated$1: EventDefinition<BrandCreatedEnvelope, "wix.stores.catalog.v3.brand_created">;
declare const onBrandDeleted$1: EventDefinition<BrandDeletedEnvelope, "wix.stores.catalog.v3.brand_deleted">;
declare const onBrandUpdated$1: EventDefinition<BrandUpdatedEnvelope, "wix.stores.catalog.v3.brand_updated">;

declare const createBrand: MaybeContext<BuildRESTFunction<typeof createBrand$1> & typeof createBrand$1>;
declare const getBrand: MaybeContext<BuildRESTFunction<typeof getBrand$1> & typeof getBrand$1>;
declare const updateBrand: MaybeContext<BuildRESTFunction<typeof updateBrand$1> & typeof updateBrand$1>;
declare const deleteBrand: MaybeContext<BuildRESTFunction<typeof deleteBrand$1> & typeof deleteBrand$1>;
declare const queryBrands: MaybeContext<BuildRESTFunction<typeof queryBrands$1> & typeof queryBrands$1>;
declare const bulkCreateBrands: MaybeContext<BuildRESTFunction<typeof bulkCreateBrands$1> & typeof bulkCreateBrands$1>;
declare const bulkUpdateBrands: MaybeContext<BuildRESTFunction<typeof bulkUpdateBrands$1> & typeof bulkUpdateBrands$1>;
declare const getOrCreateBrand: MaybeContext<BuildRESTFunction<typeof getOrCreateBrand$1> & typeof getOrCreateBrand$1>;
declare const bulkGetOrCreateBrands: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateBrands$1> & typeof bulkGetOrCreateBrands$1>;
declare const bulkDeleteBrands: MaybeContext<BuildRESTFunction<typeof bulkDeleteBrands$1> & typeof bulkDeleteBrands$1>;
/**
 * Triggered when a brand is created.
 */
declare const onBrandCreated: BuildEventDefinition<typeof onBrandCreated$1> & typeof onBrandCreated$1;
/**
 * Triggered when a brand is deleted.
 */
declare const onBrandDeleted: BuildEventDefinition<typeof onBrandDeleted$1> & typeof onBrandDeleted$1;
/**
 * Triggered when a brand is updated.
 */
declare const onBrandUpdated: BuildEventDefinition<typeof onBrandUpdated$1> & typeof onBrandUpdated$1;

export { Brand, BrandCreatedEnvelope, BrandDeletedEnvelope, BrandUpdatedEnvelope, BrandsQueryBuilder, BulkCreateBrandsOptions, BulkCreateBrandsResponse, BulkCreateBrandsValidationErrors, BulkDeleteBrandsResponse, BulkGetOrCreateBrandsOptions, BulkGetOrCreateBrandsResponse, BulkUpdateBrandsOptions, BulkUpdateBrandsResponse, CreateBrandValidationErrors, GetBrandOptions, GetOrCreateBrandOptions, GetOrCreateBrandResponse, MaskedBrand, QueryBrandsOptions, UpdateBrand, UpdateBrandOptions, bulkCreateBrands, bulkDeleteBrands, bulkGetOrCreateBrands, bulkUpdateBrands, createBrand, deleteBrand, getBrand, getOrCreateBrand, onBrandCreated, onBrandDeleted, onBrandUpdated, queryBrands, updateBrand };
