/** @typedef {string} Url */
export interface Url extends String {
}

/** @typedef {string} GUID */
export interface GUID extends String {
}

/** @typedef {number} DateTime */
export interface DateTime extends Number {
}

/**
 * @template {Object} T
 * @typedef {Object} LogObject<T>
 * @property {number} evid - Event ID
 * @property {string} endpoint - Endpoint name
 * @property {number} src - Source ID
 * @property {T} params - Event parameters
 */
export interface LogObject<T> {
  evid: number;
  endpoint: string;
  src: number;
  params: T;
}

export type wixPatternsSummaryBarIsShownSrc144Evid1Params = {
  // Artifact that owns the component
  artifactId?: string;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // A list of items that are currently displayed to user: {"item1": "Value1", "item2": "value2"}
  summaryBarList?: string;
  // success/ loading/error
  featureStatus?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
};
export type wixPatternsPageInteractiveSrc144Evid1000Params = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // The page's url (new from 03/2023)
  url?: Url;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Entity page / Collection 
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Page loading time will be measured from the start of the page loading process (5:9002, FPP)
  loadingTime?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the page's route
  route?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
  // returns true if Wix Patterns router is being used, else false
  routerUsage?: boolean;
};
export type wixPatternsFullPageLoadCompletedSrc144Evid1001Params = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // The page's url (new from 03/2023)
  url?: Url;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Entity page / Collection 
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Page loading time will be measured from the start of the page loading process (5:9002, FPP)
  loadingTime?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the page's route
  route?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
  // returns true if Wix Patterns router is being used, else false
  routerUsage?: boolean;
};
export type pickerModalUsabilityParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Number of search results
  searchResultsCnt?: number;
  // Optional domain name from FDQN (CRM, Store, etc.)
  domain?: string;
  // (Optional) Search term used
  searchTerm?: string;
  // (Optional) Number of additional items loaded
  itemsLoadedCnt?: number;
  // How many items exist (full list)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // Optional in case having 2 pickers under the same artifact
  componentName?: string;
  // Max items to select in picker
  maxItems?: number;
  // component_type
  componentType?: string;
  // (Optional) Number of total items checked
  itemsCnt?: number;
  // The instance that lead to this (Inbox)
  pickSource?: string;
  // Singular form of the resource name. E.g. order, contact, etc. from FDQN ("goal" of picker)
  resource?: string;
  // (Optional) Loading time for use cases such as search results or  load more
  loadingTime?: number;
  // (Optional) ID of item checked
  itemId?: string;
  // standalone/modal
  type?: string;
  // app_id
  appId?: string;
  // How many items are to presented (filtered)
  filteredListSize?: number;
  // Use cases: search/search results/checkbox/continue/dismiss/load more
  action?: string;
  // Name of the product / api. E.g. contacts, booking, site_properties, etc. from FDQN
  product?: string;
};
export type pickerPickModalCtaButtonClickOrImmediateCtaParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // Optional domain name from FDQN (CRM, Store, etc.)
  domain?: string;
  // How many items exist (full list)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // Optional in case having 2 pickers under the same artifact
  componentName?: string;
  // Max items to select in picker
  maxItems?: number;
  // component_type
  componentType?: string;
  // Number of total items picked
  itemsCnt?: number;
  // Singular form of the resource name. E.g. order, contact, etc. from FDQN ("goal" of picker)
  resource?: string;
  // Is it an immediate CTA
  isImmediate?: boolean;
  // standalone/modal
  type?: string;
  // app_id
  appId?: string;
  // How many items are to presented (filtered)
  filteredListSize?: number;
  // Name of the product / api. E.g. contacts, booking, site_properties, etc. from FDQN
  product?: string;
};
export type pickerPickerOpenButtonParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // Optional domain name from FDQN (CRM, Store, etc.)
  domain?: string;
  // How many items exist (full list)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // Optional in case having 2 pickers under the same artifact
  componentName?: string;
  // Max items to select in picker
  maxItems?: number;
  // component_type
  componentType?: string;
  // Singular form of the resource name. E.g. order, contact, etc. from FDQN ("goal" of picker)
  resource?: string;
  // standalone/modal
  type?: string;
  // app_id
  appId?: string;
  // How many items are to presented (filtered)
  filteredListSize?: number;
  // Any picker button option (render/hover/click)
  action?: string;
  // Name of the product / api. E.g. contacts, booking, site_properties, etc. from FDQN
  product?: string;
};
export type newItemCreationStartParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // How many items have been selected before trying to create a new one. 0 <= numSelectedItems < maxItems
  numSelectedItems?: number;
  // Optional domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // How many items exist, after item creation (full list, unfiltered)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Max number of items that can be selected
  maxItems?: number;
  // sorts
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // sort
  numSortedColumns?: number;
  // current filters
  currentFilters?: string;
  // columns
  numColumns?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // visible columns order
  visibleColumnsOrder?: string;
  // "Add New" click source: "Main CTA" / "Card CTA"
  origin?: string;
  // filters
  numFiltersActive?: number;
  // standalone/modal
  type?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // consumerArtifactId  - relevant for item selection
  consumerArtifactId?: string;
};
export type newItemCreationEndParams = {
  // "success"/"dismissed"/"edit success"/"edit dismissed"
  resultType?: string;
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // How many items have been selected before trying to create a new one. 0 <= numItems < maxItems
  numSelectedItems?: number;
  // Optional domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // How many items exist, after item creation (full list, unfiltered)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Max number of items that can be selected
  maxItems?: number;
  // sort order
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // sort
  numSortedColumns?: number;
  // filters
  currentFilters?: string;
  // columns
  numColumns?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // visible columns order
  visibleColumnsOrder?: string;
  // "Add New" click source: "Main CTA" / "Card CTA"
  origin?: string;
  // For Add new- resultType= "success" --> itemId = ID of newly created item; resultType = "dismissed" --> itemId = null. For Edit- the itemID for all result types.
  itemId?: string;
  // filters
  numFiltersActive?: number;
  // standalone/modal
  type?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // consumerArtifactId  - relevant for item selection
  consumerArtifactId?: string;
};
export type pikachuCategoriesDropdownButtonClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // Optional domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // component_type
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the name of the provider
  providerName?: string;
  // provider id's	
  providerId?: string;
  // Page's url
  url?: string;
};
export type pikachuItemCategorySelectedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Which type of item would we like to pick: 'Collection'/'Product'/'Service'/'Coupon'/'Standalone form'/'Invoice'/'Price quote'
  itemCategory?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // Optional domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // component_type
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Page's url
  url?: string;
};
export type loadStartParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Json field :({featureName: boolean}) (new from 03/2023)
  featuresAvailability?: string;
  // The page's url (new from 03/2023)
  url?: Url;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Picker Dropdown Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Json field :({featureName: boolean}) (new from 06/2023), for features that don't suppose to impact performance
  additionalFeaturesAvailability?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // provider Id
  providerId?: string;
  // providerName	
  providerName?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
  // relevant to custom field - inline / card
  theme?: string;
  // consumer Id - relevant for artifact_id = item selection module
  consumerId?: string;
  // consumerArtifactId  - relevant for item selection
  consumerArtifactId?: string;
  // returns true if Wix Patterns router is being used, else false
  // 
  routerUsage?: boolean;
  //  will be True if the current view is custom-made; otherwise, it will be False
  isCurrentViewCustomMade?: boolean;
  // Artifact that owns the component
  artifactIdNew?: string;
  //  custom-made / predefined / all
  currentViewType?: string;
  // Component Id new
  componentIdNew?: string;
  // Component Name new
  componentNameNew?: string;
};
export type loadEndParams = {
  // for CustomFieldsWidget component: expanded /collapsed. for table-grid switch components: table layout / grid layout. for nested table :All items collapsed / expanded. Null otherwise
  componentStatus?: string;
  // Artifact that owns the component
  artifactId?: string;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // csid
  csid?: GUID;
  // The page's url (new from 03/2023)
  url?: Url;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // How many items exist (full list, unfiltered). Relevant for Picker.
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Component loading time in ms
  loadingTime?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // Is under bo.wix.com (new from 03/2023)
  isInternalPage?: boolean;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // will be true if the user used the toolbar before the component was loaded, false otherwise
  preLoadToolbarUsed?: boolean;
  // providerName	
  providerName?: string;
  // provider Id
  providerId?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
  // relevant to custom field - inline / card
  theme?: string;
  // consumer Id - relevant for artifact_id = item selection module
  consumerId?: string;
  // consumerArtifactId - relevant for item selection
  consumerArtifactId?: string;
  // The page's route
  route?: string;
  // returns true if Wix Patterns router is being used, else false
  routerUsage?: boolean;
  // will be True if the current view is custom-made; otherwise, it will be False
  // 
  isCurrentViewCustomMade?: boolean;
  // Artifact that owns the component
  artifactIdNew?: string;
  // custom-made / predefined / all
  currentViewType?: string;
  // component Name new
  componentNameNew?: string;
  // component Id new
  componentIdNew?: string;
};
export type loadMoreParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // Optional domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which column is currently used to sort the list: {"columnName": "asc"/"desc"}. Relevant for Table and Cards.
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Component loading time in ms
  loadingTime?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // How many new items were loaded in this action
  loadedItems?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type componentDismissedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Modal / Picker Dropdown
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // X button/Cancel button
  origin?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Page's url
  url?: string;
};
export type cairoItemSelectionToggledParams = {
  // Artifact that owns the component
  artifactId?: string;
  // What did the user search?
  searchQuery?: string;
  // What is the step (or hierarchy level) of the selected item?
  currentStep?: string;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // Location: Table List Header (for using the checkbox) /
  // Table Bulk Toolbar (for using the CTA)(new from Dec 2022)
  location?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // How many items have been selected after user clicks items.
  numItemsAfter?: number;
  // Did the user click the "Select All" check box (will get "true" regardless the label attached to the check box: "Select All" or "Deselect All").
  isSelectAll?: boolean;
  // is_tpa
  isTPA?: boolean;
  // The click purpose : "Selection" / "Deselection"
  clickType?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // (Optional) Max number of items that can be selected. null if there's no limit.
  maxItems?: number;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown /Table/Cards
  componentType?: string;
  // How many levels (or steps) exist in the selected item's hierarchy?
  numLevels?: number;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // The time from user selection until he gets feedback and sees his item(s) checked as selected, in ms (new from Dec 2022)
  timeFromAction?: number;
  // ID of item that is checked/unchecked (isSelectAll = TRUE --> itemId = "All")
  itemId?: string;
  // Out of the list of results, what is the index of the clicked item.
  // ** isSelectAll = TRUE --> itemIndex = 0
  itemIndex?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // How many items have been selected before user clicks items
  numItemsBefore?: number;
  // What is the hierarchy level (or step) of the selected item? (out of numLevels)
  currentLevel?: number;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Is the item selected from a list of search results
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Page's url
  url?: string;
};
export type cairoCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // CTA location: multi bulk action toolbar, bulk action toolbar, action cell, Customize columns action cell
  location?: string;
  // cairo sessionId
  csid?: GUID;
  // (Optional) If the CTA is part of a "more actions" dropdown, its index in the dropdown; otherwise, null
  moreActionsIndex?: number;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // Are all items in the list selected. numItems = filteredListSize ==> isSelectAll = TRUE
  isSelectAll?: boolean;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // 1 <= ctaIndex <= numCtas -- the number of the CTA out of all CTAs in the specific location
  ctaIndex?: number;
  // (Optional) Max number of items that can be selected. null if there's no limit.
  maxItems?: number;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // How many levels (or steps) exist in the selected item's hierarchy?
  numLevels?: number;
  // How many CTAs are available in the current location
  numCtas?: number;
  // "Continue"/"Delete"/"Save"/"Accept"/"Edit"... (in English, not localized)
  ctaName?: string;
  // The CTA name, localized
  localizedCtaName?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // The time from user CTA click until he gets feedback , in ms (new from Dec 2022)
  timeFromAction?: number;
  // ID of the item that the user clicked on its CTA
  itemId?: string;
  // Out of the list of items, what is the index of the clicked item . ** filteredListSize = X --> (1 <= itemIndex <= X)
  itemIndex?: number;
  // What is the hierarchy level (or step) of the selected item? (out of numLevels)
  currentLevel?: number;
  // How many items have been selected
  numItems?: number;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  hostingPlatformContextId?: string;
  // Page's url
  url?: string;
};
export type cairoSearchResultsParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // How many results appeared for the search query. numSearchReults = 0 --> user saw empty state.
  searchResultsCnt?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // What did the user search? "" if removed search term.
  searchTerm?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How much time (in ms) did it take to load the results for searchQuery
  loadingTime?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
};
export type cairoFilterToggledParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // JSON containing filterName's new value
  filterValue?: string;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // Which column filter do we want to toggle now, e.g. Beginner / Amateur
  filterName?: string;
  // How many items exist (full list, unfiltered)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards / Picker (from 12/2022)
  componentType?: string;
  // The current state of filters, following the filter trigger
  currentFilters?: string;
  // "add"/"remove" -- Did we add or remove filterName from the list of filters
  actionType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // "Panel"/"SubToolbar"/"Toolbar"
  origin?: string;
  // How many filters are active after filterName is toggled. actionType = "add" --> numFiltersActive >= 1; actionType = "remove" --> numFiltersActive < numColumns
  numFiltersActive?: number;
  // app_id
  appId?: string;
  // How many items are currently presented to user, after filter toggle (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // will be true if the user used the filter before the component was loaded, false otherwise
  preLoadToolbarUsed?: boolean;
  // The type of the filter - Multi Selection, Single Selection, Number Range
  filterType?: string;
  // true if the field is customized 
  isCustomField?: boolean;
};
export type cairoAllFiltersClearedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Comma separated list of filter names that have been cleared
  filterNames?: string;
  // Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // "sidebar"/"toolbar"
  origin?: string;
  // How many filters have been cleared
  numFiltersCleared?: number;
  // app_id
  appId?: string;
  // How many items were presented to user, before all of the filters were cleared
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  hostingPlatformContextId?: string;
};
export type cairoFiltersPanelUsedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view, "false" if it's a user view and "null" if the action wasn't made over any view (new field from 01/2023)
  isPredefined?: boolean;
  // Filter / Sort / Costume Columns / Manage Views / Manage custom fields (new field from 01/2023)/Tags
  feature?: string;
  // csid
  csid?: GUID;
  // TRUE if the user just opened the sidebar; FALSE if closed
  isOpened?: boolean;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"} (new field from 01/2023)
  currentSortOrder?: string;
  // Table/Cards
  componentType?: string;
  // How many columns actively sort the data? (new field from 01/2023)
  numSortedColumns?: number;
  // How many columns are shown? (new field from 01/2023)
  numColumns?: number;
  // How many filters comprise the saved view (new field from 01/2023)
  numFiltersInView?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Which columns are currently shown to the user - by the order the user defined (new field from 01/2023)
  visibleColumnsOrder?: string;
  // The time from user click on open/close filter panel until he gets feedback and sees the panel opened/closed, in ms (new from Dec 2022, relevant only for filter)
  timeFromAction?: number;
  // From where did the user open/close the panel: Create View, Filter Button, X Button, Sort CTA, Costume Columns CTA, Manage Views, Entity page custom fields, Assign Tags
  origin?: string;
  // The number of active filters when the user opened/closed the panel/menu
  numFiltersActive?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards. (new field from 01/2023)
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  hostingPlatformContextId?: string;
  // The types of filters the component contains (single selection, multi selection, number range)
  filterTypes?: string;
};
export type cairoComponentSortedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Which columns were used to sort the list (before the current addition), by the order the user defined: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards. (new field from 11/2022)
  prevSortOrder?: string;
  // The number of columns that sorting the component after the current action
  numSortingColumns?: number;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // How many items exist (full list, unfiltered)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // The location the sort action was made from :"SidePanel"/"ColumnHeader" (new field from 11/2022)
  origin?: string;
  // By which column are we adding sorting now
  newSortedColumn?: string;
  // "asc"/"desc"/"removed" (was "null" until 12/2022, then changed to "removed")
  newSortingOrder?: string;
  // The item index inside the sort panel. First row will get 0. In case of simple sort (only 1 column  sorts the table) from the column header - the index will be 0. In case a sorting column was removed from sorting- will get (-1)
  itemIndex?: number;
  // The last order the user used to sort the list by "prev sorting column" : "asc"/"desc"/null (if wasn't sorted)
  prevSortingOrder?: string;
  // Which columns are currently used to sort the list, by the order the user defined: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards. (new field from 11/2022)
  newSortOrder?: string;
  // app_id
  appId?: string;
  // Indication for adding new sort. Will get "true" for cases the event was sent for adding new sort (and "false" for changing the sorted column, sorted order or remove sort) (new from 12/2022)
  isAddNewSort?: boolean;
  // The column the user used to sort the component with in the previous sort action. If list wasn't sorted, this should be null
  prevSortedColumn?: string;
  // How many items are currently presented to user, after filter toggle (filtered)
  filteredListSize?: number;
  // The number of columns that were sorting the component before the current action
  prevNumSortingColumns?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTabSelectedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How many tabs are dispalyed to the user
  numTabs?: number;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Index of the previous tab that the user had selected. 1 <= prevTabIndex <= numTabs; null if no tab was selected.
  prevTabIndex?: number;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards
  componentType?: string;
  // TRUE if "All" tab is displayed for this component; FALSE otherwise
  hasAllTab?: boolean;
  // (Optional) Name of the previous tab that the user had selected. null if no tab was selected.
  prevTabId?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Name of the newly selected tab
  newTabId?: string;
  // Index of the newly selected tab. 1 <= newTabIndex <= numTabs.
  newTabIndex?: number;
  // app_id
  appId?: string;
  // How many items are currently presented to user, after new tab selection
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoViewSavedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // The "new view name" unique identifier (new field from 11/2022)
  viewId?: string;
  // (Relevant only for "save as new view" action, will get null in other cases). Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view. (new field from 11/2022)
  isPredefined?: boolean;
  // What did the user search? If there wasn't any search --> searchQuery = null. (new field from 11/2022)
  searchQuery?: string;
  // csid
  csid?: GUID;
  // How many columns comprise the saved view (new field from 11/2022)
  numColumnsInView?: number;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // The filters that comprise the view that was just saved
  viewFilters?: string;
  // Name of the newly created/saved/renamed view
  newViewName?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"} (new field from 11/2022)
  currentSortOrder?: string;
  // Which attributes have changed from the last view version? If it's a new view - all the attributes that define the view will be noted. The attributes can be: Filters, Columns Order, Columns Visibility, Sorting, Search (new field from 11/2022)
  changedAttributes?: string;
  // Table/Cards
  componentType?: string;
  // How many filters comprise the saved view
  numFiltersInView?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Which columns are currently comprise the saved view- by the order the user defined (new field from 11/2022)
  visibleColumnsOrder?: string;
  // From where was the view created: Panel, SubToolbar, Toolbar
  origin?: string;
  // View's previous name. In case of 'save as new view' will get null, in case of 'save changes': prev name=new view name, in case of 'rename' will get the previous version of the view's name (new field from 11/2022)
  prevName?: string;
  // app_id
  appId?: string;
  // Is the saved view defined as default view?
  isDefault?: boolean;
  // The save type the user chose from the 'manage view' menu: "save as new view"/ "save changes" / "rename" (new field from 11/2022)
  saveType?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoViewSelectedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view.
  isPredefined?: boolean;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // Name of the newly selected view
  newViewName?: string;
  // (Optional) Name of the previous view that the user was using. null if no view was selected.
  prevViewName?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // (Optional) The prevoius state of filters, before the new view selection
  prevFilters?: string;
  // Table/Cards
  componentType?: string;
  // The current state of filters, after the new view selection
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // True if the view was selected from "search view in views dropdown" results (new from 01/2023)
  isFromSearchView?: boolean;
  // How many filters are active after view selection
  numFiltersActive?: number;
  // The selected view ID (match to "new view name", new field from 12/2022)
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user, after filter toggle (filtered)
  filteredListSize?: number;
  // Is the selected view defined as default view?
  isDefault?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type wixPatternsViewSelectedLoadEndSrc144Evid1234Params = {
  // Artifact that owns the component
  artifactId?: string;
  // Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view.
  isPredefined?: boolean;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // Name of the newly selected view
  newViewName?: string;
  // (Optional) Name of the previous view that the user was using. null if no view was selected.
  prevViewName?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // (Optional) The prevoius state of filters, before the new view selection
  prevFilters?: string;
  // Table/Cards
  componentType?: string;
  // The current state of filters, after the new view selection
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // True if the view was selected from "search view in views dropdown" results (new from 01/2023)
  isFromSearchView?: boolean;
  // How many filters are active after view selection
  numFiltersActive?: number;
  // The selected view ID (match to "new view name", new field from 12/2022)
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user, after filter toggle (filtered)
  filteredListSize?: number;
  // Is the selected view defined as default view?
  isDefault?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Duration in MS from when the user clicked on the view until it appeared
  loadingTime?: number;
};
export type cairoViewDeletedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // The "view name" (deleted view) unique identifier (new field from 11/2022)
  viewId?: string;
  // Name of the deleted view
  viewName?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // The filters that comprised the view that was just deleted
  viewFilters?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards
  componentType?: string;
  // How many filters comprised the deleted view
  numFiltersInView?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // TRUE if viewName was the selected view before deletion; FALSE otherwise
  wasSelected?: boolean;
  // app_id
  appId?: string;
  // Was the deleted view defined as default view?
  isDefault?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoExportCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // How many items does the user wish to export
  numSelectedItems?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // A list of all of the available export types, along with the number of items that would be exported using each of the options. E.g. {"All Items": 100, "Filtered Items": 80, "Selected Items": 10}
  availableExportTypes?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user (filtered)
  filteredListSize?: number;
  // What type of export is automatically selected when the user clicks the export CTA: "All Items"/"Filtered Items"/"Selected Items"
  defaultExportType?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  hostingPlatformContextId?: string;
};
export type cairoItemToggledInExportModalParams = {
  // Artifact that owns the component
  artifactId?: string;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // What type of export did the user have selected before swiching to newSelectedExportType: "All Items"/"Filtered Items"/"Selected Items"
  prevSelectedExportType?: string;
  // What type of export did the user switch to: "All Items"/"Filtered Items"/"Selected Items"
  newSelectedExportType?: string;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // A list of all of the available export types, along with the number of items that would be exported using each of the options. E.g. {"All Items": 100, "Filtered Items": 80, "Selected Items": 10}
  availableExportTypes?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoExportModalCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // A list of all of the available export types, along with the number of items that would be exported using each of the options
  availableExportTypes?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Does the vertical using Cairo support total number of items in list
  supportsTotal?: boolean;
  // What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
  selectedExportType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // From where did the user close the modal: "Export Button"/"Cancel Button"/"X Button"
  origin?: string;
  // How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numItems?: number;
  // app_id
  appId?: string;
  // Does the user want to proceed with the export or dismiss the modal
  action?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  hostingPlatformContextId?: string;
};
export type cairoExportProcessStartParams = {
  // Artifact that owns the component
  artifactId?: string;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // Which try is this; if try > 1, this is a retry
  try?: number;
  // csid
  csid?: GUID;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Does the vertical using Cairo support total number of items in list
  supportsTotal?: boolean;
  // What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
  selectedExportType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numItems?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoUserAttemptsToCancelTheExportParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How much time (in ms) did it take since the export process began
  duration?: number;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // Which try is this; if try > 1, this is a retry
  try?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // How many items were exported before the user tried to cancel the export
  numItemsExported?: number;
  // Table
  componentType?: string;
  // Does the vertical using Cairo support total number of items in list
  supportsTotal?: boolean;
  // What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
  selectedExportType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How did the user try to cancel the export process: "Tab Closed"/"Cancel Buton"/"X Button"
  origin?: string;
  // How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numItems?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoCancelExportModalCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How much time (in ms) did it take since the export process began
  duration?: number;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // Did the user try to close the tab ("Browser") or cancel the export ("Export")
  modalType?: string;
  // Which try is this; if try > 1, this is a retry
  try?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // How many items were exported before the user tried to cancel the export
  numItemsExported?: number;
  // Table
  componentType?: string;
  // Which CTA did the user click in the Cancel Export modal: "Cancel Export"/"Go Back"/"X Button" (modalType = "Export") OR "Cancel"/"Leave" (modalType = "Browser")
  ctaName?: string;
  // Does the vertical using Cairo support total number of items in list
  supportsTotal?: boolean;
  // What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
  selectedExportType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numItems?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoExportProcessEndParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How much time (in ms) did it take since the export process began
  duration?: number;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // Which try is this; if try > 1, this is a retry
  try?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // Was the export successful or did it fail/stopped by user: "success"/'fail"/"stopped by user"
  result?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Name of the file to be exported
  fileName?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // How many items were exported before the export ended, either successfully or not.
  numItemsExported?: number;
  // Table
  componentType?: string;
  // Does the vertical using Cairo support total number of items in list
  supportsTotal?: boolean;
  // What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
  selectedExportType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numItems?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoFileDownloadToastDisplayedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
  exportType?: string;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // Which try is this; if try > 1, this is a retry
  try?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numSelectedItems?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoFileDownloadToastDismissedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
  exportType?: string;
  // How much time (in ms) was the notification displayed before it was dismissed
  duration?: number;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numSelectedItems?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Did the user click the X button ("manual") or was the notification automatically dismissed ("automatic")
  dismissMode?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoFileDownloadToastDownloadButtonClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
  exportType?: string;
  // How much time (in ms) was the notification displayed before the button was clicked
  duration?: number;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numSelectedItems?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoExportFailedModalCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // A unique ID that will help join all events related to a specific export process
  exportId?: string;
  // Which try is this; if try > 1, this is a retry
  try?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // How many items were exported before the export failed.
  numItemsExported?: number;
  // Table
  componentType?: string;
  // Which CTA did the user click in the Export Failed modal: "Cancel"/"X Button" (export is cancelled) OR "Try Again" (export process restarts) OR "learn more" (user is led to contact support)
  ctaName?: string;
  // Does the vertical using Cairo support total number of items in list
  supportsTotal?: boolean;
  // What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
  selectedExportType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
  numItems?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTableTopNotificationDisplayedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // What is displayed to the user, localized
  notificationText?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user (full list, filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTableTopNotificationDismissedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How much time (in ms) was the notification displayed before it was dismissed
  duration?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Did the user click the X button ("manual") or was the notification automatically dismissed ("automatic")
  dismissMode?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // What is displayed to the user, localized
  notificationText?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user (full list, filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoDragItemParams = {
  // Artifact that owns the component
  artifactId?: string;
  // What did the user search? isFromSearch = FALSE --> searchQuery = null. (relate to ticket 521).
  searchQuery?: string;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // csid
  csid?: GUID;
  // A "couple" identifier , match between drag action and its drop action
  dragAndDropID?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Is the item dragged from the handle area?
  isFromHandle?: boolean;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // ID of the item that the user tries to drag.
  itemId?: string;
  // Out of the list of results, what was the index of the dragged item (before dragging). ** filteredListSize = X --> (1 <= itemIndex <= X)
  itemIndex?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // (relate to ticket 526). How many items have been selected before user clicks item and starts the drag action?
  numItemsBefore?: number;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Did the user try to drag the item from a list of search results (relate to ticket 521).
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // indicates the level of the hierarchy the item is in.
  itemLevel?: number;
  // gives the indexes path to get to the item from the parent where in each level the index is calculated from the beginning
  hierarchyPathIndex?: string;
};
export type cairoDragItemEndDropParams = {
  // Artifact that owns the component
  artifactId?: string;
  // duration in ms from starting to drag the item untill the action has ended
  duration?: number;
  // What did the user search? isFromSearch = FALSE --> searchQuery = null (relate to ticket 521).
  searchQuery?: string;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // csid
  csid?: GUID;
  // A "couple" identifier , match between drag action and its drop action
  dragAndDropID?: GUID;
  // Out of the list of results, what was the index of the dragged item (before dragging). ** filteredListSize = X --> (1 <= itemIndexBefore <= X)
  itemIndexBefore?: number;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Is the item dragged from the handle area?
  isFromHandle?: boolean;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // Out of the list of results, what is the new index of the dragged item (after dragging). ** filteredListSize = X --> (1 <= itemIndexAfter <= X) **when endType <> drop succeeded --> itemIndexAfter = itemIndexBefore
  itemIndexAfter?: number;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // ID of the item that the user tries to drag
  itemId?: string;
  // (happy flow+ ticket 529) how did the "drag action" end? Will get one of the following:
  //  "drop succeeded" = the item has been dropped inside the collection
  // "drop back" = the item has been dropped to it's original index (itemIndexBefore=itenIndexAfter)
  //  "drop outside" = the item has been dropped outside the collection (itemIndexBefore=itenIndexAfter)
  //  "clicked ESC" = the user clicked on the ESC button and the action was cancelled. "drag disabled" = the user tried to drag an item when the this feature is disabled. If the action was cancelled due to external-to-Cairo logic- event 144:140 will be sent instead.
  endType?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // (relate to ticket 526). How many items have been selected before user clicks item and starts the drag action?
  numItemsBefore?: number;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Did the user try to drag the item from a list of search results (relate to ticket 521).
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  //  indicates the level of the hierarchy the item is in before the drag and drop
  itemLevelBefore?: number;
  //  indicates the level of the hierarchy the item is in after the drag and drop
  itemLevelAfter?: number;
  // gives the indexes path to get to the item from the parent where in each level the index is calculated from the beginning (the path before the drag and drop)
  hierarchyPathIndexBefore?: string;
  // gives the indexes path to get to the item from the parent where in each level the index is calculated from the beginning (the path after the drag and drop)
  hierarchyPathIndexAfter?: string;
};
export type cairoDragActionUnsuccessfulUpdateInServerParams = {
  // Artifact that owns the component
  artifactId?: string;
  // (not relevant for now) What did the user search? isFromSearch = FALSE --> searchQuery = null .
  searchQuery?: string;
  // csid
  csid?: GUID;
  // A "couple" identifier , match between drag action and its drop action- will get the identifier of the failed action
  dragAndDropID?: GUID;
  // Out of the list of results, what was the index of the clicked item (before dragging). ** filteredListSize = X --> (1 <= itemIndexBefore <= X)
  itemIndexBefore?: number;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // number of updates in the sequence that follow the failed action
  numOfWaitingUpdates?: number;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // Out of the list of results, what is the new index of the clicked item (after dragging, the new index). ** filteredListSize = X --> (1 <= itemIndexAfter <= X) **when endType <> drop succeeded --> itemIndexAfter = itemIndexBefore
  itemIndexAfter?: number;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
  currentFilters?: string;
  // What is the type of the error? "Update failed" = updates has failed in the server, "Window closed" = the user clicked the X button to close the window before the server finished the update, "Left page"= the user try navigate to another page before the server finished the update, "External logic" = the action was cancelled due to a vertical logic
  errorType?: string;
  // How many items have been selected when user made the failed action?
  numItemsBeforeFailed?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // A list of filters that were displayed to user when he made the failed action: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  filtersApplied?: string;
  // duration in ms from the end of the drag action until the error indication
  timeFromEndDrag?: number;
  // Which view was displayed to the user when he made the failed action. Relevant for Table and Cards.
  viewShown?: string;
  // ID of the item that the user tries to drag
  itemId?: string;
  // How many items were presented (filtered) to the user when he made the failed action?
  filteredListSizeShown?: number;
  // How many items have been selected before user clicks item and starts the drag action?
  numItemsBefore?: number;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)?
  filteredListSize?: number;
  // Which columns were used to sort the list when the user made the failed action: [{"fieldName": "FIELD_NAME", "order": "asc"}
  sortOrderApplied?: string;
  // Which tab was displayed to the user when he made the failed action. Relevant for Table and Cards.
  tabShown?: string;
  // Was the failed action made from the handle area?
  wasFromHandle?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTryAgainClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (optional) number of updates in the sequence that follow the failed action
  numOfWaitingUpdates?: number;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // Toast / Custom fields widget / View only widget / Component error state
  loaction?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // the action name that failed and triggered the notification (for example: drag, column reorder etc.)
  actionName?: string;
  // app_id
  appId?: string;
  // How many items were presented when the user made the failed action (filtered)
  filteredListSize?: number;
  // Did the user made the failed action on a list of search results
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // The page's url
  url?: string;
};
export type cairoManageViewClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view.
  isPredefined?: boolean;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards
  componentType?: string;
  // How many filters comprise the saved view
  numFiltersInView?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoManageViewActionSelectedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // How many actions are existing in the current menu (including disabled actions)?
  numActions?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // 1 <= actionIndex <= numActions -- the number of the action out of all actions in the menu
  actionIndex?: number;
  // "view-save-new"/"Save Changes"/"Rename"/"Delete" etc... (in English, not localized)
  actionName?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoUndoClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // The view that the undo action was made on
  viewId?: string;
  // In case of action name=rename view - the new name the user gave to the view and now he undo it
  viewNameApplied?: string;
  // The view name that the undo action was made on (in case of rename view- this will give the original view name)
  viewName?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Which attributes have changed from the saved status to the current
  changedAttributes?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // The action's name the user wants to undo and triggered the toast (for example: view- save changes, view- rename, view- delete etc.)
  actionName?: string;
  // How many items were presented (filtered) to the user when he made the action he wants to undo?
  filteredListSizeShown?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Which columns were used to sort the list when the user made the action he wants to undo: [{"fieldName": "FIELD_NAME", "order": "asc"}
  sortOrderApplied?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoViewsUnsuccessfulUpdateInServerParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Which view was the failed action made on. Relevant for Table and Cards.
  viewId?: string;
  // (not relevant for now) What did the user search? isFromSearch = FALSE --> searchQuery = null .
  searchQuery?: string;
  // csid
  csid?: GUID;
  // duration in ms from the end of the failed action until the error indication
  timeFromEndAction?: number;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // number of updates in the sequence that follow the failed action
  numOfWaitingUpdates?: number;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
  currentFilters?: string;
  // What is the type of the error? "Update failed" = updates has failed in the server, "Window closed" = the user clicked the X button to close the window before the server finished the update, "Left page"= the user try navigate to another page before the server finished the update
  errorType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // A list of filters that were displayed to user when he made the failed action: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  filtersApplied?: string;
  // "Save as New View"/"Save Changes"/"Rename"/"Delete" etc... (in English, not localized)
  actionName?: string;
  // How many items were presented (filtered) to the user when he made the failed action?
  filteredListSizeShown?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Was the failed action made on a search results?
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoSortPanelUsedParams = {
  // artifact_id
  artifactId?: string;
  // csid
  csid?: GUID;
  // TRUE if the user just opened the sidebar; FALSE if closed
  isOpened?: boolean;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Table/Cards
  componentType?: string;
  // How many columns actively sort the data?
  numSortedColumns?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoReorderingSortColumnsParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Which columns are currently used to sort the list, by the previus order the user defined (before the reordering action) : [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  prevSortOrder?: string;
  // How many columns are been used for sorting the component?
  numSortingColumns?: number;
  // csid
  csid?: GUID;
  // Out of the list of sorting columns, what was the index of the sorting column (before reordering). ** numSortingColumns = X --> (1 <= columnIndexBefore <= X)
  columnIndexBefore?: number;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // How many items exist (full list, unfiltered)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Time (in ms) that has passed since the user added this specific row in the sort panel. Will give data up to 10 sec from adding the row (if it's over these 10 sec- will get null). When sent for clicking on "add new sort" / for clicking for the first time on a column's header- will get '0'.
  timeFromAction?: number;
  // Out of the list of sorting columns, what is the index of the sorting column (after reordering). ** numSortingColumns = X --> (1 <= columnIndexAfter <= X)
  columnIndexAfter?: number;
  // Which columns are currently used to sort the list, by the new order the user defined: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  newSortOrder?: string;
  // app_id
  appId?: string;
  // How many items are currently presented to user, after filter toggle (filtered)
  filteredListSize?: number;
  // The sorting column that the user changes its place in the sort hierarchy
  sortingColumn?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoSortUnsuccessfulUpdateInServerParams = {
  // Artifact that owns the component
  artifactId?: string;
  // (not relevant for now) What did the user search? isFromSearch = FALSE --> searchQuery = null .
  searchQuery?: string;
  // csid
  csid?: GUID;
  // duration in ms from the end of the failed action until the error indication
  timeFromEndAction?: number;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // number of updates in the sequence that follow the failed action
  numOfWaitingUpdates?: number;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
  currentFilters?: string;
  // What is the type of the error? "Update failed" = updates has failed in the server, "Window closed" = the user clicked the X button to close the window before the server finished the update, "Left page"= the user try navigate to another page before the server finished the update
  errorType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // A list of filters that were displayed to user when he made the failed action: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  filtersApplied?: string;
  // Which columns are currently comprise the saved view- by the order the user defined
  visibleColumnsOrder?: string;
  // The location thefailed sort action was made from :"SidePanel"/"ColumnHeader"
  origin?: string;
  // view_shown
  viewShown?: string;
  // The action the user tried to do on the sorting column: "Add new sort"/"Change sort column"/"Change sort type"/"Remove sort" / "Reorder sort columns".(in English, not localized)
  actionName?: string;
  // How many items were presented (filtered) to the user when he made the failed action?
  filteredListSizeShown?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Was the failed action made on a search results?
  isFromSearch?: boolean;
  // Which columns were used to sort the list when the user made the failed action: [{"fieldName": "FIELD_NAME", "order": "asc"}
  sortOrderApplied?: string;
  // tab_shown
  tabShown?: string;
  // The sorted column that the user attempted to update (but failed).
  sortingColumn?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoApiRequestDataLoadEndParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Duration in ms, from clicking on the save button until getting the error indication
  duration?: number;
  // Initial number of items loaded (before scroll and autoload)
  initialItems?: number;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Technical issue / Logic error / Network error / External error
  errorType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Entity / Collection
  pageType?: string;
  // the page's route
  route?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // The page's url
  url?: string;
};
export type cairoPageCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // CTA location: TBD
  location?: string;
  // csid
  csid?: GUID;
  // (Relevant only for Save CTA) True=if all fields are validated, False= if there are validation errors
  isValid?: boolean;
  // (Relevant only for 'More Action Option' CTA) 0 <= moreActionsIndex <= numCtas -- the number of the CTA out of all CTAs in the more action dropdown
  moreActionsIndex?: number;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Main / Secondary / More Actions Dropdown / More Actions Option
  ctaType?: string;
  // Relevant only for "cta type"="more actions option". Will get one of the values: Vertical / Cairo / TPA
  section?: string;
  // Page
  componentType?: string;
  // (Relevant only for 'More Action Option' CTA) How many CTAs are available in the more action dropdown?
  numCtas?: number;
  // "Add New"/"More Actions"... (in English only, not localized). For section= vertical / Cairo - it will be defined as unique title. For section=TPA: it will be the component_id of the TPA. To get the TPA app_id - use the table mysql.app_service.components- join on table.component_id= event.ctaName
  ctaName?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Collection / Entity
  pageType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // The page's url
  url?: string;
  // the origin of the page - collection page or entity page
  origin?: string;
};
export type cairoSearchViewInViewsParams = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // How many results appeared for the search query. numSearchReults = 0 --> user saw empty state. This count includes "views" and "categories" results.
  searchResultsCnt?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // What did the user search? "" if removed search term.
  searchTerm?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // Out of searchResultsCnt - how many results are  from type of "categories"?
  numCategoriesInResults?: number;
  // The distinct views IDs the users has when he searches a view
  numViews?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How did the search action end? "View selected"- the user chose one of the search results, "Search dismissed"- the user cancel the search by any other action. When the "end Type" is "view selected" but "search term" is null= then the user typed and searched, deleted his term and then manually selected a view from his views (not from search results).
  endType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoPageBackOrBreadcrumbClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Higher hierarchy (can be relevant both for back button and breadcrumb clicked )/ Last page in BM (relevant only for back button clicked)
  destination_page_type?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Relevant only for "cta type"="more actions option". For now, will get one of the values: Vertical / Cairo
  section?: string;
  // Page
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // 'Back' (for back button clicked) / The category's name the users clicked on.
  buttonName?: string;
  // Collection Page
  pageType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoSectionCtaClickedParams = {
  // CTA location: Section Toolbar, Collection Toolbar
  loaction?: string;
  // Artifact that owns the component
  artifactId?: string;
  // For example: Folders, Table/Grid switch etc.
  sectionType?: string;
  // CTA location: Section Toolbar, Collection Toolbar
  location?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Main / Secondary / More actions
  ctaType?: string;
  // Section name (Folders)
  componentType?: string;
  // cta key (show more / show less etc.)
  ctaName?: string;
  // The CTA name, localized
  localizedCtaName?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // CTA ID
  ctaId?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTpaSCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Page More Action Dropdown / Component Bulk action Toolbar
  location?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // TPA's component_id from dev center. To get the TPA app_id - use the table mysql.app_service.components- join on table.component_id= event.tpa_component_id
  tpaComponentId?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component's name, if there are two components of the same type per artifact
  componentName?: string;
  // 0 <= ctaIndex <= numCtas -- the number of the CTA out of all CTAs in the page dropdown menu/ Toolbar
  ctaIndex?: number;
  // Table, Grid, Page etc.
  componentType?: string;
  // How many CTAs are available in the page dropdown menu / toolbar?
  numCtas?: number;
  // TPA's component_id. To get the TPA app_id - use the table mysql.app_service.components- join on table.component_id= event.ctaName
  ctaName?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // App ID (for now- please look at tpaComponentId field description to get this data)
  appId?: GUID;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoDataExAddCustomFieldParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many columns are shown?
  numColumns?: number;
  // resource
  resource?: string;
  // Which columns are currently shown to the user - by the order the user defined
  visibleColumnsOrder?: string;
  // Where did the user click on "add custom field" from? Custom columns panel / Entity page / Manage custom fields /  Custom fields widget / External (the origin is external to Cairo)
  origin?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Verticals' Decision
  customOrigin?: string;
};
export type cairoDataExCustomFieldEndProcessParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // (Relevant when action type is edit) Name / Permission / Name and Permission / No changes
  changedFields?: string;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // Json field:  {"Installed apps": "Value", "Site visitors": "Value"}. The value can be: Null (the user didn't chose anything), Read, Write, Read and Write.
  permissions?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Section name (Folders)
  componentType?: string;
  // The key value
  key?: string;
  // (Relevant when a field was added/edited) How many added fields are there in the component (including the current added field)
  numAdded?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // (Relevant when a field was added/edited) The name the user typed
  fieldName?: string;
  // Where did the user click on "add custom field" from? Custom columns panel / Entity page
  origin?: string;
  // Only for fieldType= dropdown, how many options were saved?
  numDropdownOptions?: number;
  // Add/ Edit
  actionName?: string;
  // What did the user chose in the modal? Add field / Cancel
  endType?: string;
  // (Relevant when a field was added) What type is the added field?  Long text / Date / Number etc.
  fieldType?: string;
  // app_id
  appId?: string;
  // Only for fieldType= dropdown,  the options list by its order
  currentDropdownOptions?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Verticals' Decision
  customOrigin?: string;
};
export type cairoDataExCustomFieldAdvancesSettingsParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Where did the user click on "Advanced Settings" from?  Add Custom Field Modal / Edit Custom Field Modal
  origin?: string;
  // Open / Close the advanced settings
  actionName?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoLearnMoreParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Section name (Folders)
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Where did the user click on "Learn more" from?  Add Custom Field Modal/ Edit Custom Field Modal / Table Toolbar
  origin?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoApplyButtonClickedParams = {
  // artifact_id
  artifactId?: string;
  // In which levels of hierarchy the user changed the order? (numbers with commas between them, 1=the highest parent level )
  changedLevels?: string;
  // Filters / Drag and Drop
  feature?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // How many items exist (full list, unfiltered)
  listSize?: number;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards / Picker (from 12/2022)
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // (Optional, relevant for Drag and Drop) Number of actions/changes that are applied together
  numOfActions?: number;
  // Feature's Side Panel / Table Toolbar
  origin?: string;
  // (Optional, relevant for Filters)  If there is an optional fields list (like for filters)- how many options are there?
  numOptionalFields?: number;
  // (Optional, relevant for Filters) How many fields are active after the apply button is clicked? (fields that their value is not NULL)
  numActiveFields?: number;
  // app_id
  appId?: string;
  // How many items are currently presented to user, after filters toggled (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // (Optional, relevant for Filters) Json field: The current state of feature, following the apply button. [{"fieldName": "FIELD_NAME1", "field_value": "VALUE1"}] (for filters -all the filters will appear in this list, filters that not active will get NULL in the filters' value)
  currentStatus?: string;
};
export type cairoChangesBeforeApplyParams = {
  // Artifact that owns the component
  artifactId?: string;
  // True if the user clicked on the clear button, False otherwise .
  isClearButton?: boolean;
  // Filters / Add Custom Field / Edit Custom Field
  feature?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version) 
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards / Picker (from 12/2022)
  componentType?: string;
  // The chosen value of the field (Null if the user clicked on "clear")
  fieldValue?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // The field that the user chose to change (not necessary to save) (Null if the user clicked on "clear")
  fieldName?: string;
  // (relevant only when click on "clear") How many fields were active when the user clicked on the clear button? (fields that their value were not NULL)
  numActiveFields?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoDiscardChangesBeforeApplyParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Filters / Drag and Drop
  feature?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards / Picker
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // (Optional, relevant for Drag and Drop) Number of actions/changes that are applied together
  numOfActions?: number;
  // Feature's Side Panel / Table Toolbar
  origin?: string;
  // (Optional, relevant for Filters) If there is an optional fields list (like for filters)- how many options are there?
  numOptionalFields?: number;
  // (Optional, relevant for Filters) How many fields are active after the apply button is clicked? (fields that their value is not NULL)
  numActiveFields?: number;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // (Optional, relevant for Filters)  Json field: The state of feature, if the user would have clicked on the apply button. [{"fieldName": "FIELD_NAME1", "field_value": "VALUE1"}] (for filters -all the filters will appear in this list, filters that not active will get NULL in the filters' value)
  currentStatus?: string;
};
export type cairoModalCtaClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // The CTA name the user chose to do in the modal (for example: save, cancel, archive etc.). English only, not localized
  ctaName?: string;
  // The CTA name, localized
  localizedCtaName?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // The modal's title (Archive custom field, etc.)
  modalName?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoDataExtensionUnsuccessfulUpdateInServerParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // Json field: {"Installed apps": "Value", "Site visitors": "Value"}. The value can be: Null (the user didn't chose anything), Read, Write, Read and Write.
  permissions?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // The key value
  key?: string;
  // What is the type of the error? Technical issue	/ Network error / 10k Limitation
  errorType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // The name the user typed
  fieldName?: string;
  // Where did the user click on "add custom field" from? Custom columns panel / Entity page
  origin?: string;
  // The action the user tried to do: Add/ Edit etc. (in English, not localized)
  actionName?: string;
  // What type is the added field? Long text / Date / Number etc.
  fieldType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoErrorInLoadingAComponentParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session id
  csid?: GUID;
  // Json field :({featureName: boolean}) (new from 03/2023)
  featuresAvailability?: string;
  // The page's url
  url?: Url;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Picker Dropdown Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Error type (if known): LoadCustomFieldsWidgetLazyContentFailed / 
  // InitCustomFieldsDataExtensionFailed / 
  // InitCustomFieldsWidgetContainerFailed / InitCustomFieldsDataExtensionFailed
  errorType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoNestedTableCollapseAndExpandParams = {
  // Artifact that owns the component
  artifactId?: string;
  // What did the user search?
  searchQuery?: string;
  // Cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // True if the user chose to collapse / expand all categories simultaneously
  isSelectAll?: boolean;
  // is_tpa
  isTPA?: boolean;
  // The click purpose : "Collapse" / "Expand"
  clickType?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown /Table/Cards
  componentType?: string;
  // How many levels (or steps) exist in the selected item's hierarchy?
  numLevels?: number;
  // The value the user see as the count of this item. If  "Is select all"= true, then Null
  countItems?: number;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // ID of the clicked item .If  "Is select all"= true, then Null
  itemId?: string;
  // Out of the list of results, what is the index of the clicked item .If  "Is select all"= true,  then Null
  itemIndex?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // What is the hierarchy level (or step) of the clicked item? (out of numLevels). If  "Is select all"= true, then Null
  currentLevel?: number;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Is the item selected from a list of search results
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTagsModalStartLoadParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many tags are to be presented?
  numTags?: number;
  // resource
  resource?: string;
  // Where did the user open Manage Tags modal from?
  origin?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTagsModalEndProcessParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many tags are in the modal?
  numTags?: number;
  // resource
  resource?: string;
  // Where did the user open Manage Tags modal from?
  origin?: string;
  // Close without changes
  endType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTagsAddDeleteTagParams = {
  // Artifact that owns the component
  artifactId?: string;
  // The name of the removed/added tag, or the new tag's name - incase of rename tag
  tagName?: string;
  // (Relevant only for action name=Rename) The tag's name, before the change
  previousName?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many tags are in the modal after this action?
  numTags?: number;
  // resource
  resource?: string;
  // Where did the user make the action from? Tags Modal /
  origin?: string;
  // Add / Delete / Rename
  actionName?: string;
  // app_id
  appId?: string;
  // Is the action made from a list of tags search results?
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // sub origin when a user add/rename/delete tag from a manage tags modal.  bulk assign popover or tags widget
  tagSubOrigin?: string;
};
export type cairoTagsUnsuccessfulUpdateInServerParams = {
  // Artifact that owns the component
  artifactId?: string;
  // The name of the removed/added/assigned tag
  tagName?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // What is the type of the error? Technical issue / Network error
  errorType?: string;
  // How many tags are in the modal after this action?
  numTags?: number;
  // resource
  resource?: string;
  // Where did the user make the action from? Tags Modal / Entity page
  origin?: string;
  // Add / Delete / Rename / Assign / Remove assign / Add and assign / Load tags widget
  actionName?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoSearchForTagsParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Where did the user search for the tag? Manage tags modal /
  location?: string;
  // Cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // How many results appeared for the search query. numSearchReults = 0 --> user saw the option to add this tag as new
  searchResultsCnt?: number;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // What did the user search? "" if removed search term.
  searchTerm?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // How did the search action end? "Tag selected"- the user chose one of the search results, "Search dismissed"- the user cancel the search by any other action, "Add new tag"- when the searched tag doesn't exist and the user choose to add it as new
  endType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoTagsWidgetLoadedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How many tags are assigned to that entity when the widget is loaded?
  numTagsAssigned?: number;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many tags are existing? will get 0 if the user didn't create any tag and an empty state will be opened
  numTags?: number;
  // resource
  resource?: string;
  // The entity ID (that the widget was loaded in its page)
  itemId?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Card/ Inline
  theme?: string;
};
export type cairoTagsWidgetClickOnCtaParams = {
  // Artifact that owns the component
  artifactId?: string;
  // How many tags are already assigned to that item?
  numTagsAssigned?: number;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many tags are existing? will get 0 if the user didn't create any tag and an empty state will be opened
  numTags?: number;
  // resource
  resource?: string;
  // Assign tags / Create tags / Manage tags
  actionName?: string;
  // The entity ID
  itemId?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Card/ Inline
  theme?: string;
};
export type cairoTagsAssignTagParams = {
  // Artifact that owns the component
  artifactId?: string;
  // (Relevant if numItems=1) How many tags are assigned to that item after this action?
  numTagsAssigned?: number;
  // The name of the assigned/ removed tag
  tagName?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Component type
  componentType?: string;
  // How many tags are existing? will get 0 if the user didn't create any tag and an empty state will be opened
  numTags?: number;
  // resource
  resource?: string;
  // Where did the user make the action from? Entity page /
  origin?: string;
  // Assign / Remove
  actionName?: string;
  // (Relevant if numItems=1) The Item which the tag was assigned to / removed from
  itemId?: string;
  // How many items have been selected?
  numItems?: number;
  // app_id
  appId?: string;
  // Is the action made from a list of tags search results?
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // Card/ Inline
  theme?: string;
};
export type cairoPageDiscardChangesBeforeSaveParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards / Picker
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Number of changed fields that their changes can be lost
  numOfActions?: number;
  // Cancel CTA / Breadcrumbs / Back button / Navigation
  origin?: string;
  // How many fields are there that can be change in this page?
  numOfFields?: number;
  // Entity /
  pageType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // The page's url
  url?: string;
};
export type cairoAssignTagsToEntitiesParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session ID
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // array of tags that were assigned (empty array if none)
  assignedTags?: string;
  // Component type
  componentType?: string;
  // array of tags that were unassigned (empty array if none)
  unAssignedTags?: string;
  // resource
  resource?: string;
  // Where did the user make the action from?
  origin?: string;
  // Assign / Remove
  actionName?: string;
  // array of items ids that were selected
  itemIds?: string;
  // How many items have been selected?
  numItems?: number;
  // app_id
  appId?: string;
  // Is the action made from a list of tags search results?
  isFromSearch?: boolean;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoReloadErrorStateParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session id
  csid?: GUID;
  // Json field :({featureName: boolean}) (new from 03/2023)
  featuresAvailability?: string;
  // The page's url
  url?: Url;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/Picker Dropdown Table/Cards
  componentType?: string;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Error type (if known): LoadCustomFieldsWidgetLazyContentFailed / 
  // InitCustomFieldsDataExtensionFailed / 
  // InitCustomFieldsWidgetContainerFailed / InitCustomFieldsDataExtensionFailed
  errorType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // cta
  cta?: string;
  // Which view is currently displayed to the user. Relevant for Table and Cards.
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type cairoCustomizeColumnsInSidePanelParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view, "false" if it's a user view and "null" if the action wasn't made over any view (new field from 01/2023)
  isPredefined?: boolean;
  // cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table/Cards
  componentType?: string;
  // How many columns actively sort the data? (new field from 01/2023)
  numSortedColumns?: number;
  // How many columns are shown? (new field from 01/2023)
  numColumns?: number;
  // How many filters comprise the saved view (new field from 01/2023)
  numFiltersInView?: number;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Which columns are currently shown to the user - by the order the user defined (new field from 01/2023)
  visibleColumnsOrder?: string;
  // Visibility / Reorder
  actionName?: string;
  // The number of active filters when the user opened/closed the panel/menu
  numFiltersActive?: number;
  // Which view is currently displayed to the user. Relevant for Table and Cards. (new field from 01/2023)
  currentView?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type wixPatternsNestedTableCollapseAndExpandAllSrc144Evid178Params = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // The click purpose : "Collapse" / "Expand"
  clickType?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Which tab is currently displayed to the user. Relevant for Table and Cards.
  currentTab?: string;
  // Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
  currentSortOrder?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown /Table/Cards
  componentType?: string;
  // How many levels (or steps) exist in the selected item's hierarchy?
  numLevels?: number;
  // A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
  currentFilters?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // How many items are to be presented (filtered)
  filteredListSize?: number;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
};
export type wixPatternsSectionHeaderPrimaryActionClickedParams = {
  // Artifact that owns the component
  artifactId?: string;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // A list of items that are currently displayed to user: {"item1": "Value1", "item2": "value2"}
  summaryBarList?: string;
  // success/ loading/error
  featureStatus?: string;
  // cta name (in english)
  cta?: string;
  // id of the section 
  sectionId?: string;
};
export type wixPatternsAppWasInstalledSrc144Evid200Params = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Page name, if there are two pages of the same type per artifact
  componentName?: string;
  // Page
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // Collection / Entity
  pageType?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // app_name
  appName?: string;
  // The page's url
  url?: string;
};
export type wixPatternsItemCreatedWithAiSrc144Evid3Params = {
  // Artifact that owns the component
  artifactId?: string;
  // The page's url (new from 03/2023)
  url?: Url;
  // Wix Patterns_version(cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the name of the item was added
  itemName?: string;
  // item's id
  itemId?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  // 
  hostingPlatformContextId?: string;
  // csid
  csid?: GUID;
};
export type wixPatternsClickOnViewDropdownSrc144Evid4Params = {
  // Artifact that owns the component
  artifactId?: string;
  // csid
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (CRM, Store, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Table
  componentType?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // the id of the context entity that the user view or edit (app/account/site)
  hostingPlatformContextId?: string;
};
export type wixPatternsMappingPagesSrc144Evid5Params = {
  // Artifact that owns the component
  artifactId?: string;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
  componentType?: string;
  // app_id
  appId?: string;
  // list of all components per artifact and component type 
  components?: string;
  // type of page (collection page / entity / settings)
  pageType?: string;
  // component id
  componentId?: string;
  // Returns True if it is a single page
  isSinglePage?: boolean;
};
export type wixPatternsSelectAProviderSrc144Evid6Params = {
  // Artifact that owns the component
  artifactId?: string;
  // Cairo session id
  csid?: GUID;
  // Wix Patterns version (cairo_version)
  cairoVersion?: string;
  // (Optional) Domain name from FQDN (crm, stores, etc.)
  domain?: string;
  // is_tpa
  isTPA?: boolean;
  // (Optional) Component name, if there are two components of the same type per artifact
  componentName?: string;
  // Picker Standalone/Picker Modal/Table/Cards
  componentType?: string;
  // the name of the provider
  providerName?: string;
  // Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
  resource?: string;
  // app_id
  appId?: string;
  // Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
  product?: string;
  // provider id's
  providerId?: string;
  // the origin from which the provider was selected (standalone dropdown, within modal dropdown, action)
  origin?: string;
  // Verticals' Decision	
  customOrigin?: string;
  // url
  url?: string;
};
export type httpClientErrorMappingSrc176Evid100Params = {
  // the key for connecting the error event 
  session_id?: string;
  // True if consumer passed this error
  is_override_error?: string;
  // the translated message of the error
  translated_message?: string;
  // True if is not a real error
  // 
  error_opt_out?: boolean;
};
export type getResolvedErrorSrc176Evid101Params = {
  // the key for connecting the error event 
  session_id?: string;
  // True if the user sees the message in english
  isEn?: boolean;
  // mapped_error_not_available
  mapped_error_not_available?: string;
  // the translated message of the error
  translated_message?: string;
  // the action of the text
  action_text?: string;
  // error loading the translated errors
  common_errors_load_failed?: string;
  // translated error resolved from consumer
  is_consumer_resolved_error?: boolean;
};
export type showErrorSrc176Evid102Params = {
  // the key for connecting the error event 
  session_id?: string;
  // True if the user sees the message in english
  isEn?: boolean;
  // displayed_message to the user
  displayed_message?: string;
  // displayed_action to the user
  displayed_action?: string;
  // action_was_provided
  action_was_provided?: string;
};
export type retryErrorSrc176Evid103Params = {
  // the key for connecting the error event
  session_id?: string;
};
export type httpClientErrorSrc176Evid404Params = {
  // the error request id
  request_id?: string;
  // the mutual guid in panorama
  panorama_guid?: string;
  // the artifact_id
  artifact_id?: string;
  // relevant hosting_platform
  hosting_platform?: string;
  // app_id
  app_id?: string;
  // http status code for ex: 404
  error_code?: number;
  // Has override errors object
  is_override_error?: string;
  // is_override_error_state_function
  is_override_error_state_function?: string;
  // the full error json
  error_json?: string;
  // artifact version
  artifactVersion?: string;
  // translated_message
  translated_message?: string;
  // HTTP request method (GET,POST,HEAD etc.)
  method?: string;
  // the error message from the json
  error_message?: string;
  // exception message
  exception_message?: string;
  // client error code (browser code)
  client_error_code?: string;
  // the error type (application/validation/system)
  error_type?: string;
  // dev provided error message
  is_consumer_resolved_error?: boolean;
  // the full artifact id:
  // (artifact_id = my-app
  // full_artifact_id = com.wixpress.my-app)
  full_artifact_id?: string;
  // the url (server side)
  url?: string;
  // the url (server side)
  serverUrl?: string;
  // the url (page side)
  pageUrl?: string;
  // hosting platform new (9.9.24)
  hostingEnvironment?: string;
  // yes / no 
  hasInternetConnection?: boolean;
  // the session id from the mapping event
  session_id?: string;
  // entity_fqdn
  entity_fqdn?: string;
  // method_fqn
  method_fqn?: string;
  // server_artifactid
  server_artifactid?: string;
};
export type pingMarketingConsentUnsubscribeClickSrc19Evid10001Params = {
  // msid
  msid?: string;
  // app_def_id
  appDefId?: string;
  // hashed_email
  hashed_email?: string;
  // metadata
  metadata?: string;
};
export type unsubscribeEmailPageViewParams = {
  // date_created
  date_created?: DateTime;
  // date_created
  _artificial_ts?: DateTime;
  // uuid in case it's wix user
  uuid?: string;
  // topic_id
  topic_id?: string;
  // contact_id in case it's wix member
  contact_id?: string;
};
export type unsubscribeEmailPageClickParams = {
  // date_created
  date_created?: DateTime;
  // date_created
  _artificial_ts?: DateTime;
  // uuid (in case it's wix user)
  uuid?: string;
  // topic_id
  topic_id?: string;
  // unsubscribe/personalize_preferences/unsubscribe_all
  cta?: string;
  // contact_id in case it's wix member
  contact_id?: string;
};
export type unsubscribeEmailPersonalizePreferencesClickParams = {
  // date_created
  date_created?: DateTime;
  // date_created
  _artificial_ts?: DateTime;
  // (item_name:an_alert_by_wix, toggle:true}
  prev_value?: string;
  // topic_id
  topic_id?: string;
  // (item_name:an_alert_by_wix, toggle:true}
  new_value?: string;
  // contact_id
  contact_id?: string;
};
export type pushNotificationNotificationSentToAssureParams = {
  // app that sent the notification
  app_id?: string;
  // PN azure message ID
  azureMessageId?: string;
  // iOS/Android
  messagePlatform?: string;
  // true if user muted notifications
  isMuted?: boolean;
  // app that sent the message. WixApp for oneapp
  mobileTenant?: string;
  // the notification activity type
  activityType?: string;
  // PN message id
  messageId?: GUID;
  // id for tracking notifications
  correlationId?: string;
  // app that sent the notification
  appId?: string;
};
export type pushNotificationNotificationSentToDeviceParams = {
  // app that sent the notification
  app_id?: string;
  // ios/android
  platform?: string;
  // PN azure message Id
  azureMessageId?: string;
  // ios/android
  messagePlatform?: string;
  // state of sending
  state?: string;
  // true if user muted notifications
  isMuted?: boolean;
  // number of devices that got the message
  completedCount?: number;
  // number of devices failed to receive notification
  errorCount?: number;
  // app that sent the message, WixApp for oneapp
  mobileTenant?: string;
  // the notification activity type
  activityType?: string;
  // PN message id
  messageId?: GUID;
  // app that sent the notification
  appId?: string;
  // device message id from assure
  dMessageId?: GUID;
};
export type homeNotificationCreatedNewParams = {
  // Web / browser / mobile / SMS / email
  channel?: string;
  // True when the notification will be sent via incognito
  is_incognito?: boolean;
  // true if user muted notifications from the app (not from the os)
  is_muted?: boolean;
  // request id
  correlation_id?: string;
  // type of the initiator (app,uuid,contact)
  initiator_type?: string;
  // id for tracking notification
  notification_id?: string;
  // id of the initiator (app,uuid,contact)
  initiator_id?: string;
  // deprecated
  notification_urgency?: string;
  // app that sent the notification
  app_id?: string;
  // Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
  topic?: string;
  // contact_id
  contact_id?: string;
  // msid of the notification
  msid?: GUID;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type notificationsResolveAlertNotificationSrc19Evid1128Params = {
  // resolve/ revoke
  resolve_type?: string;
  // id for tracking notification
  notification_id?: string;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type pingNotificationCreationRequestParams = {
  // the component id of the template (guid, component id as it appears in DevCenter)
  template_component_id?: string;
  // Web / browser / mobile / SMS / email
  channel?: string;
  // the name of the template as it appears in DevCenter
  template_name?: string;
  // True when the notification will be sent via incognito
  is_incognito?: boolean;
  // request id
  correlation_id?: string;
  // app version as it appears in DevCenter, the app version of the app which created the template
  app_version?: string;
  // type of the initiator (app,uuid,contact)
  initiator_type?: string;
  // id for tracking notification
  notification_id?: string;
  // id of the initiator (app,uuid,contact)
  initiator_id?: string;
  // the setting group of the notification
  setting_group?: string;
  // app that sent the notification
  app_id?: string;
  // Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
  topic?: string;
  // contact_id
  contact_id?: string;
  // a guid that will be updated in each app_version (could be changes in the component)
  ping_template_id?: string;
  // the template description as it appears in DevCenter
  template_description?: string;
  // site guid
  msid?: GUID;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type pingNotificationSendParams = {
  // web/mobile/browser/sms/email
  channel?: string;
  // in case the channel is email: email provider [responsys/contacts_mailer/shoutout], in case channel is sms: channels when the notification sent to channels/sms gateway when the notifications sent to Twillio
  provider?: string;
  // subaccount_id
  subaccount_id?: string;
  // correlation_id
  correlation_id?: string;
  // app_version
  app_version?: string;
  // id for tracking notification
  notification_id?: string;
  // token
  token?: string;
  // app_id of the vertical requested the notification.
  app_id?: string;
  // target
  target?: string;
  // contact_id
  contact_id?: string;
  // os_category
  os_category?: string;
  // An ID for a group of similar notifications clustered in feed
  groupNotificationId?: string;
};
export type pingNotificationFilteredParams = {
  // Web / browser / mobile / SMS / email
  channel?: string;
  // request id
  correlation_id?: string;
  // type of the initiator (app,uuid,contact)
  initiator_type?: string;
  // If it's filtered then this is the reason. f.e. - "no members area"
  reason?: string;
  // id for tracking notification
  notification_id?: string;
  // true if it's filtered and won't be sent. - relevant for web only and until 9.11
  isFilter?: boolean;
  // id of the initiator (app_id,uuid,contact_id)
  initiator_id?: string;
  // the token of the mobile device
  token?: string;
  // app that sent the notification
  app_id?: string;
  // Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
  topic?: string;
  // contact_id
  contact_id?: string;
  // msid of the notification
  msid?: GUID;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type androidNotificationReceivedSrc19Evid1134Params = {
  // request id
  correlation_id?: string;
  // followers, site subscribers / site members
  audience_id?: string;
  // initiator_type
  initiator_type?: string;
  // initiator_id
  initiator_id?: string;
  // Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
  topic?: string;
  // the msid triggered the call
  msid?: GUID;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type androidNotificationReceivedParams = {
  // if all notifications are muted from the os. True if there is permission, False if there isn't permission.
  pushApproved?: boolean;
  // if the specific channel of the notification is muted. True if muted, False if unmuted.
  is_muted?: boolean;
  // True if displayed successfully, False if wasn't displayed (please ignore this field values until further update, it's WIP currently)
  is_displayed?: boolean;
  // payload
  payload?: string;
  // correlation_id
  correlation_id?: string;
  // the error which caused the notification to not display
  reason?: string;
  // id for tracking notification
  notification_id?: string;
};
export type pingReviewSendingListParams = {
  // is_multilingual
  is_multilingual?: boolean;
  // request id
  correlation_id?: string;
  // followers, site subscribers / site members
  audience_id?: string;
  // sending status : filtered/success
  result?: string;
  // initiator_type
  initiator_type?: string;
  // filtered reason: permissions/language
  reason?: string;
  // initiator_id
  initiator_id?: string;
  // contact's language
  language?: string;
  // Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
  topic?: string;
  // contact_id
  contact_id?: string;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type pingNotificationFilteredBeforeCreatedStageParams = {
  // recipient uuid (if the recipient is user, otherwise send null)
  recipient_uuid?: GUID;
  // Web / browser / mobile / SMS / email
  channel?: string;
  // request id
  correlation_id?: string;
  // type of the initiator (app,uuid,contact)
  initiator_type?: string;
  // the reason the notification was filtered
  reason?: string;
  // id for tracking notification
  notification_id?: string;
  // id of the initiator (app_id,uuid,contact_id)
  initiator_id?: string;
  // the token of the mobile device
  token?: string;
  // contact_id (when the recipient is contact, otherwise send null)
  recipient_contact_id?: string;
  // app that sent the notification
  app_id?: string;
  // Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
  topic?: string;
  // msid of the notification
  msid?: GUID;
  // A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
  template_id?: string;
};
export type dummyNameSrc19Evid1256700Params = {
};
export type mobileAppSettingsChangeStatusOfNotificationCategoryInOsNotificationsSettingsParams = {
  // user guid, user can be owner or even member, uuid will be sent from all mobile apps besides branded
  uuid?: string;
  // the new status of notifications category after the user costumed this category
  newStatus?: string;
  // new status of push notification permission on device with details (the status after the change)
  pushPermissionDetailed?: string;
  // the name of the mobile app the user changed it's settings, f.e: owner, spaces etc.
  mobileApp?: string;
  // the notification category the user edited
  category?: string;
  // contact guid, the contact guid will be sent in case of member login in branded app
  contact_id?: string;
};
export type contactIsUnsubscribedFromEmailsSmsParams = {
  // The channel the contact unsubscribed from: email/sms
  channel?: string;
  // in case the channel is sms hashed phone will be reported, otherwise null
  hashed_phone?: string;
  // in case the channel is email hashed email will be reported, otherwise null
  hashed_email?: string;
  // app_id - the app id of the app that owned the flow the user did unsubscribe from
  app_id?: string;
  // in case the contact reached the unsubscribe page through clicking on a notification report the flow_id as it sent in event 19:1130, otherwise report generic flow_id to be able to connect between the server and client events.
  flow_id?: string;
  // the site’s guid the contact did unsubscribe to notifications from
  msid?: string;
};
export type smsStatusDeliveredToPingByTwilioParams = {
  // when the recipient is user send the uuid, otherwise null
  recipient_uuid?: GUID;
  // The number of segments of the sms message (we are paying for each segment, one message could have more than 1 segment,  segment is defined by limited number of chars)
  segments_number?: number;
  // the id of the subaccount requested to send sms
  subaccount_id?: string;
  // if the sms notification was initiated by an app report 'app', in case it was initiated by user report 'uuid'
  initiator_type?: string;
  // the ping notification_id as we sent it to Twilio
  notification_id?: string;
  // if the sms notification was initiated by an app report the app_id, in case it was initiated by user report the uuid
  initiator_id?: string;
  // how much are we paying for each sms notification, the value is dollar multiple by 10,000. in order to extract dollar we should divide by 10,000
  cost?: number;
  // if the sms failed to send (by Twilio) the error messages which is the reason for failing. otherwise null
  error_msg?: string;
  // the app id that triggered the sms request
  app_id?: string;
  // when the recipient is contact send the contact_id, otherwise null
  contact_id?: GUID;
  // delivered/undelivered/failed
  notification_status?: string;
  // the country code the sms was sent to by Twillio
  sms_country_code?: string;
  // guid of the sms that Twilio is returning it's status
  sms_id?: string;
  // the template_id of the sms message
  template_id?: string;
};
export type errorEventParams = {
  // dsc
  dsc?: string;
  // Time in ms from load to error
  response_time?: number;
  // is_rollout
  is_rollout?: boolean;
  // initiator_name
  initiator_name?: string;
  // builder_type
  builderType?: string;
  // error scope
  errscp?: string;
  // changed from did -> site_id on Oct 03, 2013
  site_id?: GUID;
  // error name
  errn?: string;
  // 4st extra parameter
  p4?: string;
  // the major version of html editor
  majorver?: string;
  // target name, api call or class
  trgt?: string;
  // is_live_editor
  isLiveEditor?: boolean;
  // Time in ms from load to error
  ts?: number;
  // player_version
  playerVersion?: string;
  // artifact_version
  artifactVersion?: string;
  // users_on_page_count
  usersOnPageCount?: number;
  // viewmode
  viewmode?: string;
  // error_description_short
  error_description_short?: string;
  // data_center
  data_center?: string;
  // screen_resolution
  screenResolution?: string;
  // 3rd extra parameter
  p3?: string;
  // changed from did -> site_id on Oct 03, 2013
  did?: GUID;
  // is_sg
  isSg?: boolean;
  // ds_origin
  dsOrigin?: string;
  // 2nd extra parameter
  p2?: string;
  // token
  token?: string;
  // session_id
  sessionId?: string;
  // error code
  errc?: number;
  // stacktrace
  stack?: string;
  // viewer_name
  viewerName?: string;
  // app_id
  app_id?: string;
  // severity of the error
  sev?: number;
  // category id
  cat?: number;
  // dsc
  errormsg?: string;
  // users_on_site_count
  usersOnSiteCount?: number;
  // 1st extra parameter
  p1?: string;
  // msid
  msid?: GUID;
  // base_version
  base_version?: number;
  // issue (sub-category)
  iss?: number;
};
export type dashboardDeleteAndRestoreSiteOpenPopupParams = {
  // deprecated
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // popup_name
  popup_name?: string;
};
export type pageClassifierSrc5Evid10000Params = {
  // the page id (the component id of the page)
  page_id?: string;
  // the component name of the page
  page_name?: string;
  // the page's route
  route?: string;
  // uuid
  uuid?: string;
  // msid
  msid?: string;
  // revision
  revision?: number;
  // entity / collection / settings 
  pageType?: string;
  // accuracy of the page type
  score?: number;
  // url
  url?: Url;
  // preview
  previewUrl?: string;
  // yes if it is on Patterns 
  isPatternsPage?: boolean;
  // Full Route
  fullRoute?: string;
};
export type dashboardDeleteAndRestoreSiteRestoreSiteClickParams = {
  // view_type
  view_type?: string;
  // button name
  origin?: string;
  // platform
  platform?: string;
  // -
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsHoverYourFormFieldsParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsHoverFieldsInContactListParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsClickOnDropdownFieldParams = {
  // 'don't save', field name or create custom field
  choose?: string;
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmitButtonSettingsUpdateValueOfSubmitButtonParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
  // name of updated value
  value?: string;
};
export type formBuilderFormSubmitSettingsClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsDisplayErrorPageParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // 'contact labels','email notification'
  tabName?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsErrorPageTryAgainClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // 'contact labels','email notification'
  tabName?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsCreateEmailMarketingParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // 'send a newsletter','special offer','promote business','start from scratch','explore all templates'
  email_marketing_type?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSubscriberDoubleOptInParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSubscriberDoubleOptInLearnMoreParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardSiteActivityCenterClickDeleteItemParams = {
  // name
  name?: string;
  // item_id
  item_id?: GUID;
  // source
  source?: string;
  // is_deleted
  is_deleted?: boolean;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // items_count
  items_count?: number;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // is_archived
  is_archived?: boolean;
  // feed_id
  feed_id?: GUID;
};
export type formBuilderFormSettingsSubscriberDoubleOptInEnableParams = {
  // ADI / Editor
  builderOrigin?: string;
  // true for on, false for off
  toggle?: boolean;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSubscriberDoubleOptInSubmitMessageParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInboxOptInOutWhoToNotifyParams = {
  // 'contributers','other'
  choose?: string;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInboxOptInOutUpdateEmailParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInboxOptInOutLearnMoreParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // contributors/others
  current_option?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInboxOptInOutAreYouSureParams = {
  // 'cancel','yes'
  choose?: string;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // true if check false if not
  checkbox?: boolean;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInboxOptInOutFindOutMoreParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsEmailNotificationAddContributerParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsEmailNotificationAddNewEmailParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsEmailNotificationWantToNotifyDonTShowThisAgainParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteActivityCenterClickUndoDeletedItemParams = {
  // item_id
  item_id?: GUID;
  // source
  source?: string;
  // is_deleted
  is_deleted?: boolean;
  // view_type
  view_type?: string;
  // action_url
  action_url?: string;
  // referral
  referral?: string;
  // action_desc
  action_desc?: string;
  // origin
  origin?: string;
  // items_count
  items_count?: number;
  // expire
  expire?: number;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // is_archived
  is_archived?: boolean;
  // feed_id
  feed_id?: GUID;
};
export type workflowsSettingsClickParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsShowArchiveParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsHideArchiveParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsSetAutomationsParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // 'more actions' / 'phase tooltip'
  origin?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsDeleteWorkflowClickParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsDeleteWorkflowConfirmationParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsAddNewWorkflowParams = {
  // uuid
  uuid?: GUID;
  // workflow_id of new created workflow
  new_workflow_id?: GUID;
  // {'add' / 'board dropdown icon'}
  origin?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsBoardUpdateBoardNameIconClickParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsBoardUpdateBoardNameCompleteParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsBoardDropdownIconClickParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardSiteActivityCenterClickOnArchiveItemParams = {
  // item_id
  item_id?: GUID;
  // source
  source?: string;
  // is_deleted
  is_deleted?: boolean;
  // view_type
  view_type?: string;
  // action_url
  action_url?: string;
  // referral
  referral?: string;
  // action_desc
  action_desc?: string;
  // origin
  origin?: string;
  // items_count
  items_count?: number;
  // expire
  expire?: number;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // is_archived
  is_archived?: boolean;
  // feed_id
  feed_id?: GUID;
};
export type workflowsAddNewPhaseClickParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // {'add', 'steps area'}
  origin?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsAddNewPhaseSaveParams = {
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsAddNewCardClickParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // {'add new card button' / 'phase settings', 'add', 'contact panel'}
  origin?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsAddNewCardSaveParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsPhaseSettingsClickParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsPhaseSettingsCreateAutomationParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsPhaseSettingsRenameStepClickParams = {
  // phase_id
  phase_id?: GUID;
  // phase name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // {settings/by click}
  origin?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsPhaseSettingsRenameStepCompleteParams = {
  // phase_id
  phase_id?: GUID;
  // new phase name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsPhaseSettingsDeleteStepClickParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsPhaseSettingsDeleteStepConfirmParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardUserClickedOnContactSNameFromUserActivityParams = {
  // name
  name?: string;
  // item_id
  item_id?: GUID;
  // source
  source?: string;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // feed_id
  feed_id?: GUID;
};
export type workflowsCardSettingsClickParams = {
  // phase_id
  phase_id?: GUID;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // card_id
  card_id?: GUID;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsCardSettingsCardActionsParams = {
  // phase_id
  phase_id?: GUID;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // {settings/by click}
  origin?: string;
  // card_id
  card_id?: GUID;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
  // 'Rename Card' / 'View Contact'/ 'Add Task'/ 'Send Message' / 'Send Price Quote'/ 'Send Invoice' / 'Archive Card'
  action?: string;
};
export type workflowsCardSettingsEditCardNameCompleteParams = {
  // phase_id
  phase_id?: GUID;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // 'contact panel' / 'workflows'
  origin?: string;
  // card_id
  card_id?: GUID;
  // card_name
  cardName?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsBoardSelectABoardParams = {
  // previous_workflow_id
  previous_workflow_id?: GUID;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // previous_workflow_name
  previous_workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsSettingsLearnMoreClickParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsIntroStep1WorkSmarterWithWorkflowsParams = {
  // step number
  step_no?: number;
  // true/false
  is_final_step?: boolean;
  // msid
  msid?: GUID;
  // {'next'/'dismiss'}
  action?: string;
};
export type workflowsIntroStep2HowItWorksParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsIntroStep3MoveCardsAsYouGoParams = {
  // uuid
  uuid?: GUID;
  // yes, no
  isSuccessful?: boolean;
  // msid
  msid?: GUID;
};
export type workflowsIntroStep4SaveTimeWithAutomationsParams = {
  // uuid
  uuid?: GUID;
  // tooltip_type
  tooltip_type?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type workflowsIntroStep5CompleteSatisfactionParams = {
  // uuid
  uuid?: GUID;
  // error_type
  error_type?: string;
  // workflow_id
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type clickOnSidebarSHeaderParams = {
  // unique name that doesn't change when changing the name on the side bar
  name?: string;
  // view_type
  view_type?: string;
  // app_id of the item
  app_id?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type workflowsIntroStep6ThatSItParams = {
  // phase_id
  phase_id?: GUID;
  // phase_name
  phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // msid
  msid?: GUID;
};
export type dummyNameSrc5Evid10600Params = {
};
export type workflowsGoToBoardFromContactPanelParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // card_id
  card_id?: GUID;
  // workflow_id
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsConnectContactToWorkflowFromContactPanelParams = {
  // uuid
  uuid?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsClickUpdateContactInWfFromContactPanelParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // card_id
  card_id?: GUID;
  // workflow_id
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsClickOnCompletedArchivedFlowsInContactPanelParams = {
  // uuid
  uuid?: GUID;
  // open / close
  click_action?: string;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsErrorCardCannotBeRemovedInContactPanelParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // card_id
  card_id?: GUID;
  // workflow_id
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsChangePhaseInContactPanelParams = {
  // to_phase_name
  to_phase_name?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // 'contact panel'
  origin?: string;
  // card_id
  card_id?: GUID;
  // from_phase_name
  from_phase_name?: string;
  // workflow_id
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsClickOnSaveChangesInContactPanelParams = {
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // card_id
  card_id?: GUID;
  // workflow_id
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsMoveCardParams = {
  // 'move' , 'restore' , 'archive'
  moving_type?: string;
  // uuid
  uuid?: GUID;
  // workflow_name
  workflow_name?: string;
  // 'contact panel' / 'workflows'
  origin?: string;
  // card_id
  card_id?: GUID;
  // 'win step' , 'middle step', 'archive step'
  move_to_step?: string;
  // workflow_id of current flow
  workflow_id?: GUID;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type workflowsEmptyStatePageLoadedParams = {
  // msid
  msid?: GUID;
  // uuid
  uuid?: GUID;
};
export type sidebarState107Params = {
  // when the sidebar is opened on a third level item- should represents the second level of the active name field, else=null
  sub_section_name?: string;
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the name of the section (highest level in the shown sidebar) -in case of expand it will be the expanded menu name
  section_name?: string;
  // list of category items in the main sidebar menu (might be under the fold)
  category_items_list?: string;
  // items_below_fold
  items_below_fold?: string;
  // referral of previous page
  referral_info?: string;
  // view_type
  view_type?: string;
  // the active sidebar item the user is navigated to
  active_item?: string;
  // the previous page id
  prev_page_id?: string;
  // the active page id
  page_id?: string;
  // deprecated
  active_item_cta?: string;
  // list of sub_category items (second level) in the expanded sidebar menu (might be under the fold)
  sub_category_items_list?: string;
  // when the sidebar is opened on a third level item- list of third level items in the expanded sidebar menu, else null
  second_sub_category_items_list?: string;
  // deprecated
  platform?: string;
  // items_above_fold
  items_above_fold?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // MA/editor
  hosting?: string;
  // --
  msid?: GUID;
  // the page loaded with the sidebar (not internal page - module)
  view?: string;
};
export type workflowsEmptyStateClickOnGetStartedParams = {
  // msid
  msid?: GUID;
  // uuid
  uuid?: GUID;
};
export type workflowsTemplatesModalIsPresentedParams = {
  // msid
  msid?: GUID;
  // uuid
  uuid?: GUID;
};
export type workflowsClickOnUseTemplateOrStartFromScratchOnTemplatesModalParams = {
  // 'Sales Leads' / 'Hiring Process' / .../'To Do' / 'Start from Scratch'
  template_name?: string;
  // uuid
  uuid?: GUID;
  // msid
  msid?: GUID;
  // template_id
  template_id?: GUID;
};
export type workflowsClickOnDismissTemplatesModalParams = {
  // msid
  msid?: GUID;
  // uuid
  uuid?: GUID;
};
export type cookiesBannerUouUserClickOnVisitorDataOptionParams = {
  // data request / consent log
  action?: string;
};
export type cookiesBannerUouUserHoverOverTooltipParams = {
  // consent button text / setting button text / privacy policy text / page on my site / external web address / audience / save button text /  essential cookies/ marketing cookies / functional cookies / analytics cookies
  name?: string;
};
export type cookiesBannerUouCookieConsentBannerGetStartedClickParams = {
  // get started / edit
  action?: string;
};
export type cookiesBannerUouDisplayCookieBannerOnSiteCtaParams = {
  // on / off
  toggle?: boolean;
};
export type cookiesBannerUouUserClickedOnAdvancedOptionParams = {
};
export type cookiesBannerUouUserClickedOnTheGeneralXButtonParams = {
};
export type mobileDashboardCreateNewSiteParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // siteless/ my-sites
  view?: string;
};
export type cookiesBannerUouSavePublishClickParams = {
  // changed / not changed
  general_text?: string;
  // changed / not changed
  essential_cookies_text?: string;
  // url
  url_privacy_policy?: Url;
  // null / square / rounded corners / round
  changed_button_style?: string;
  // changed / not changed / null
  custom_font_changed?: string;
  // changed / not changed / null
  custom_text_size_changed?: string;
  // all visitors
  audience?: string;
  // changed / not changed
  settings_button_text?: string;
  // dark/light/custom
  banner_color?: string;
  // color ratio for accessibility thresholds based on webaim contract checker
  custom_colors_contrast_ratio?: string;
  // changed / not changed
  functional_cookies_text?: string;
  // null / changed / not changed
  changed_second_color?: string;
  // off / on
  decline_all_button?: string;
  // Page On My Site / external Web Address
  link_option?: string;
  // changed / not changed
  consent_button_text?: string;
  // null / yes/ no
  custom_color_accessible?: string;
  // Null / Bottom Right / Bottom Left / Center Right / Center Left
  revisit_settings_button_location?: string;
  // changed / not changed
  save_button_text?: string;
  // on / off
  revisit_settings_button?: string;
  // changed / not changed
  privacy_policy_link_text?: string;
  // off / standard/ custom
  cookie_status?: string;
  // changed / not changed
  analytics_cookies_text?: string;
  // changed / not changed
  marketing_cookies_text?: string;
  // null / changed / not changed
  changed_main_color?: string;
};
export type cookiesBannerUouUserWithPopUpCtaParams = {
  // right click / left click
  action?: string;
  // Privacy Policy link is missing / Reset cookie consent log / something went wrong / Cookie banner is published / Hide cookie banner / Your cookie policy is now live / Disable customized cookie banner / Enable wix standard cookie banner/  Disable wix standard cookie consent banner / sure you want to leave
  pop_up_type?: string;
};
export type cookiesBannerUouAdvancedOptionsCtaParams = {
  // customize cookies categories text /  customized cookie banner / reset your consent log
  action?: string;
};
export type cookiesBannerUouSetUpAPrivacyPolicyClicksParams = {
  // learn how / sub learn how / sub learn more
  action?: string;
};
export type cookiesBannerUouAddADoNotSellDateLinkClickParams = {
};
export type cookiesBannerUouUouClickOnDoNotSellMyDataLinkParams = {
};
export type cookiesBannerUouUouDisableDataTransfersPopUpIsDisplayParams = {
};
export type cookiesBannerUouUouWithDisableDataTransfersPopUpParams = {
  // close / disable transfers
  action?: string;
};
export type cookiesBannerUouUserConsentLogCtaParams = {
  // learn more/ learn how/ download
  action?: string;
};
export type cookiesBannerUouExportConsentLogCtaParams = {
  // close / Export / cancel
  action?: string;
  // 7 days / 4 weeks / 3 months / 6 months
  time_option?: string;
};
export type cookiesBannerUouAPopUpIsDisplayParams = {
  // Privacy Policy link is missing / Reset cookie consent log / something went wrong / Cookie banner is published / Hide cookie banner / Your cookie policy is now live / Disable customized cookie banner / Enable wix standard cookie banner/  Disable wix standard cookie consent banner / sure you want to leave
  pop_up_type?: string;
};
export type cookiesBannerUouSearchMembersByIdParams = {
  // member id
  member_id_filled?: string;
};
export type cookiesBannerUouReviewRequirementsAlertParams = {
};
export type formBuilderFormAddNewFieldInnerTabsClickParams = {
  // ADI, Editor
  builderOrigin?: string;
  // which field catogery whose choosen
  tab_name?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderEditorXAddASubscribeCheckboxParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form comp id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderMigratedFormContactFormToWixFormSuccessParams = {
  // visitor_id
  visitor_id?: GUID;
  // form comp id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormAddNewRuleParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // emptyState, rulelist, fieldsettings
  origin?: string;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormLearnMoreParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormIfClickOnDropdownParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormIfChooseFromDropdownParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // fieldType
  fieldType?: string;
  // msid
  msid?: GUID;
};
export type accountManagerStartLoadingAccountManagerParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // initial_load
  initial_load?: boolean;
  // platform
  platform?: string;
};
export type formBuilderConditionalFormIfFilledNotFilledParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // filledOption
  filledOption?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormIfFilledSelectionOptionParams = {
  // count how many fields were choosen
  count?: number;
  // choose
  choose?: string;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormThenClickOnDropdownParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormThenChooseFromDropdownParams = {
  // how many fields selected
  count?: number;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormIsClickOnDropdownParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormIsChooseFromDropdownParams = {
  // ADI, Editor
  builderOrigin?: string;
  // which option the user choose
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormSaveRuleParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormMoreActionClickParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormMoreActionChooseParams = {
  // which option the user chooses
  choose?: string;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormContradictingRuleWarningParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type accountManagerFinishLoadingAccountManagerParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // initial_load
  initial_load?: boolean;
  // platform
  platform?: string;
  // loading_time from 110
  loading_time?: number;
};
export type formBuilderConditionalFormSaveRuleErrorParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // reason why rule error
  reason?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderMigratedFormContactFormToWixFormPhoneNumberIssueParams = {
  // visitor_id
  visitor_id?: GUID;
  // form comp id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormViewRuleFromFieldSettingsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderConditionalFormLearnMoreFromTooltipFieldSettingsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template
  template?: string;
  // msid
  msid?: GUID;
};
export type crmHomeIntegrationsMarketingConnectParams = {
  // view_type
  view_type?: string;
  // which connection the user choose
  connectTab?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeIntegrationsFinanceViewAllParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeIntegrationsFinanceConnectParams = {
  // view_type
  view_type?: string;
  // which connection the user choose
  connectTab?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type accountSettingsDisableSocialAccountConfirmationModalLoadParams = {
  // the social provider the user tried to disable (apple/google/facebook)
  provider_id?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountManagerPageComponentStartLoadingAccountManagerParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // prev_view
  prev_view?: string;
  // prev_sub_view
  prev_sub_view?: string;
  // platform
  platform?: string;
  // view
  view?: string;
};
export type accountSettingsDisableSocialAccountClickDisableInConfirmationModalParams = {
  // the social provider the user tried to disable (apple/google/facebook)
  provider_id?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type crmHomeGoToMarketingToolsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormMoveStateInFunnelParams = {
  // which state (step) the user was from
  fromState?: string;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // which state the user moved to
  toState?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormCloseFunnelParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormQuestionMarkFunnelParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormDemoSiteFunnelParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormChoosePaymentFormTypeParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // type of payment form
  type?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormEnterItemParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type formBuilderPaymentFormEnterPriceParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type accountManagerPageComponentFinishLoadingAccountManagerParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // prev_view
  prev_view?: string;
  // prev_sub_view
  prev_sub_view?: string;
  // platform
  platform?: string;
  // view
  view?: string;
  // loading_time
  loading_time?: number;
};
export type dummyNameSrc5Evid1130Params = {
  // channel
  channel?: string;
  // correlation_id
  correlation_id?: string;
  // notification_id
  notification_id?: string;
  // app_id
  app_id?: string;
  // target
  target?: string;
  // contact_id
  contact_id?: string;
};
export type dummyNameSrc5Evid1131Params = {
};
export type notificationInvalidTokensParams = {
  // mobile/ browser notification
  channel?: string;
  // device_token
  device_token?: string;
  // wix_app / wix_browser_notifications
  app?: string;
  // contact_id
  contact_id?: string;
};
export type formBuilderPaymentFormHoverPriceParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // ex. ‘paymentWizard_single’/ ‘next_paymentWizard_single’
  origin?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormDeleteItemParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormAddAnotherItemParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormHoverDeleteItemParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormReachLimitOfItemsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // number_of_items reached
  numberOfItems?: number;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormTellUsMoreItemsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormEnterMinMaxPriceParams = {
  // if the value inserted in min or max
  minMax?: string;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type accountManagerClickOnSidebarItemParams = {
  // unique name that doesn't change when changing the name on the side bar
  name?: string;
  // the name that appears in the sidebar - can be changed
  sidebar_name?: string;
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type formBuilderPaymentFormConnectPaymentMethodParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormLearnMoreStep4Params = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormDashboardContinueGreenBannerParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormDashboardCloseGreenBannerParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormChangePaymentMethodParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormDiscardFunnelParams = {
  // ADI, Editor
  builderOrigin?: string;
  // 'continue','discard','cancel'
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormPaymentSettingsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // fieldType
  fieldType?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormOpenPaymentOverviewParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormGeneralSettingsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type accountManagerClickOnBackInSidebarItemParams = {
  // unique name that doesn't change when changing the name on the side bar
  name?: string;
  // the name that appears in the sidebar - can be changed
  sidebar_name?: string;
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type formBuilderPaymentFormSettingsAddAnotherItemParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingsItemMoreActionsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingsItemMoreActionsChooseParams = {
  // ADI, Editor
  builderOrigin?: string;
  // 'edit','delete','rename'
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingsConnectPaymentWhenPaymentNotConnectedParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // hover,general
  origin?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingsRestoreFieldParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // hover,general
  origin?: string;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingsStopAcceptingPaymentsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // keep,delete,cancel
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type settingsLobbySectionIsSeenParams = {
  // site-details/general/ecommerce/..
  section_name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // the location of section in page (order from 0,1,..)
  section_loaction_on_page?: string;
  // MA/editor/onboarding
  hosting?: string;
  // --
  msid?: GUID;
};
export type settingsLobbyClickOnItemParams = {
  // the location of item in page (order from 0,1,..
  item_location_on_page?: number;
  // site-details/general/ecommerce/..
  section_name?: string;
  // if the helper is dismiss then the value is 'dismissed'
  click_type?: string;
  // view_type
  view_type?: string;
  // the cta value (if exists) - f.e. “Get a business number”
  cta_name?: string;
  // page component id of lined page
  page_id?: string;
  // item_location in this format {section,column,row}
  item_location?: string;
  // upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
  item_name?: string;
  // If the red badge is shown when the user clicks then "true", if not "false"
  status?: string;
  // platform
  platform?: string;
  // MA/editor/onboarding
  hosting?: string;
  // --
  msid?: GUID;
  // the category the item belongs to (in english)
  categoryName?: string;
  // page name
  pageName?: string;
  // the location of the category in page (order from 0,1,..)
  categoryLocationOnPage?: number;
};
export type formBuilderSubmissionLimitReasonForLimitParams = {
  // ADI, Editor
  builderOrigin?: string;
  // which option the user choose
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type foldersMarkUnmarkSelectAllButtonParams = {
  // mark/unmark
  name?: string;
  // view_type
  view_type?: string;
  // grid/ list-view
  sub_view?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // my-sites
  view?: string;
};
export type formBuilderSubmissionLimitReasonForLimitInfoHoverParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type reportNetworkParams = {
  // referer host
  referer_host?: string;
  // total duration of the request
  duration?: number;
  // if the user was active before the resource was fetched (Chrome feature)
  has_been_active?: boolean;
  // is_cached
  is_cached?: boolean;
  // response size (without headers)
  encoded_body_size?: number;
  // resource path
  path?: string;
  // response header size
  headers_size?: number;
  // is_blocking
  is_blocking?: boolean;
  // time that the request was delayed by the browser
  stall_queue_time?: number;
  // last_referer_host
  last_referer_host?: string;
  // user_interactions_count
  user_interactions_count?: number;
  // response_start
  response_start?: number;
  // last_referer_path_name
  last_referer_path_name?: string;
  // transfer_size
  transferSize?: number;
  // request_start
  request_start?: number;
  // the type of the resource initiator (img, css, xhr, fetch...)
  initiator_type?: string;
  // resource hostName
  host_name?: string;
  // time to fetch all bytes from the server
  download_time?: number;
  // time to initiate DNS connection
  dns_time?: number;
  // session id of the running script (per instance)
  pixel_session_id?: string;
  // navigation_id
  navigation_id?: string;
  // referer path
  referer_path_name?: string;
  // dom content loaded time
  dcl?: number;
  // script version
  version_num?: number;
  // time to connect to the server (HTTP)
  connection_time?: number;
  // response_status_code
  response_status_code?: number;
  // dom load time
  load_time?: number;
  // referer
  referer?: string;
  // time that took the server to retrieve the first byte
  server_response_time?: number;
  // time of the resource event
  event_start_time?: number;
  // dom complete time
  dom_complete?: number;
  // protocol
  protocol?: string;
};
export type formBuilderSubmissionLimitLimitByNumberTotalNumberParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
  // How many users have entered a numeric value for the limit
  value?: number;
};
export type formBuilderSubmissionLimitLimitByNumberEditMessageParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByNumberNumberInfoHoverParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByNumberMessageInfoHoverParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByDateEnteredDateParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByDateChangeTimeFormatParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByDateChangeTimeFormatInvalidParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByDateChangeDefaultTimeParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitLimitByDateChangeMessageParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type foldersClickOnChangeViewModeParams = {
  // list-view/grid
  click_name?: string;
  // list-view/grid - shows the previous mode
  view_mode?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // my-sites
  view?: string;
};
export type formBuilderSubmissionLimitLimitByDateTimezoneSettingsParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitRestoreSuccessMessageParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type viewInDashboardParams = {
  // item name
  name?: string;
  // the widget name in dashboard (this field added only in new dashboard)
  widget_name?: string;
  // ma
  hosting?: string;
  // --
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsEnableToggleParams = {
  // ADI, Editor
  builderOrigin?: string;
  // on or off (true or false)
  toggle?: boolean;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsMembersAreaLearnMoreParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsBrowserAutocompleteLearnMoreParams = {
  // if the user have members area or not
  state?: string;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsMainTooltipHoverParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsLetMembersEditParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
  // yes or no
  value?: string;
};
export type formBuilderAutofillMemberEmailsDropdownEmailParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsChooseDifferentEmailParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type foldersTooltipShownParams = {
  // trash_tooltip
  name?: string;
  // view_type
  view_type?: string;
  // grid/list
  sub_view?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // my-sites
  view?: string;
};
export type formBuilderAutofillMemberEmailsAddAnEmailFieldParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type veloIdeModalIsOpenedParams = {
  // Custom Action code
  modal_type?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code CTA / Edit CTA / More action CTA
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type veloIdeCodeHasBeenUpdatedParams = {
  // Custom Action code
  modal_type?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code / Edit
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type veloIdeClickOnMoreActionsParams = {
  // Custom Action code
  modal_type?: string;
  // What was the clicked action? Open more actions/ Manage secrets / Install Velo packages / Manage CMS / View Velo API Reference
  action_name?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code / Edit
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type veloIdeClickOnATabParams = {
  // Custom Action code
  modal_type?: string;
  // The chosen tab’s name
  tab_name?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // The chosen tab’s type: Editable Code / Read only documentation
  tab_type?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code / Edit
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type veloIdeModalEndOfProcessParams = {
  // Custom Action code
  modal_type?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code / Edit
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // How did the process end? Save successfully / Save with errors / Cancel
  end_type?: string;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type veloIdeModalClickOnLinksParams = {
  // Custom Action code
  modal_type?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // What was the chosen link? Learn More / Go to the Velo editor
  link_to?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code / Edit
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type veloIdeModalUnsuccessfulSaveParams = {
  // Custom Action code
  modal_type?: string;
  // Additional data in Json structure
  context?: string;
  // page id (for now- of Automation)
  page_id?: string;
  // Error type, like: Network issues
  error_type?: string;
  // window_width
  window_width?: number;
  // Where did the modal open from? Create code / Edit
  origin?: string;
  // External key (like rule id in Automation)
  external_id?: GUID;
  // app id (for now- Automation's id)
  app_id?: GUID;
  // window_height
  window_height?: number;
  // Site id
  msid?: GUID;
};
export type formBuilderAutofillMemberEmailsAddedMembersAreaParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionLimitUouSeenLimitMessageParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template of the form
  template?: string;
  // msid
  msid?: GUID;
};
export type sidebarModalOfFteToTheNewSidebarIsLoadedWithSpecificClusterParams = {
  // the list of items which new and presented
  category_items_list?: string;
  // FTE or tooltip
  origin?: string;
  // installed_apps
  installedApps?: string;
  // page_name
  pageName?: string;
  // the cluster name
  clusterName?: string;
};
export type dashboardSiteSettingsLocationsModalPageViewParams = {
  // view_type
  view_type?: string;
  // name of previous tab
  origin?: string;
  // not sent
  fields?: string;
  // platform
  platform?: string;
  // 0- first location (create), 1-second location, 2- third location,...
  location_details?: string;
  // from where user arrived to locations modal (Editor/MA/bookings...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type foldersClickOnShowMoreShoeLessParams = {
  // the name of the button
  name?: string;
  // grid
  view_mode?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // my-sites
  view?: string;
};
export type dashboardUpgradeLinkParams = {
  // name
  name?: string;
  // view_type
  view_type?: string;
  // upgrade button
  origin?: string;
  // platform
  platform?: string;
};
export type ascendPagePageNavigationClickParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // inbox /chat/seo wiz/ coupons etc.
  item_name?: string;
  // marketing / customer
  category?: string;
  // prev_view
  prev_view?: string;
  // platform
  platform?: string;
  // loading_time
  loading_time?: number;
};
export type workspaceSelectorSelectWorkspaceModalViewParams = {
  // num_workspaces
  num_workspaces?: number;
  // Dashboard / my sites / editor
  page_view?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // the selected workspace's id
  clicked_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  clicked_workspace_role?: string;
  // platform
  platform?: string;
  // the previous workspace's id
  previous_workspace_id?: string;
  // the logged user's role in the previous workspace
  previous_workspace_role?: string;
};
export type workspaceSelectorSelectWorkspaceModalCtaParams = {
  // number of workspaces (=accounts) the logged user is connected to
  num_workspaces?: number;
  // Dashboard / my sites/editor
  page_view?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  clicked_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  clicked_workspace_role?: string;
  // platform
  platform?: string;
  // the previous workspace's id
  previous_workspace_id?: string;
  // the logged user's role in the previous workspace
  previous_workspace_role?: string;
  // cta
  cta?: string;
};
export type workspaceSelectorSelectWorkspaceModalCloseParams = {
  // num_workspaces
  num_workspaces?: number;
  // Dashboard / my sites/editor
  page_view?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // the selected workspace's id
  clicked_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  clicked_workspace_role?: string;
  // platform
  platform?: string;
  // the previous workspace's id
  previous_workspace_id?: string;
  // the logged user's role in the previous workspace
  previous_workspace_role?: string;
  // ESC/backdrop (and other Cases where the modal disappears)
  reason?: string;
};
export type switchWorkspaceModalSelectWorkspaceModalViewParams = {
  // Dashboard / my sites / editor
  page_view?: string;
  // the selected workspace's id
  active_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  active_workspace_role?: string;
  // the previous workspace's id
  original_workspace_id?: string;
  // the logged user's role in the previous workspace
  original_workspace_role?: string;
};
export type switchWorkspaceModalSelectWorkspaceModalCtaParams = {
  // Dashboard / my sites/editor
  page_view?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  active_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  active_workspace_role?: string;
  // the previous workspace's id
  original_workspace_id?: string;
  // the logged user's role in the previous workspace
  original_workspace_role?: string;
  // cta
  cta?: string;
};
export type switchWorkspaceModalWorkspaceModalCloseParams = {
  // Dashboard / my sites/editor
  page_view?: string;
  // the selected workspace's id
  active_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  active_workspace_role?: string;
  // the previous workspace's id
  original_workspace_id?: string;
  // the logged user's role in the previous workspace
  original_workspace_role?: string;
  // ESC/backdrop (and other Cases where the modal disappears)
  reason?: string;
};
export type formBuilderBizMgrFormsBizTipsClickOnTheTipParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // 'automations', 'email marketing' , 'inbox' ,..
  app_name?: string;
  // msid
  msid?: GUID;
};
export type invoicesAddAProductVariantOpenModalParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type ascendPageAscendVideoClickParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // prev_view
  prev_view?: string;
  // platform
  platform?: string;
  // loading_time
  loading_time?: number;
};
export type invoicesAddAProductVariantAddToInvoiceParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type foldersHoverOverThePermissionIcon1212Params = {
  // list-view/grid/inside-folder
  sub_view?: string;
  // folder_id
  folder?: string;
  // site-list-partners-DIY
  origin?: string;
  // root\folder
  view_level?: string;
  // platform
  platform?: string;
  // msid - if it's on site and not a folder
  msid?: GUID;
  // folder_name
  folder_name?: string;
  // number shown in the icon
  number_of_items?: number;
};
export type invoicesCreateOrderNewInvoiceClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardFinishLoadingLoadingTimeFromStartModuleParams = {
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // --
  platform?: string;
  // dashboard/editor/onboarding
  hosting?: string;
  // refferal
  refferal_info?: string;
  // --
  msid?: GUID;
  // requested view
  view?: string;
  // loading from start loading the page
  loading_time?: number;
};
export type sitesListPageFoldersLoaded1216Params = {
  // grid\list
  view_mode?: string;
  // json of the folders state
  folders?: string;
  // The number of sites that are displayed in the current folder
  num_displayed_sites?: number;
  // platform
  platform?: string;
};
export type deleteLocationModalIsOpenedParams = {
  // true/ false if the modal present a few options to choose from
  is_multiple_choice?: boolean;
  // true if trying to delete default location
  is_default?: boolean;
  // business info
  page_view?: string;
  // view_type
  view_type?: string;
  // true if the location is a draft or not
  is_draft?: boolean;
  // platform
  platform?: string;
  // dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type successfullyDeletedLocationParams = {
  // true/ false if the modal present a few options to choose from
  is_multiple_choice?: boolean;
  // true if trying to delete default location
  is_default?: boolean;
  // business info
  page_view?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type foldersClickOnCreateNewFolderParams = {
  // top-bar/dialog/topbar-folder-dropdown
  source?: string;
  // view_type
  view_type?: string;
  // grid / list-view
  sub_view?: string;
  // 0 (my-sites)/1 (folder) /2/3...
  nesting_level?: number;
  // origin
  origin?: string;
  // search/filter/folder/root
  view_level?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // sites-list-enterprise-page/ enterprise-folder-view
  view?: string;
};
export type locationModalFloatingNotificationParams = {
  // notification name
  name?: string;
  // locations-modal
  page_view?: string;
  // view_type
  view_type?: string;
  // which app the modal is opened from
  origin?: string;
  // error
  type?: string;
  // platform
  platform?: string;
  // dashboard/editor/ADI
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type foldersClickOnCreateNewFolderInDialogParams = {
  // view_type
  view_type?: string;
  // grid/list-view
  sub_view?: string;
  // 0 (my-sites)/1 (folder) /2/3..
  nesting_level?: number;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // the name of the folder
  folder_name?: string;
  // my-sites/folder-view
  view?: string;
};
export type apesSaveEditedNotificationParams = {
  // view_type
  view_type?: string;
  // rule id
  rule_id?: GUID;
  // which component was changed
  componentChanged?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type apesSaveEditedNotificationSrc5Evid1235Params = {
  // view_type
  view_type?: string;
  // rule id
  rule_id?: GUID;
  // which component was changed
  componentChanged?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type apesEditNotificationSelectAudienceParams = {
  // which audience was chosen
  audience?: string;
  // view_type
  view_type?: string;
  // rule id
  rule_id?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type foldersClickOnMoveToFolderFromDialogParams = {
  // The url of the current page
  referral_url?: Url;
  // 0 (my-sites), 1 (folder), 2(folder in 1 folder) etc
  destination_nesting_level?: number;
  // number of sites move to the folder
  num_sites_moved?: number;
  // view_type
  view_type?: string;
  // 0 (my-sites), 1 (folder), 2(folder in 1 folder)
  origin_nesting_level?: number;
  // the name of the chosen folder
  folder?: string;
  // site-list \ site-list-enterprise
  origin?: string;
  // folder \ site
  moved_item_type?: string;
  // platform
  platform?: string;
  // number of folders move to the folder
  num_folders_moved?: number;
  // The site msid
  msid?: string;
};
export type suggestionsFeedbackClickOnNavigationButtonInPopupParams = {
  // logo_value
  logo_value?: string;
  // Deprecated - will be implicit in the future
  hosting_platform?: string;
  // account managr/BM/devcenter/etc. (biPageView )
  platformName?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // hosting
  hosting?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnMoreActionsParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnMoreActionsOfASpecificFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnViewFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnEditFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnDeleteFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type foldersClickOnFolderSQuickActionsParams = {
  // name of quick action
  name?: string;
  // grid/list-view
  view_mode?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // 0 (my-sites)/1/2/3… the number define the nested folder number.
  nesting_level?: number;
  // sites-list-enterprise\site-list
  origin?: string;
  // top menu/folder
  cta?: string;
  // page(ROOT)/ folder/ search/filter
  view_level?: string;
  // platform
  platform?: string;
};
export type customerNotificationsSettingsClickInsidePageWithoutEmailsSectionsParams = {
  // button name - f.e. "go to events"
  name?: string;
  // name of the component - f.e. "More notifications"
  section_name?: string;
  // view_type
  view_type?: string;
  // page id of the next page - f.e. page_id of stores settings
  page_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type customerNotificationsSettingsClickOnHideUnhideParams = {
  // component name: notifications_channel/more_notifications/automated_emails you created/system_notifications
  section_name?: string;
  // view_type
  view_type?: string;
  // from where the hide/unhide happened
  origin?: string;
  // true - click on unhide , false - click on hide
  status?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // template_id
  template_id?: string;
};
export type customerNotificationsSettingsPreviewEditClickOnToggleParams = {
  // email/mobile/sms
  channel?: string;
  // view_type
  view_type?: string;
  // automations rule_id
  rule_id?: GUID;
  // on=true, off=false
  status?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ping template_id
  template_id?: string;
};
export type customerNotificationsSettingsPageLoadParams = {
  // all the components loaded to the user
  available_sections?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type bizManagerShowWarningMessageParams = {
  // the name of the message (for example unsupported language message)
  name?: string;
  // The page where the warning message is shown
  page_view?: string;
  // view_type
  view_type?: string;
  // the chosen language
  unsupported_language?: string;
  // unsupport_apps
  unsupport_apps?: string;
  // fold_name
  fold_name?: string;
  // deprecated
  platform?: string;
  // MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnGoToEditorToPublishYourSiteParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnGoToEditorToCreateSubmissionTableParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type copyOfFormBuilderBizMgrClickOnGoToEditorToRemoveFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type customerNotificationsSettingsPreviewEditShowTooltipParams = {
  // view_type
  view_type?: string;
  // automations rule id
  rule_id?: string;
  // deprecated
  platform?: string;
  // msid
  msid?: GUID;
  // turn_off_all_channels
  error_name?: string;
  // ping template_id
  template_id?: string;
};
export type foldersApproveActionFromFolderSQuickActionPopupParams = {
  // view_type
  view_type?: string;
  // 0 (my-sites)/1 (folder) /2/3...
  nesting_level?: number;
  // site-list \ site-list-enterprise
  origin?: string;
  // folder’s quick action / quick actions button
  cta?: string;
  // platform
  platform?: string;
  // delete_folder/rename_folder
  popup_name?: string;
  // the name of the folder
  folder_name?: string;
};
export type formBuilderBizMgrEmptyStateClickOnWatchVideoParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrClickOnLoadMoreFormsParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrMoreActionsViewRemovedFormsParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrMoreActionsLearnMoreParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrMoreActionsSendFeedbackParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type sidebarTooltipOfModalOfFteToTheNewSidebarIsClickedParams = {
};
export type foldersSortListViewParams = {
  // name/date_created/last_edited(name of field sorted by)
  name?: string;
  // view_type
  view_type?: string;
  // list-view
  sub_view?: string;
  // desc/asc
  order?: string;
  // platform
  platform?: string;
  // my-sites
  view?: string;
};
export type verticalsEmailNotificationSentSrc5Evid1270Params = {
  // email
  channel?: string;
  // view_type
  view_type?: string;
  // Notification ID
  notificationId?: GUID;
  // If the email has been sent to member/contact
  contact_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // Descriptive name for the type of email. e.g. Identity.Member_Approved
  template_id?: string;
};
export type verticalsEmailNotificationSentParams = {
  // email
  channel?: string;
  // view_type
  view_type?: string;
  // If the email has been sent to member/contact
  contact_id?: string;
  // platform
  platform?: string;
  // Notification ID
  notificationid?: string;
  // msid
  msid?: GUID;
  // Descriptive name for the type of email. e.g. Identity.Member_Approved
  template_id?: string;
};
export type verticalsEmailNotificationClickedParams = {
  // email
  channel?: string;
  // cta name (in english)
  button_name?: string;
  // view_type
  view_type?: string;
  // If the email has been sent to member/contact
  contact_id?: string;
  // platform
  platform?: string;
  // notification_id
  notificationid?: string;
  // msid
  msid?: GUID;
  // deep_link
  deep_link?: string;
  // Descriptive name for the type of email. e.g. Identity.Member_Approved
  template_id?: string;
};
export type sidebarTooltipOfModalOfFteToTheNewSidebarIsShownParams = {
};
export type sidebarModalOfFteToTheNewSidebarIsClickedParams = {
  // the list of items which new and presented
  category_items_list?: string;
  // click_name
  clickName?: string;
  // installed_apps
  installedApps?: string;
  // page_name
  pageName?: string;
  // the cluster name
  clusterName?: string;
};
export type apesLoadSystemNotificationsModalEndParams = {
  // if the automation is pre installed
  isPreinstalled?: boolean;
  // view_type
  view_type?: string;
  // app id
  origin?: string;
  // how much time it took to load the modal
  loadTime?: number;
  // is it second time that the modal is opened (after edit mode)
  edited?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type accountSettingsCloseYourWixAccountEnterPageParams = {
  // user id
  uuid?: GUID;
  // is this form for closing workspace
  is_workspace?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsCloseYourWixAccountCloseAccountRequestSubmitedParams = {
  // is this form closes only a workspace\account\workspace and closes the account
  context?: string;
  // user id
  uuid?: GUID;
  // is the user closing his workspace or his account
  is_workspace?: boolean;
  // view_type
  view_type?: string;
  // why are you closing the account
  reason?: string;
  // platform
  platform?: string;
  // users feedback
  free_text?: string;
};
export type foldersMarkASiteParams = {
  // mark/unmark
  name?: string;
  // view_type
  view_type?: string;
  // grid/ list-view
  sub_view?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // msid
  msid?: GUID;
  // my-sites
  view?: string;
};
export type formBuilderComplexPhoneSettingsShowCountryCodeDropdownToggleParams = {
  // on/off
  toggle_state?: boolean;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // deprecated
  selection?: string;
  // msid
  msid?: GUID;
  // 'toggle updated by user' , 'toggle updated automatically (the field was deleted)'
  action?: string;
};
export type formBuilderComplexPhoneSettingsShowFieldTitleToggleParams = {
  // on/off
  toggle_state?: boolean;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // deprecated
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneSettingsEnterFieldTitleParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // title name
  value?: string;
};
export type formBuilderComplexPhoneSettingsShowInitialTextOfThePhoneFieldSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'None'/'Placeholder text'
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneSettingsPlaceHolderTextOfThePhoneFieldParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type formBuilderComplexPhoneSettingsIsFieldRequiredParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // yes/no
  is_required?: boolean;
  // vsi
  vsi?: GUID;
  // deprecated
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneSettingsCountryCodeEnterFieldTitleParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // entered name
  value?: string;
};
export type formBuilderComplexPhoneSettingsCountryCodeIncludeCodesFromParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'All countries' / 'My own list'
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneSettingsCountryCodeShowInitialTextSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'None'/'Placeholder text'/'Select from code list'
  selection?: string;
  // msid
  msid?: GUID;
};
export type myAccountSelectSiteFromSiteListPopupParams = {
  // site_id
  site_id?: GUID;
  // view_type
  view_type?: string;
  // grid/list-view
  sub_view?: string;
  // number of sites selected
  num_selected_sites?: number;
  // origin
  origin?: string;
  // place
  place?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // msid
  msid?: GUID;
  // my-sites
  view?: string;
};
export type formBuilderComplexPhoneSettingsCountryCodeShowInitialTextValueParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'None'/'Placeholder text'/'Select from code list'
  selection?: string;
  // msid
  msid?: GUID;
  // Placeholder text
  value?: string;
};
export type formBuilderComplexPhoneSettingsSelectNumberFormatParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'Unformatted','Standard','Custom','Advanced (Regex)'
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneSettingsEnteredNumberFormatParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'Unformatted','Standard','Custom','Advanced (Regex)'
  selection?: string;
  // msid
  msid?: GUID;
  // format value entered
  value?: string;
};
export type formBuilderComplexPhoneSettingsCountryCodeClickOnManageCodeListParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneEditFieldClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // 'main field','country code','phone'
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type dashboardSearchParams = {
  // view_type
  view_type?: string;
  // number of html sites
  no_of_html_sites?: number;
  // deprecated
  text?: string;
  // number of folders
  no_of_folders?: number;
  // where the search took place: site-home, my-sites
  place?: string;
  // deprecated
  no_of_sites?: number;
  // platform
  platform?: string;
  // deprecated
  msid?: GUID;
};
export type foldersClickOnFolderParams = {
  // view_type
  view_type?: string;
  // list-view/grid
  sub_view?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // --
  msid?: GUID;
  // the name of the folder
  folder_name?: string;
  // my-sites
  view?: string;
};
export type crmHomeScrollDownParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsChangeTabParams = {
  // tabTo
  tabTo?: string;
  // view_type
  view_type?: string;
  // tabFrom
  tabFrom?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesClickCardParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // which card was clicked
  card?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesEditNumberingParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesEditLogoParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesBusinessInfoEditThemParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesBusinessInfoEditFieldParams = {
  // field
  field?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesDefaultsNotesEditNotesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesDefaultsNotesLegalTermsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesDefaultsNotesPreviewInvoiceParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type ascendPpPageViewParams = {
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // product name open PP
  origin?: string;
  // app_id
  app_id?: GUID;
  // num_of_packages presented in the PP
  num_of_packages?: number;
  // native or web
  platform?: string;
};
export type financialServicesSettingsPriceQuotesBusinessDetailsSiteSettingsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettingsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsPriceQuotesEditNumberingParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type financialServicesSettingsInvoicesSettingsClickParams = {
  // view_type
  view_type?: string;
  // holds the origin of click
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeGeneralVideoParams = {
  // view_type
  view_type?: string;
  // origin of the video
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesItemsListChooseAProductParams = {
  // For subscriptions, the item selection is not from dropdown, it’s from the modal
  ifVariantModal?: boolean;
  // view_type
  view_type?: string;
  // appDefId
  appDefId?: GUID;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // invoice/ invoice and order
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesItemsListAddNewProductParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesItemsListLinkInTooltipProductsParams = {
  // view_type
  view_type?: string;
  // appDefId
  appDefId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type ascendPpClickOnShowMoreLessParams = {
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // CRM / Promote product  - click show more
  ascend_product?: string;
  // product name open PP
  origin?: string;
  // product name of show more/less
  productName?: string;
  // platform
  platform?: string;
  // more/less
  action?: string;
};
export type invoicesWidgetMoreActionParams = {
  // view_type
  view_type?: string;
  // invoice id
  invoiceId?: GUID;
  // contact id
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetMoreActionChooseAnActionParams = {
  // view_type
  view_type?: string;
  // invoice id
  invoiceId?: GUID;
  // ‘crm home widget/ ‘os-dashboard’
  origin?: string;
  // contact id
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // action name
  action?: string;
};
export type invoicesWidgetResendViaEmailParams = {
  // view_type
  view_type?: string;
  // invoice id
  invoiceId?: GUID;
  // contact id
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetChangeTabParams = {
  // tab to
  tabTo?: string;
  // view_type
  view_type?: string;
  // tab from
  tabFrom?: string;
  // ‘crm home widget/ ‘os-dashboard’
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetCreateNewParams = {
  // view_type
  view_type?: string;
  // ‘crm home widget/ ‘os-dashboard’
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetPreviewInvoiceParams = {
  // view_type
  view_type?: string;
  // invoice Id
  invoiceId?: GUID;
  // ‘crm home widget/ ‘os-dashboard'
  origin?: string;
  // contact id
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetSeeAllInvoicesParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // appDefId of the source
  appDefId?: GUID;
  // ‘invoice preview’, ‘crm home widget/ ‘os-dashboard)
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetReportsViewReportParams = {
  // view_type
  view_type?: string;
  // ‘crm home widget/ ‘os-dashboard’
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesWidgetReportsTimePickerParams = {
  // time picker
  time_frame?: string;
  // view_type
  view_type?: string;
  // ‘crm home widget/ ‘os-dashboard’
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesEditModesEditInvoiceParams = {
  // if order exist
  ifOrderExist?: boolean;
  // if the uou seen the invoice
  hasViewedInvoice?: boolean;
  // view_type
  view_type?: string;
  // origin of the invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // status of the invoice
  invoiceStatus?: string;
};
export type ascendPpScrollToEndParams = {
  // in milisec
  timeInPage?: number;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // product name open PP
  origin?: string;
  // platform
  platform?: string;
};
export type invoicesEditModesEditCustomerInfoModalChooseParams = {
  // option chosen - cancel or proceed
  option?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // which status was the invoice
  invoiceStatus?: string;
};
export type invoicesEditModesNegativePriceToastParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // if no status then create
  invoiceStatus?: string;
};
export type clickOnWixStudioLogoSrc5Evid1332Params = {
  // Dashboard / my sites
  page_view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
};
export type crmDiscoverCrmToolsParams = {
  // view_type
  view_type?: string;
  // which page clicked this link
  pageView?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexPhoneLayoutsDesignSelectedParams = {
  // selected_design
  selected_design?: string;
  // field
  field?: string;
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressShowTheseSubfieldsParams = {
  // visitor_id
  visitor_id?: GUID;
  // name of button
  button_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // is it on true if off false
  isOn?: boolean;
};
export type formBuilderComplexAddressIncludeCountriesFromParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // which selection was made
  selection?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressShowSubfieldTitlesParams = {
  // true if on false if off
  toggle?: boolean;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type ascendPpClickOnPackageInPpParams = {
  // is most popular
  isChecked?: boolean;
  // in milisec
  timeInPage?: number;
  // button name open PP
  referralInfo?: string;
  // regular/hover/swipe_reg/swipe_hover
  buttonType?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // product name open PP
  origin?: string;
  // package id
  packageId?: GUID;
  // platform
  platform?: string;
};
export type formBuilderComplexAddressSubfieldTitlesParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressSubfieldPlaceholderParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressGeneralSettingRequiredParams = {
  // visitor_id
  visitor_id?: GUID;
  // true if on false if off
  checkbox?: boolean;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressSubfieldTitlesEnterTextParams = {
  // which field it was
  field?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressSubfieldPlaceholdersEnterTextParams = {
  // which field it was
  field?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressSubfieldPlaceholdersDefaultCountryChooseParams = {
  // visitor_id
  visitor_id?: GUID;
  // which country was choosen
  country?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressManageCountriesListParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressManageCountriesListFinishParams = {
  // which option was choosen
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressSelectRequiredSubfieldOpenParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderComplexAddressSelectRequiredSubfieldChooseParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // subset of required fields
  requiredFields?: string;
  // msid
  msid?: GUID;
};
export type ascendPpCyclePageViewParams = {
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // product name open PP
  origin?: string;
  // app_id
  app_id?: GUID;
  // package id
  packageId?: GUID;
  // platform
  platform?: string;
};
export type formBuilderAutocompleteAddressFieldShowFieldTitleToggleParams = {
  // true if on
  toggle?: boolean;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutocompleteAddressFieldFieldTitleParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutocompleteAddressFieldPlaceholderTextParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutocompleteAddressFieldRequiredParams = {
  // which selection was made
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutocompleteAddressFieldCountrySearchParams = {
  // which selection was made
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutocompleteAddressFieldCountrySearchOptionParams = {
  // visitor_id
  visitor_id?: GUID;
  // is changed
  changed?: boolean;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type ascendPpClickOnCycleInPpParams = {
  // cycle name
  cycle_name?: string;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // packagename
  package_name?: string;
  // product name open PP
  origin?: string;
  // packageid
  packageId?: GUID;
  // platform
  platform?: string;
  // cycle id
  cycleId?: number;
};
export type formBuilderAutocompleteAddressFieldAddressLayoutChangedParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderAutocompleteAddressFieldViewerChooseAnAddressParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type ascendPpClickOnNextInCyclePageParams = {
  // cycle name
  cycle_name?: string;
  // is most popular
  isChecked?: boolean;
  // in milisec
  timeInPage?: number;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // product name open PP
  origin?: string;
  // cycle id
  cycle_id?: number;
  // packageid
  packageId?: GUID;
  // platform
  platform?: string;
};
export type customerNotificationsSettingsPreviewEditChooseAudienceParams = {
  // the audience selection in english. f.e "site members"
  name?: string;
  // view_type
  view_type?: string;
  // automations rule id
  rule_id?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ping template id
  template_id?: string;
};
export type formBuilderComplexPhoneCountryCodeFieldDeletedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardSiteSelectorIsOpenParams = {
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // a list with all the msids shown to the user, the first item is the first item, second item is the second msid and so on…)
  site_list?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
  // loading_time
  loading_time?: number;
};
export type dashboardSiteSelectorIsLoadedWithoutScreenshotsParams = {
  // my-sites /dashboard / account settings/partners-dashboard
  page_view?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // loading time
  loading_time?: number;
};
export type dashboardSiteSelectorErrorLoadingParams = {
  // Did the error happen when the user searched in the dropdown?
  is_from_search?: boolean;
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
  // from click to error
  loading_time?: number;
};
export type ascendPpPurchasePageViewParams = {
  // cycle name
  cycle_name?: string;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // product name open PP
  origin?: string;
  // app_id
  app_id?: GUID;
  // package id
  packageId?: GUID;
  // platform
  platform?: string;
  // cycle id
  cycleId?: number;
};
export type dashboardSiteSelectorClickOnSiteParams = {
  // the location of the site in the list (0 is first, 1 is second…)
  location?: string;
  // is the site selection out of a search results list?
  is_from_search?: boolean;
  // my-sites /dashboard / account settings
  page_view?: string;
  // msid_clicked
  msid_clicked?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
};
export type dashboardClickInSiteSelectorParams = {
  // Did the user clicked on the cta when the dropdown shows search results?
  is_from_search?: boolean;
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // item clicked: all-sites/create-new-site /show-more-site-results
  item_name?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
};
export type formBuilderComplexAddressEditFieldClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // 'main field','country code','phone'
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type crmHomeInboxViewMessagesParams = {
  // count_messages
  countMessages?: number;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeTopCarouselClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeTopCarouselMainCtaClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // which banner was clicked
  bannerName?: string;
};
export type crmHomeTopCarouselLoadStartParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeTopCarouselLoadEndParams = {
  // view_type
  view_type?: string;
  // loading time in ms
  loadingTime?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type formBuilderReportOnSubmissionAsSpamParams = {
  // user id
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // report/learn more
  button_name?: string;
  // vsi
  vsi?: GUID;
  // mail/web/oneapp
  origin?: string;
  // msid
  msid?: GUID;
};
export type ascendPpPurchasePageChangeCardParams = {
  // cycle name
  cycle_name?: string;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // saved card / another card
  selection?: string;
  // product name open PP
  origin?: string;
  // app_id
  app_id?: GUID;
  // package id
  packageId?: GUID;
  // platform
  platform?: string;
  // cycle id
  cycleId?: number;
};
export type ascendSelectCancelReasonParams = {
  // from where the screen was opened
  referralInfo?: string;
  // cancel reason free text
  cancel_reason_text?: string;
  // cancel reason selection
  cancel_reason_name?: string;
  // view_type
  view_type?: string;
  // premium_id
  premium?: string;
  // native or web
  platform?: string;
  // msid
  msid?: GUID;
};
export type ascendCancelWindowApproveCancelParams = {
  // from where the screen was opened
  referralInfo?: string;
  // view_type
  view_type?: string;
  // cancel plan / keep plan
  selection?: string;
  // premium_id
  premium?: string;
  // native or web
  platform?: string;
  // msid
  msid?: GUID;
};
export type bmApiCallReceivedSrc5Evid1392Params = {
  // The method name
  method_name?: string;
  // url
  url?: Url;
  // the stack trace of the call
  stack?: string;
  // route
  route?: string;
};
export type ascendPpPurchasePageEnterPromoParams = {
  // cycle name
  cycle_name?: string;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // enter click / apply
  selection?: string;
  // product name open PP
  origin?: string;
  // app_id
  app_id?: GUID;
  // package id
  packageId?: GUID;
  // platform
  platform?: string;
  // cycle id
  cycleId?: number;
};
export type rolesAndPermissionsSetUpTeamClickParams = {
  // partners dashboard/my sites quick view
  click_origin?: string;
  // platform
  platform?: string;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementTeammatesPageLoadParams = {
  // account/site
  context?: string;
  // where the user came to this page from
  referral_info?: string;
  // where the user came to this page from
  origin?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
  // this site quota of contributors
  contributors_quota?: number;
  // Number of contributors on this site
  contributors_count?: number;
};
export type teamManagementFilterByStatusParams = {
  // account/site
  context?: string;
  // all/pending/expired
  status_selected?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type teamManagementFilterByRoleParams = {
  // number of roles selected in current filter selection
  num_selected?: number;
  // account/site
  context?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type teamManagementViewTeamClickedParams = {
  // account/site
  context?: string;
  // platform
  platform?: string;
};
export type teamManagementChangeRoleOpenDialogParams = {
  // the user_id of the team/teammate whose role is being changed (if status is pending then invite_id)
  teammate_id?: GUID;
  // pending/expired/accepted
  invite_status?: string;
  // account/site
  context?: string;
  // the current role of the teammate
  current_role_ids?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type teamManagementChangeRoleUpdateParams = {
  // the user_id of the team/teammate who's role is being updated (if status is pending then invite_id)
  teammate_id?: GUID;
  // the new updated role id
  new_role_ids?: string;
  // pending/expired/accepted
  invite_status?: string;
  // account/site
  context?: string;
  // previous role_ids
  prev_role_ids?: string;
  // all/specific
  assignment_type?: string;
  // is this user marked as client
  is_client?: boolean;
  // number of distinct sites in the updated assignment
  num_sites?: number;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // number of distinct folders in the updated assignment
  num_folders?: number;
};
export type teamManagementRemoveTeammateOpenDialogParams = {
  // the user_id of the removed team/team member (if status is pending then invite_id)
  teammate_id?: GUID;
  // pending/expired/accepted/leave team
  invite_status?: string;
  // account/site
  context?: string;
  // role_ids of the removed user
  role_ids?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementRemoveTeammateRemoveSuccessParams = {
  // the user_id of the removed team/team member (if status is pending then invite_id)
  teammate_id?: GUID;
  // pending/expired/accepted/leave_team
  invite_status?: string;
  // account/site
  context?: string;
  // role_id of the removed user
  role_ids?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementInvitePeopleClickParams = {
  // account/site
  context?: string;
  // where the user clicked on invite people - team screen/site actions/roles list
  origin?: string;
  // platform
  platform?: string;
  // does the user need to upgrade his plan in order to be able to invite more contributors (contributors enforcement)
  upgrade_required?: boolean;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type ascendPpPurchasePageSubmitPurchaseParams = {
  // cycle name
  cycle_name?: string;
  // button name open PP
  referralInfo?: string;
  // view_type
  view_type?: string;
  // package name
  package_name?: string;
  // product name open PP
  origin?: string;
  // app_id
  app_id?: GUID;
  // package id
  packageId?: GUID;
  // platform
  platform?: string;
  // cycle id
  cycleId?: number;
};
export type teamManagementInvitePeoplePageLoadParams = {
  // account/site
  context?: string;
  // where the user came to this page from
  origin?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // How many contributors can be added to the site based on the premium package quota
  contributors_quota?: number;
  // How many contributors are actually active on the site
  contributors_count?: number;
  // app_id (context = app)
  app_id?: string;
  // Does the user has AI assistant in this page
  Has_ai_assistant?: boolean;
};
export type teamManagementInvitePeopleSendInviteParams = {
  // account/site
  context?: string;
  // number of invalid emails (only errors for not typing correctly - exclude errors for existing emails)
  number_of_invalid_emails?: number;
  // the role_ids that the user sends to the invitees
  invite_role_ids?: string;
  // all/specific
  assignment_type?: string;
  // where the modal was clicked from
  origin?: string;
  // the invite_id
  invite_id?: GUID;
  // the distinct number of sites in the invite (null if all)
  num_sites?: number;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // number of valid emails
  number_of_valid_emails?: number;
  // the distinct number of folders in the invite (null if all)
  num_folders?: number;
  // the permitted locations of the user that is making the change.
  Logged_account_locations?: string;
  // the permitted locations of the new-collaborator.
  New_collaborator_locations?: string;
  // How many contributors can be added to the site based on the premium package quota
  // 
  contributors_quota?: number;
  // the names of the rols assigned in the invite.
  invite_role_names?: string;
  // How many contributors are actually active on the site
  contributors_count?: number;
  // app_id (context = app)
  app_id?: string;
  // Does the user has AI assistant on this page
  // 
  Has_ai_assistant?: boolean;
};
export type teamManagementInvitePeopleResendInviteParams = {
  // pending/expired
  invite_status?: string;
  // account/site
  context?: string;
  // the role_id that the user sends to the invitees
  invite_role_ids?: string;
  // the invite id
  invite_id?: GUID;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementInvitePeopleGetInviteLinkParams = {
  // deprecated - status can only be pending
  invite_status?: string;
  // account/site
  context?: string;
  // the invite id
  invite_id?: GUID;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementManageRolesClickParams = {
  // account/site
  context?: string;
  // where the user clicked on manage roles - role filter/invite people/team screen
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesPageLoadParams = {
  // account/site
  context?: string;
  // where the user came to this page from
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesViewRoleParams = {
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesRolePageLoadParams = {
  // account/site
  context?: string;
  // role_id
  role_id?: string;
  // where the user came to this page from
  origin?: string;
  // what mode the page was opened as - view/edit
  mode?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesDuplicateAndEditRoleParams = {
  // account/site
  context?: string;
  // role_id of the role that the user is duplicating
  role_id?: string;
  // custom/predefined
  role_type?: string;
  // where the user clicked from - roles list/role page
  origin?: string;
};
export type teamManagementManageRolesEditCustomRoleParams = {
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // msid
  msid?: GUID;
  // where the user clicked from - roles list/role page
  origin?: string;
};
export type teamManagementManageRolesUpdateRoleParams = {
  // number of scopes chosen for the custom role
  num_scopes?: number;
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // the previous scope ids of the role, before it was updated
  old_scope_ids?: string;
  // the new scope ids chosen for the role
  new_scope_ids?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesCreateNewRoleClickParams = {
  // account/site
  context?: string;
  // where the user clicked on create new role - roles list/role filter/invite people
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // Does the user has AI assistant on this page
  Has_ai_assistant?: boolean;
};
export type teamManagementManageRolesSaveNewRoleParams = {
  // the scopes chosen for the custom role
  custom_role_scopes?: string;
  // number of scopes chosen for the custom role
  num_scopes?: number;
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // where the user clicked on create new role - roles list/role filter/invite people/duplicate role
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesDeleteCustomRoleClickParams = {
  // number of scopes chosen for the deleted role
  num_scopes?: number;
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesDeleteCustomRoleSuccessParams = {
  // number of scopes chosen for the deleted role
  num_scopes?: number;
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type teamManagementManageRolesCannotDeleteRoleParams = {
  // number of scopes chosen for the deleted role
  num_scopes?: number;
  // account/site
  context?: string;
  // the role_id
  role_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // cancel/view teammates
  action?: string;
};
export type teamManagementLearnMoreClickParams = {
  // account/site
  context?: string;
  // set up team/edit team profile/team management/teammates info/invite people/change role/roles list
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementEditTeamProfileClickParams = {
  // platform
  platform?: string;
};
export type teamManagementSaveTeamProfileParams = {
  // true/false
  is_logo_shown?: boolean;
  // true/false
  onboarding?: boolean;
  // platform
  platform?: string;
  // true/false (false if error shows)
  is_valid_team_name?: boolean;
};
export type teamManagementJoinTheTeamPageLoadParams = {
  // If it's an existing user - user_id of the user that accepted the invite (not necessarily the user that received the email)
  accepted_by_user?: GUID;
  // true id invite was already accepted
  already_accepted?: boolean;
  // the account_id that the invitee is invited to
  invited_to_account_id?: GUID;
  // site/account
  context?: string;
  // opened the page from email/direct link
  origin?: string;
  // invite_id
  invite_id?: GUID;
  // invitee wix type ("Wix"/"Studio")
  invitee_type?: string;
  // platform
  platform?: string;
  // Wix email type ("Wix"/"Studio")
  email_type?: string;
  // app_id (context = app)
  app_id?: string;
};
export type teamManagementJoinTheTeamClickContinueParams = {
  // user_id of the user that accepted the invite (not necessarily the user that received the email)
  accepted_by_user?: GUID;
  // the account_id that the invitee is invited to
  invited_to_account_id?: GUID;
  // invite_id
  invite_id?: GUID;
  // sign up using another email/replace email in existing account/create another account
  action_chosen?: string;
  // platform
  platform?: string;
  // app_id (context = app)
  app_id?: string;
  // site/account/app
  context?: string;
};
export type teamManagementJoinTheTeamClickOnLearnMoreParams = {
  // If it's an existing user - user_id of the user that accepted the invite (not necessarily the user that received the email)
  accepted_by_user?: GUID;
  // true id invite was already accepted
  already_accepted?: boolean;
  // the account_id that the invitee is invited to
  invited_to_account_id?: GUID;
  // invite_id
  invite_id?: GUID;
  // platform
  platform?: string;
};
export type rolesAndPermissionsClickOnUpgradeButtonParams = {
  // account/site
  context?: string;
  // where the user clicked on upgrade - team screen/roles list page/upgrade pop up
  origin?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type rolesAndPermissionsInvitePeopleErrorParams = {
  // account/site
  context?: string;
  // the error message shown to the user
  error_message?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // app_id (context = app)
  app_id?: string;
};
export type rolesAndPermissionsUpgradePopUpLoadParams = {
  // account/site
  context?: string;
  // where the user clicked on invite people - team management screen/roles list page/site actions
  origin?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type rolesAndPermissionsAcceptInviteFromMobilePageLoadParams = {
  // site/account
  context?: string;
  // token
  inviteToken?: string;
  // invite_id
  invite_id?: string;
  // platform
  platform?: string;
  // msid (only for site level, null for account level)
  msid?: GUID;
};
export type rolesAndPermissionsAcceptInviteFromMobileClickContinueToSiteParams = {
  // site/account
  context?: string;
  // token
  inviteToken?: string;
  // invite_id
  invite_id?: string;
  // platform
  platform?: string;
  // msid (only for site level, null for account level)
  msid?: GUID;
};
export type rolesAndPermissionsAcceptInviteFromMobileClickManageSiteOnTheWixAppParams = {
  // site/account
  context?: string;
  // token
  inviteToken?: string;
  // invite_id
  invite_id?: string;
  // platform
  platform?: string;
  // msid (only for site level, null for account level)
  msid?: GUID;
};
export type rolesAndPermissionsInvitePeopleAnswerOnInvitePurposeParams = {
  // If the user chose "other" as the invite purpose and entered free text
  other_text?: string;
  // account/site
  context?: string;
  // is the sender a partner or not
  is_partner?: boolean;
  // a client/a partner or freelancer (a agency or freelancer)/a colleague/a friend/other (someone else)
  invite_for?: string;
  // the invite_id
  invite_id?: GUID;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // how many people were invited - one/multiple
  num_invites?: string;
};
export type rolesAndPermissionsInvitePeopleSkipOnInvitePurposeQuestionParams = {
  // how the user closed the modal: by clicking skip, clicking x, or clicking on the background
  click_type?: string;
  // account/site
  context?: string;
  // is the sender a partner or not
  is_partner?: boolean;
  // the invite_id
  invite_id?: GUID;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // how many people were invited - one/multiple
  num_invites?: string;
};
export type rolesAndPermissionsSitesAndFoldersSelectSitesAndFoldersModalLoadParams = {
  // for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
  teammate_id?: GUID;
  // account/site
  context?: string;
  // the roles for which the user is choosing specific sites and folders permissions
  role_ids?: string;
  // the role for which the user is choosing specific sites and folders permissions
  role_id?: string;
  // platform
  platform?: string;
  // invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
  view?: string;
};
export type rolesAndPermissionsSitesAndFoldersClickOnSelectInSfModalParams = {
  // for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
  teammate_id?: GUID;
  // account/site
  context?: string;
  // the roles for which the user is choosing specific sites and folders permissions
  role_ids?: string;
  // the role for which the user is choosing specific sites and folders permissions
  role_id?: string;
  // all/specific
  assignment_type?: string;
  // the number of sites selected
  num_sites?: number;
  // platform
  platform?: string;
  // the number of folders selected
  num_folders?: number;
  // invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
  view?: string;
};
export type rolesAndPermissionsSitesAndFoldersClickOnSelectMoreParams = {
  // for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
  teammate_id?: GUID;
  // account/site
  context?: string;
  // the roles for which the user is choosing specific sites and folders permissions
  role_ids?: string;
  // the role for which the user is choosing specific sites and folders permissions
  role_id?: string;
  // platform
  platform?: string;
  // invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
  view?: string;
};
export type rolesAndPermissionsSitesAndFoldersClickOnShowMoreSitesParams = {
  // for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
  teammate_id?: GUID;
  // account/site
  context?: string;
  // the roles for which the user is choosing specific sites and folders permissions
  role_ids?: string;
  // the role for which the user is choosing specific sites and folders permissions
  role_id?: string;
  // platform
  platform?: string;
  // invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
  view?: string;
};
export type rolesAndPermissionsSitesAndFoldersRemoveSiteFolderClickParams = {
  // for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
  teammate_id?: GUID;
  // account/site
  context?: string;
  // site/folder
  type_removed?: string;
  // the roles for which the user is choosing specific sites and folders permissions
  role_ids?: string;
  // the role for which the user is choosing specific sites and folders permissions
  role_id?: string;
  // platform
  platform?: string;
  // invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
  view?: string;
};
export type rolesAndPermissionsSitesAndFoldersClickOnAssignMoreRolesParams = {
  // for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
  teammate_id?: GUID;
  // account/site
  context?: string;
  // platform
  platform?: string;
  // invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
  view?: string;
};
export type rolesAndPermissionsSitesAndFoldersSiteRpWithTeamModalLoadParams = {
  // account/site
  context?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type rolesAndPermissionsSitesAndFoldersChooseActionInSiteRpWithTeamModalParams = {
  // account/site
  context?: string;
  // continue/invite to team/close
  action_chosen?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type rolesAndPermissionsPeoplePermissionsComponentLoadParams = {
  // folder_id for which the component was loaded (if none then null)
  folder_id?: number;
  // platform
  platform?: string;
  // msid for which the component was loaded (if none then null)
  msid?: GUID;
};
export type rolesAndPermissionsPeoplePermissionsComponentClickOnManageParams = {
  // folder_id for which the component was loaded (if none then null)
  folder_id?: number;
  // team account/roles and permissions
  manage_type?: string;
  // platform
  platform?: string;
  // msid for which the component was loaded (if none then null)
  msid?: GUID;
};
export type rolesAndPermissionsTeamManagementSearchTextParams = {
  // account/site
  context?: string;
  // platform
  platform?: string;
};
export type headerLoadedParams = {
  // name of the page - my-sites/bizmgr/account manager/partner dashboard
  page_view?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // in account level/my-sites send null
  msid?: GUID;
};
export type formBuilderCaptchaBoxModalLoadedClientParams = {
  // visitor_id
  visitor_id?: GUID;
  // reason for appearance
  reason?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // web/oneapp
  origin?: string;
  // bot detection reason
  btype?: string;
  // msid
  msid?: GUID;
};
export type formBuilderCaptchaBoxModalClosedClientParams = {
  // visitor_id
  visitor_id?: GUID;
  // 'resolved', 'manually closed'
  reason?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // web/oneapp
  origin?: string;
  // bot detection reason
  btype?: string;
  // msid
  msid?: GUID;
};
export type customerNotificationsSettingsPreviewEditLoadingTimeParams = {
  // view_type
  view_type?: string;
  // The time between page was loaded and the modal was loaded
  loadingTime?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type settingsLobbyHoverOverAnItemParams = {
  // Item order (f.e. 0,1 etc.)
  item_location_on_page?: number;
  // general/ecommerce/..
  section_name?: string;
  // view_type
  view_type?: string;
  // the cta value (if exists) - f.e. “Get a business number”
  cta_name?: string;
  // the pageComppnentId of the item that was hovered on
  page_id?: string;
  // will be in this format {section,column,row}.  F.e. website settings will be {1,1,1}.  If there are no sections send 0.
  item_location?: string;
  // upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
  item_name?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type bizmgrComponentRequestToLoadParams = {
  // The component name
  component_name?: string;
  // The expected state of the component -  regular/empty_state/no_permission
  state?: string;
  // view_type
  view_type?: string;
  // The sub_view of the hosted page in Bizmgr
  sub_view?: string;
  // The app_id of the component
  component_app_id?: string;
  // The app_id of the page which hosts the component
  app_id?: string;
  // platform
  platform?: string;
  // the Id of the component
  component_id?: string;
  // MA/Editor/onboarding
  hosting?: string;
  // msid
  msid?: GUID;
  // The view of the hosted page in Bizmgr
  view?: string;
};
export type bizmgrComponentLoadingStartParams = {
  // The component name
  component_name?: string;
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // The expected state of the component -  regular/empty_state/no_permission
  state?: string;
  // view_type
  view_type?: string;
  // The sub_view of the hosted page in Bizmgr
  sub_view?: string;
  // the page id, please send always the page_id, no matter what is the type of the component
  page_id?: string;
  // the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
  host_id?: string;
  // The app_id of the component
  component_app_id?: string;
  // The app_id of the page which hosts the component
  app_id?: string;
  // platform
  platform?: string;
  // the Id of the component
  component_id?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // MA/Editor/onboarding
  hosting?: string;
  // page/widget/modal/sidebar/header
  component_type?: string;
  // msid
  msid?: GUID;
  // The view of the hosted page in Bizmgr
  view?: string;
  // the page's route
  // 
  route?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internalRoute?: string;
};
export type bizmgrComponentLoadingFinishParams = {
  // The component name
  component_name?: string;
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // The expected state of the component -  regular/empty_state/no_permission
  state?: string;
  // deprecated
  loading_time_from_start_loading_page?: number;
  // view_type
  view_type?: string;
  // the previous page id
  prev_page_id?: string;
  // loading time from the start loading of the page
  loading_time_from_host_load?: number;
  // The sub_view of the hosted page in Bizmgr
  sub_view?: string;
  // the page id
  page_id?: string;
  // True if the component loaded as part of the first page in session (before navigation). otherwise false
  is_first?: boolean;
  // the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
  host_id?: string;
  // The app_id of the component
  component_app_id?: string;
  // loading time from the start loading of the hosting platform
  loading_time_from_host_platform_load?: number;
  // The app_id of the page which hosts the component
  app_id?: string;
  // platform
  platform?: string;
  // the Id of the component
  component_id?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // MA/Editor/onboarding
  hosting?: string;
  // page/widget/modal/sidebar/header
  component_type?: string;
  // msid
  msid?: GUID;
  // The view of the hosted page in Bizmgr
  view?: string;
  // loading time from the start loading of the componen
  loading_time?: number;
  // the page's route
  // 
  route?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internalRoute?: string;
};
export type bizmgrComponentLoadingWithAnErrorParams = {
  // The component name
  component_name?: string;
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // error
  state?: string;
  // when the context is site - send msid, when the context is app for example (like in devCenter) send appDefId, etc.
  context?: string;
  // view_type
  view_type?: string;
  // loading time from the start loading of the page which hosting the component until the component crashed (in ms)
  loading_time_from_host_load?: number;
  // The sub_view of the hosted page in Bizmgr
  sub_view?: string;
  // the type of the error (f.e: permissions, system error, etc.)
  error_type?: string;
  // the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
  host_id?: string;
  // The app_id of the component
  component_app_id?: string;
  // loading time from the start loading of the hosting platform until the component crashed (in ms)
  loading_time_from_host_platform_load?: number;
  // The app_id of the page which hosts the component
  app_id?: string;
  // platform
  platform?: string;
  // the Id of the component
  component_id?: string;
  // MA/Editor/onboarding
  hosting?: string;
  // page/widget/sidebar/header
  component_type?: string;
  // msid
  msid?: GUID;
  // load time of this component until it crashed in ms
  interval_load_time?: number;
  // The view of the hosted page in Bizmgr
  view?: string;
  // the page's route
  // 
  route?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internalRoute?: string;
};
export type bizmgrComponentComponentWasShownParams = {
  // The component name
  component_name?: string;
  // The expected state of the component -  regular/empty_state/no_permission
  state?: string;
  // view_type
  view_type?: string;
  // The sub_view of the hosted page in Bizmgr
  sub_view?: string;
  // the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
  host_id?: string;
  // The app_id of the component
  component_app_id?: string;
  // The app_id of the page which hosts the component
  app_id?: string;
  // platform
  platform?: string;
  // the Id of the component
  component_id?: string;
  // MA/Editor/onboarding
  hosting?: string;
  // msid
  msid?: GUID;
  // The view of the hosted page in Bizmgr
  view?: string;
  // the page's route
  // 
  route?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internalRoute?: string;
};
export type dashboardFinishLoadingBasicDashboardWidgetsParams = {
  // loading from start loading bizmgr (561)
  loading_time_from_start?: number;
  // sub_view
  sub_view?: string;
  // loading from start loading home module (564)
  loading_time_from_module?: number;
  // dashboard/editor/onboarding
  hosting?: string;
  // refferal
  refferal_info?: string;
  // --
  msid?: GUID;
  // requested view
  view?: string;
  // loading from start loading the page
  loading_time?: number;
};
export type invoicesSetBusinessInfoModalClickOnAddContinueParams = {
  // view_type
  view_type?: string;
  // application id
  appDefId?: GUID;
  // origin page - from which place this action was made (invoices, contacts full page, crm home...)
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesSetBusinessInfoModalClickOnCancelParams = {
  // view_type
  view_type?: string;
  // application ID
  appDefId?: GUID;
  // origin page - from which place this action was made (invoices, contacts full page, crm home...)
  origin?: string;
  // cancel/ close
  cancelType?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type headerFullyLoadedParams = {
  // name of the page - my-sites/bizmgr/account manager/partner dashboard
  page_view?: string;
  // is_partner
  is_partner?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // in account level/my-sites send null
  msid?: GUID;
};
export type dashboardClickOnItemFromHeaderParams = {
  // the item clicked name (my-sites/partner dashors'
  name?: string;
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // --
  msid?: GUID;
};
export type rolesAndPermissionsInvitePeopleAddRemoveAnotherRoleOnDiffSiteClickParams = {
  // where the user came to this page from
  referral_info?: string;
  // add/remove
  button_name?: string;
  // role_id
  role_id?: string;
  // where the user came to this page from
  origin?: string;
  // invite_id
  invite_id?: GUID;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
  // invite/update role
  view?: string;
};
export type nyaExposureEventParams = {
  // metasite id
  msid?: GUID;
  // the exposure name of the AB test
  exposure_name?: string;
};
export type generalExposureEventParams = {
  // exposure_name
  exposure_name?: string;
  // A is spec=false , B is spec=true
  label_name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type formBuilderBizManagerChooseAFormParams = {
  // which option the user choose
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // from where the user clicked
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormChooseATemplateParams = {
  // which option the user choose
  option?: string;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormChooseElementParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // fieldType
  fieldType?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormDeleteElementParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // fieldType
  fieldType?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormCloneElementParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // fieldType
  fieldType?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteNavigationParams = {
  // view_type
  view_type?: string;
  // link
  link?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardMySitesActionSelectionPageViewParams = {
  // view_type
  view_type?: string;
  // number of html sites
  no_of_html_sites?: number;
  // origin of page
  origin?: string;
  // number of sites user have
  no_of_sites?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormSaveFormParams = {
  // form template name
  template_name?: string;
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormShareFormParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormPreviewFormParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // form_guid
  form_guid?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormFormSettingsParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormEditTitleDescriptionParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardMySitesSiteSelectionPageViewParams = {
  // view_type
  view_type?: string;
  // number of html sites
  no_of_html_sites?: number;
  // origin of page
  origin?: string;
  // number of sites user have
  no_of_sites?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeSuggestionsCarouselClickCtaParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // which banner was clicked
  bannerName?: string;
};
export type crmHomeSuggestionsCarouselCloseBannerParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // which banner was clicked
  bannerName?: string;
};
export type crmHomeSuggestionsCarouselClickOnCarouselParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardMySitesSiteSelectionPageNumberViewParams = {
  // view_type
  view_type?: string;
  // number of html sites
  no_of_html_sites?: number;
  // number of sites user have
  no_of_sites?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // פשעק מוצנקר
  page_number?: number;
  // previous page
  prev_page?: number;
};
export type dashboardMySitesClickPromoteParams = {
  // view_type
  view_type?: string;
  // original page
  origin?: string;
  // place inside origin page
  place?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormSubmissionClickParams = {
  // form_name
  form_name?: string;
  // visitor_id
  visitorId?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form_url
  form_url?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // form_guid
  form_guid?: GUID;
  // template
  template?: string;
  // referrer
  referrer?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormSubmissionSuccessParams = {
  // form_name
  form_name?: string;
  // visitor_id
  visitorId?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form_url
  form_url?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // form_guid
  form_guid?: GUID;
  // template
  template?: string;
  // referrer
  referrer?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormSubmissionFailedParams = {
  // form_name
  form_name?: string;
  // visitor_id
  visitorId?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // errorReason
  errorReason?: string;
  // form_url
  form_url?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // form_guid
  form_guid?: GUID;
  // template
  template?: string;
  // referrer
  referrer?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormReorderElementsParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormViewSubmissionTableFromSettingsParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormAddEmailInSettingsParams = {
  // builderOrigin
  builderOrigin?: string;
  // emailType
  emailType?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormSettingsToggleEmailTypeParams = {
  // builderOrigin
  builderOrigin?: string;
  // emailType
  emailType?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardMySitesWelcomeMessageForProsDisplayedParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type quotesCreateInvoiceEnterItemDescriptionParams = {
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceClickOnSeeMoreItemsParams = {
  // view_type
  view_type?: string;
  // product source
  productSource?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceRearrangeItemsParams = {
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesCreateInvoiceClickOnAddTaxParams = {
  // deprecated
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // deprecated
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceTaxSelectedParams = {
  // deprecated
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // deprecated
  platform?: string;
  // msid
  msid?: string;
  // value of tax
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceClickOnInvoiceSettingsParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceAddRemoveDiscountParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // add/remove
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceLeavingCreateInvoicePagePopUpAppearsParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceLeavingCreateInvoicePagePopUpResolutionParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // save / do not save / X
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesPreviewInvoiceClickInPreviewPageMenuParams = {
  // (invoices/ crm home/ os dashboard)
  source?: string;
  // external_id
  externalId?: GUID;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // invoice_source
  invoiceSource?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // share / print / edit / resend via email/ send via email
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type dashboardMySitesWelcomeMessageForProsClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // check it out, close, disable
  action?: string;
};
export type quotesCreateInvoiceUserClickOnSendInvoiceParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceSendInvoiceModalResolutionParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // send / cancel / X
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceSendInvoiceModalFieldChangeParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // subject line /message
  fieldName?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceAdditionalInfoFieldChangeParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // notes  /legal terms
  fieldName?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceChangingEmailOfAContactForPaidInvoiceParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // proceed / cancel / X
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceAdditionalInfoHoverOnTooltipShownParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // notes  /legal terms
  fieldName?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type notificationClickOnAccountNotificationParams = {
  // account notifications
  feed_name?: string;
  // Web / browser / mobile / SMS / email
  channel?: string;
  // view_type
  view_type?: string;
  // json {site:<msid> , badge:<num of unread notifications>}>
  grouped_sites?: string;
  // contact_id
  contact_id?: string;
  // -
  platform?: string;
  // msid of the notification
  msid?: GUID;
};
export type formBuilderBackofficeFormSettingsContactSyncParams = {
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardAccountSettingsRenderedWithShowProBoxValueParams = {
  // view_type
  view_type?: string;
  // true if box is shown
  show_pro_box?: boolean;
  // platform
  platform?: string;
};
export type formBuilderBackofficeFormRemoveDescriptionParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type invoicesNewRecurrentInvoiceClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesChooseADueDateRecurringInvoicesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringSelectABillingCycleParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // selected value of billing cycle
  value?: string;
};
export type invoicesRecurringSelectNumberOfOccurrencesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // selected value of occurrences
  value?: string;
};
export type invoicesRecurringSelectCustomNumberOfOccurrencesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // selected value of occurrences
  value?: string;
};
export type invoicesRecurringIsAutoChargeParams = {
  // true/ false
  chargeAutomatically?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardMySitesSiteHomeAlertMessageFromPremiumDisplayParams = {
  // deprecated
  alert_id?: GUID;
  // alert_message
  alert_type?: string;
  // view_type
  view_type?: string;
  // alert received from premium
  premium_alert_id?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
};
export type invoicesRecurringClickOnGetStartedParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringClickOnHowDoRecurringInvoicesWorkParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringSetPaymentTermsPageClickOnNextParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringSetPaymentTermsPageClickOnCancelParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringClickOnBackToastInNewRecurringInvoicesCreationPageParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringClickOnConnectNowForAutoChargingParams = {
  // hover / page
  source?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringClickOnLearnMoreAboutAutomaticChargingParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringFilterInvoicesParams = {
  // name of filter
  name?: string;
  // number of invoices the user has
  num_of_invoices?: number;
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // period, currency, display
  filter_type?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringTableActionsParams = {
  // view_type
  view_type?: string;
  // instanceId
  invoiceId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // edit/duplicate/view invoices/cancel
  action?: string;
};
export type invoicesRecurringSearchInvoicesParams = {
  // number of invoices the user has
  num_of_invoices?: number;
  // view_type
  view_type?: string;
  // text searched
  text?: string;
  // number of returned results
  num_of_results?: number;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardMySitesSiteHomeAlertMessageFromPremiumClickParams = {
  // alert_message
  alert_type?: string;
  // view_type
  view_type?: string;
  // alert received from premium
  premium_alert_id?: string;
  // platform
  platform?: string;
  // hosting
  hosting?: string;
  // close (window), cancel , OK
  action?: string;
};
export type invoicesRecurringCancelSubscriptionParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // ’cancel subscription’ / ‘cancel’ / ‘X’
  value?: string;
};
export type invoicesRecurringClickOnNewRecurringInvoiceSrc5Evid1581Params = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringHoverOnNextWhenNotConnectedToPaymentMethodParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringBackToRecurringInvoiceFromConnectPaymentParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type cookieBannerThemeClickedParams = {
  // yes / no
  is_banner_live?: string;
  // light / dark / custom
  theme_clicked?: string;
};
export type formBuilderFormSettingsNotificationsClickOnButtonParams = {
  // is the user in the recommendations section? (true or false)
  recommendations_chosen?: string;
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // button name
  button_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // from where the user clicked
  origin?: string;
  // website form or standalone form
  type?: string;
  // msid
  msid?: GUID;
};
export type invoicesRecurringClickOnNewRecurringInvoiceParams = {
  // view_type
  view_type?: string;
  // [create new recurring invoice, create first recurring invoice]
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type formBuilderFormSettingsNotificationsToggleParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // from where the user clicked
  origin?: string;
  // website form or standalone form
  type?: string;
  // msid
  msid?: GUID;
  // 'Recommended' or 'Email Only'
  value?: string;
};
export type mySitesShowTooltipParams = {
  // tooltip name
  name?: string;
  // view_type
  view_type?: string;
  // num of sites on screen
  num_of_sites?: string;
  // platform
  platform?: string;
};
export type inAppTipsGenericExposureEventParams = {
  // offering guid from dealer
  offering_guid?: GUID;
  // --
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesOwnerappClickOnCreateNewInvoiceParams = {
  // one time, recurring
  paymentType?: string;
  // view_type
  view_type?: string;
  // most recent / overdue
  tabName?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // my invoices, edit invoice, widget
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesOwnerappClickOnInvoiceParams = {
  // one time, recurring
  paymentType?: string;
  // view_type
  view_type?: string;
  // most recent / overdue
  tabName?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // my invoices, edit invoice, widget
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type invoicesOwnerappClickOnViewAllInvoiceParams = {
  // view_type
  view_type?: string;
  // most recent / overdue
  tabName?: string;
  // my invoices, edit invoice, widget
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesOwnerappClickOnTabsParams = {
  // most recent / overdue / manage invoices
  button_name?: string;
  // view_type
  view_type?: string;
  // my invoices, edit invoice, widget
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardSiteSelectorStartLoadingParams = {
  // premium/published/adi / none
  filtered?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // action_url
  action_url?: Url;
  // from where the screen was open
  referral?: Url;
  // no thumbnails / empty state / success
  status?: string;
  // htmlWeb / modal
  siteType?: string;
  // which experience the user is getting in Site Selector (old/new)
  version_experienced?: string;
  // site_type
  site_type_enriched?: number;
  // platform
  platform?: string;
  // page url
  page_url?: Url;
  // mobile / desktop
  device?: string;
};
export type dashboardSiteSelectorSearchParams = {
  // premium/published/adi / none
  filtered_by?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // HtmlWeb / modal
  site_type?: string;
  // HtmlWeb / modal
  siteType?: string;
  // site_type
  site_type_enriched?: number;
  // platform
  platform?: string;
  // mobile / desktop
  device?: string;
};
export type dashboardSiteSelectorSearchResultsParams = {
  // premium/published/adi / none
  filtered_by?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // HtmlWeb / modal
  site_type?: string;
  // success / no match
  status?: string;
  // site_type
  site_type_enriched?: number;
  // HtmlWeb /modal
  type?: string;
  // platform
  platform?: string;
  // mobile / desktop
  device?: string;
};
export type dashboardSiteSelectorUserNotificationParams = {
  // premium/published/adi / none
  filtered_by?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // unsupported editor / no permissions / selection limit
  notificationType?: string;
  // HtmlWeb / modal
  siteType?: string;
  // site_type
  site_type_enriched?: number;
  // platform
  platform?: string;
  // mobile / desktop
  device?: string;
};
export type dashboardSiteQuickActionClickParams = {
  // The quick action name (quick_actions.rename_site, quick_actions.move_to_trash, etc.)
  name?: string;
  // site_class
  site_class?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // --
  referral?: string;
  // sites-list-enterprise\site-list
  origin?: string;
  // ‘sidepanel’ \ ‘menu’
  cta?: string;
  // editing session id -  is generated when clicking edit site, it will remain until the url is changed, by navigating to another page or closing the tab
  esi?: GUID;
  // deprecated
  platform?: string;
  // editor/ma
  hosting?: string;
  // The site guid the user opened the menu for
  msid?: GUID;
};
export type mySitesTooltipCloseParams = {
  // tooltip name
  name?: string;
  // view_type
  view_type?: string;
  // num of sites on screen
  num_of_sites?: string;
  // platform
  platform?: string;
};
export type headerStartLoadingParams = {
  // name of the page - my-sites/bizmgr/account manager/partner dashboard
  page_view?: string;
  // true/false
  is_partner?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // in account level/my-sites send null
  msid?: GUID;
};
export type invoicesRecurringMessagePresentedWhenUserReachesMaxNumberOfRecurringInvoicesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type formBuilderWixDataCheckParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
  // if the wix data is installed or not
  installed?: boolean;
};
export type dashboardSiteSelectorMoreSitesLoadedSuccessfullyParams = {
  // premium/published/adi / none
  filtered?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // HtmlWeb / modal
  site_type?: string;
  // referral
  referral?: Url;
  // in ms
  loadingTime?: number;
  // no thumbnails / empty state / success
  status?: string;
  // HtmlWeb / modal
  siteType?: string;
  // id
  site_type_enriched?: number;
  // relevant for mobile only
  platform?: string;
  // # sites loaded
  sites_count?: number;
  // mobile / desktop
  device?: string;
};
export type mySitesHoverSiteParams = {
  // view_type - Grid / List
  view_type?: string;
  // editor/ adi / editorX
  ds_origin?: string;
  // is_premium
  is_premium?: boolean;
  // msid
  msid?: GUID;
  // is_published
  is_published?: boolean;
};
export type formBuilderBackofficeFormPostSaveFormParams = {
  // from template name
  template_name?: string;
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackOfficeFormClickEditFormParams = {
  // form_name
  form_name?: string;
  // form template name
  template_name?: string;
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // from where the user clicked "edit"
  origin?: string;
  // msid
  msid?: GUID;
};
export type searchSearchInDialogParams = {
  // the users's query search
  query?: string;
  // view_type
  view_type?: string;
  // search/show_all
  triggred_from?: string;
  // page in app
  sub_view?: string;
  // send all results who return on time in the following way -> section: number of results: time to load
  results?: string;
  // settings lobby / bizmgr
  origin?: string;
  // send only results who were seen in search -> section: number of results: time to load
  seen_results?: string;
  // platform
  platform?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // Boolean field: true if the query was initially written in the settings search and the user then clicked on 'Search Everywhere.'
  isFromSettingsSearch?: boolean;
};
export type formBuilderBackofficeFormShareOpenFormParams = {
  // builderOrigin
  builderOrigin?: string;
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template_name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormShareCopyLinkParams = {
  // builderOrigin
  builderOrigin?: string;
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template_name
  template?: string;
  // msid
  msid?: GUID;
};
export type rolesAndPermissionsInvitePeopleClickOnGetYourMailboxParams = {
  // account/site
  context?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type rolesAndPermissionsMarkAsAClientParams = {
  // the user_id
  teammate_id?: GUID;
  // pending/expired/accepted
  invite_status?: string;
  // role_ids of the user
  role_ids?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type dashboardDuplicateSiteActionWindowNavigationClickParams = {
  // view_type
  view_type?: string;
  // my sites / dashboard
  origin?: string;
  // duplicate / cancel
  cta?: string;
  // relevant only for mobile view
  platform?: string;
  // ma/editor
  hosting?: string;
  // --
  msid?: GUID;
};
export type formBuilderBackofficeFormCloseNoteParams = {
  // form_name
  form_name?: string;
  // form template name
  template_name?: string;
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type searchScrollingInResultViewParams = {
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // settings lobby / bizmgr
  origin?: string;
  // platform
  platform?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type formBuilderBackofficeFormClickOnLinkParams = {
  // form_name
  form_name?: string;
  // form template name
  template_name?: string;
  // builderOrigin
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // Identify the source of the user's click
  origin?: string;
  // The page the user will reach after clicking
  nextView?: string;
  // msid
  msid?: GUID;
};
export type invoicesRecurringSelectPremiumPlanIncludedOnlyServicesParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // BM/ client billing
  platform?: string;
  // msid
  msid?: string;
  // value
  value?: string;
};
export type invoicesRecurringAddPremiumPlanClickParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // BM/ client billing
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringPremiumPlanSelectedParams = {
  // id of package
  package_id?: string;
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringErrorMessageForInvoiceAmountLowerThenPremiumParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // reason of error
  errorReason?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringTableActionsCancelModalClickParams = {
  // view_type
  view_type?: string;
  // instanceId
  invoiceId?: GUID;
  // BM/client billing
  platform?: string;
  // msid
  msid?: string;
  // keep/cancel
  action?: string;
};
export type searchFocusedOnASearchResultParams = {
  // result's title id
  title_id?: string;
  // send all results who return on time in the following way -> section: number of results: time to load
  result?: string;
  // the index of the section in results
  section_index?: number;
  // query
  query?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // result's section
  section?: string;
  // the item's index in it's section
  item_index_in_section?: number;
  // settings lobby / bizmgr
  origin?: string;
  // 1- first item that was hovered (without the default) , 0 - not the first
  is_first_hover?: boolean;
  // result's title
  title?: string;
  // platform
  platform?: string;
  // item's index in all results
  item_index?: number;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type cookieBannerCustomColorInaccessibleParams = {
  // yes / no
  is_banner_site_palette_equal?: string;
  // yes / no
  is_banner_live?: string;
  // yes / no
  is_site_palette_inaccessible?: string;
};
export type clickOnSearchEverywhereInSettingsLobbysSearchSrc5Evid1646Params = {
  // query
  query?: string;
  // BUSINESS_MANAGER / settings lobby
  origin?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type gizaOverlayPageModalCtaClicked1648Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page id 
  page_id?: string;
  // page name 
  page_name?: string;
  // the app id of the app the page belongs to
  app_id?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // cta name (in english) - exit/ go back
  cta?: string;
};
export type bizManagerSidebarItemSelectedHighlightedParams = {
  // unique name that doesn't change when changing the name on the side bar
  name?: string;
  // the name that appears in the sidebar - can be changed
  sidebar_name?: string;
  // view_type
  view_type?: string;
  // The value inside the counter clicked (if counter exists)
  counter?: number;
  // app_id of the item
  app_id?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type searchClickOnSearchResultParams = {
  // result's title id
  title_id?: string;
  // the index of the section in results
  section_index?: number;
  // query
  query?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // result's section
  section?: string;
  // the item's index in it's section
  item_index_in_section?: number;
  // settings lobby / bizmgr
  origin?: string;
  // result's title
  title?: string;
  // platform
  platform?: string;
  // item's index in all results
  item_index?: number;
  // requested view
  view?: string;
  // the category the result belongs to (Help Articles, Apps For Your Site,  Contacts, Tools & Settings)
  category?: string;
  // page id 
  pageId?: string;
  // Boolean field: true if the query was initially written in the settings search and the user then clicked on 'Search Everywhere.'
  // 
  isFromSettingsSearch?: boolean;
  // result page id
  resultPageId?: string;
  // result page name
  resultPageName?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type cookieBannerUouRestoreDefaultTextParams = {
  // 1: currently published, 0: not published
  is_cookie_banner_published?: boolean;
  // default_text_location
  default_text_location?: string;
  // 1: yes, 0: no
  was_cookie_banner_published?: boolean;
};
export type invoicesRecurringClientSelectedParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // contact_id selected
  contact_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesRecurringSiteOfClientSelectedParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // Comma separated, the msids of the site associated to a client billing subscription included in the recurring invoice, if exist.
  clientBillingMsids?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type formBuilderBizMgrFromTheAdditionalActionMenuClickActionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // which action chosen
  button_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrFormDeletionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // which action chosen
  button_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type chatSettingsPcfOfflineOnlineFormChevronParams = {
  // the user_id
  teammate_id?: GUID;
  // pending/expired/accepted
  invite_status?: string;
  // role_ids of the user
  role_ids?: string;
  // platform
  platform?: string;
  // sent only for site level
  msid?: GUID;
};
export type searchCloseSearchDialogParams = {
  // send all results who return on time in the following way -> section: number of results: time to load
  result?: string;
  // query
  query?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // click on result/ click somewhere else/ click on x
  reason?: string;
  // show in seconds the time spent in the dialog
  time_in_dialog?: number;
  // settings lobby / bizmgr
  origin?: string;
  // platform
  platform?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type siteActionsDropDownListShownParams = {
  // list/grid
  view_mode?: string;
  // client/organization, not mendatory
  site_class?: string;
  // sub_account_id
  sub_account_id?: GUID;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // my-sites/dashboard/sites-list-enterprise
  origin?: string;
  // ‘sidepanel’ \ ‘menu’
  cta?: string;
  // deprecated
  platform?: string;
  // site guid
  msid?: GUID;
  // list of all the items the user can click on (unblocked items)
  permitted_items?: string;
  // list of all the shown items when drop down menu is shown
  itemsList?: string;
};
export type teamManagementSwitchToStudioPageLoadParams = {
  // platform
  platform?: string;
};
export type formBuilderBackofficeFormUserChangeLtrRtlParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type formBuilderBackofficeFormAutoAddressRadioButtonParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // ‘all’ or ‘specific’
  value?: string;
};
export type cookieBannerCustomFontAndSizeClickedParams = {
  // the font or size that was clicked
  click_description?: string;
  // font / size
  click_type?: string;
  // yes / no
  is_banner_live?: string;
};
export type clickOnSeeMoreButtonParams = {
  // result's title id
  title_id?: string;
  // send all results who return on time in the following way -> section: number of results: time to load
  result?: string;
  // the index of the section in results
  section_index?: number;
  // query
  query?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // result's section
  section?: string;
  // settings lobby / bizmgr
  origin?: string;
  // result's title
  title?: string;
  // platform
  platform?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type bizManagerSetupWidgetSectionCompletedParams = {
  // id of category in setup widget
  group_id?: string;
  // a list of asset campaign IDs that were skipped in the phase
  skipped_items?: string;
  // a list of asset campaign IDs that were resolved in the phase
  resolved_items?: string;
  // OMNI setup phase id, send the event for each "completed" section
  asset_campaign_guid?: string;
  // step_completed / step_skipped
  visibility_trigger?: string;
  // sidebar / dashboard (this field only since setup became in sidebar also)
  setup_location?: string;
  // ADI/Editor/MA
  hosting?: string;
  // msid
  msid?: GUID;
};
export type clickOnShowAllButtonParams = {
  // result's title id
  title_id?: string;
  // send all results who return on time in the following way -> section: number of results: time to load
  result?: string;
  // the index of the section in results
  section_index?: number;
  // query
  query?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // result's section
  section?: string;
  // bizmgr / settings lobby
  origin?: string;
  // result's title
  title?: string;
  // platform
  platform?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type ssoSettingsChangeActivationStatusParams = {
  // sso_id
  sso_id?: GUID;
  // view_type
  view_type?: string;
  // is SSO mandatory for team member login
  is_mandatory?: boolean;
  // DIFM/DIY (is the SSO of type Do It For Me/ Do It Yourself)
  sso_user_type?: string;
  // platform
  platform?: string;
  // enable/disable
  action?: string;
};
export type ssoSettingsIsMandatoryToggleStatusParams = {
  // sso_id
  sso_id?: GUID;
  // view_type
  view_type?: string;
  // status_name
  status?: string;
  // platform
  platform?: string;
};
export type mySitesUnableToMoveSiteToTrashMessageShownParams = {
  // view_type
  view_type?: string;
  // the reason the site can't be deleted, for example: pending subscription/active subscription/not permitted/unknown
  reason?: string;
  // my-sites/dashboard
  origin?: string;
  // the title of the message
  messageTitle?: string;
  // deprecated
  platform?: string;
  // site guid
  msid?: GUID;
};
export type financialSettingsGoToInvoicesPriceQuotesParams = {
  // view_type
  view_type?: string;
  // if it's price quotes or invoices
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesFirstTimeExpirienceGetStartedParams = {
  // ‘Get started’ or ‘Watch Tutorial’
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesFirstTimeExpirienceLearnMoreParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesDepositRequestDepositParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesDepositChooseFlatOrPercentageDepositParams = {
  // true if it's flat, false if it's percentage
  toggle?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesDepositLearnMoreParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesConnectPaymentLearnMoreParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesDepositDropDepositParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type pingPingWidgetLoadedInEditNotificationDialogParams = {
  // view_type
  view_type?: string;
  // JSON field of the configuration, contains ape details
  config?: string;
  // is pm flow
  isPMFlow?: boolean;
  // platform
  platform?: string;
  // site guid
  msid?: GUID;
  // the rule id
  ruleId?: string;
};
export type pingSaveInEditNotificationDialogParams = {
  // JSON field of schema parametrs and action recommendations - debugging purposes.
  eventInfo?: string;
  // JSON field of the previous status of muted/unmuted channels and audience
  previousStatus?: string;
  // pingTemplateId
  pingTemplateId?: string;
  // view_type
  view_type?: string;
  // JSON field of the configuration, contains ape details. only for debugging usage
  config?: string;
  // True - when user activates/deactivates the ape from apes list, False - when user clicks save in the widget
  isWidgetless?: boolean;
  // JSON field of the components that were changed
  componentChanged?: string;
  // is pm flow
  isPMFlow?: boolean;
  // deprecated
  platform?: string;
  // site guid
  msid?: GUID;
  // the rule id
  ruleId?: string;
  // JSON field of the current status of muted/unmuted channels and audience
  currentStatus?: string;
};
export type dashboardSiteAppPromoParams = {
  // name
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type teamManagementClickToLearnMoreParams = {
  // view_type
  view_type?: string;
  // team_onboarding/team_management_page/team profile dialog/MA/invite_members_dialog
  origin?: string;
  // platform
  platform?: string;
};
export type locationsLoadedOnBusinessInfoPageSrc5Evid1700Params = {
  // msid
  msid?: GUID;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
  // number of update saved locations 
  numLocations?: number;
};
export type apesUpdateTooltipParams = {
  // if the automation is pre installed
  isPreinstalled?: boolean;
  // pingTemplateId
  pingTemplateId?: string;
  // view_type
  view_type?: string;
  // app id
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ruleId
  ruleId?: GUID;
};
export type apesVersioningPreviewNewEmailParams = {
  // if the automation is pre installed
  isPreinstalled?: boolean;
  // pingTemplateId
  pingTemplateId?: string;
  // view_type
  view_type?: string;
  // app id
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ruleId
  ruleId?: GUID;
};
export type apesVersioningUpdateNewVersionParams = {
  // if the automation is pre installed
  isPreinstalled?: boolean;
  // pingTemplateId
  pingTemplateId?: string;
  // view_type
  view_type?: string;
  // app id
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ruleId
  ruleId?: GUID;
};
export type apesVersioningUpdateNewVersionErrorParams = {
  // if the automation is pre installed
  isPreinstalled?: boolean;
  // pingTemplateId
  pingTemplateId?: string;
  // view_type
  view_type?: string;
  // errorReason
  errorReason?: string;
  // app id
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ruleId
  ruleId?: GUID;
};
export type apesVersioningSaveAnUpdateErrorParams = {
  // if the automation is pre installed
  isPreinstalled?: boolean;
  // pingTemplateId
  pingTemplateId?: string;
  // view_type
  view_type?: string;
  // errorReason
  errorReason?: string;
  // app id
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // ruleId
  ruleId?: GUID;
};
export type dashboardAfterSiteSelectorStartedLoadingAndBeforeFinishedParams = {
  // premium/published/adi / none
  filtered?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // The place in the code the event being sent from
  place_description?: string;
  // from where the screen was open
  referral?: string;
  // no thumbnails / empty state / success
  status?: string;
  // htmlWeb / modal
  siteType?: string;
  // site_type
  site_type_enriched?: number;
  // platform
  platform?: string;
  // the full URL of the page
  page_url?: Url;
  // mobile / desktop
  device?: string;
};
export type formBuilderEmailSettingsInSchemaButExperimentClosedParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type siteSelectorSiteChosenParams = {
  // premium/published/adi / none
  filtered?: string;
  // the index of the selected site position in the site selector
  positionIndex?: number;
  // true - if partner dashboard chosen
  is_partner_dashboard?: boolean;
  // json of all chosen msid separated with comma
  result?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // the number of sites available in site selector (not necessarily equal to number of sites owned)
  sites_available?: number;
  // action_url
  action_url?: Url;
  // HtmlWeb / modal
  siteType?: string;
  // index of previous (before change) selected site
  previous_position_index?: number;
  // Referral url
  referer?: Url;
  // esi
  esi?: GUID;
  // deprecated
  platform?: string;
  // Is current selection selected by default or actively
  is_default_selection?: boolean;
  // how many sites were chosen
  sites_count?: number;
  // mobile / desktop
  device?: string;
};
export type teamManagementEditTeamProfileOpenDialogParams = {
  // the dialog was opened from the onboarding page - true, from team management - false
  onboarding?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type mySitesClickOnUrlParams = {
  // The URL address
  url?: Url;
  // the page sub_view
  sub_view?: string;
  // the name of the section the URL appears in, for example: 'Can’t find your site?'
  sectionTitle?: string;
  // sites-list-enterprise
  origin?: string;
  // the text of the URL
  cta?: string;
  // deprecated
  platform?: string;
  // my-sites
  view?: string;
};
export type dashboardSiteCategoryShownParams = {
  // true/false
  has_category?: boolean;
  // site category/null
  site_category?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // hosting
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSelectorClickForDebuggingPurposesParams = {
  // premium/published/adi / none
  filtered?: string;
  // the index of the selected site position in the site selector
  positionIndex?: number;
  site_id?: GUID;
  // true - if partner dashboard chosen
  is_partner_dashboard?: boolean;
  // json of all chosen msid separated with comma
  result?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // ADI/Editor
  siteTypeName?: string;
  // action_url
  action_url?: Url;
  // HtmlWeb / modal
  siteType?: string;
  // the number of sites available in site selector (not necessarily equal to number of sites owned)
  sites_number?: number;
  // x / cancel / continue
  cta?: string;
  // The position of the selected site in the page. 1 is the highest site.
  position?: number;
  site_type_enriched?: number;
  // Referral url
  referer?: Url;
  esi?: GUID;
  // deprecated
  platform?: string;
  // the site guid
  msid?: GUID;
  // how many sites were chosen
  sites_count?: number;
  // mobile / desktop
  device?: string;
};
export type dashboardSiteSelectorLoadedSuccessfullyForDebuggingPurposesParams = {
  // premium/published/adi / none
  filtered?: string;
  // true - if partner dashboard displayed
  is_partner_dashboard?: boolean;
  // -
  sitePublished?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // absolute account sites number
  account_sites_number?: number;
  // -
  referral?: string;
  // in ms
  loadingTime?: number;
  // no thumbnails / empty state / success
  status?: string;
  // HtmlWeb / modal
  siteType?: string;
  // -
  site_type_enriched?: number;
  // -
  platform?: string;
  // # sites returned to site selector
  sites_count?: number;
  // mobile / desktop
  device?: string;
};
export type dashboardLabelingPointInSiteSelectorForDebuggingPurposesParams = {
  // deprecated
  meta_site_id?: GUID;
  // deprecated
  metaSiteId?: GUID;
  // uuid
  uuid?: GUID;
  // the label the user is getting, A or B
  label_version?: string;
  // deprecated
  msid?: GUID;
  // the url when the user is getting the label
  page_url?: Url;
};
export type teamManagementPickLogoParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // replace/remove/add/upload/purchase
  action_type?: string;
};
export type formBuilderPdfAttachmentsClickOnCheckboxParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // checkbox
  checkbox?: boolean;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // website form or standalone form
  type?: string;
  // msid
  msid?: GUID;
};
export type bmACallForTokenRefreshIsFailingParams = {
  // view_type
  view_type?: string;
  // depreceted
  platform?: string;
  // site guid
  msid?: GUID;
};
export type wixStudioExplanatoryModalForEditorXMigrationOpenedSrc5Evid1723Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page's route
  route?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // the previous route
  prevRoute?: string;
};
export type wixStudioExplanatoryModalForEditorXMigrationCtaClickedSrc5Evid1724Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page's route
  route?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // the previous route
  prevRoute?: string;
  // cta name in english - Close / Go to Sites / Discover Wix Studio 
  cta?: string;
};
export type transferSiteSiteCanTBeTransferredPopUpViewParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // is_block_from_transfer_reason
  block_from_transfer_reason?: string;
  // msid
  msid?: GUID;
};
export type cookiesBannerSettingsWindowChangeParams = {
  // json (of all settings)
  new_value?: string;
  // json (of all settings)
  old_value?: string;
};
export type finishFocusWidgetSectionParams = {
  // a list of asset campaign IDs that were skipped in the phase
  skipped_items?: string;
  // a list of asset campaign IDs that were resolved in the phase
  resolved_items?: string;
  // placement id in dealer
  asset_campaign_guid?: string;
  // offering name in dealer
  section_name?: string;
  // focus-widget
  widget_name?: string;
  // from dealer
  offering_guid?: string;
  // dashboard/sidebar
  origin?: string;
  // --
  hosting?: string;
  // --
  msid?: GUID;
};
export type teamManagementSaveParams = {
  // true/false
  is_logo_shown?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // true/false (false if error shows)
  is_valid_team_name?: boolean;
};
export type focusWidgetClickViewAllParams = {
  // 'see-all-steps'
  name?: string;
  // main / tooltip
  location?: string;
  // widget_name
  widget_name?: string;
  // origin
  origin?: string;
  // ma/editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type mySitesWhenDialogPopsUpParams = {
  // dialog's name: move to trash etc...
  name?: string;
  // grid/list
  view_mode?: string;
  // view_type
  view_type?: string;
  // number of sites selected
  num_selected_sites?: number;
  // sites-list/ sites-list-enterprise
  origin?: string;
  // view_level
  view_level?: string;
  // deprecated
  platform?: string;
  // MA
  hosting?: string;
};
export type focusWidgetItemViewedInListParams = {
  // offering name in dealer
  offering_name?: string;
  // normal/scroll to view
  visibility_trigger?: string;
  // campaign name in dealer
  campaign_name?: string;
  // offer guid
  offering_guid?: string;
  // item location inside the category
  asset_location_from_group_list?: number;
  // sidebar / dashboard (this field only since setup became in sidebar also)
  origin?: string;
  // open/close
  item_state?: string;
  // ids to be consistent with premium events
  asset_campaign_id?: string;
  // ADI/MA/editor
  hosting?: string;
  // site guid
  msid?: GUID;
  // campaign id in dealer
  campaign_id?: string;
  // placement id in dealer
  placement_id?: GUID;
};
export type mySitesClickOnButtonInDialogParams = {
  // dialog name
  name?: string;
  // list/grid
  view_mode?: string;
  // to where the user moved the site. In case it’s sites-list main page report: ROOT, in case it’s folder report: folder_name_of_folder, ic case it’s trash folder report: folder_trash
  to_level?: string;
  // view_type
  view_type?: string;
  // number of sites move to the folder
  num_selected_sites?: number;
  // sites-list-enterprise
  origin?: string;
  // X / cancel / move to trash / move to folder etc...
  cta?: string;
  // from where the user moved the sites. In case it’s sites-list main page report: ROOT, in case it’s folder report: folder_name_of_folder, in case it’s search report search_search_term, in case it’s filter report filter
  from_level?: string;
  // platform
  platform?: string;
  // approve / cancel
  action?: string;
};
export type dashboardFinishLoadingAllWidgetsParams = {
  // view_type
  view_type?: string;
  // true/ false
  is_account_mgr?: boolean;
  // Loading time from module start loading
  loading_time_from_host_load?: number;
  // --
  sub_view?: string;
  // host
  host_id?: string;
  // loading_time_from_performance_now  when server start to load. the real beginning
  loading_time_from_performance_now?: number;
  // application id
  app_id?: string;
  // platform
  platform?: string;
  // dashboard/editor/onboarding
  hosting?: string;
  // msid
  msid?: GUID;
  // requested view
  view?: string;
  // loading time of page
  loading_time?: number;
};
export type teamManagementAddMembersOpenDialogParams = {
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // where the dialog is opened from
  origin?: string;
  // platform
  platform?: string;
};
export type sapir1Params = {
  // view_type
  view_type?: string;
  // the error type. f.e: Sites failed to load/Site screenshots failed to load
  errorType?: string;
  // refferral
  referral?: string;
  // in ms
  loadingTime?: number;
  // HtmlWeb / modal
  siteType?: string;
  // deprecated
  platform?: string;
  // mobile / desktop
  device?: string;
};
export type teamManagementAddMembersSendInviteParams = {
  // number of invalid numbers (error for not typing correctly - exclude errors for existing emails)
  number_of_invalid_emails?: number;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // emails that already exist in the team
  number_of_existing_emails?: number;
  // where the user opened the dialog from
  origin?: string;
  // (please note that using the toggle changes role desc) the role the user sends to the invitees
  invite_role?: string;
  // platform
  platform?: string;
  // number of valid emails
  number_of_valid_emails?: number;
};
export type formBuilderBizMgrSafShareOptionsParams = {
  // visitor_id
  visitor_id?: GUID;
  // Social Media name
  socialButton?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // form template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formFormsInContactPanelViewSubmissionParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // contact list/ contact full page/ submission list
  origin?: string;
  // template name
  template?: string;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type formFormsInContactPanelViewSubmissionsListParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // contact list/ contact full page/ submission
  origin?: string;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type formFormsInContactPanelDownloadFileFormSubmissionParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // contact list/ contact full page/ submission
  origin?: string;
  // file download type (png/word/excel)
  file_type?: string;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormClickDoneAfterEnterItemParams = {
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormHoverNextButtonAdiParams = {
  // step
  step?: string;
  // ADI, Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type teamManagementAddMembersInviteClickSuccessParams = {
  // view_type
  view_type?: string;
  // where the dialog is opened from
  origin?: string;
  // (please note that using the toggle changes role desc) the role the user sends to the invitees
  invite_role?: string;
  // platform
  platform?: string;
};
export type headerClickOnItemInOneOfTheHeaderDialogsDropDownMenusParams = {
  // view_type
  view_type?: string;
  // my-sites /dashboard / account settings
  pageView?: string;
  // the item name, f.e: courses and lessons, updates and releases, etc.
  itemName?: string;
  // deprecated
  platform?: string;
  // site guid (when the click is in site level)
  msid?: GUID;
  // the dropdown menu name, f.e: explore, priority support, site-dropdown, notifications, etc.
  view?: string;
};
export type teamManagementAddMembersInviteClickFailParams = {
  // error description
  error_desc?: string;
  // view_type
  view_type?: string;
  // where the dialog was opened
  origin?: string;
  // (please note that using the toggle changes role desc) the role the user sends to the invitees
  invite_role?: string;
  // platform
  platform?: string;
};
export type renderingPlatformRedirectParams = {
  // reason for the redirect - why is the user redirected to where we send them
  reason?: string;
  // The target location of the user redirect (will they land in BM/My-Sites/Partners Dashboard)
  redirectTo?: string;
};
export type mySitesUnableToMoveSitesToTrashModalIsShownOnBulkMoveToTrashOrSingleSiteMoveToTrashParams = {
  // view_mode
  view_mode?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // my sites / dashboard / sites-list-enterprise
  origin?: string;
  // number of sites can't be moved to trash
  num_untrashed_sites?: number;
  // deprecated
  platform?: string;
  // MA/editor
  hosting?: string;
  // a JSON of the reasons the sites can't be moved to trash when the key is the reason and the value is a list of the sites msid's which can't be moved to trash, the keys: pending subscription/active subscription/unpermitted/tech error
  reasons?: string;
};
export type teamManagementDeleteTeamMemberOpenDialogParams = {
  // pending/expired/leave team
  invite_status?: string;
  // the deleted user’s role
  role?: string;
  // view_type
  view_type?: string;
  // where the user opened the dialog from
  origin?: string;
  // the uuid of the deleted member (if status is pending then invite_id)
  member_id?: GUID;
  // platform
  platform?: string;
};
export type teamManagementDeleteTeamMemberDeleteClickParams = {
  // pending/expired/leave team
  invite_status?: string;
  // the deleted user’s role
  role?: string;
  // view_type
  view_type?: string;
  // where the dialog was opened from
  origin?: string;
  // the uuid of the deleted member (if status is pending then invite_id)
  member_id?: GUID;
  // platform
  platform?: string;
};
export type formBuilderOneAppModalShownParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // modal name
  modal_name?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderOneAppModalActionParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // modal_name
  modal_name?: string;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // form_guid
  form_guid?: GUID;
  // msid
  msid?: GUID;
  // action: form selected/closed/etc.
  action?: string;
};
export type formBuilderOneAppFormSelectorEmptyStateParams = {
  // uuid
  uuid?: GUID;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSectionLoadedInSpacesAppParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // form_guid
  form_guid?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderOneAppLearnMoreClickParams = {
  // link to where learn more leads to
  linkUrl?: string;
  // visitor_id
  visitor_id?: GUID;
  // where was the learn more click located
  placement?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderOneApp3DotsSwipeParams = {
  // swipe/three_dots
  method?: string;
  // visitor_id
  visitor_id?: GUID;
  // location where three dots/swipe action took place
  placement?: string;
  // form_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dashboardSiteNewsViewAllParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type teamManagementDeleteTeamMemberDeleteClickSuccessParams = {
  // pending/expired/leave team
  invite_status?: string;
  // the deleted user’s role
  role?: string;
  // view_type
  view_type?: string;
  // where the dialog was opened from
  origin?: string;
  // the uuid of the deleted member (if status is pending then invite_id)
  member_id?: GUID;
  // platform
  platform?: string;
};
export type formBuilderOneAppClickInsideSwipeActionParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // which action was chosen inside swipe
  action?: string;
};
export type formBuilderOneAppWidgetClickParams = {
  // click_name
  click_name?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderOneAppFormsListPageOpenedParams = {
  // visitor_id
  visitor_id?: GUID;
  // how many forms users has, if empty state, then 0
  form_count?: number;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderOneAppSubmissionsListPageOpenedParams = {
  // submission_count, if empty state then 0
  submission_count?: number;
  // which dynamic values are being displayed: email, first name, etc.
  dynamic_values?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // msid
  msid?: GUID;
};
export type teamManagementDeleteTeamMemberDeleteClickFailParams = {
  // pending/expired/leave team
  invite_status?: string;
  // the deleted user’s role
  role?: string;
  // view_type
  view_type?: string;
  // where the dialog was opened from
  origin?: string;
  // the uuid of the deleted member (if status is pending then invite_id)
  member_id?: GUID;
  // platform
  platform?: string;
};
export type focusWidgetHoverOverProgressBarToShowPopoverParams = {
  // ADI/MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
  // placement_id from dealer
  placement_id?: string;
};
export type formBuilderOneAppFormsResultsPageOpenedParams = {
  // visitor_id
  visitor_id?: GUID;
  // submission id
  submissionId?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderOneAppFormsResultsPageActionsParams = {
  // visitor_id
  visitor_id?: GUID;
  // submission id, in which the user did an action
  submissionId?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // exit/back/forward
  action?: string;
};
export type teamManagementGetInviteLinkParams = {
  // pending/expired/leave team
  invite_status?: string;
  // the deleted user’s role
  role?: string;
  // view_type
  view_type?: string;
  // where the dialog was opened from
  origin?: string;
  // platform
  platform?: string;
};
export type teamManagementEditRoleOpenDialogParams = {
  // pending/expired
  invite_status?: string;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // where the dialog is opened from
  origin?: string;
  // the uuid of the member which we edit the role for
  member_id?: GUID;
  // platform
  platform?: string;
};
export type teamManagementSwitchToStudioClickToSwitchParams = {
  // platform
  platform?: string;
};
export type teamManagementSwitchToStudioLearnMoreParams = {
  // platform
  platform?: string;
};
export type teamManagementEditRoleUpdateClickParams = {
  // new role
  new_role?: string;
  // true if invite was accepted
  is_accepted?: boolean;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // previous role
  prev_role?: string;
  // where the dialog is opened from
  origin?: string;
  // platform
  platform?: string;
};
export type searchToDeleteSrc5Evid1847Params = {
  // the users's query search
  query?: string;
  // view_type
  view_type?: string;
  // search/show_all
  triggred_from?: string;
  // page in app
  sub_view?: string;
  // send all results who return on time in the following way -> section: number of results: time to load
  results?: string;
  // settings lobby / bizmgr
  origin?: string;
  // send only results who were seen in search -> section: number of results: time to load
  seen_results?: string;
  // platform
  platform?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // Boolean field: true if the query was initially written in the settings search and the user then clicked on 'Search Everywhere.'
  isFromSettingsSearch?: boolean;
};
export type teamManagementResendInviteClickParams = {
  // pending/expired
  invite_status?: string;
  // view_type
  view_type?: string;
  // where the user opened the dialog from
  origin?: string;
  // the invite id
  invite_id?: GUID;
  // the role on the invite
  invite_role?: string;
  // platform
  platform?: string;
};
export type leavingWithoutSavingModalOpenedSrc5Evid1858Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page's route
  route?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // 
  // navigation /  ai-assistant / overlay-page / modal / close dashboard
  originAction?: string;
  // main / overlay	
  displayMode?: string;
  // The type of component that triggered the modal to open -  page / overlay page / modal / ai assistant
  componentType?: string;
  // The id of component that triggered the modal to open
  componentId?: string;
};
export type dashboardContributorsClickOnMangeRolesAndPermissionsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA
  hosting?: string;
  // --
  msid?: GUID;
};
export type rolesAndPermissionsManageRolesEditRoleSrc5Evid1871Params = {
  // account/site
  context?: string;
  // role_id of the role that the user is duplicating
  role_id?: string;
  // custom/predefined
  role_type?: string;
  // where the user clicked from - roles list/role page
  origin?: string;
  // platform
  platform?: string;
  // role_name of the role that the user is duplicating
  role_name?: string;
  // Is He had AI assistant? (True/False)
  Has_ai_assistant?: boolean;
};
export type rolesAndPermissionsInviteTeammatesSendInviteClickSrc5Evid1874Params = {
  // account
  context?: string;
  // where the modal was clicked from
  origin?: string;
  // the invite_id
  invite_id?: GUID;
  // number of valid emails
  number_of_valid_emails?: number;
  // the role_ids that the user sends to the invitees alongside binary indicator for the 'All sites and folders' (True for usage in this). 
  role_ids?: string;
  // The team account id
  app_id?: string;
  // Does the user has AI assistant on this page
  // 
  Has_ai_assistant?: boolean;
};
export type restoreSiteModalOpenedSrc5Evid1875Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page id (the component id of the page)
  page_id?: string;
  // the component name of the page
  page_name?: string;
  // the page's route
  route?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // The origin from which the modal was opened
  origin?: string;
};
export type restoreSiteModalCtaClickedSrc5Evid1876Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page id (the component id of the page)
  page_id?: string;
  // the component name of the page
  page_name?: string;
  // the page's route
  route?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // Keep in trash / Restore site
  cta?: string;
  // The origin from which the modal was opened
  origin?: string;
};
export type leavingWithoutSavingModalCtaClickedSrc5Evid1878Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // the page's route
  route?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // Exit (click on x), Leave, Keep editing (in english) 
  cta?: string;
  // The id of component that triggered the modal to open
  // 
  componentId?: string;
  // The type of component that triggered the modal to open - page / overlay page / modal / ai assistant
  // 
  componentType?: string;
  // main / overlay	
  displayMode?: string;
};
export type ascendHoverOnUpgradeAscendParams = {
  // BM App
  appName?: string;
  // uuid
  uuid?: GUID;
  // upgrade button / ascend title
  button_name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type ascendClickOnUpgradeAscendParams = {
  // BM App
  appName?: string;
  // uuid
  uuid?: GUID;
  // upgrade/upgrade business tools / ascend info / learn more
  button_name?: string;
  // view_type
  view_type?: string;
  // web/native
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type microActionAdditionalInfoParams = {
  // asset_version
  asset_version?: string;
  // offering_name
  offering_name?: string;
  // info_value
  info_value?: string;
  // (0,1,2,3)
  asset_location_on_page?: string;
  // info_origin
  info_origin?: string;
  // offering_guid
  offering_guid?: string;
  // info_type
  info_type?: string;
  // sidebar / dashboard
  origin?: string;
  // msid
  msid?: GUID;
  // campaign_id
  campaign_id?: string;
  // placement_id
  placement_id?: string;
};
export type dashboardSiteNewsClickItemParams = {
  // type
  feed_type?: string;
  // origin
  msg_origin?: string;
  // name
  name?: string;
  // item_id
  item_id?: GUID;
  // source
  source?: string;
  // url
  url?: string;
  // is_deleted
  is_deleted?: boolean;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // unique identifier of CMS items
  campaignId?: GUID;
  // title of tip
  title?: string;
  // item_lng
  lang?: string;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // is_archived
  is_archived?: boolean;
  // feed_id
  feed_id?: GUID;
};
export type ascendPpClickOnMoveToWixPremiumPpParams = {
  // in milisec
  timeInPage?: number;
  // button name open PP
  referralInfo?: string;
  // premium / compare
  button_name?: string;
  // view_type
  view_type?: string;
  // product name open PP
  origin?: string;
  // web/mobile
  platform?: string;
};
export type newFormsFormListTabOpenedOldFormsFormsParams = {
  // forms/old_forms
  tab_name?: string;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type websitePageChecklistInteractWithStepInAListParams = {
  // forms/old_forms
  tab_name?: string;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type ascendPpThankYouPageParams = {
  // package bought
  package_id?: string;
  // Cycle bought
  cycle_name?: string;
  // view_type
  view_type?: string;
  // package bought
  package_name?: string;
  // app_id
  app_id?: GUID;
  // Page View / Click go to Dashboard
  type?: string;
  // package id
  packageId?: GUID;
  // web/native
  platform?: string;
  // cycle id
  cycleId?: number;
};
export type privacyCookiesCookieConsentBannerCardCtaClickSrc5Evid1927Params = {
  // The name of the CTA
  //  the user clicked on
  cta_name?: string;
};
export type invoicesMoreActionsClickParams = {
  // view_type
  view_type?: string;
  // origin page
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoicesMoreActionsChooseOptionParams = {
  // 'Products', 'Reports','Accept Payments', 'Invoice Settings','Feedback'
  option?: string;
  // view_type
  view_type?: string;
  // originPage
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type mobileClickOnCreateNewSiteParams = {
  // the name of the page the user is in
  page_view?: string;
  // platform
  platform?: string;
};
export type dashboardFetchDealerLayoutFailedParams = {
  // view_type
  view_type?: string;
  // fallback/cached
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // old/new
  dashboard_type?: string;
};
export type dashboardUserSeeFeedParams = {
  // feed id
  feedId?: GUID;
  // the application/CMS that sent the feed. send the application ID.
  source?: string;
  // the link of the action
  url?: string;
  // view_type
  view_type?: string;
  // if the item was full displayed for 3 sec or more
  more3sec?: boolean;
  // origin
  origin?: string;
  // unique identifier of CMS items
  campaignId?: GUID;
  // title of feed
  title?: string;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // was the item full viewed above the fold
  aboveTheFold?: boolean;
  // feed id
  feed_id?: GUID;
};
export type mySitesClickInUnableToMoveSitesToTrashDialogParams = {
  // view_type
  view_type?: string;
  // my-sites/dashboard
  origin?: string;
  // the button actual text/ the url actual title (only in english)
  cta?: string;
  // deprecated
  platform?: string;
  // the selected site guid, when the action is generic and not related to specific site (exit f.e) send null
  msid?: GUID;
  // cancel/cta
  action?: string;
};
export type samplingPageFeaturesParams = {
  // the page id (the component id of the page)	
  pageId?: string;
  // entity/collection
  pageType?: string;
  // the page's route	
  pageRoute?: string;
  // number of table components
  numberOfTableComponents?: number;
  // number of tabs components
  numberOfTabsComponents?: number;
  // number of grid components
  numberOfGridComponents?: number;
  // number of nested tables components
  numberOfNestedTablesComponents?: number;
  // true if the page belongs to Wix Patterns
  isWixPatternsPage?: boolean;
  // true if the component belongs to Wix Patterns
  isWixPatternsComponent?: boolean;
  // list of all the components in the page that belong to Wix Patterns
  wixPatternsComponentsInPage?: string;
  // entity/collection
  wixPatternsPageType?: string;
};
export type clickingOnQuickActionButtonThreeDotsParams = {
  // view_type
  view_type?: string;
  // origin page ( Invoices Dashboard, Recurring Invoices,Pricing Quotes, Invoice Interface
  origin?: string;
  // OneApp/ Web
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type tooltipForOwnerAppParams = {
  // view_type
  view_type?: string;
  // entry points -analytics/blog
  origin?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type tooltipForOwnerAppClickParams = {
  // cta/close
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type downloadModalParams = {
  // view_type
  view_type?: string;
  // activity tab/mobile app dashboard
  origin?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type downloadModalClickParams = {
  // view_type
  view_type?: string;
  // activity tab/mobile app dashboard
  origin?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
  // send_link/learn_how/close
  action?: string;
};
export type downloadModalSuccessMessageParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type downloadModalErrorMessageParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type automationMainTableUserSearchFocusOutParams = {
  // view_type
  view_type?: string;
  // the text the user search for
  searchText?: string;
  // platform
  platform?: string;
  // number of results the user get
  numOfResults?: number;
  // msid
  msid?: GUID;
};
export type searchClickedToOpenSearchParams = {
  // sub_view
  sub_view?: string;
  // origin
  origin?: string;
  // view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type osClickOnFavoritesParams = {
  // the sidebar status (expand or collapsed) 
  displayMode?: string;
  // open or close the favorites popup
  action?: string;
  // the component name of the page	
  pageName?: string;
  // the page id (the component id of the page)
  pageId?: string;
  // the app id of the app the page belongs to
  appId?: string;
  // returns true if the favorites pages list is currently empty
  isEmptyFavorites?: boolean;
  // the list of current pages in the favorite pages section
  favoriteItemsList?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
};
export type osFavoritesPopupShownParams = {
  // the component name of the page	
  pageName?: string;
  // the page id (the component id of the page)
  pageId?: string;
  // the app id of the app the page belongs to
  appId?: string;
  // the type of popup display (favorite pages or add to favorites marketing)
  view?: string;
  // returns true if the favorites pages list is currently empty
  isEmptyFavorites?: boolean;
  // returns true if the recently viewed list is currently empty
  isEmptyRecentlyViewed?: boolean;
  // the list of current pages in the recently viewed section
  recentlyViewedItemsList?: string;
  // the list of current pages in the favorite pages section
  favoriteItemsList?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
};
export type dashboardSiteNewsFilterParams = {
  // name
  name?: string;
  // location
  location?: string;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // type
  type?: string;
  // platform
  platform?: string;
  // filter_type
  filter_type?: string;
  // msid
  msid?: GUID;
};
export type osFavoritesPopupCtaClickedParams = {
  // the component name of the page	
  pageName?: string;
  // the page id (the component id of the page)
  pageId?: string;
  // the app id of the app the page belongs to
  appId?: string;
  // the type of popup display (favorite pages or add to favorites marketing)
  view?: string;
  // cta name (in english)
  cta?: string;
  // the section the cta belongs to (general favorites popup, favorite page, recently viewed page)
  ctaType?: string;
  // the number of favorite pages currently displayed in the Favorites popup
  numFavoritePages?: number;
  // the number of recently viewed pages currently displayed in the Favorites popup
  numRecentlyViewedPages?: number;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
};
export type osFavoritesPagesEditParams = {
  // the component name of the page	
  pageName?: string;
  // the page id (the component id of the page)
  pageId?: string;
  // the app id of the app the page belongs to
  appId?: string;
  // cta name (in english) - remove/cancel/enter/edit/save
  cta?: string;
  // the component name of the page that the user picks
  favoritesName?: string;
  // Send true if the action completed successfully
  wasSuccess?: boolean;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
  // Favorites popup / sidebar
  origin?: string;
};
export type dashboardSettingsUpdateParams = {
  // settings section name
  name?: string;
  // view_type
  view_type?: string;
  // social provider for enable/disable social actions (facebook/google)
  providerId?: string;
  // security box/main page
  click_from?: string;
  // button/description (only for 'edit password' - where did the user click)
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // deprecated
  value?: string;
};
export type gizaSdkApiCallReceivedSrc5Evid2222Params = {
  // the Giza's hosting platform that the API call received in. expected values: dev center/ BizMgr/ account manager/ etc.
  hosting_platform?: string;
  // the app that generated an API call, it can be Wix app or TPA. if the API call was generated by the hosting platform itself and not by an app the app_id will be null
  app_id?: string;
  // The method name
  method_name?: string;
  // the component id of the component that triggered the API call. the component id it's the id of the component in dev center.
  component_id?: string;
  // f.e.: metasite id  will be reported when there is context of site like in BizMgr
  hosting_platform_context_id?: string;
  // tool
  tool?: string;
};
export type dashboardTpaUpgradeClickParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // app_id
  app_id?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type automationsPriceQuotesInvoicesSendFeedbackFormParams = {
  // view_type
  view_type?: string;
  // {automations, price quotes, invoices}
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type automationsPriceQuotesInvoicesSubmitFeedbackFormParams = {
  // view_type
  view_type?: string;
  // {automations, price quotes, invoices}
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSelectorLoadedParams = {
  // premium/published/adi / none
  filtered?: string;
  // true - if partner dashboard displayed
  is_partner_dashboard?: boolean;
  // publish_status
  sitePublished?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // absolute account sites number
  account_sites_number?: number;
  // referral
  referral?: string;
  // in ms
  loadingTime?: number;
  // no thumbnails / empty state / success
  status?: string;
  // HtmlWeb / modal
  siteType?: string;
  // site_type
  site_type_enriched?: number;
  // platform
  platform?: string;
  // # sites returned to site selector
  sites_count?: number;
  // mobile / desktop
  device?: string;
};
export type mobileClickOnChangeLngParams = {
  // new lng selected
  to_lng?: string;
  // platform
  platform?: string;
  // previous lng
  from_lng?: string;
};
export type quotesPrintInvoiceParams = {
  // 'Recurring','One Time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // customer for UoU, my invoices for users
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesPayInvoiceClickSrc5Evid246Params = {
  // 'Recurring','One Time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // customer for UoU, my invoices for users
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type dashboardSiteSelectorButtonParams = {
  // premium/published/adi / none
  filtered?: string;
  // the index of the selected site position in the site selector
  positionIndex?: number;
  // site_id
  site_id?: GUID;
  // true - if partner dashboard chosen
  is_partner_dashboard?: boolean;
  // json of all chosen msid separated with comma
  result?: string;
  // single / multi
  selectionType?: string;
  // view_type
  view_type?: string;
  // ADI/Editor
  siteTypeName?: string;
  // action_url
  action_url?: Url;
  // referral URL
  referral?: string;
  // HtmlWeb / modal
  siteType?: string;
  // the number of sites available in site selector (not necessarily equal to number of sites owned)
  sites_number?: number;
  // x / cancel / continue
  cta?: string;
  // The position of the selected site in the page. 1 is the highest site.
  position?: number;
  // site_type
  site_type_enriched?: number;
  // esi
  esi?: GUID;
  // deprecated
  platform?: string;
  // msid
  msid?: GUID;
  // how many sites were chosen
  sites_count?: number;
  // mobile / desktop
  device?: string;
};
export type homeClickNotificationCtaParams = {
  // app that sent the notification
  app_id?: GUID;
  // app that sent the notification
  app_def_id?: string;
  // view_type
  view_type?: string;
  // the notification / activity type
  activity_type?: string;
  // notification id
  notification_id?: GUID;
  // number of new notifications - number in badge
  num_of_new?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type waiverClientAppWaiverStatusDropdownParams = {
  // from where the user clicked
  origin?: string;
  // contact_id
  contact_id?: string;
  // current waiver status
  currentValue?: string;
  // msid
  msid?: GUID;
};
export type waiverClientAppWaiverStatusChangedManuallyParams = {
  // previous waiver status
  previous_value?: string;
  // from where the user clicked
  origin?: string;
  // contact_id
  contact_id?: string;
  // current waiver status
  currentValue?: string;
  // msid
  msid?: GUID;
};
export type waiverClientAppSendWaiverToClientParams = {
  // from where the user clicked
  origin?: string;
  // contact_id
  contact_id?: string;
  // msid
  msid?: GUID;
};
export type homeMarkNotificationUnreadParams = {
  // view_type
  view_type?: string;
  // notification id
  notification_id?: GUID;
  // app that sent the notification
  app_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type homeMarkNotificationReadParams = {
  // view_type
  view_type?: string;
  // activity type - not sent
  activity_type?: string;
  // notification id
  notification_id?: string;
  // app that sent the notification
  app_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type homeMarkAllUnreadNotificationsParams = {
  // Web / browser / mobile / SMS / email
  channel?: string;
  // view_type
  view_type?: string;
  // all notifications that were marked as read in the page ( separated with a comma)
  notification_ids?: string;
  // MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // number of unread messages
  num_of_unread?: number;
  // platform
  platform?: string;
  // deprecated
  msid?: string;
};
export type homeNotificationBadgeShownParams = {
  // view_type
  view_type?: string;
  // true if sent on page load
  on_page_load?: boolean;
  // MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // number of new notifications - number in badge
  num_of_new?: number;
  // platform
  platform?: string;
  // deprecated
  msid?: string;
};
export type homeAllowBlockBrowserNotificationClickParams = {
  // view_type
  view_type?: string;
  // allow/block/dismiss
  user_reply?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type notificationsClickOnAllSitesTabParams = {
  // on which tab did he clicked
  feed_name?: string;
  // deprecated
  tab_name?: string;
  // view_type
  view_type?: string;
  // MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // platform
  platform?: string;
  // deprecated
  msid?: string;
  // deprecated
  view?: string;
};
export type dashboardEnterEditorxParams = {
  // view_type
  view_type?: string;
  // the location of the button e.g. my-sites top button
  origin?: string;
  // platform
  platform?: string;
};
export type dashboardQuickActionsDragNDropParams = {
  // ts
  duration?: number;
  // name
  name?: string;
  // view_type
  view_type?: string;
  // direction
  direction?: string;
  // is_to_top_six
  isToTopSix?: boolean;
  // to
  to?: number;
  // is_from_top_six
  isFromTopSix?: boolean;
  // from
  from?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type triggersServerTpaActivationInitiatedCompletedParams = {
  // instance_id
  instanceId?: GUID;
  // visitor_id
  visitorId?: GUID;
  // msid
  biToken?: GUID;
  // join with shoutout events (src36)
  activationRequestId?: string;
  // unique identifier for activity of rule
  activityId?: GUID;
  // name of recipie
  recipeName?: string;
  // name of activity sent the event.
  activityType?: string;
  // unique identifier for provider of activity
  providerId?: GUID;
  // Shout Out page identifier
  token?: string;
  // unique identifier for contact
  contactId?: GUID;
  // name of rule
  ruleId?: GUID;
};
export type triggersServerTpaActivationInitiatedFailedParams = {
  // instance_id
  instanceId?: GUID;
  // visitor_id
  visitorId?: GUID;
  // msid
  biToken?: GUID;
  // join with shoutout events (src36)
  activationRequestId?: string;
  // unique identifier for activity of rule
  activityId?: GUID;
  // name of recipie
  recipeName?: string;
  // name of activity sent the event.
  activityType?: string;
  // unique identifier for provider of activity
  providerId?: GUID;
  // Shout Out page identifier
  token?: string;
  // unique identifier for contact
  contactId?: GUID;
  // name of rule
  ruleId?: GUID;
};
export type triggersServerTaskScheduledParams = {
  // instance_id
  instanceId?: GUID;
  // visitor_id
  visitorId?: GUID;
  // msid
  biToken?: GUID;
  // unique identifier for activity of rule
  activityId?: GUID;
  // activation assumed date
  startAt?: DateTime;
  // unique identifier for contact
  contactId?: GUID;
  // name of rule
  ruleId?: GUID;
};
export type triggersServerTpaActivationCompletedSuccessfullyParams = {
  // instance_id
  instanceId?: GUID;
  // visitor_id
  visitorId?: GUID;
  // msid
  biToken?: GUID;
  // join with shoutout events (src36)
  activationRequestId?: string;
  // unique identifier for activity of rule
  activityId?: GUID;
  // name of rule
  ruleId?: GUID;
};
export type triggersServerTpaActivationCompleteFailedParams = {
  // instance_id
  instanceId?: GUID;
  // visitor_id
  visitorId?: GUID;
  // msid
  biToken?: GUID;
  // error msg
  errorMsg?: string;
  // join with shoutout events (src36)
  activationRequestId?: string;
  // unique identifier for activity of rule
  activityId?: GUID;
  // error type
  errorType?: string;
  // name of rule
  ruleId?: GUID;
};
export type triggersServerTriggerScheduleCancelledParams = {
  // --
  instanceId?: GUID;
  // visitor_id
  visitorId?: GUID;
  // --
  biToken?: GUID;
  // unique identifier for activity of rule
  activityId?: GUID;
  // name of rule
  ruleId?: GUID;
};
export type notificationNotificationAutomationCreatedParams = {
  // Web / browser / mobile / SMS / email- multiple channels
  channels?: string;
  // deprecated
  channel?: string;
  // all contributors / owner
  recipients_type?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardClickOnSideBarParams = {
  // origin
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type invoicesClickOnSendInvoiceButtonParams = {
  // instance_id
  instanceId?: GUID;
  // Total amount of the invoice, INTEGER multiplied by 100,000
  totalAmountLong?: number;
  // create order?
  createOrder?: boolean;
  // is the invoice form valid
  isValid?: boolean;
  // uuid
  uuid?: GUID;
  // 'one time','recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // invoice_guid
  invoiceId?: GUID;
  // create invoice, edit invoice
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // currency
  currency?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type notificationShowNotificationParams = {
  // true / false
  is_high_priority?: boolean;
  // All sites/This site /float
  feed_name?: string;
  // Web / browser / mobile / SMS / email
  channel?: string;
  // where the display was triggered from: site_level / account_level / home_site_level
  source?: string;
  // correlation_id
  correlation_id?: GUID;
  // view_type
  view_type?: string;
  // all notifications that were shown in the page ( separated with a comma)
  notification_ids?: string;
  // MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // online / cashed (in case of no internet)
  mode?: string;
  // correlation_id
  correlationId?: string;
  // contact_id guid
  contact_id?: string;
  // platform
  platform?: string;
  // deprecated
  notificationid?: string;
  // msid
  msid?: GUID;
  // page number - each page is limited to 30 notifications
  page_number?: number;
};
export type notificationClickOnNotificationParams = {
  // true / false
  is_high_priority?: boolean;
  // Sub category of the channel (All Sites/This Site /Float/Oneapp notification center/ mobile os)
  feed_name?: string;
  // deprecated
  clickOrigin?: string;
  // Web / browser / mobile / SMS / email
  channel?: string;
  // correlation_id
  correlation_id?: GUID;
  // mark read/mark unread/click/delete
  click_type?: string;
  // view_type
  view_type?: string;
  // deprecated
  notification_id?: string;
  // (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // correlation_id
  correlationId?: string;
  // contact_id
  contact_id?: string;
  // platform
  platform?: string;
  // notificationid
  notificationid?: string;
  // msid of the notification
  msid?: GUID;
  // deep_link
  deep_link?: string;
  // list of notification ids contain in this notification. if the notification is not grouped this field will be null
  grouped_notifications?: string;
};
export type notificationsEnableDesktopNotificationsFirstTimeParams = {
  // All Sites/This Site / settings
  feed_name?: string;
  // view_type
  view_type?: string;
  // (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // platform
  platform?: string;
  // deprecated
  msid?: string;
};
export type notificationsPushNotificationToggleIsDisplayedParams = {
  // All Sites/This Site/ Settings
  feed_name?: string;
  // view_type
  view_type?: string;
  // (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // permission
  permission_type?: string;
  // platform
  platform?: string;
  // deprecated
  msid?: string;
};
export type notificationsEnableToTurnOnOffAllSiteNotificationsExpertsParams = {
  // 1- on , 0- off
  toggle?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type notificationsEnableToTurnOnOffNotificationsPerChannelParams = {
  // desktop/email/ sms/ mobile
  channel?: string;
  // 1 - on , 0- off
  toggle?: boolean;
  // view_type
  view_type?: string;
  // notification context - desktop/general/ wix chat/bookings/...
  section?: string;
  // platform
  platform?: string;
  // preference guid(extension_id)
  group?: string;
  // contact id
  contactId?: GUID;
  // The specifc notification that is toggled(on/off).
  notificationName?: string;
  // The entity that the preferences is changed for.(e.g. owner/member/contact/msid)
  targetEntity?: string;
  // if targetEntity = 'msid', msid. 
  targetMsid?: string;
};
export type notificationsShowMobileDialogParams = {
  // view_type
  view_type?: string;
  // true , false
  is_installed_oneapp?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type notificationsDisplayPopupForUserBlockedDesktopNotificationsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type notificationCloseAHighPriorityNotificationsParams = {
  // All Sites/This Site /Float
  feed_name?: string;
  // Web / browser / mobile / SMS / email
  channel?: string;
  // view_type
  view_type?: string;
  // deprecated
  notification_ids?: string;
  // MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // platform
  platform?: string;
  // notificationid
  notificationid?: string;
  // msid of the notification
  msid?: GUID;
};
export type dashboardShowMorePopularShortcutsClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type notificationsDisplayDesktopNotificationsBannerParams = {
  // All Sites/This Site /Float
  feed_name?: string;
  // view_type
  view_type?: string;
  // (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // platform
  platform?: string;
};
export type notificationsClickOnDesktopNotificationsBannerParams = {
  // All Sites/This Site /Float
  feed_name?: string;
  // view_type
  view_type?: string;
  // (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // platform
  platform?: string;
};
export type notificationsResolveAlertNotificationParams = {
  // contact id
  contactId?: GUID;
  // The specific click name
  clickName?: string;
  // The click area(open/close modal, click on tab etc...)
  ClickTypeInfo?: string;
  // The area of the click(e.g. notification preferences widget)
  clickArea?: string;
};
export type invoicesUserSendInvoiceParams = {
  // instance_id
  instanceId?: GUID;
  // Total amount of the invoice, INTEGER multiplied by 100,000
  totalAmountLong?: number;
  // create order?
  createOrder?: boolean;
  // uuid
  uuid?: GUID;
  // The optional type of the invoice deposit. Possible values: "FLAT"/"PERCENTAGE".
  depositType?: string;
  // 'one time','recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // invoice_guid
  invoiceId?: GUID;
  // create invoice, edit invoice
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // invoiceTitle
  invoiceTitle?: string;
  // by app_def_id
  invoiceSource?: string;
  // currency
  currency?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // discountPercentage
  discountPercentage?: number;
};
export type bizManagerSetupWidgetOmniPhaseCompletedInDashboardParams = {
  // a list of asset campaign IDs that were skipped in the phase
  skipped_items?: string;
  // a list of asset campaign IDs that were resolved in the phase
  resolved_items?: string;
  // omni setup phase id, sent the event for each "done" phase
  asset_campaign_guid?: string;
  // deprecate
  number_of_resolved_items?: number;
  // view_type
  view_type?: string;
  // deprecate
  number_of_skipped_items?: number;
  // platform
  platform?: string;
  // ADI/Editor/MA
  hosting?: string;
  // msid
  msid?: GUID;
};
export type automationsDaComponentShowPageParams = {
  // 'Recurring','One Time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // customer for UoU, my invoices for users
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type automationsDaComponentManageAutomationsParams = {
  // view_type
  view_type?: string;
  // success,failure
  status?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type automationsDaComponentCreateYourOwnParams = {
  // 'recurring','one time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // by app_def_id
  invoiceSource?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type automationsDaComponentRecommendationClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type automationsDaComponentExploreMoreClickParams = {
  // exposure_name
  exposure_name?: string;
  // view_type
  view_type?: string;
  // The value we get from the WAS
  value_from_was?: number;
  // The value we get from the Dealer
  value_from_dealer?: number;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type dashboardLessPopularShortcutsClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type clickOnSearchInHelpCenterInSearchSrc5Evid292Params = {
  // query
  query?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // BUSINESS_MANAGER / settings lobby
  origin?: string;
  // requested view
  view?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type errorPageClick295Params = {
  // component_name
  component_name?: string;
  // hosting_platform
  hosting_platform?: string;
  // specifies the location in page: header/sidebar/app/sidepanel etc. includes error type. different for refresh/load types of actions
  error_location?: string;
  // view_type
  view_type?: string;
  // host_id
  host_id?: string;
  // component_app_id
  component_app_id?: string;
  // platform
  platform?: string;
  // component_id
  component_id?: string;
  // hosting_platform_context_id
  hosting_platform_context_id?: string;
  // --
  hosting?: string;
  // component_type
  component_type?: string;
  // msid
  msid?: GUID;
  // null when it's a system error, permissions when the error is permission related (user has no permission for the page)
  error_name?: string;
};
export type accountDialogClickItemParams = {
  // the page name the item leads to (e.g. account-settings)
  item_id?: string;
  // item's index in the entire dialog excluding separators (only for main display, index starts from 1, logout (or any side location)=0)
  item_index_ex_separators?: number;
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // items list including section separators as 'delimiter'
  items_displayed?: string;
  // the display name in the dialog
  item_name?: string;
  // main-menu/sub-menu (e.g. languages)
  origin?: string;
  // platform
  platform?: string;
  // only for dashboard dialog
  msid?: GUID;
  // item's index in the entire dialog (only for main display, index starts from 1, logout (or any side location)=0)
  item_index?: number;
};
export type errorPage297Params = {
  // component_name
  component_name?: string;
  // hosting_platform
  hosting_platform?: string;
  // specifies the location in page: header/sidebar/app/sidepanel etc. includes error type
  error_location?: string;
  // view_type
  view_type?: string;
  // error_type
  error_type?: string;
  // host_id
  host_id?: string;
  // component_app_id
  component_app_id?: string;
  // app_id
  app_id?: string;
  // platform
  platform?: string;
  // component_id
  component_id?: string;
  // hosting_platform_context_id
  hosting_platform_context_id?: string;
  // --
  hosting?: string;
  // component_type
  component_type?: string;
  // msid
  msid?: GUID;
  // page_url
  page_url?: string;
  // null when it's a system error, permission when the error is permission related (user has no permission for the page)
  error_name?: string;
};
export type dashboardTourUserSeesTourBannerParams = {
  // experiment_id
  experiment_name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardStartLoadingParams = {
  // deprecated
  prev_module_id?: string;
  // authentication token. if the session exists, then the user is logged in.
  __cookies_prefix__wixsession?: string;
  // referral_additional_info
  referral_additional_info?: string;
  // specific button triggered the the view loading
  referral_info?: string;
  // view_type
  view_type?: string;
  // true / false
  is_account_mgr?: boolean;
  // page in app/module
  sub_view?: string;
  // screen_width
  screen_width?: number;
  // deprecated
  initial_load?: boolean;
  // all application ids installed on Biz Mgr
  app_ids?: string;
  // window_width
  window_width?: number;
  // specific button triggered the the view loading (== referral info from editor)
  origin?: string;
  // true if page is loaded when Biz mgr is active
  is_biz_mgr?: boolean;
  // screen_height
  screen_height?: number;
  // origin view / module / app
  prev_view?: string;
  // the previous page component id, will be reliable only when page has an entry point from sidebar.
  prevPageComponentId?: string;
  // application id
  app_id?: string;
  // previous page in app/module
  prev_sub_view?: string;
  // window_height
  window_height?: number;
  // platform
  platform?: string;
  // origin_app_id (what app opened the bizmgr)
  origin_app_id?: string;
  // MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
  // the page component id, will be reliable only when page has an entry point from sidebar. was added on 22/08/22
  pageComponentId?: string;
  // deprecated
  module_id?: string;
  // requested view/ module/ app
  view?: string;
};
export type dashboardEntryFeedingParams = {
};
export type clickOnGoToEditorFromBmSrc5Evid3001Params = {
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hostingPlatformContextId?: string;
  // page id
  pageId?: string;
  // page name
  pageName?: string;
};
export type homeCloseDialogParams = {
  // deprecated
  wixsession?: string;
  // Dashboard / my sites
  page_view?: string;
  // -
  referral_info?: string;
  // view_type
  view_type?: string;
  // place of clicking my sites ( Header, top left bar). Relevant only for site list
  origin?: string;
  // -
  prev_view?: string;
  // -
  app_id?: GUID;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // the action made to close the dialog: click/hover (until 05/23 dialog close only on click)
  action?: string;
  // name of dialog: my-apps, site-list, account. 'account'- regular full menu  
  // ‘partner-account’- full menu with entry point to wix studio
  //  ‘WixStudio-account-menu’- lean menu
  view?: string;
};
export type dashboardFinishLoadingParams = {
  // authentication token. if the session exists, then the user is logged in.
  __cookies_prefix__wixsession?: string;
  // grid/list-view
  view_mode?: string;
  // referral_additional_info
  referral_additional_info?: string;
  // loading time from start loading Bizmgr (from 561) - deprecated
  loading_time_from_start?: number;
  // specific button triggered the the view loading
  referral_info?: string;
  // view_type
  view_type?: string;
  // true/ false
  is_account_mgr?: boolean;
  // --
  sub_view?: string;
  // screen width
  screen_width?: number;
  // intial load
  initial_load?: boolean;
  // Loading time from module start loading (from 564)
  loading_time_from_module?: number;
  // all applications installed on Biz Mgr
  app_ids?: string;
  // --
  window_width?: number;
  // loading_time_from_first_interaction (309)
  loading_time_from_first_interaction?: number;
  // origin
  origin?: string;
  // loading_time_from_performance_now  when server start to load. the real beginning
  loading_time_from_performance_now?: number;
  // true if page is loaded when Biz mgr is active
  is_biz_mgr?: boolean;
  // screen height
  screen_height?: number;
  // origin view
  prev_view?: string;
  // the previous page component id, will be reliable only when page has an entry point from sidebar.
  prevPageComponentId?: string;
  // application id
  app_id?: string;
  // previous sub view
  prev_sub_view?: string;
  // --
  window_height?: number;
  // not in use
  is_pro?: boolean;
  // platform
  platform?: string;
  // origin_app_id (what app opened the bizmgr)
  origin_app_id?: string;
  // dashboard/editor/onboarding
  hosting?: string;
  // msid
  msid?: GUID;
  // the page component id, will be reliable only when page has an entry point from sidebar. was added on 22/08/22
  pageComponentId?: string;
  // *not in use*
  module_id?: string;
  // requested view
  view?: string;
  // loading time of page (from 300 )
  loading_time?: number;
};
export type homeOpenDialogClickParams = {
  // authentication token. if the session exists, then the user is logged in.
  wixsession?: string;
  // my-sites /dashboard / account settings
  page_view?: string;
  // -
  referral_info?: string;
  // view_type
  view_type?: string;
  // place of clicking my sites ( Header, top left bar). Relevant only for site list
  origin?: string;
  // -
  prev_view?: string;
  // -
  app_id?: GUID;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // the action made to open the dialog: click/hover (was sent between 05/23 to 08/23)
  action?: string;
  // my-apps, site-list, account,notifications,priority support
  view?: string;
};
export type dialogFirstLoadParams = {
  // authentication token. if the session exists, then the user is logged in.
  wixsession?: string;
  // -
  referral_info?: string;
  // view_type
  view_type?: string;
  // place of clicking my sites ( Header, top left bar). Relevant only for site list
  origin?: string;
  // -
  prev_view?: string;
  // -
  app_id?: GUID;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // my-apps, site-list
  view?: string;
  // loading time of page
  loading_time?: number;
};
export type homeMultipleSitesCheckParams = {
  // view_type
  view_type?: string;
  // dashboard / my-sites
  origin?: string;
  // num sites that are displayed on page
  num_displayed_sites?: number;
  // deprecated
  has_two_sites?: boolean;
  // search/dashboard/wix.com
  prev_view?: string;
  // platform
  platform?: string;
  // deorecated
  msid?: GUID;
  // total number of sites
  sites_count?: number;
};
export type homeBizMgrEligibleParams = {
  // view_type
  view_type?: string;
  // phase number
  phase_number?: number;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
  // deprecated
  is_eligible?: boolean;
};
export type homeClickOnCreateAnythingItemParams = {
  // item name
  name?: string;
  // from where the users opened the dialog
  page_view?: string;
  // view_type
  view_type?: string;
  // add_app_id
  add_app_id?: string;
  // deprecated
  app_id?: GUID;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // dialog name
  view?: string;
};
export type myAccountClickOnExpertDashboardParams = {
  // my-sites / dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // header
  origin?: string;
  // platform
  platform?: string;
};
export type dashboardDashboardHomeIsFullyLoadedParams = {
  // loading time from start loading Bizmgr (from 561)
  loading_time_from_start?: number;
  // specific button triggered the the view loading
  referral_info?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // screen_width
  screen_width?: number;
  // Loading time from module start loading (from 564)
  loading_time_from_module?: number;
  // window_width
  window_width?: number;
  // deprecated
  loading_time_from_first_interaction?: number;
  // loading_time_from_performance_now  when server start to load. the real beginning
  loading_time_from_performance_now?: number;
  // screen_height
  screen_height?: number;
  // origin view
  prev_view?: string;
  // prev page in app
  prev_sub_view?: string;
  // window_height
  window_height?: number;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
  // requested view
  view?: string;
  // loading time of page (from 300 )
  loading_time?: number;
};
export type dashboardTourCloseTourParams = {
  // experiment_id
  experiment_name?: string;
  // phase_name
  stage_process?: string;
  // view_type
  view_type?: string;
  // phase_number
  stage_number?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsPageViewParams = {
  // json of sections and sub-items that were loaded to settings. For example:  { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
  available_sections?: string;
  // name of tab
  name?: string;
  // section name of the automatic scrolling if null then the page wasn't automated scrolled
  focus_section?: string;
  // view_type
  view_type?: string;
  // list of sections that loaded in settings lobby but the user is not seeing in the page loading separated by comma
  unseen_sections?: string;
  // list of sections the user sees above the fold
  seen_sections?: string;
  // name of previous tab
  origin?: string;
  // If the red badge is shown in the sidebar then "true", if not "false"
  alertStatus?: string;
  // deprecated
  place?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // json of sections and sub-items that were loaded to settings with the red badge. For example: { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
  alert_sections?: string;
  // json of sections and sub-items that were loaded to settings in the premium bar
  subscriptions?: string;
};
export type dashboardSiteSettingsExperienceDisplayedParams = {
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of previous tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsChangeValueParams = {
  // name of the field that was changed
  name?: string;
  // save(pop-up),create new
  create_method?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // field's value
  value?: string;
};
export type dashboardSiteSettingsChangeValueSuccessParams = {
  // name of the field that was changed
  name?: string;
  // save(pop-up),create new
  create_method?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // field's value
  value?: string;
};
export type dashboardSiteSettingsChangeValueFailureParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // field's value
  value?: string;
};
export type dashboardSiteSettingsClickLinkParams = {
  // link name
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // Link URL
  value?: string;
};
export type dashboardSiteSettingsDeleteValueParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // delete/clear value
  value?: string;
};
export type dashboardSiteSettingsDeleteValueSuccessParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // delete/clear value
  value?: string;
};
export type dashboardSiteSettingsDeleteValueFailureParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // delete/clear value
  value?: string;
};
export type dashboardSiteSettingsSelectValueParams = {
  // name of the field that was selected
  name?: string;
  // manually(pop-up),drop-down
  adding_method?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // UI type (picture/button/select/input...)
  place?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // user's selection
  value?: string;
};
export type dashboardTourNextStepParams = {
  // experiment_id
  experiment_name?: string;
  // phase_name
  stage_process?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsClosingComponentParams = {
  // name of the field that was selected
  name?: string;
  // view_type
  view_type?: string;
  // name of current tab
  origin?: string;
  // close type (x/cancel...)
  place?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsDomainSslOptionParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // {Turn on SSL,Remove SSL}
  mode?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsDomainSslPopupCancelParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // {Turn on SSL,Remove SSL}
  mode?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsSeoClickEnterAddressManuallyParams = {
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // Link URL
  value?: string;
};
export type dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUpParams = {
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
  // Link URL
  value?: string;
};
export type dashboardSiteSettingsSeoClickOnGetStartedParams = {
  // view_type
  view_type?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
};
export type dashboardSiteSettingsOverviewUnpublishSiteParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSettingsOverviewUnpublishPopupCancelParams = {
  // name of the field that was changed
  name?: string;
  // view_type
  view_type?: string;
  // user's experience
  experience?: string;
  // name of current tab
  origin?: string;
  // platform
  platform?: string;
  // from where user arrived to sitesettings (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type renameSiteOpenRenameDialogParams = {
  // view_type
  view_type?: string;
  // site-list \ site-list-enterprise
  origin?: string;
  // ‘sidepanel’ / ‘menu’
  cta?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardChangeSiteDisplayNameSaveParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // site guid
  msid?: GUID;
};
export type dashboardUserSeeFeedMoreThen3SecParams = {
  // feed id
  feedId?: GUID;
  // source
  source?: string;
  // url
  url?: string;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // unique identifier of CMS items
  campaignId?: GUID;
  // title
  title?: string;
  // type
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // aboveTheFold
  aboveTheFold?: boolean;
  // feed id
  feed_id?: GUID;
};
export type dashboardChangeUrlSaveParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // site guid
  msid?: GUID;
};
export type needsYourActionNyaWidgetShownParams = {
  // view_type
  view_type?: string;
  // num of NYA items appears to users
  num_of_items?: number;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type needsYourActionItemIsShownParams = {
  // id of the specific item
  item_id?: string;
  // item location appear on page
  item_location_on_page?: number;
  // view_type
  view_type?: string;
  // num of NYA items appears to users
  num_of_items?: number;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
  // template id of the action
  template_id?: string;
};
export type needsYourActionClickOnItemParams = {
  // item id
  item_id?: string;
  // item location num onpage
  item_location_on_page?: number;
  // click/close/hide
  click_type?: string;
  // view_type
  view_type?: string;
  // item name appear
  item_name?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
  // template id
  template_id?: string;
};
export type settingsLobbyItemExposedSrc5Evid3333Params = {
  // the location of item in page (order from 0,1,..
  item_location_on_page?: number;
  // site-details/general/ecommerce/..
  section_name?: string;
  // upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
  item_name?: string;
  // the location of the category in page (order from 0,1,..)
  categoryLocationOnPage?: number;
};
export type needsYourActionClickOnUndoHidingAnItemParams = {
  // item id
  item_id?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
  // template id of the action
  template_id?: string;
};
export type needsYourActionResolvedNyaItemParams = {
  // item id
  item_id?: string;
  // msid
  msid?: GUID;
  // template id of the action
  template_id?: string;
};
export type hooverNewReleasesIconParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type tooltipNotificationPopsUpParams = {
  // New released feature's name
  name?: string;
  // view_type
  view_type?: string;
  // web/mobile
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type newReleasesApiRequestParams = {
  // language
  lng?: string;
  // announcement_id
  announcement_id?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type closeTooltipPopUpParams = {
  // New released feature's name
  name?: string;
  // view_type
  view_type?: string;
  // web, mobile
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type badgeNotificationParams = {
  // view_type
  view_type?: string;
  // number in the badge
  new_notifications?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type viewFeatureCardParams = {
  // announcement_id
  announcement_id?: GUID;
  // view_type
  view_type?: string;
  // position of the announcement
  card_position?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type cardCtaParams = {
  // main/secondary
  button_type?: string;
  // announcement_id
  announcement_id?: GUID;
  // cta name
  button_name?: string;
  // view_type
  view_type?: string;
  // position of the announcement
  card_position?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type viewedAllUpdatesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type settingsOverviewPageClickOnItemParams = {
  // deprecated
  click_name?: string;
  // in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
  hosting_platform?: string;
  // The page of the click (website settings/business info/language and region)
  page_view?: string;
  // view_type
  view_type?: string;
  // the name of the item
  item_name?: string;
  // deprecated
  status_text?: string;
  // card name
  fold_name?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // --
  msid?: GUID;
};
export type iconRenderParams = {
  // uuid
  uuid?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesBulkActionsPrintParams = {
  // number of invoices choose or all
  number?: string;
  // view_type
  view_type?: string;
  // type of filter
  filter?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type setupWidgetItemsParams = {
  // a list of offering guids that were skipped in the phase
  skipped_items?: string;
  // a list of offering guids that were resolved in the phase
  resolved_items?: string;
  // dealer placement id
  asset_campaign_guid?: string;
  // dashboard/sidebar
  location?: string;
  // number_of_open_items
  number_of_available_items?: number;
  // a list of offering guids that are available in the phase
  available_items?: string;
  // number_of_resolved_items
  number_of_resolved_items?: number;
  // view_type
  view_type?: string;
  // number_of_skipped_items
  number_of_skipped_items?: number;
  // dashboard/sidebar/popover
  setup_location?: string;
  // platform
  platform?: string;
  // ADI/Editor/MA
  hosting?: string;
  // msid
  msid?: GUID;
  // normal/hover/click/step-completed
  trigger?: string;
};
export type dashboardShowSideBarParams = {
  // my sites/site home
  page_view?: string;
  // view_type
  view_type?: string;
  // if the side bar always open at application (not relevant anymore)
  alwaysOpen?: boolean;
  // name of application ('mobile sidebar' in case of mobile web)
  selectedItem?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // open/close
  action?: string;
};
export type rolesAddNewRoleClickParams = {
  // true if shown (blog manager appears only for sites with blog)
  is_blog_shown?: boolean;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // name of tab dashboard/authorization/my sites
  origin?: string;
  // platform
  platform?: string;
  // MA/Editor
  hosting?: string;
  // true if shown (event manager appears only for sites with events )
  is_events_shown?: boolean;
  // msid
  msid?: GUID;
};
export type searchQueryParams = {
  // search terms
  searchTerms?: string;
  // language
  lng?: string;
  // request URI
  requestURI?: string;
  // response code
  responseCode?: number;
  // error message
  errorMessage?: string;
  // request time spent
  requestTime?: number;
  // scanned docs count
  scannedDocsCount?: number;
  // matched docs count
  matchedDocsCount?: number;
  // success response status
  isSuccess?: boolean;
  // filter
  filter?: string;
  // offset
  offset?: number;
  // query profile parameters (json formatted)
  queryProfileParams?: string;
  // response message
  responseMessage?: string;
  // query profile
  queryProfile?: string;
  // rank profile
  rankProfile?: string;
  // limit
  limit?: number;
  // custom rank features (json formatted)
  customRankFeatures?: string;
};
export type rolesAddRoleCloseWindowParams = {
  // view_type
  view_type?: string;
  // name of tab dashboard/authorization/my sites
  origin?: string;
  // platform
  platform?: string;
  // Editor / MA
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesAddRoleInviteClickParams = {
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // name of tab dashboard/authorization/my sites
  origin?: string;
  // invited role
  invite_role?: string;
  // email validation
  is_valid_email?: boolean;
  // platform
  platform?: string;
  // MA / Editor
  hosting?: string;
  // not reported (PII)
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type rolesAddRoleInviteClickSuccessParams = {
  // deprecated from 2/6/19 and replaced by roles_displayed field
  is_blog_shown?: boolean;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // name of tab dashboard/authorization/my sites
  origin?: string;
  // invited role
  invite_role?: string;
  // platform
  platform?: string;
  // Editor / MA
  hosting?: string;
  // invited email
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type crmHomeButtonClickedParams = {
  // uuid
  uuid?: GUID;
  // button name
  button_name?: string;
  // view_type
  view_type?: string;
  // i.e create automation , manage finance , all crm tabs
  section?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type rolesAddRoleInviteClickFailParams = {
  // error description
  error_desc?: string;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // name of tab dashboard/authorization/my sites
  origin?: string;
  // invited role
  invite_role?: string;
  // platform
  platform?: string;
  // MA / Editor
  hosting?: string;
  // invited email, empty if email isn't valid
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type rolesLoginPageLoadStartParams = {
  // view_type
  view_type?: string;
  // invite_id
  invite_id?: string;
  // platform
  platform?: string;
  // invited email
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type rolesLoginPageLoadCompleteParams = {
  // view_type
  view_type?: string;
  // invite_id
  invite_id?: string;
  // platform
  platform?: string;
  // invited email
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type rolesAcceptFailParams = {
  // view_type
  view_type?: string;
  // invite id
  invite_id?: string;
  // platform
  platform?: string;
  // invited email
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type rolesResendInviteClickParams = {
  // view_type
  view_type?: string;
  // name of tab
  origin?: string;
  // invited role
  invite_role?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // invited email
  invite_email?: string;
  // msid
  msid?: GUID;
};
export type dashboardCloseBannerParams = {
  // of banner
  name?: string;
  // view_type
  view_type?: string;
  // where is the banner displayed
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type rolesDeleteRoleClickParams = {
  // view_type
  view_type?: string;
  // accepted email
  accept_email?: string;
  // name of tab
  origin?: string;
  // platform
  platform?: string;
  // MA / Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesDeleteRoleCloseWindowParams = {
  // view_type
  view_type?: string;
  // accepted email
  accept_email?: string;
  // name of tab
  origin?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesDeleteRoleDeleteClickParams = {
  // view_type
  view_type?: string;
  // accepted email
  accept_email?: string;
  // name of tab
  origin?: string;
  // platform
  platform?: string;
  // MA / Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesDeleteRoleDeleteClickSuccessParams = {
  // view_type
  view_type?: string;
  // accepted email
  accept_email?: string;
  // name of tab
  origin?: string;
  // platform
  platform?: string;
  // MA / Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesDeleteRoleDeleteClickFailParams = {
  // view_type
  view_type?: string;
  // accepted email
  accept_email?: string;
  // name of tab
  origin?: string;
  // platform
  platform?: string;
  // MA / Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesAcceptInviteFromMobilePageViewParams = {
  // view_type
  view_type?: string;
  // token
  inviteToken?: string;
  // invite_id
  invite_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type rolesEditRoleClickParams = {
  // true if shown (blog manager appears only for sites with blog)
  is_blog_shown?: boolean;
  // true if invite was accepted
  is_accepted?: boolean;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // origin page
  origin?: string;
  // platform
  platform?: string;
  // MA/Editor
  hosting?: string;
  // is_events_shown
  is_events_shown?: boolean;
  // msid
  msid?: GUID;
};
export type rolesEditRoleUpdateClickParams = {
  // true if shown (blog manager appears only for sites with blog)
  is_blog_shown?: boolean;
  // new role
  new_role?: string;
  // true if edit is after invite was accepted
  is_accepted?: boolean;
  // view_type
  view_type?: string;
  // list of roles displayed to the user
  roles_displayed?: string;
  // previous role
  prev_role?: string;
  // origin page
  origin?: string;
  // platform
  platform?: string;
  // Editor / MA
  hosting?: string;
  // msid
  msid?: GUID;
};
export type rolesGetInviteLinkParams = {
  // view_type
  view_type?: string;
  // invited role
  invite_role?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
  // not in use
  action?: string;
};
export type analyticsKpiIsShownInAnalyticsWidgetParams = {
  // the kpis period chosen for all seen kpis when the kpi is shown
  kpi_period?: string;
  // 0-left 1-middle 2-right
  kpi_location?: number;
  // view_type
  view_type?: string;
  // kpi's name
  kpi_name?: string;
  // app id of the vertical that displays the widget.
  app_id?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
  // the value that WAS returns as the kpi value
  value?: string;
};
export type dashboardNewsUserClickReadMoreParams = {
  // the app that sent the feed
  source?: string;
  // unique identifier of the feed
  feedId?: GUID;
  // view_type
  view_type?: string;
  // of read more
  origin?: string;
  // of the feed
  title?: string;
  // of activity
  type?: string;
  // platform
  platform?: string;
  // unique identifier of the site
  msid?: GUID;
};
export type exposureForAnalyticsTestsParams = {
  // numeric value for filtering the events from WAS
  num_value?: number;
  // exposure name
  exposure_name?: string;
  // numeric value (string) for filtering the events from BI profile
  bi_profile_num_value?: string;
  // msid
  msid?: GUID;
};
export type analyticsTooltipParams = {
  // The tooltip name. Till July 2020 was not populated  (only "info" was reported).
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // Dashboard/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type analyticsClickOnWidgetButtonsParams = {
  // collapse/expand/customize
  click_name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type analyticsClickOnKpiParams = {
  // 0-left 1-middle 2-right
  kpi_location?: number;
  // view_type
  view_type?: string;
  // kpi's name
  kpi_name?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type analyticsChooseKpiFromCustomizationListParams = {
  // the chosen kpis in the following way -> kpi: location: (json)
  selected_kpis?: string;
  // the location of the kpi the user tried to add when they got the error
  added_kpi_location?: string;
  // the error the user received
  error_desc?: string;
  // view_type
  view_type?: string;
  // the kpi the user tried to add when they got the error
  added_kpi?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type analyticsClickOnButtonFromCustomizationListParams = {
  // the chosen kpis in the following way -> kpi: location: (json)
  selected_kpis?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type analyticsChangeKpisTimePeriodParams = {
  // the kpis period chosen for all seen kpis when the kpi is shown
  kpi_period?: string;
  // view_type
  view_type?: string;
  // app id of the vertical that displays the widget.
  app_id?: string;
  // platform
  platform?: string;
  // MA/Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type analyticsHoverAKpiParams = {
  // 0-left 1-middle 2-right
  kpi_location?: number;
  // view_type
  view_type?: string;
  // kpi's name
  kpi_name?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type notificationsClickOnAChannelSettingsParams = {
  // collapse/expand
  click_name?: string;
  // channel section the user clicked on
  channel?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardNewsClickViewAllParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type notificationsClickOnChannelLinkParams = {
  // channel section channel section the user clicked on
  channel?: string;
  // the url the user is transferred to
  url?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // Indication if there are settings options for the channel
  has_settings?: boolean;
  // MA/editor/ADI
  hosting?: string;
  // msid
  msid?: GUID;
};
export type quotesClickDueDateParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesChooseDueDateParams = {
  // view_type
  view_type?: string;
  // Due date added
  dueDate?: DateTime;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesClickIssueDateParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesChooseIssueDateParams = {
  // view_type
  view_type?: string;
  // invoice_type
  invoiceType?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type notificationGroupNotificationIsDisplayedParams = {
  // All sites/This site /float
  feed_name?: string;
  // channel
  channel?: string;
  // view_type
  view_type?: string;
  // the shown notification id
  notification_id_shown?: string;
  // list of the notification ids
  notification_ids?: string;
  // MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
  origin?: string;
  // contact_id guid
  contact_id?: string;
  // --
  platform?: string;
  // page number - each page is limited to 30 notifications
  page_number?: number;
};
export type quotesViewPaymentsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesSubscriptionViewPaymentsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardProsSiteActionsOpenedParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // -
  msid?: GUID;
};
export type quotesBulkActionsDownloadPdfParams = {
  // number of invoices choose or all
  number?: string;
  // view_type
  view_type?: string;
  // type of filter
  filter?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesBulkActionsExportCsvParams = {
  // number of invoices choose or all
  number?: string;
  // view_type
  view_type?: string;
  // type of filter
  filter?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDuplicateInvoiceParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type dashboardClickOnMySitesParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesTabPageViewParams = {
  // tab name
  name?: string;
  // view_type
  view_type?: string;
  // deprecated
  experience?: string;
  // web,native
  origin?: string;
  // how the user arrived to the tab
  place?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesInvoicesOnboardingPageViewParams = {
  // phase name
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesGetPaymentClickParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow
  origin?: string;
  // connect/disconnect
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesNewInvoiceClickParams = {
  // in case of duplicate: original invoice guid
  originalInvoiceId?: GUID;
  // view_type
  view_type?: string;
  // origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time, widget (mobile), quick actions (mobile)
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // true / false -  indicates the type of the flow (in case of type= duplicate it will indicate the type of invoice)
  create_order?: boolean;
  // [invoice / invoice&order/ duplicate / get started / without menu]
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesEmailInvoicePageParams = {
  // 'one time', 'recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // origin page
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // web,native
  origin_device?: string;
  // by app_def_id
  invoiceSource?: string;
  // resend mode?
  resend?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesEmailInvoicePageCancelClickParams = {
  // view_type
  view_type?: string;
  // origin page
  origin?: string;
  // web,native
  origin_device?: string;
  // resend mode?
  resend?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesViewInvoicePageViewParams = {
  // source
  source?: string;
  // number of online payments available for this invoice
  no_of_payments?: string;
  // payment_type
  paymentType?: string;
  // view_type
  view_type?: string;
  // true if the pay invoice button is shown
  is_visible?: boolean;
  // true if invoice was paid
  paid?: boolean;
  // origin page
  origin?: string;
  // by app_def_id
  invoiceSource?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
  // other/desktop/tablet/smartphone
  view?: string;
};
export type quotesChangeValueParams = {
  // field name key (customer, email, subject, message, ..)
  name?: string;
  // view_type
  view_type?: string;
  // name of page: create invoice, email invoice, settings
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // value of field
  value?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceSaveDraftClickParams = {
  // 'one time','recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice,premium banner
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceSaveDraftCompleteParams = {
  // 'one time','recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // create invoice, edit invoice
  origin?: string;
  // by app_def_id
  invoiceSource?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type dashboardClickToggleSitesListInNavbarParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // action
  action?: string;
};
export type quotesCreateInvoiceSaveDraftFailedParams = {
  // view_type
  view_type?: string;
  // failure reason
  reason?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type submitGdprFormParams = {
  // answers ticket id
  ticket_id?: GUID;
  // type of answers service request response (success/fail)
  response_status?: string;
  // type of a request (get/delete)
  request_type?: string;
  // time of answers service response (ms)
  response_time?: number;
  // submission date
  submission_date?: DateTime;
};
export type submitGdprFormSrc5Evid4102Params = {
  // answers ticket id
  ticket_id?: GUID;
  // type of answers service request response (success/fail)
  response_status?: string;
  // type of a request (get/delete)
  request_type?: string;
  // time of answers service response (ms)
  response_time?: number;
  // submission date
  submission_date?: DateTime;
};
export type quotesCreateInvoiceCancelClickParams = {
  // view_type
  view_type?: string;
  // button, navigation
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceAddLineParams = {
  // productSource
  source?: string;
  // view_type
  view_type?: string;
  // appDefId
  appDefId?: GUID;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceDeleteLineParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesNewProductClickParams = {
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // product page, create invoice form
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesNewProductSaveParams = {
  // product price
  price_long?: number;
  // description of the product
  description?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // name of the product
  product_name?: string;
  // create,edit,select
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesNewProductCancelParams = {
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create,edit
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesEditProductClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDeleteProductClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDeleteProductPageOkParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardSiteQuickActionDialogApproveParams = {
  // quick action name
  name?: string;
  // view_type
  view_type?: string;
  // site-settings, my-sites
  origin?: string;
  // platform
  platform?: string;
  // -
  msid?: GUID;
};
export type quotesDeleteProductPageCancelParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type cookiesBannerBannerDisplayedParams = {
  // url
  url?: Url;
};
export type cookiesBannerPolicyAppliedParams = {
  // url
  url?: Url;
  // on/off
  third_party?: boolean;
  // on/off
  advertisement?: boolean;
  // ccpa /cookies
  request_type?: string;
  // visitor id
  visitor_id?: GUID;
  // on/off
  analytics?: boolean;
  // on/off
  functional?: boolean;
};
export type quotesEditInvoiceParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // appDefId of the source
  appDefId?: GUID;
  // my invoices, preview, deposit paid
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesPreviewInvoiceParams = {
  // from where the invoice open {feed, more-->invoices}
  source?: string;
  // one time, recurring
  paymentType?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // my invoices, edit invoice, widget
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // web,native
  origin_device?: string;
  // by app_def_id
  invoiceSource?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesPrintInvoiceSrc5Evid423Params = {
  // An external id of an entity, relevant to the oridapplication
  externalId?: GUID;
  // 'recurring','one time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // appDefId (application ID)
  appDefId?: GUID;
  // origin page - from which place this action was made (invoices, contacts full page, crm home...)
  originPage?: string;
  // my invoices, preview
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesAddPaymentClickParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // appDefId of the source
  appDefId?: GUID;
  // my invoices,preview
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
  // true for fully paid selected, false for partial payment selected
  fully_paid?: boolean;
};
export type quotesAddPaymentPageOkParams = {
  // payment method chosen
  paymentMethod?: string;
  // view_type
  view_type?: string;
  // my invoices,preview
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
  // true for fully paid selected, false for partial payment selected
  fully_paid?: boolean;
};
export type quotesAddPaymentPageCancelParams = {
  // view_type
  view_type?: string;
  // my invoices,preview
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesVoidPageOkParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesVoidPageCancelParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type dashboardSiteQuickActionDialogCloseParams = {
  // quick action name
  name?: string;
  // view_type
  view_type?: string;
  // site-settings, my-sites
  origin?: string;
  // platform
  platform?: string;
  // -
  msid?: GUID;
};
export type quotesDeleteInvoiceClickParams = {
  // view_type
  view_type?: string;
  // Preview/my invoices
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesDeleteInvoicePageOkParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesDeleteInvoicePageCancelParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesSettingsNewTaxClickParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // settings , create invoice, empty experience
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesSettingsNewTaxPageSaveParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create,edit
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesSettingsNewTaxPageCancelParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create,edit
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesEditTaxClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDeleteTaxClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDeleteTaxPageOkParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDeleteTaxPageCancelParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type myAccountClickOnHelpParams = {
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // if dashboard then 'MAD'
  origin_app?: string;
  // origin
  origin?: string;
  // app_id
  app_id?: string;
  // platform
  platform?: string;
};
export type quotesShowPaymentPopupPageParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow onboarding/payments
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesConnectPaymentClickParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow onboarding/payments
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesCreateAnAccountOfPaymentProviderParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow onboarding/payments
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesNonValidPaypalAccountPopupParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesNonValidPaypalAccountPopupCloseParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesNonValidPaypalAccountPopupClickLinkParams = {
  // name of payment
  name?: string;
  // view_type
  view_type?: string;
  // how user arrived to the flow
  origin?: string;
  // create, upgrade, support
  link_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesSortInvoicesParams = {
  // name of field sorted by
  name?: string;
  // number of invoices the user has
  num_of_invoices?: number;
  // view_type
  view_type?: string;
  // desc/asc
  order?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesFilterInvoicesParams = {
  // name of filter
  name?: string;
  // number of invoices the user has
  num_of_invoices?: number;
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // period, currency, display
  filter_type?: string;
  // msid
  msid?: string;
};
export type quotesSearchInvoicesParams = {
  // number of invoices the user has
  num_of_invoices?: number;
  // view_type
  view_type?: string;
  // text searched
  text?: string;
  // number of returned results
  num_of_results?: number;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDownloadPdfParams = {
  // 'Recurring','One Time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // customer for UoU, my invoices for users
  origin?: string;
  // by def_app_id
  invoiceSource?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type dashboardAccountSettingsImageActionParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // {upload, remove}
  action?: string;
};
export type quotesResendFromPreviewPageParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // appDefId (application ID)
  appDefId?: GUID;
  // origin page - from which place this action was made (invoices, contacts full page, crm home...)
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice_guid
  invoice_id?: GUID;
};
export type quotesRunReportClickGenerateReportClickParams = {
  // tax, revenue
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // accural, cash
  basis?: string;
  // msid
  msid?: string;
};
export type quotesPrintReportClickParams = {
  // tax, revenue
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // accural, cash
  basis?: string;
  // msid
  msid?: string;
};
export type quotesExportReportClickParams = {
  // tax, revenue
  name?: string;
  // view_type
  view_type?: string;
  // csv,pdf,excel
  file_type?: string;
  // platform
  platform?: string;
  // accural, cash
  basis?: string;
  // msid
  msid?: string;
};
export type quotesPageViewParams = {
  // num_of_invoices
  num_of_invoices?: number;
  // view_type
  view_type?: string;
  // the origin of navigation to this page {invoice card preview,direct}
  referral?: string;
  // deprecated
  origin?: string;
  // num_of_contacts
  num_of_contacts?: number;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesManagePaymentsBannerDisplayedParams = {
  // banner name {manage payments}
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesDismissManagePaymentsBannerParams = {
  // banner name {manage payments}
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesClickCtaInManagePaymentsBannerParams = {
  // banner name {manage payments}
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesClickViewOrderBookingParams = {
  // view_type
  view_type?: string;
  // app name (stores/booking)
  app_name?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesInvoicesAutomaticallyCreateAndSendInvoicesParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // {true/false}
  is_auto?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardAccountSettingsImageActionSuccessParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // {upload, remove}
  action?: string;
};
export type quotesAddCustomerClickParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesChooseACustomerParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // is_new_contact
  is_new_contact?: boolean;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesRemoveCustomerParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesDueDateUpdatingParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // due_date
  due_date?: DateTime;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesDateOfIssueUpdatingParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // date_of_issue
  date_of_issue?: DateTime;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesAddDiscountParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // discount percentage
  discount?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesChooseAProductParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // which vertical product was choosen ( Stores, Invoices, Bookings) App_def_id
  productSource?: string;
  // product_name
  productName?: string;
  // product_id
  productId?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesRemoveProductParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // product_id
  product_id?: number;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesEditProductOrServiceParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // product_id
  product_id?: number;
  // product_name
  productName?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesSelectTaxParams = {
  // uuid
  uuid?: GUID;
  // taxRate
  taxRate?: number;
  // view_type
  view_type?: string;
  // tax_name
  tax_name?: string;
  // product_id
  product_id?: number;
  // contact_id
  contact_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesAddingBusinessLogoParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesAddingBusinessNameParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesClickSaveOnAddBusinessDetailsPageParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesBoardingPageClickCloseParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesGetTheWixAppBannerDisplayedParams = {
  // banner name {get wix app}
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesDismissGetWixAppBannerParams = {
  // banner name {get wix app}
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesClickCtaInGetWixAppBannerParams = {
  // banner name {get wix app}
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesPrintInvoiceSrc5Evid477Params = {
  // 'Recurring','One Time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // customer for UoU, my invoices for users
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesPayInvoiceClickParams = {
  // total price multiplied by 100000
  totalAmountLong?: number;
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // 'Recurring','One Time'
  paymentType?: string;
  // view_type
  view_type?: string;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // customer for UoU, my invoices for users
  origin?: string;
  // by app_def_id
  invoiceSource?: GUID;
  // currency
  currency?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCloseManagePlanBillingTooltipParams = {
  // 'Got it','Close'
  choose?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type quotesCreateInvoiceToggleRecurringParams = {
  // true if it's Recurring on, false for oposite
  toggle?: boolean;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesPrintFromPreviewPageParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesPreviewFromInsideTheInvoiceCreationParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesCancelFromInsideTheInvoiceCreationParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesPreviewFromTableParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // origin page - from which place this action was made (invoices, contacts full page, crm home...)
  origin?: string;
  // appDefId (application ID)
  appdefid?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice_guid
  invoice_id?: GUID;
};
export type mySitesEditSiteParams = {
  // view_type
  view_type?: string;
  // destination - editor/ADI/editorX
  ds_origin?: string;
  // {site_list_top, site_list_bottom, top_bar, account_templates,...}, site-list-partners-DIY
  origin?: string;
  // view_level
  view_level?: string;
  // origin inside page
  place?: string;
  // is_premium
  is_premium?: boolean;
  // platform
  platform?: string;
  // hosting
  hosting?: string;
  // msid
  msid?: GUID;
  // is_published
  is_published?: boolean;
};
export type sidebarCategoryItemsShown488Params = {
  // the active sidebar item the user hovers on (the unique name)/ click to expand on
  name?: string;
  // item_id
  item_id?: string;
  // hosting_platform
  hosting_platform?: string;
  // the name appears in sidebar
  sidebar_name?: string;
  // deprecated
  section_name?: string;
  // list of items viewed in the popup menu
  category_items_list?: string;
  // the page name of the page the user is in (the active page)
  page_view?: string;
  // view_type
  view_type?: string;
  // page_id
  page_id?: string;
  // sidebar_state
  sidebar_state?: string;
  // level_of_popover
  level_of_popover?: number;
  // tooltip / sidebar
  origin?: string;
  // disabled items
  disabled?: string;
  // --
  platform?: string;
  // hosting_platform_context_id
  hosting_platform_context_id?: string;
  // MA/editor/
  hosting?: string;
  // site id
  msid?: GUID;
};
export type crmHomeCreateButtonClickParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeCreateButtonChooseOptionParams = {
  // uuid
  uuid?: GUID;
  // which option the user choosed
  option?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeSecondaryCtaClickParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // which tab the user choosed
  tabName?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeCarouselClickParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeManageYourFinancesChooseParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // which tab the user choose
  tabName?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeCustomerManagementToolsChooseParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // tab_name
  tabName?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesSettingsChangeTabsParams = {
  // tab name
  tab?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesSettingsSuccessToastParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type contactEnrichmentTemporaryEventParams = {
  // view_type
  view_type?: string;
  // ignore this field
  hasContacts?: boolean;
  // app that requested the enrichment
  origin?: string;
  // ignore this field
  pageView?: string;
  // contact id
  contact_id?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type helpWidgetClickOnSeeAllResultsParams = {
  // query
  query?: string;
  // --
  platform?: string;
  // ADI/ MA/ editoe
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dashboardClickOnConnectDomainParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardClickOnSelectPremiumPlanParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardClickBuyDomainFirstParams = {
  // referral_info
  referral_info?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardCloseConnectDomainPopUpParams = {
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardBannerLoadingInitParams = {
  // banner name for identification
  name?: string;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type engageEmailSettingsPageViewParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type engageEmailSettingsUpdateValueParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type engageEmailSettingsSaveChangesClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type engageEmailSettingsCancelBackParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type engageEmailSettingsUnsavedChangesDialogParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // invoiceId
  invoiceId?: GUID;
  // more actions/invoice preview
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // appdefid of the source
  appdefid?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardBannerLoadingCompleteParams = {
  // banner name for identification
  name?: string;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type sideBarItemClick550Params = {
  // unique item name that doesn't change when changing the name on the side bar
  name?: string;
  // The app_id of the previous page/previous item (before clicking on item)
  prev_app_id?: GUID;
  // item_id
  item_id?: string;
  // when the sidebar is opened on a third level item- should represents the second level of the active name field, else=null
  sub_section_name?: string;
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // deprecated
  sidebar_name?: string;
  // the name of the source section (where the click occurred)
  section_name?: string;
  // the previous unique item name that doesn't change when changing the name, this is the item which was highlighted before the click
  previous_item_name?: string;
  // referral parameter
  referral_info?: string;
  // view_type
  view_type?: string;
  // true if the click is from main sidebar and false if it's from sidebar dropdown tooltip
  is_from_main_sidebar?: boolean;
  // sidebar_state
  sidebar_state?: string;
  // tooltip / sidebar / add new
  origin?: string;
  // sub_category_items_list
  sub_category_items_list?: string;
  // JSON of all the items the user saw in the sidebar when clicked on item- key:unique item name, value: number of notifications the user sees in this item. In case the type is navigated - please send the sidebar items list
  items_list?: string;
  // when the sidebar is opened on a third level item- list of third level items in the expanded sidebar menu
  second_sub_category_items_list?: string;
  // The value inside the counter clicked (if counter exists)
  counter?: number;
  // app_id of the item
  app_id?: string;
  // click/expand
  type?: string;
  // deprecated
  previous_sidebar_name?: string;
  // platform
  platform?: string;
  // hosting_platform_context_id
  hosting_platform_context_id?: string;
  // dashboard / editor / onboarding
  hosting?: string;
  // previous_item_id
  previous_item_id?: string;
  // metasite id
  msid?: GUID;
  // deprecated
  legacy_name?: string;
  // target_page_id
  target_page_id?: string;
};
export type bizManagerBizInfoFieldValueChangedNotSavedParams = {
  // name of field (key): business name, description, main category, sub category, etc
  name?: string;
  // ADI business type of the selection in business info category
  sub_category?: string;
  // in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
  hosting_platform?: string;
  // text, drop down, image, ..
  field_type?: string;
  // The page where the changes were made. before the new settings the page was only general info
  page_view?: string;
  // industry_id of of the selected sub-category
  industry_id?: string;
  // view_type
  view_type?: string;
  // structure_id of the selected sub-category
  structure_id?: string;
  // app name
  origin?: string;
  // category of of the selected sub-category
  category?: string;
  // name of fold: basic info, contact info, location language and region,
  fold_name?: string;
  // platform
  platform?: string;
  // 0- first location (create), 1-second location (add), 2- third location (add),...
  location_details?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // value of field: only for drop down fields
  value?: string;
};
export type bizManagerBizInfoClickOnSaveParams = {
  // list of fields, separated by commas
  name?: string;
  // in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
  hosting_platform?: string;
  // The page where the changes were made
  page_view?: string;
  // view_type
  view_type?: string;
  // app
  origin?: string;
  // place of save button: header, footer
  place?: string;
  // list of fold names, separated by commas
  fold_name?: string;
  // platform
  platform?: string;
  // 0- first location (create), 1-second location (add), 2- third location (add),...
  location_details?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBizInfoSaveSuccessParams = {
  // list of fields, separated by commas
  name?: string;
  // business type at the end
  sub_category?: string;
  // in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
  hosting_platform?: string;
  // The page where the changes were made (website settings/business info/language and region)
  page_view?: string;
  // industry_id of of the new sub-category
  industry_id?: string;
  // view_type
  view_type?: string;
  // structure_id of the new sub-category
  structure_id?: string;
  // app where modal was opened from
  origin?: string;
  // category of of the new sub-category
  category?: string;
  // place of discard button: header, footer
  place?: string;
  // list of fold names, separated by commas
  fold_name?: string;
  // platform
  platform?: string;
  // 0- first location (create), 1-second location (add), 2- third location (add),...
  location_details?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // true/false
  is_physical_address?: boolean;
};
export type bizManagerBizInfoClickOnDiscardButtonParams = {
  // in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
  hosting_platform?: string;
  // The page where the changes were made (website settings/business info/language and region)
  page_view?: string;
  // view_type
  view_type?: string;
  // app
  origin?: string;
  // place of discard button: header, footer
  place?: string;
  // platform
  platform?: string;
  // 0- first location (create), 1-second location (add), 2- third location (add),...
  location_details?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBizInfoApproveDiscardParams = {
  // in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
  hosting_platform?: string;
  // name of modal: discard modal, navigate away modal
  context?: string;
  // hosting: MA/editor/onboarding msid context: name of modal: discard modal, navigate away modal page_view: The page where the changes were made (website settings/business info/language and region)
  page_view?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBizInfoCancelDiscardParams = {
  // The page where the changes were made (website settings/business info/language and region)
  page_view?: string;
  // view_type
  view_type?: string;
  // app
  origin?: string;
  // platform
  platform?: string;
  // 0- first location (create), 1-second location (add), 2- third location (add),...
  location_details?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBizInfoNavigateAwayDialogIsShownParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBizInfoNavigateAwayStayInPageParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBizInfoClickOnButtonParams = {
  // name of field (key): business name, description, main category, sub category, etc
  name?: string;
  // view_type
  view_type?: string;
  // name of fold: basic info, contact info, location language and region,
  fold_name?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type siteHistoryViewerNotLoadedParams = {
  // editor / home
  referralInfo?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type bizManagerBizInfoNavigateAwayLeaveThisPageParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerStartLoadingParams = {
  // when the context is site - send msid, when the context is app for example (like in devCenter) send appDefId, etc.
  context?: GUID;
  // view_type
  view_type?: string;
  // screen width of the user screen
  screen_width?: number;
  // first load
  initial_load?: boolean;
  // all applications installed om Biz Mgr
  app_ids?: string;
  // window width of the user screen
  window_width?: number;
  // loading_time_from_performance_now
  loading_time_from_performance_now?: number;
  // screen height of the user screen
  screen_height?: number;
  // --
  app_id?: string;
  // window height of the user screen
  window_height?: number;
  // platform
  platform?: string;
  // time in ms until the first time the user sees any feedback rather than empty page
  time_to_first_byte?: number;
  // from where the user opened Biz manager
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerFinishLoadingParams = {
  // view_type
  view_type?: string;
  // number of initials bundles from app template config
  num_of_bundles?: number;
  // first load
  initial_load?: boolean;
  // --
  app_id?: string;
  // platform
  platform?: string;
  // from where the user opened Biz manager
  hosting?: string;
  // metasite id
  msid?: GUID;
  // loading time of page
  loading_time?: number;
};
export type bizManagerModuleLoadingStartParams = {
  // authentication token. if the session exists, then the user is logged in.
  wixsession?: string;
  // last module loaded
  prev_module_id?: string;
  // specific button triggered the the view loading
  referral_info?: string;
  // view_type
  view_type?: string;
  // first load
  initial_load?: boolean;
  // specific button triggered the the view loading (== referral info from editor)
  origin?: string;
  // application id
  app_id?: GUID;
  // platform
  platform?: string;
  // origin_app_id (what app opened the bizmgr)
  origin_app_id?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // requested module
  module_id?: string;
};
export type bizManagerModuleLoadingFinishParams = {
  // authentication token. if the session exists, then the user is logged in.
  wixsession?: string;
  // specific button triggered the the view loading
  referral_info?: string;
  // view_type
  view_type?: string;
  // first load
  initial_load?: boolean;
  // specific button triggered the the view loading (== referral info from editor)
  origin?: string;
  // application id
  app_id?: GUID;
  // platform
  platform?: string;
  // origin_app_id (what app opened the bizmgr)
  origin_app_id?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // requested module
  module_id?: string;
  // loading time from module loading start
  loading_time?: number;
};
export type bizManagerNavigateToViewStartParams = {
  // authentication token. if the session exists, then the user is logged in.
  wixsession?: string;
  // *not in use*
  prev_module_id?: string;
  // specific button that triggers the navigation
  referral_info?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // last view loaded
  prev_view?: string;
  // last  application loaded
  app_id?: GUID;
  // prev page in app
  prev_sub_view?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // *not in use*
  module_id?: string;
  // requested view
  view?: string;
};
export type dashboardClickOnCreatePriorityTicketExpertsParams = {
  // view_type
  view_type?: string;
  // if dashboard then 'MAD'
  origin_app?: string;
  // location of the click
  origin?: string;
  // platform
  platform?: string;
};
export type bizManagerClickOnBackInSidebarItemParams = {
  // unique name that doesn't change when changing the name on the side bar
  name?: string;
  // the name that appears in the sidebar - can be changed
  sidebar_name?: string;
  // view_type
  view_type?: string;
  // app_id of the item
  app_id?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // deprecated
  legacy_name?: string;
};
export type bizManagerSetupWidgetIsDisplayedParams = {
  // number of done steps in setup
  done_steps?: number;
  // asset_campaign_guid
  asset_campaign_guid?: string;
  // view_type
  view_type?: string;
  // skipped_steps
  skipped_steps?: number;
  // number of steps in setup
  steps?: number;
  // minimized/expanded
  widget_state?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module  name
  module_id?: string;
};
export type bizManagerMinimizeExpandSetupWidgetParams = {
  // number of done steps in setup
  done_steps?: number;
  // view_type
  view_type?: string;
  // skipped_steps
  skipped_steps?: number;
  // app def id
  app_id?: string;
  // number of steps in setup
  steps?: number;
  // minimized/expanded
  widget_state?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module name
  module_id?: string;
};
export type bizManagerSetupWidgetShowMessageCompleteParams = {
  // id for phase is setup- ids to be consistent with premium events
  asset_campaign_guid?: string;
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // light_box/progress_bar_popup
  origin?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module name
  module_id?: string;
  // requested view
  view?: string;
};
export type bizManagerSetupWidgetClickCtaAfterShowMessageCompleteParams = {
  // asset_campaign_guid
  asset_campaign_guid?: string;
  // click/ close
  click_type?: string;
  // view_type
  view_type?: string;
  // light_box/progress_bar_popup
  origin?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module name
  module_id?: string;
};
export type bizManagerDisplayAnalyticsWidgetParams = {
  // view_type
  view_type?: string;
  // app id of the vertical that displays the widget.
  app_id?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module name
  module_id?: string;
};
export type bizManagerClickOnHelpCenterInDashboardFooterParams = {
  // the item that was clicked {Help/Send feedback}
  name?: string;
  // view_type
  view_type?: string;
  // app_id installed on biz mgr [deprecated]
  app_id?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
};
export type bizManagerClickOnWidgetCtaParams = {
  // number of done steps in setup
  done_steps?: number;
  // deprecated
  step_id?: number;
  // step id
  step?: string;
  // deprecated
  step_guid?: GUID;
  // view_type
  view_type?: string;
  // skipped_steps
  skipped_steps?: number;
  // app def id
  app_id?: string;
  // number of steps in setup
  steps?: number;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module name
  module_id?: string;
};
export type transferSiteResendTransferEmailClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type bizManagerHtmlLoadedParams = {
  // view_type
  view_type?: string;
  // --
  app_instance_id?: GUID;
  // app_ids
  app_ids?: string;
  // platform
  platform?: string;
  // from where the user opened Biz manager {ADI/MA/Editor}
  hosting?: string;
  // msid
  msid?: GUID;
};
export type bizManagerViewStartLoadingParams = {
  // specific button triggered the the view loading
  referral_info?: string;
  // view_type
  view_type?: string;
  // page in app/module
  sub_view?: string;
  // --
  app_instance_id?: GUID;
  // True if first load
  initial_load?: boolean;
  // app_ids
  app_ids?: string;
  // origin view / module / app
  prev_view?: string;
  // previous page in app/module
  prev_sub_view?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // --
  msid?: GUID;
  // requested view/ module/ app
  view?: string;
};
export type bizManagerViewFinishLoadingParams = {
  // view_type
  view_type?: string;
  // page in app
  sub_view?: string;
  // --
  app_instance_id?: GUID;
  // True if first load
  initial_load?: boolean;
  // app_ids
  app_ids?: string;
  // origin view
  prev_view?: string;
  // prev page in app
  prev_sub_view?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // --
  msid?: GUID;
  // requested view
  view?: string;
  // loading time of page , sent only if this is first load
  loading_time?: number;
};
export type bizManagerClickLinkFromTooltipParams = {
  // link name
  name?: string;
  // click link / close
  click_type?: string;
  // view_type
  view_type?: string;
  // The component that the tooltip appears on
  origin?: string;
  // platform
  platform?: string;
  // Editor/MA
  hosting?: string;
  // msid
  msid?: GUID;
  // Link URL
  value?: string;
  // ping template id
  template_id?: string;
};
export type bizManagerBusinessInfoMergeDialogShownParams = {
  // view_type
  view_type?: string;
  // merged app def id, use delimiter "," between each app_id
  merged_apps?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBusinessInfoMergeDialogApproveParams = {
  // view_type
  view_type?: string;
  // merged app def id, use delimiter "," between each app_id
  merged_apps?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerBusinessInfoMergeDialogCloseParams = {
  // view_type
  view_type?: string;
  // merged app def id, use delimiter "," between each app_id
  merged_apps?: string;
  // platform
  platform?: string;
  // MA/editor/ADI
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type managerFullStoryRecordingStartedParams = {
  // FullStory url
  videoUrl?: Url;
  // view_type
  view_type?: string;
  // esi
  esi?: GUID;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
};
export type bizManagerDismissTooltipParams = {
  // tooltip name
  name?: string;
  // view_type
  view_type?: string;
  // where tooltip was shown (sidebar, rename dialog)
  place?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type transferSiteGetTransferLinkClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type bizManagerWhatSNextCloseVideoAssetParams = {
  // percentage watched 0-100
  percentage?: number;
  // the dealers group from which the asset is being chosen
  group_id?: GUID;
  // ids to be consistent with premium events
  asset_campaign_guid?: string;
  // assets guid
  item_id?: GUID;
  // view_type
  view_type?: string;
  // (0,1,2,3)
  asset_location_on_page?: string;
  // ids to be consistent with premium events
  offering_guid?: string;
  // the priority of the asset (from 30)
  asset_location_from_group_list?: number;
  // ids to be consistent with premium events
  asset_campaign_id?: string;
  // video
  promotion_asset_type?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // meta site guid
  msid?: GUID;
};
export type bizManagerShowUrgentMessagesParams = {
  // ids to be consistent with premium events
  asset_campaign_guid?: string;
  // view_type
  view_type?: string;
  // ids to be consistent with premium events
  offering_guid?: string;
  // ids to be consistent with premium events
  asset_campaign_id?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // site guid
  msid?: GUID;
};
export type bizManagerUrgentMessagesClickedParams = {
  // ids to be consistent with premium events
  asset_campaign_guid?: string;
  // click/ close
  click_type?: string;
  // view_type
  view_type?: string;
  // ids to be consistent with premium events
  offering_guid?: string;
  // ids to be consistent with premium events
  asset_campaign_id?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // site guid
  msid?: GUID;
};
export type bizManagerDashboardAssetClickOnArrowParams = {
  // ids to be consistent with premium events
  asset_campaign_guid?: string;
  // left / right/ link
  click_type?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // ADI/MA/editor
  hosting?: string;
  // site guid
  msid?: GUID;
};
export type bizManagerOpenPanelStartParams = {
  // view_type
  view_type?: string;
  // the panel that was opened
  panel_name?: string;
  // page in app
  sub_view?: string;
  // contact_id
  contact_id?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
  // requested view
  view?: string;
};
export type bizManagerOpenPanelFinishParams = {
  // view_type
  view_type?: string;
  // the panel that was opened
  panel_name?: string;
  // page in app
  sub_view?: string;
  // contact_id
  contact_id?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // loading_time_from_interactive (from 657)
  loading_time_from_interactive?: number;
  // msid
  msid?: GUID;
  // click on contact name/ i button
  initiator?: string;
  // requested view
  view?: string;
  // time from start opening the panel till end
  loading_time?: number;
};
export type helpWidgetErrorSearchingItemsParams = {
  // query
  query?: string;
  // --
  platform?: string;
  // ADI/ MA/ editoe
  hosting?: string;
  // msid
  msid?: GUID;
};
export type transferSiteCancelTransferClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type dummyEventForSiteMembersParams = {
  // X button / app / navigation
  source?: string;
  // view_type
  view_type?: string;
  // the panel that was opened
  panel_name?: string;
  // page in app
  sub_view?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
  // contact name/ i button
  initiator?: string;
  // requested view
  view?: string;
};
export type transferSiteCancelTransferClickApproveParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type transferSiteCancelTransferAbortParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA /Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type transferSiteReceiverOpenCompleteTransferDialogParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/Editor
  hosting?: string;
  // msid
  msid?: GUID;
};
export type quotesNewQuoteClickParams = {
  // in case of duplicate: original quote guid
  original_quoteId?: GUID;
  // view_type
  view_type?: string;
  // origin page
  origin?: string;
  // bm/mobile. null indicates bm
  platform?: string;
  // msid
  msid?: string;
  // quote_guid
  quoteId?: GUID;
};
export type bizManagerClickOnSetupSkipUndoParams = {
  // number of done steps in setup
  done_steps?: number;
  // deprecated
  step_id?: number;
  // step id
  step?: string;
  // skip/undo
  click_type?: string;
  // deprecated
  step_guid?: GUID;
  // view_type
  view_type?: string;
  // skipped_steps
  skipped_steps?: number;
  // app_id
  app_id?: string;
  // number of steps in setup
  steps?: number;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
  // module name
  module_id?: string;
};
export type bizManagerOpenPanelInteractiveParams = {
  // view_type
  view_type?: string;
  // the panel that was opened
  panel_name?: string;
  // page in app
  sub_view?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // msid
  msid?: GUID;
  // requested view
  view?: string;
  // time from start opening the panel till interactive
  loading_time?: number;
};
export type dashboardAccountSettingsHoverOverSendConfirmationIParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type phoneVerificationHoverOnMotivationParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type mobilePhoneNumberConfirmationPopUpClickOkForSendingSmsParams = {
  // uuid
  uuid?: GUID;
  // hashed_phone
  hashed_phone?: string;
  // view_type
  view_type?: string;
  // send / resend
  origin?: string;
  // add/edit
  mode?: string;
  // platform
  platform?: string;
};
export type mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCodeParams = {
  // uuid
  uuid?: GUID;
  // hashed_phone
  hashed_phone?: string;
  // view_type
  view_type?: string;
  // confirmation code
  code?: string;
  // add/edit
  mode?: string;
  // platform
  platform?: string;
};
export type phoneVerificationPhoneValidationParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type phoneVerificationCodeValidationParams = {
  // uuid
  uuid?: GUID;
  // view_type
  view_type?: string;
  // good, expired, wrong, error
  validstatus?: string;
  // platform
  platform?: string;
};
export type mobilePhoneNumberConfirmationOpenPopUpParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type dashboardAccountSettingsClickLearnMoreInIParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type bizManagerNewBadgeShowParams = {
  // unique name that doesn't change when changing the name on the side bar
  name?: string;
  // the name that appears in the sidebar - can be changed
  sidebar_name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // MA/editor
  hosting?: string;
  // metasite id
  msid?: GUID;
};
export type mobilePhoneNumberConfirmationClickOnEditParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsClickOnManagePreferencesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type dashboardAccountSettingsClickSendConfirmationParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsDeactivateAccountClickOnLearnMoreParams = {
  // view_type
  view_type?: string;
  // deactivate account/recovery phone/two factor authentication/2FA disable/username/email address
  section?: string;
  // platform
  platform?: string;
};
export type twoFactorAuthenticationSetupEnableClickParams = {
  // view_type
  view_type?: string;
  // security box/main page
  click_from?: string;
  // account settings page/app modal/email modal/second best
  origin?: string;
  // platform
  platform?: string;
};
export type accountSettingsUpdatesConfirmEnterPasswordParams = {
  // view_type
  view_type?: string;
  // true/false
  is_valid?: boolean;
  // platform
  platform?: string;
  // 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
  action?: string;
};
export type twoFactorAuthenticationSetupSendCodeParams = {
  // view_type
  view_type?: string;
  // new phone/account phone
  phone_type?: string;
  // enable/edit
  mode?: string;
  // platform
  platform?: string;
  // send/resend
  action?: string;
  // The origin of the page (Account settings \ 2fa enforcement)
  origin?: string;
};
export type twoFactorAuthenticationSetupConfirmCodeClickParams = {
  // view_type
  view_type?: string;
  // enable/edit
  mode?: string;
  // did the user enter the correct code sent to his mobile device
  is_valid?: boolean;
  // platform
  platform?: string;
  // The origin of the page (Account settings \ 2fa enforcement)
  origin?: string;
};
export type twoFactorAuthenticationSetupEditNumberParams = {
  // view_type
  view_type?: string;
  // security box/main page
  click_from?: string;
  // platform
  platform?: string;
};
export type twoFactorAuthenticationSetupDisableActionParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type twoFactorAuthenticationSetupDisableClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsSetPasswordModalLoadParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsOnRequestToUnlockFieldParams = {
  // view_type
  view_type?: string;
  // security box/main page
  click_from?: string;
  // platform
  platform?: string;
  // username/email address/2FA enable/2FA disable/2FA edit
  field_name?: string;
};
export type quotesFilterQuotesParams = {
  // name of filter
  name?: string;
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // period, currency, display
  filter_type?: string;
  // msid
  msid?: string;
  // number of quotes the user has
  num_of_quotes?: number;
};
export type accountSettingsUpdatesConfirmPasswordModalLoadParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
  action?: string;
};
export type exposureEventGoogleConnectSeoParams = {
  // returns the dealer asset ID that includes the relevant rule
  dealer_asset_id?: string;
  // msid
  msid?: GUID;
};
export type accountSettingsForgotPasswordClickParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsManagePrivacyPreferencesParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsTwoFactorAuthenticationSetupSendCodeSuccessParams = {
  // view_type
  view_type?: string;
  // enable/edit
  mode?: string;
  // platform
  platform?: string;
  // send/resend
  action?: string;
  // The page origin
  origin?: string;
};
export type accountSettingsTwoFactorAuthenticationSetupSendCodeFailedParams = {
  // view_type
  view_type?: string;
  // enable/edit
  mode?: string;
  // platform
  platform?: string;
  // send/resend
  action?: string;
  // the page origin
  origin?: string;
};
export type dummyNameSrc5Evid7100Params = {
};
export type mySitesClickOnSelectSiteParams = {
  // list / grid
  viewMode?: string;
  // referral_additional_info
  referral_additional_info?: string;
  // True if the site is published, False if not
  isPublished?: boolean;
  // ADI/Editor
  siteTypeName?: string;
  // The position of the selected site in the page. 1 is the highest site from the left.
  position?: number;
  // True if the selected site is premium site, False if not
  isPremium?: boolean;
  // web / mobile-web
  platform?: string;
  // site guid
  msid?: GUID;
  // the URL of the chosen site
  siteUrl?: string;
  // my-sites
  view?: string;
};
export type dashboardViewSiteParams = {
  // site_id
  site_id?: GUID;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesClickOnCopyLinkFromMoreActionsParams = {
  // view_type
  view_type?: string;
  // invoiceId
  invoiceId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesErrorGenerateLinkFromMoreActionsParams = {
  // view_type
  view_type?: string;
  // invoiceId
  invoiceId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesClickOnCreateLinkFromMoreActionsParams = {
  // view_type
  view_type?: string;
  // invoiceId
  invoiceId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type dashboardClickOnUpgradeParams = {
  // view_type
  view_type?: string;
  // where it was clicked from
  origin?: string;
  // platform
  platform?: string;
  // (Editor/MA/...)
  hosting?: string;
  // msid
  msid?: GUID;
};
export type quotesSettingsChangeNumberingParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesHeaderPreviewParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesOpenFirstCardParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type quotesDropdownOptionParams = {
  // which option was choosen
  option?: string;
  // view_type
  view_type?: string;
  // if custom was picked which test added, in other options put null
  text?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type sidebarModalOfFteToTheNewSidebarIsLoadedParams = {
  // the list of items which new and presented
  category_items_list?: string;
};
export type quotesLimit5KCsvDownloadParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type accountSettingsStep1ToDisablePartnerDashboardParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type quotesSearchQuotesParams = {
  // view_type
  view_type?: string;
  // text searched
  text?: string;
  // number of returned results
  num_of_results?: number;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // number of quotes the user has
  num_of_quotes?: number;
};
export type accountSettingsErrorWhenClickToDisablePartnerDashboardParams = {
  // view_type
  view_type?: string;
  // Teams/Custom branding
  errorReason?: string;
  // platform
  platform?: string;
};
export type accountSettingsDisabledEnabledPartnerDashboardParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // ENABLE/DISABLE
  action?: string;
};
export type crmHomeSendMessageToInboxParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeAddNewContactWidgetParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeChooseContactFromWidgetParams = {
  // view_type
  view_type?: string;
  // contactId
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeSendMessageViaContactsWidgetParams = {
  // view_type
  view_type?: string;
  // contactId
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesEditQuoteParams = {
  // view_type
  view_type?: string;
  // my quotes, preview
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type dummyNameSrc5Evid7500Params = {
};
export type quotesPreviewQuoteParams = {
  // from where the quote open {feed, more-->quotes}
  source?: string;
  // view_type
  view_type?: string;
  // my quotes, edit quotes
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type enableDisablePartnersDhasboardParams = {
  // enable/disable
  action?: string;
};
export type quotesCreateQuoteSaveDraftClickParams = {
  // view_type
  view_type?: string;
  // create quote, edit quote
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type deprecatedUpdateOrCreateLocationParams = {
  // phone_filled
  phoneFilled?: boolean;
  // location description
  desc?: string;
  // timezone
  timezone?: string;
  // business_schedule (string)
  data?: string;
  // address_filled
  address_filled?: boolean;
  // Update/Create
  activity_type?: string;
  // location guid
  location_guid?: GUID;
  // location name
  loaction?: string;
  // true if active location, false if not active
  status?: boolean;
  // payment currency (GBP/USD/EUR...)
  currency?: string;
  // Unknown/Branch/Offices/Reception/Headquarters
  type?: string;
  // msid
  msid?: GUID;
  // true if the location is default, else false
  checked_by_default?: boolean;
  // email_filled
  email_filled?: boolean;
};
export type deleteLocationParams = {
  // location guid of the deleted item
  location_guid?: GUID;
  // location guid of the deleted item
  locationGuid?: GUID;
  // metasite id
  msid?: GUID;
};
export type setADefaultLocationParams = {
  // location_id of the new default location
  locationGuid?: GUID;
  // location_id of the old default location
  oldLocationGuid?: GUID;
  // metasite id
  msid?: GUID;
};
export type updateOrCreateMultilocationSrc5Evid7703Params = {
  // business_schedule (string)
  businessSchedule?: string;
  // in creation: true if filled, false if not;  in update: true if changed, false if deleted, null if not updated
  phoneFilled?: boolean;
  // location description
  desc?: string;
  // in creation: true if filled, false if not;  in update: true if changed, false if deleted, null if not updated
  emailFilled?: boolean;
  // timezone
  timezone?: string;
  // deprecated
  data?: string;
  // status_text
  statusText?: string;
  // location name
  loaction?: string;
  // Update/Create
  activityType?: string;
  // location guid
  locationGuid?: GUID;
  // deprecated
  status?: boolean;
  // deprecated
  currency?: string;
  // in creation: true if filled, false if not;  in update: true if changed, false if deleted, null if not updated
  addressFilled?: boolean;
  // Unknown/Branch/Offices/Reception/Headquarters
  type?: string;
  // metasite id
  msid?: GUID;
  // true if the location is default, else false
  isDefault?: boolean;
};
export type updateOrCreateMultilocationSrc5Evid7704Params = {
  // BusinessSchedule {     TimePeriod[] periods,     SpecialHourPeriod[] special_hour_period } TimePeriod {     String open_day,     String open_time,     String close_day,     String close_time } SpecialHourPeriod {     String start_date,     String end_date,     boolean is_closed     String comment }
  businessSchedule?: string;
  // component of StreetAddress
  number?: string;
  // component of Address
  city?: string;
  // location description
  desc?: string;
  // component of StreetAddress
  name?: string;
  // component of AddressLocation  (geocode)
  latitude?: string;
  // email
  email?: string;
  // timezone
  timezone?: string;
  // active/not active
  statusText?: string;
  // component of Address
  formatted_address?: string;
  // component of Address
  country?: string;
  // component of AddressLocation (geocode)
  longitude?: string;
  // location name
  loaction?: string;
  // revison
  revision?: number;
  // Update/Create
  activityType?: string;
  // location guid
  locationGuid?: GUID;
  // component of StreetAddress
  apt?: string;
  // fax
  fax?: string;
  // component of Address
  subdivision?: string;
  // component of Address
  hint?: string;
  // component of Address
  postal_code?: string;
  // Unknown/Branch/Offices/Reception/Headquarters
  type?: string;
  // metasite id
  msid?: GUID;
  // true if the location is default, else false
  isDefault?: boolean;
  // phone
  phone?: string;
};
export type updateOrCreateMultilocationParams = {
  // BusinessSchedule {     TimePeriod[] periods,     SpecialHourPeriod[] special_hour_period } TimePeriod {     String open_day,     String open_time,     String close_day,     String close_time } SpecialHourPeriod {     String start_date,     String end_date,     boolean is_closed     String comment }
  businessSchedule?: string;
  // component of Address
  city?: string;
  // location description
  desc?: string;
  // location name
  name?: string;
  // component of AddressLocation  (geocode)
  latitude?: string;
  // email
  email?: string;
  // timezone
  timezone?: string;
  // component of Address
  formattedAddress?: string;
  // active/not active
  statusText?: string;
  // component of Address
  country?: string;
  // component of StreetAddress
  streetName?: string;
  // component of AddressLocation (geocode)
  longitude?: string;
  // component of Address
  postalCode?: string;
  // component of StreetAddress
  streetApt?: string;
  // revison
  revision?: number;
  // Update/Create
  activityType?: string;
  // location guid
  locationGuid?: GUID;
  // fax
  fax?: string;
  // component of Address
  subdivision?: string;
  // component of StreetAddress
  streetNumber?: string;
  // component of Address
  hint?: string;
  // Unknown/Branch/Offices/Reception/Headquarters
  locationType?: string;
  // metasite id
  msid?: GUID;
  // true if the location is default, else false
  isDefault?: boolean;
  // phone
  phone?: string;
  // True when the toggle "This is inventory location for my store" was on when user saved a location
  isInventoryLocation?: boolean;
};
export type quotesCreateQuoteSaveDraftCompleteParams = {
  // view_type
  view_type?: string;
  // create quote, edit quote
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type quotesCreateQuoteSaveDraftFailedParams = {
  // view_type
  view_type?: string;
  // failure reason
  reason?: string;
  // create quote, edit quote
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type automationsSecurityCheckForAmountOfEmailInGetNotifiedActionParams = {
  // msid
  msid?: GUID;
  // email count (how many email were inserted)
  emailCount?: number;
};
export type uouUnsubscribePageViewParams = {
  // visitor_id of uou
  visitor_id?: GUID;
  // view_type
  view_type?: string;
  // notification id of unsubscribe sms
  notification_Id?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // mobile
  device?: string;
};
export type uouUnsubscribeClickParams = {
  // click/cancel
  click_type?: string;
  // visitor_id of uou
  visitor_id?: GUID;
  // view_type
  view_type?: string;
  // notification id of unsubscribe sms
  notification_Id?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // mobile
  device?: string;
};
export type dashboardCreateNewSiteParams = {
  // source
  source?: string;
  // view_type
  view_type?: string;
  // sub_view
  sub_view?: string;
  // in case the click is on item in the creation menu of wix studio report: create from blank/use wix templates/ use your custom templates/build on wix classic editor. Otherwise null.
  creation_type?: string;
  // sites-list-enterprise
  origin?: string;
  // view_level
  view_level?: string;
  // deprecated
  platform?: string;
};
export type sampleEventTestParams = {
};
export type gdprUouSiteOwnerOpenPrivacyGdprTabParams = {
  // the site where the request asked
  msid?: GUID;
};
export type gdprUouSiteOwnerInitiateGdprRequestParams = {
  // the site where the request asked
  msid?: GUID;
  // the clicked page component
  origin?: string;
};
export type gdprUouSiteOwnerSelectRequestTypeParams = {
  // Delete / Get
  request_type?: string;
  // the clicked page component
  origin?: string;
  // the site of the request
  msid?: GUID;
};
export type gdprUouSiteOwnerInsertUouInformationParams = {
  // hashed uou phone
  hashed_phone?: string;
  // Delete / Get request
  request_type?: string;
  // hashed uou email
  hashed_mail?: string;
  // the site of the request
  msid?: GUID;
};
export type gdprUouSiteOwnerReConfirmUouInformationParams = {
  // hashed uou phone
  hashed_phone?: string;
  // Delete / Get request
  request_type?: string;
  // hashed uou email
  hashed_mail?: string;
  // the site of the request
  msid?: GUID;
};
export type gdprUouSiteOwnerUouRequestSubmissionSuccessParams = {
  // hashed uou phone
  hashed_phone?: string;
  // Delete / Get request
  request_type?: string;
  // hashed uou email
  hashed_mail?: string;
  // Deprecated
  request_id?: GUID;
  // generated server request id
  gdpr_request_id?: GUID;
  // the site of the request
  msid?: GUID;
};
export type gdprUouSiteOwnerUouRequestSubmissionFailedParams = {
  // hashed uou phone
  hashed_phone?: string;
  // Delete / Get request
  request_type?: string;
  // hashed uou email
  hashed_mail?: string;
  // the clicked page component
  origin?: string;
  // failure reason
  error_reason?: string;
  // the site of the request
  msid?: GUID;
};
export type gdprUouSiteOwnerReturnedToPreviousFormStepParams = {
  // hashed uou phone
  hashed_phone?: string;
  // where the user asked to return
  from_step?: string;
  // Delete / Get request
  request_type?: string;
  // hashed uou email
  hashed_mail?: string;
  // the clicked page component
  origin?: string;
  // the site of the request
  msid?: GUID;
};
export type gdprUouSiteOwnerWishToLearnMoreParams = {
  // Third-party apps/Wix code/GDPR
  learn_more_type?: string;
  // Delete / Get request
  request_type?: string;
  // the clicked page component
  origin?: string;
  // the site of the request
  msid?: GUID;
};
export type dashboardSiteSelectorPopupShownParams = {
  // popup name
  name?: string;
  // view_type
  view_type?: string;
  // ADI/Editor
  siteTypeName?: string;
  // platform
  platform?: string;
  // site guid
  msid?: GUID;
};
export type gdprUsersUserOpenedTheGdprFormParams = {
  // Get / Delete
  request_type?: string;
  // email account that is visible to the user
  hashed_mail?: string;
};
export type dummyNameSrc5Evid8100Params = {
};
export type gdprUsersUserSubmitTheGdprFormParams = {
  // user information
  is_file_loaded?: boolean;
  // user information
  site_contact_hashed_mail?: string;
  // user information
  hashed_phone?: string;
  // Get / Delete
  request_type?: string;
  // user information
  hashed_last_name?: string;
  // email account that is visible to the user
  hashed_mail?: string;
  // user information
  is_site_has_contact_form?: boolean;
  // user information
  last_site_edit_date?: DateTime;
  // user information
  hashed_first_name?: string;
  // user information
  site_url?: Url;
  // user information
  account_creation_date?: DateTime;
  // user information
  is_premium?: boolean;
};
export type gdprUsersUserGdprFormSubmissionSuccessParams = {
  // answers ticket id
  ticket_id?: GUID;
  // user information
  is_file_loaded?: boolean;
  // user information
  site_contact_hashed_mail?: string;
  // user information
  hashed_phone?: string;
  // Get / Delete
  request_type?: string;
  // user information
  hashed_last_name?: string;
  // email account that is visible to the user
  hashed_mail?: string;
  // user information
  is_site_has_contact_form?: boolean;
  // user information
  last_site_edit_date?: DateTime;
  // user information
  hashed_first_name?: string;
  // user information
  site_url?: Url;
  // server produce request id
  request_id?: GUID;
  // user information
  account_creation_date?: DateTime;
  // user information
  is_premium?: boolean;
};
export type gdprUsersUserGdprFormSubmissionFailedParams = {
  // user information
  is_file_loaded?: boolean;
  // user information
  site_contact_hashed_mail?: string;
  // user information
  hashed_phone?: string;
  // Get / Delete
  request_type?: string;
  // user information
  hashed_last_name?: string;
  // email account that is visible to the user
  hashed_mail?: string;
  // user information
  is_site_has_contact_form?: boolean;
  // user information
  last_site_edit_date?: DateTime;
  // failure reason
  error_reason?: string;
  // user information
  hashed_first_name?: string;
  // user information
  site_url?: Url;
  // user information
  account_creation_date?: DateTime;
  // user information
  is_premium?: boolean;
};
export type cookiesBannerCtaParams = {
  // url
  url?: Url;
  // origin
  origin?: string;
  // accept/settings/dismiss/read_policy/render/decline_all/save/hide
  action?: string;
  // esi
  esi?: string;
};
export type cookiesBannerSettingsWindowCtaParams = {
  // url
  url?: Url;
  // (optional) on/off
  toggle?: boolean;
  // save/dismiss/toggle/read_policy
  action?: string;
  // esi
  esi?: string;
};
export type cookiesBannerPrivacyPolicyClickedParams = {
  // url
  url?: Url;
  // cookie/ccpa
  policy?: string;
};
export type cookiesBannerSettingPageCtaParams = {
  // url
  url?: Url;
  // (optional) on/off
  toggle?: boolean;
  // cookie/ccpa
  policy?: string;
  // toggle/save
  action?: string;
};
export type cookiesBannerSettingPageOptOutConfirmationParams = {
  // url
  url?: Url;
  // cookie/ccpa
  policy?: string;
  // cancel/ok/dismiss
  action?: string;
};
export type crmHomeViewContactViaContactsWidgetParams = {
  // view_type
  view_type?: string;
  // contactId
  contactId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSelectorPopupCloseParams = {
  // popup name
  name?: string;
  // view_type
  view_type?: string;
  // ADI/Editor
  siteTypeName?: string;
  // platform
  platform?: string;
  // site guid
  msid?: GUID;
};
export type crmHomeSeeAllContactsViaContactsWidgetParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeImportContactsViaContactsBannerParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeTasksWidgetAddNewTaskParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeTasksWidgetSeeAllTasksParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dashboardSiteSelectorPopupSelectActionParams = {
  // popup name
  name?: string;
  // view_type
  view_type?: string;
  // ADI/Editor
  siteTypeName?: string;
  // platform
  platform?: string;
  // site guid
  msid?: GUID;
  // go to editor/ stay in ADI
  action?: string;
};
export type quotesEmailQuotesPageParams = {
  // view_type
  view_type?: string;
  // origin page
  origin?: string;
  // web,native
  origin_device?: string;
  // resend mode?
  resend?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type sendFaqMessageParams = {
  // visitor id
  visitorId?: GUID;
  // answer_faq
  answer?: boolean;
  // msid
  msid?: GUID;
};
export type crmHomeWorkflowsWidgetGoToWorkflowsParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type toastShown85Params = {
  // toast name, supplied by toast initiator
  name?: string;
  // hosting_platform
  hosting_platform?: string;
  // active_page_id
  active_page_id?: string;
  // toast scope {app/ dashboard/my-sites}
  scope?: string;
  // trigger_entity_type
  trigger_entity_type?: string;
  // view_type
  view_type?: string;
  // high, normal, low
  severity?: string;
  // standard, error, warning, success, premium
  type?: string;
  // platform
  platform?: string;
  // hosting_platform_context_id
  hosting_platform_context_id?: string;
  // MA/editor/dashboard
  hosting?: string;
  // miliseconds to auto hide toast, 0 is sticky toast
  timeout?: number;
  // metasite id
  msid?: GUID;
  // trigger_entity_id
  trigger_entity_id?: string;
  // toast_timeout
  toast_timeout?: string;
  // message
  message?: string;
  // app_id
  app_id?: string;
};
export type crmHomeWorkflowsWidgetUseTemplateParams = {
  // view_type
  view_type?: string;
  // which template the user chosen
  template?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeWorkflowsWidgetStartFromScratchParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeIntegrationsCommunicationsViewAllParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type crmHomeIntegrationsCommunicationsConnectParams = {
  // view_type
  view_type?: string;
  // which connection the user choose
  connectTab?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type toastClicked86Params = {
  // toast name, supplied by toast initiator
  name?: string;
  // hosting_platform
  hosting_platform?: string;
  // active_page_id
  active_page_id?: string;
  // toast scope {app/ dashboard}
  scope?: string;
  // trigger_entity_type
  trigger_entity_type?: string;
  // CTA/dismiss
  click_type?: string;
  // view_type
  view_type?: string;
  // high, normal, low
  severity?: string;
  // info, error, warning, success, premium
  type?: string;
  // platform
  platform?: string;
  // hosting_platform_context_id
  hosting_platform_context_id?: string;
  // MA/editor/dashboard
  hosting?: string;
  // seconds to auto hide toast, 0 is sticky toast
  timeout?: number;
  // metasite id
  msid?: GUID;
  // trigger_entity_id
  trigger_entity_id?: string;
  // toast_timeout
  toast_timeout?: string;
};
export type crmHomeIntegrationsMarketingViewAllParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type dummyNameSrc5Evid8600Params = {
};
export type siteMembersSignupSettingsEditFieldTextSettingsParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // {}
  setting_value?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderGetSubscribersFormManageSubscribersClickParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
  // Manage Subscribers
  action?: string;
};
export type formBuilderGetSubscribersFormManageSubscribersActionsClickParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
  // 'Create Email'/'Get Started'/'Manage Your Contacts'
  action?: string;
};
export type formBuilderCaptachaStatusParams = {
  // visitor_id
  visitor_id?: GUID;
  // { 'verified' / 'expire' / 'reset'}
  authentication_status?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // msid
  msid?: GUID;
};
export type quotesEmailQuotePageCancelClickParams = {
  // view_type
  view_type?: string;
  // origin page
  origin?: string;
  // web,native
  origin_device?: string;
  // resend mode?
  resend?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderTooltipForAddFieldForbiddenWordsParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
  // field_name
  field_name?: string;
  // entered_text
  entered_text?: string;
};
export type startLoading8702Params = {
  // accountmanager/bizmanager/devcenter/etc.
  hosting_platform?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: GUID;
};
export type formBuilderManageChoicesUpdateDisplayNameParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesAddAChoiceClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesEditChoiceParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesDeleteChoiceParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesUpdateChoiceNameParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesSetAsDefaultChoiceParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // choice_name
  choice_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesDuplicateChoiceClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // choice_name
  choice_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesDuplicateChoiceCompleteParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // choice_name
  choice_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderManageChoicesReorderChoiceCompleteParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // choice_name
  choice_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type quotesPrintQuoteParams = {
  // view_type
  view_type?: string;
  // my invoices, preview
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderMultiStepDragStepParams = {
  // step_name
  step_name?: string;
  // ADI / Editor
  builderOrigin?: string;
  // from_step location
  from_step?: number;
  // visitor_id
  visitor_id?: GUID;
  // total_number_of_steps
  total_number_of_steps?: number;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // to_step location
  to_step?: number;
  // msid
  msid?: GUID;
};
export type formBuilderMultiStepClickOnManageStepsParams = {
  // ADI / Editor
  builderOrigin?: string;
  // 'manage steps button', 'form settings', 'steps dropdown'
  click_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderMultiStepEditStepActionsParams = {
  // step_name
  step_name?: string;
  // step_no
  step_no?: number;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // ‘rename’/’duplicate’/’delete’/’Submit Message’
  action?: string;
};
export type formBuilderMultiStepAddNewStepParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderMultiStepAddNewFieldParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderBackofficeFormSubscriberUserActionsParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // checked / unchecked / single / double
  value?: string;
  // checkbox_text / opt_in /learn_more
  action?: string;
};
export type formBuilderMultiStepClickOnAscendPlanParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type quotesDownloadPdfQuoteParams = {
  // view_type
  view_type?: string;
  // customer for UoU, my quote for users
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderMultiStepBackNextButtonChangeTextParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // next/back
  button?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type finishLoading8900Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // view_type
  view_type?: string;
  // the screen width
  screen_width?: number;
  // the window width
  window_width?: number;
  // the screen hight
  screen_height?: number;
  // the window height
  window_height?: number;
  // platform
  platform?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // loading time of the platform in ms (time from Giza start loading event)
  loading_time?: number;
};
export type exposureEventForPaginationTestParams = {
  // the number of folders in the root (1st level)
  folders_number?: number;
  // True if the user has more than 50 folders in the root, false if less
  is_pagination_user?: boolean;
  // view_type
  view_type?: string;
  // deprecated
  platform?: string;
};
export type formBuilderMultiStepBackNextButtonFinishUpdateTextParams = {
  // name
  name?: string;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // next/back
  button?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type invoiceSettingsSelectTaxDetailsCustomFieldCheckboxParams = {
  // whether net taxes is shown in invoice (tax breakdown)
  showTaxAmount?: boolean;
  // is payments received section is shown in invoice
  showItemsSubtotalPerTax?: boolean;
  // view_type
  view_type?: string;
  // is tax is shown per line item
  showTaxColumn?: boolean;
  // checked or un-checked
  checkbox?: boolean;
  // ‘other setting same modal value (enambled/disabled)
  value2?: string;
  // Web/ Mobile
  platform?: string;
  // msid
  msid?: GUID;
  // ‘tax per line item’/ ‘net tax amount’
  value?: string;
};
export type invoiceSettingsClickOnLinkParams = {
  // view_type
  view_type?: string;
  // modal name ( example: ‘Tax setting’s)
  modal_name?: string;
  // tab name (example: ‘Invoice’)
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // value clicked ( example: ’General’)
  value?: string;
};
export type formBuilderMultiStepUouClickOnBackNextSubmitParams = {
  // step_name
  step_name?: string;
  // step_no
  step_no?: number;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // total_number_of_steps
  total_number_of_steps?: number;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // msid
  msid?: GUID;
  // next/back/submit
  action?: string;
};
export type bookingAnywhereNoPermissionParams = {
  // view_type
  view_type?: string;
  // share services or manage calendar
  buttonName?: string;
  // depercated
  platform?: string;
  // --
  msid?: GUID;
};
export type mySitesMainPageFinishLoadingParams = {
  // True if the page loaded successfully, else false
  success?: boolean;
  // Total number of folders the user has in his account, including the trash.
  total_folders_count?: number;
  // grid / list
  view_mode?: string;
  // Total number of sites the user has in his account
  total_sites_count?: number;
  // The number of folders in the My sites page, Including the trash.
  num_displayed_folders?: number;
  // the url of the last page the users have seen
  referral_info?: string;
  // my-site
  origin?: string;
  // Num sites displayed on the page (all of the sites out of the folders - on the root)
  num_displayed_sites?: number;
  // True if the user have partners dash
  is_pro?: boolean;
  // deprecated
  platform?: string;
  // the url of the page that the user see
  page_url?: Url;
  // The time it took to finish loading the page in ms
  loading_time?: number;
};
export type addNoteTermClickParams = {
  // productSource
  source?: string;
  // view_type
  view_type?: string;
  // appDefId
  appDefId?: GUID;
  // ’recurringAutoCharge’/ 'recurring'/ 'one time'
  invoiceType?: string;
  // create invoice, edit invoice
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
};
export type mySitesSiteLessLoadedParams = {
  // True if the page loaded successfully, else false
  success?: boolean;
  // The url of the last page the users have seen
  referral_info?: string;
  // my sites for studio/my sites for DIY
  origin?: string;
  // Deprecated
  platform?: string;
  // The url of the page that the user sees
  page_url?: string;
  // The time it took to finish loading the page in ms
  loading_time?: number;
};
export type wixInvoicesClickingOnGroupsDropDownInSettingsParams = {
  // view_type
  view_type?: string;
  // mobile/web
  platform?: string;
  // Header details, Business Info, Tax settings, Footer Notes)
  card?: string;
  // msid
  msid?: GUID;
  // open/close
  value?: string;
};
export type formBuilderBackofficeFormDeleteKeepSubscribeItemParams = {
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type invoicesSettingsSaveButtonParams = {
  // invoiceNumber
  invoiceNumber?: string;
  // whether net taxes is shown in invoice
  showTaxAmount?: boolean;
  // weather logo is uploaded
  hasLogo?: boolean;
  // documentName
  documentName?: string;
  // is items subtotal per tax group is shown in invoice
  showItemsSubtotalPerTax?: boolean;
  // what custom fields is added (header fields, business custom fields, footer notes)
  customFields?: string;
  // what is written in email that is sending to cutomer
  invoiceEmail?: string;
  // view_type
  view_type?: string;
  // is tax is shown per line item
  showTaxColumn?: boolean;
  // Header details, Business Info, Tax settings, Footer Notes)
  card_name?: string;
  // From which place it was saved: ‘Discard Modal’ , ‘Save button’
  origin?: string;
  // is payments received section is shown in invoice
  showTransactionDetails?: boolean;
  // mobile/web
  platform?: string;
  // msid
  msid?: GUID;
};
export type manageFolderDropDownListShownParams = {
  // list/grid
  sub_view?: string;
  // my-sites/dashboard/sites-list-enterprise
  origin?: string;
  // manage folder top button / folder 3 dot button
  cta?: string;
  // deprecated
  platform?: string;
  // list of all the items the user can click on (unblocked items)
  permitted_items?: string;
  // list of all the shown items when drop down menu is shown
  itemsList?: string;
};
export type wixInvoicesLeavingSettingsWithoutSavingPopUpParams = {
  // view_type
  view_type?: string;
  // weather its ‘Discard modal’, clicking on discard or clicking anywhere else, getting ‘Save changes’ modal
  modal_name?: string;
  // where user clicked to go
  fieldName?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type discardModalClickParams = {
  // view_type
  view_type?: string;
  // weather its ‘Discard modal’, clicking on discard or clicking anywhere else, getting ‘Save changes’ modal
  modal_name?: string;
  // mobile/web
  platform?: string;
  // msid
  msid?: GUID;
  // ‘Discard’, ‘x’, ‘Close’
  value?: string;
};
export type wixInvoicesClickOnTabsToChoseProductFromParams = {
  // Invoice, Store, Bookings
  button_name?: string;
  // view_type
  view_type?: string;
  // app_deff_id
  productSource?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type invoiceSettingsSaveButtonClickParams = {
  // view_type
  view_type?: string;
  // From which place it was saved: ‘Discard Modal’ , ‘Save button’
  origin?: string;
  // mobile/web
  platform?: string;
  // msid
  msid?: GUID;
};
export type wixInvoicesSavingItemDescriptionParams = {
  // view_type
  view_type?: string;
  // product source
  productSource?: string;
  // create product, edit product
  origin?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type gizaApiCallReceivedParams = {
  // the Giza's hosting platform that the API call received in. expected values: dev center/ BizMgr/ account manager/ etc.
  hosting_platform?: string;
  // the app that generated an API call, it can be Wix app or TPA. if the API call was generated by the hosting platform itself and not by an app the app_id will be null
  app_id?: string;
  // The method name
  method_name?: string;
  // the component id of the component that triggered the API call. the component id it's the id of the component in dev center.
  component_id?: string;
  // f.e.: metasite id  will be reported when there is context of site like in BizMgr
  hosting_platform_context_id?: string;
  // tool
  tool?: string;
};
export type formBuilderMultiStepClickOnRestoreButtonsParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // ‘restore back button’/ ‘restore next button’/‘restore submit button’
  action?: string;
};
export type clickDoneToEditFilterViewParams = {
  // select / select & edit
  click_type?: string;
  // editor / ADI / editorX
  ds_origin?: string;
  // 0 (sites-list-enterprise page=ROOT)/ 1 (folder) / 2 / 3...
  nesting_level?: number;
  // sites-list-partners-DIY
  origin?: string;
  // folder/root
  view_level?: string;
  // .
  is_premium?: boolean;
  // deprecated
  platform?: string;
  // msid
  msid?: string;
  // .
  is_published?: boolean;
};
export type clickOnSaveViewParams = {
  // view/click
  action_type?: string;
  // deprecated
  platform?: string;
};
export type mySitesEditCustomizeColumnViewParams = {
  // sites-list-enterprise
  origin?: string;
  // deprecated
  platform?: string;
};
export type mySitesClickOnGoToDashboardLinkParams = {
  // client/organization
  site_class?: string;
  // The guid of the site owner id (the client)
  site_owner_id?: GUID;
  // list/grid
  sub_view?: string;
  // 0 (sites-list-enterprise page=ROOT)/ 1 (folder) / 2 / 3...
  nesting_level?: number;
  // sites-list-enterprise
  origin?: string;
  // The cta of the link site-list \ side-panel
  cta?: string;
  // If the site is premium: true/false
  is_premium?: boolean;
  // deprecated
  platform?: string;
  // The site guid the user clicked
  msid?: GUID;
  // If the site is published: true/false
  is_published?: boolean;
};
export type mySitesClickOnBackToMySitesFromAnEmptyFolderParams = {
  // list/grid
  sub_view?: string;
  // sites-list-enterprise
  origin?: string;
  // platform
  platform?: string;
  // The current folder name
  folder_name?: string;
};
export type mySitesSiteListPageStartLoadingParams = {
  // The url of the previous page, can be null
  referral_url?: string;
  // The url of the current page
  url?: string;
  // the number of folders in the page. Including the trash.
  num_displayed_folders?: number;
  // list/grid
  sub_view?: string;
  // site-list / site-less. site less will be reported only in case of no folders and no sites at all. otherwise, site list.
  page_experience?: string;
  // sites-list-enterprise
  origin?: string;
  // num sites that are displayed on page (all of the sites out of the folders - on the root)
  num_displayed_sites?: number;
  // root/folder
  view_level?: string;
  // deprecated
  platform?: string;
};
export type mySitesSiteListFolderNavigationParams = {
  // The previous folder id
  prev_folder_id?: string;
  // The url of the previous page, can be null
  referral_url?: string;
  // the name of the folder (or ‘root’) that the user clicked to
  current_folder_name?: string;
  // The url of the current page
  url?: string;
  // total number of folders the user has in this page, includes trash
  num_displayed_folders?: number;
  // list/grid
  sub_view?: string;
  // sites-list-enterprise
  origin?: string;
  // /
  cta?: string;
  // num sites that are displayed on page (all of the sites out of the folders - on the root)
  num_displayed_sites?: number;
  // deprecated
  platform?: string;
  // the name of the folder (or ‘root’) that the user clicked from
  prev_folder_name?: string;
  // current_folder_id
  current_folder_id?: string;
};
export type mySitesClickSiteItemParams = {
  // list/grid
  view_mode?: string;
  // List of all sections appear in the side panel, f.e: site name, premium features, site address, site analytics, etc.
  sections_list?: string;
  // client/organization
  site_class?: string;
  // The guid of the site owner id (the client)
  site_owner_id?: GUID;
  // list/grid
  sub_view?: string;
  // sites-list-enterprise
  origin?: string;
  // If the site is premium: true/false
  is_premium?: boolean;
  // deprecated
  platform?: string;
  // The site guid the user opened the menu for
  msid?: GUID;
  // If the site is published: true/false
  is_published?: boolean;
  // open-side-panel / close-side-panel
  action_description?: string;
};
export type mySitesClicksActionsInSidePanelParams = {
  // client/organization
  site_class?: string;
  // The guid of the site owner id (the client)
  site_owner_id?: GUID;
  // list/grid
  sub_view?: string;
  // sites-list-enterprise
  origin?: string;
  // The cta of the button/link (please report the cta key, I need it to be in english only)
  cta?: string;
  // root / folder
  view_level?: string;
  // If the site is premium: true/false
  is_premium?: boolean;
  // platform
  platform?: string;
  // The site guid the user opened the menu for
  msid?: GUID;
  // The deep link of the cta the user clicked on
  deep_link?: Url;
  // If the site is published: true/false
  is_published?: boolean;
};
export type clickStartGuideOrCloseDoItWithMeToolParams = {
  // view_type
  view_type?: string;
  // origin page - from which place this action was made (Invoice Dashboard/ Invoice Form/Watch Tutorial)
  origin?: string;
  // Start Guide/cancel
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type wixInvoicesChargeWithCreditCardClickParams = {
  // view_type
  view_type?: string;
  // my invoices,preview,create invoice
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // web,native
  origin_device?: string;
  // invoice_source_id
  invoiceSource?: GUID;
  // MOTO/ POS
  type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
  // true for fully paid selected, false for partial payment selected
  fully_paid?: boolean;
};
export type wixInvoicesPaymentMethodClickParams = {
  // view_type
  view_type?: string;
  // appDefId of the source
  appDefId?: GUID;
  // my invoices,preview
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
  // true for fully paid selected, false for partial payment selected
  fully_paid?: boolean;
};
export type wixInvoicesToastIsShownParams = {
  // toast name, supplied by toast initiator
  name?: string;
  // view_type
  view_type?: string;
  // "my invoices", "preview"
  origin?: string;
  // standard, error, warning, success, premium
  type?: string;
  // platform
  platform?: string;
  // miliseconds to auto hide toast, 0 is sticky toast
  timeout?: number;
  // metasite id
  msid?: GUID;
};
export type wixInvoicesRequestPaymentClickInAutomationParams = {
  // view_type
  view_type?: string;
  // Chosen app in which this automation was clicked (Now only Bookings)
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type wixInvoicesChargeWithCreditCardClickInTheModalMotoParams = {
  // view_type
  view_type?: string;
  // New or Edited Invoice (True Or False)
  is_new?: boolean;
  // my invoices,preview,create invoice
  origin?: string;
  // web,native
  origin_device?: string;
  // invoice_source_id
  invoiceSource?: GUID;
  // MOTO/POS
  type?: string;
  // plstform
  platform?: string;
  // msid
  msid?: string;
  // invoice guid
  invoice_id?: GUID;
  // true for fully paid selected, false for partial payment selected
  fully_paid?: boolean;
};
export type formBuilderSubmitButtonSettingsClickOnSetupPaymentFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // multistep form/ ...
  form_type?: string;
  // msid
  msid?: GUID;
};
export type wixInvoicesMotoCashierWidgetIsShownParams = {
  // Invoice total amount
  totalAmountLong?: number;
  // Opened/Clicked Charge/Processed ( Three stages defines the flow, when modal is opened and a user put details in cashiers modal, then user is clicking charge and final stage if the data is good it is processing). Exact values: 'opened' | 'clicked charge' | 'paid'
  name?: string;
  // invoice has deposit
  is_deposit?: boolean;
  // view_type
  view_type?: string;
  // New or Edited Invoice
  is_new?: boolean;
  // origin
  origin?: string;
  // currency of the amount paid
  currency?: string;
  // Total amount that is paid, comes only when name=paid or name-clickedcharge
  paidAmountLong?: number;
  // MOTO/POS
  type?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
  // invoice_id
  invoice_id?: GUID;
  // Is the full invoice amount is going to be paid or part of the total amount
  fully_paid?: boolean;
};
export type wixInvoicesMotoPaidModalParams = {
  // true/false
  is_deposit?: boolean;
  // view_type
  view_type?: string;
  // origin
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
  // invoice_guid
  invoice_id?: GUID;
};
export type mySitesRefreshAfterMoveToFolderParams = {
  // time_to_refresh
  time_to_refresh?: number;
  // The time when the user press move to folder
  start_time?: DateTime;
  // The time when the site actually moved to the new folder
  end_time?: DateTime;
  // /
  experiment_from_site_list?: string;
  // platform
  platform?: string;
  // The msid of the site that moved
  msid?: string;
  // /
  experiment_from_modal?: string;
};
export type wixInvoicesAutomationDynamicValueClickParams = {
  // view_type
  view_type?: string;
  // Chosen app in which this automation was clicked (Now only Bookings)
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // click/add
  action?: string;
};
export type mySitesErrorPageParams = {
  // .
  experiment_from_site_list?: string;
  // deprecated
  platform?: string;
};
export type wixInvoicesClickingOnNextMobileParams = {
  // view_type
  view_type?: string;
  // Creation Form/Draft
  status?: string;
  // app def id
  invoiceSource?: string;
  // web/mobile
  platform?: string;
  // --
  msid?: GUID;
  // invoice_id
  invoice_id?: GUID;
};
export type wixInvoicesBannerToUpgradeToPremiumShownParams = {
  // banner name (upgrade to business premium)
  name?: string;
  // view_type
  view_type?: string;
  // origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type wixInvoicesBannerToUpgradeToPremiumClickParams = {
  // upgrade to business premium
  name?: string;
  // view_type
  view_type?: string;
  // banner, modal which shows when clicking on ( Send via email, Send in Invoice Form, Share link, Charge with Credit card)
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type wixInvoicesOpenShareLinkModalParams = {
  // An external id of an entity, relevant to the invoiceSource application
  externalId?: GUID;
  // view_type
  view_type?: string;
  // invoiceId
  invoiceId?: GUID;
  // more actions/invoice preview
  origin?: string;
  // Creation form/Draft/Sent/Paid
  status?: string;
  // appdefid of the source
  appdefid?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type wixInvoicesBannerToConnectPaymentMethodsParams = {
  // banner name
  name?: string;
  // view_type
  view_type?: string;
  // origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type wixInvoicesBannerToConnectPaymentMethodClickParams = {
  // banner name
  name?: string;
  // view_type
  view_type?: string;
  // origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type gizaFirstBiteIsShownParams = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // time_to_first_byte
  time_to_first_byte?: number;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type gizaFirstInteractionInTheSessionIsAvailableParams = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // sidebar/header
  interactive_component?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
};
export type wixInvoicesClickOnDynamicValueInAutomationParams = {
  // view_type
  view_type?: string;
  // Chosen app in which this automation was clicked (Now only Bookings)
  origin?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type priorityASuggestionCarouselInteractionParams = {
  // if click next if it was 1,2,3 and 4 for previous
  totalPriortySeen?: number;
  // view_type
  view_type?: string;
  // type of navigation (next, previous)
  type?: string;
  // deprecated
  platform?: string;
  // msid
  msid?: GUID;
};
export type priorityAEssentialShownParams = {
  // how many offers he have in the section
  numOffer?: number;
  // view_type
  view_type?: string;
  // true if he have carousel (more than 4 offers)
  isCarousel?: boolean;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type clickOnCreateNewFolderParams = {
  // top-bar/dialog/topbar-folder-dropdown
  source?: string;
  // grid / list-view
  sub_view?: string;
  // sites-list-enterprise
  origin?: string;
  // search/filter/folder/root
  view_level?: string;
  // platform
  platform?: string;
};
export type createNewSiteCreationMenuIsShownParams = {
  // my sites wix studio (currently only this origin)
  origin?: string;
  // list of the items shown in the sub menu, separated by delimiter - create from blank, use wix templates, use your custom templates, build on wix classic editor
  items_list?: string;
  // deprecated
  platform?: string;
};
export type clickOnAddAtTheDynamicFieldModalParams = {
  // will be sent only for a date value
  format?: string;
  // action English key
  actionKey?: string;
  // view_type
  view_type?: string;
  // action provider app id
  actionAppId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
  // input_type
  inputType?: string;
  // input value
  value?: string;
};
export type getBrandedAppAlertIsShownAutomationSendAPushNotificationParams = {
  // id uniqe to action
  actionId?: GUID;
  // view_type
  view_type?: string;
  // rule_id
  rule_id?: GUID;
  // The trigger key
  triggerKey?: string;
  // the app id of the vertical/company id of the action provider
  actionAppId?: GUID;
  // platform
  platform?: string;
  // msid
  msid?: GUID;
};
export type quotesDeleteQuoteClickParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuildrUouSubmitFormClickParams = {
  // the form name, given by user
  form_name?: string;
  // appVersion
  appVersion?: string;
  // visitor_id
  visitor_id?: GUID;
  // form specific url
  form_url?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // template
  template?: string;
  // number of attachments, "0" if none
  num_of_attachments?: number;
  // msid
  msid?: GUID;
};
export type sdkLoaded9000Params = {
  // the Giza's hosting platform. expected values: dev center/ BizMgr/ account manager/ etc.
  hosting_platform?: string;
  // the SDK version
  sdk_version?: string;
  // the app id of the app that it's Iframe loaded
  app_id?: string;
  // the component id of the component that hosts the Iframe. the component id it's the id of the component in dev center.
  component_id?: string;
  // f.e.: metasite id  will be reported when there is context of site like in BizMgr
  hosting_platform_context_id?: string;
};
export type gizaPageStartLoading9001Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // specific button triggered the the view loading (the referral info as in event 302)
  referral_info?: string;
  // the previous page's id
  prev_page_id?: string;
  // screen width
  screen_width?: number;
  // the page id (actually the component id of the page)
  page_id?: string;
  // the component name of the page
  page_name?: string;
  // true if it’s the first page in session (true until navigation), otherwise false
  is_first?: boolean;
  // window width
  window_width?: number;
  // screen height
  screen_height?: number;
  // the app id of the app the page belongs to
  app_id?: string;
  // the page's route
  route?: string;
  // window height
  window_height?: number;
  // how many visits were in this page per full reload
  visits_counter?: number;
  // true if it's an internal page
  is_internal_page?: boolean;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // currently relevant for BM over editor
  firstFromIframe?: boolean;
  // the previous route
  prevRoute?: string;
  // main / overlay
  displayMode?: string;
  // previous display mode - main / overlay
  prevDisplayMode?: string;
  // in case of previous internal page- in this field we will get the additional part of the previous route
  prevInternalRoute?: string;
  // true if the previous page was an internal page
  prevIsInternalPage?: boolean;
};
export type gizaPageFinishLoading9002Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // specific button triggered the the view loading (the referral info as in event 302)
  referral_info?: string;
  // the previous fully loaded page id
  prev_page_id?: string;
  // screen width
  screen_width?: number;
  // the page id (the component id of the page)
  page_id?: string;
  // the component name of the page
  page_name?: string;
  // true if it’s the first page that started to load in the session
  is_first?: boolean;
  // window width
  window_width?: number;
  // screen height
  screen_height?: number;
  // the app id of the app the page belongs to
  app_id?: string;
  // the page's route
  route?: string;
  // True if it's the first 9002 event in the session
  is_first_9002?: boolean;
  // window height
  window_height?: number;
  // how many visits were in this page per full reload
  visits_counter?: number;
  // true if it's an internal page
  is_internal_page?: boolean;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // loading time from first feedback event (in milliseconds)
  loading_time_from_first_feedback?: number;
  // loading time from the moment the loader of the page is shown  (in milliseconds)
  loading_time?: number;
  // currently relevant for BM over editor
  // 
  firstFromIframe?: boolean;
  // the previous route
  prevRoute?: string;
  // main / overlay	
  displayMode?: string;
  // previous display mode - main / overlay	
  prevDisplayMode?: string;
  // in case of previous internal page- in this field we will get the additional part of the previous route
  // 
  prevInternalRoute?: string;
  // true if the previous page was an internal page	
  prevIsInternalPage?: boolean;
};
export type formBuildrUouSubmitFormSuccessParams = {
  // used as honeypot indicator true=suspected bot, null or false=not suspected
  isfp?: boolean;
  // the form name, given by user
  form_name?: string;
  // appVersion
  appVersion?: string;
  // visitor_id
  visitor_id?: GUID;
  // submission Id
  submissionId?: GUID;
  // form specific url
  form_url?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // template
  template?: string;
  // number of attachments, 0 if none
  num_of_attachments?: number;
  // bot detection reason
  btype?: string;
  // msid
  msid?: GUID;
  // used as bot indicator true=bot, null or false=not a bot
  isjp?: boolean;
};
export type mySitesEditTemplateButtonClickParams = {
  // sites list wix studio
  origin?: string;
  // deprecated
  platform?: string;
  // the template id guid
  template_id?: string;
};
export type mySitesClickOnSeeAllTemplatesParams = {
  // sites list wix studio
  origin?: string;
  // deprecated
  platform?: string;
};
export type createNewWorkspaceParams = {
  // number of workspaces (=accounts) the logged user is connected to
  num_workspaces?: number;
  // Dashboard / my sites
  page_view?: string;
  // view_type
  view_type?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // workspace selector
  origin?: string;
  // platform
  platform?: string;
};
export type workspaceSelectorSelectWorkspaceParams = {
  // number of workspaces (=accounts) the logged user is connected to
  num_workspaces?: number;
  // Dashboard / my sites
  page_view?: string;
  // the location of the workspace in the workspace selector list  (0 is first, 1 is second…)
  clicked_workspace_index?: number;
  // view_type
  view_type?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // the selected workspace's id
  clicked_workspace_id?: GUID;
  // the logged user's role in the selected workspace
  clicked_workspace_role?: string;
  // platform
  platform?: string;
};
export type workspaceActionMenuDropDownListShownParams = {
  // number of workspaces (=accounts) the logged user is connected to
  num_workspaces?: number;
  // Dashboard / my sites
  page_view?: string;
  // view_type
  view_type?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // platform
  platform?: string;
};
export type workspaceActionMenuItemClickParams = {
  // the tooltip's location (workspace selector info/ Workspace Action Menu)
  location?: string;
  // number of workspaces (=accounts) the logged user is connected to
  num_workspaces?: number;
  // Dashboard / my sites
  page_view?: string;
  // view_type
  view_type?: string;
  // the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
  account_type?: string;
  // link to the KB the 'Learn more' referrer to
  link?: Url;
  // platform
  platform?: string;
};
export type workspaceSelectorClickOnLearnMoreInTooltipsParams = {
  // Dashboard / my sites
  page_view?: string;
  // view_type
  view_type?: string;
  // the entry point location (account menu/header)
  origin?: string;
  // platform
  platform?: string;
};
export type workspaceSelectorWorkspaceSettingClickParams = {
  // Dashboard / my sites
  page_view?: string;
  // view_type
  view_type?: string;
  // the entry point location
  origin?: string;
  // platform
  platform?: string;
};
export type formBuildrUouSubmitFormErrorParams = {
  // the form name, given by user
  form_name?: string;
  // appVersion
  appVersion?: string;
  // visitor_id
  visitor_id?: GUID;
  // error reason
  reason?: string;
  // error reason body
  reason_body?: string;
  // form specific url
  form_url?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // template
  template?: string;
  // number of attachments, 0 if none
  num_of_attachments?: number;
  // msid
  msid?: GUID;
};
export type accountSettingsCloseYourWorkspacePageLoadParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type accountSettingsCloseYourWorkspaceCloseWorkspaceRequestSummitedParams = {
  // view_type
  view_type?: string;
  // why are you closing the workspace
  reason?: string;
  // platform
  platform?: string;
  // users feedback
  free_text?: string;
};
export type workspaceSettingsDeleteAccountWorkspaceParams = {
  // what button the user clicked - "delete workspace"/"delete workspace and close account"
  context?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // what workspace the user closes
  workspace_id?: GUID;
};
export type workspaceSettingsChangesSavedParams = {
  // view_type
  view_type?: string;
  // what the user changed when he clicked save ("name"/"prefix"/"name and prefix")
  changes?: string;
  // platform
  platform?: string;
  // what workspace the user closes
  workspace_id?: GUID;
};
export type wixInvoicesBannerWhenCreatingInvoiceOrderParams = {
  // Opened, Closed, Edit
  name?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // metasite id
  msid?: GUID;
};
export type allPageLoadersAreDown9029Params = {
  // accountmanagr/bizmanagr/devcenter/etc.
  hosting_platform?: string;
  // specific button triggered the the view loading (the referral info as in event 302)
  referral_info?: string;
  // the previous fully loaded page id
  prev_page_id?: string;
  // screen width
  screen_width?: number;
  // the page id (the component id of the page)
  page_id?: string;
  // the component name of the page
  page_name?: string;
  // true if it’s the first page that started to load in the session
  is_first?: boolean;
  // window width
  window_width?: number;
  // screen height
  screen_height?: number;
  // the app id of the app the page belongs to
  app_id?: string;
  // the page's route
  route?: string;
  // window height
  window_height?: number;
  // how many visits were in this page per full reload
  visits_counter?: number;
  // true if it's an internal page
  is_internal_page?: boolean;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // in case of internal page- in this field we will get the additional part of the route
  internal_route?: string;
  // loading time from event 9001 (page start load) until all the loaders are down (in milliseconds)
  loading_time?: number;
  // currently relevant for BM over editor
  // 
  firstFromIframe?: boolean;
  // the previous route
  prevRoute?: string;
  // main / overlay	
  displayMode?: string;
  // previous display mode - main / overlay	
  prevDisplayMode?: string;
  // in case of previous internal page- in this field we will get the additional part of the previous route
  // 
  prevInternalRoute?: string;
  // true if the previous page was an internal page	
  prevIsInternalPage?: boolean;
};
export type formBuilderManageFieldsAddNewFieldCompletedParams = {
  // form type = {'form-builder'/'get-subscribers'/'registration-form'}
  plugin?: string;
  // ADI / Editor
  builderOrigin?: string;
  // field type
  field_type?: string;
  // appVersion
  appVersion?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // field group (e.g recommended, my custom, custom)
  field_group?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type invoicesSettingsSelectPaymentsReceivedOptionParams = {
  // view_type
  view_type?: string;
  // whether to show payments received section in invoice
  showTransactionDetails?: boolean;
  // web/mobile
  platform?: string;
  // msid
  msid?: GUID;
};
export type mySitesDebuggingEventParams = {
  // what is the time point/action triggers the event. f.e: page loaded.
  trigger_point?: string;
  // The url of the last page the users have seen
  referral_info?: string;
  // True if the user is experiencing version B, False if experiencing version A
  experiment_status?: boolean;
  // platform
  platform?: string;
  // The url of the page that the user sees
  page_url?: string;
};
export type searchInSitesDropdownParams = {
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // what did the user search?
  search_term?: string;
  // how many sites connected to the current user?
  num_sites?: number;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // how many search results are there?
  num_results?: number;
};
export type formBuildrUouSubmitFormSuccessSendingDataToFormBuilderServerParams = {
  // the form name, given by user
  form_name?: string;
  // visitor_id
  visitor_id?: GUID;
  // form specific url
  form_url?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // template
  template?: string;
  // number of attachments, 0 if none
  num_of_attachments?: number;
  // msid
  msid?: GUID;
};
export type searchInSitesDropdownEndProcessParams = {
  // my-sites /dashboard / account settings
  page_view?: string;
  // view_type
  view_type?: string;
  // what did the user search?
  search_term?: string;
  // how did the search end? Site selected / Search dismissed (even when closing site selector) / Show more results / Go to all sites
  end_type?: string;
  // how many sites connected to the current user?
  num_sites?: number;
  // platform
  platform?: string;
  // -
  msid?: GUID;
  // how many search results are there?
  num_results?: number;
};
export type devModeOnEntryPointParams = {
  // automations
  entryPoint?: string;
  // view_type
  view_type?: string;
  // true/false
  status?: boolean;
  // platform
  platform?: string;
  // dev_mode
  action?: string;
};
export type gizaClickOnCollapseExpandSidebarParams = {
  // collapse/expand
  click_type?: string;
  // the page id (actually the component id of the page)
  page_id?: string;
  // which page the user was when he clicked on the sidebar
  page_name?: string;
  // sidebar state (expand/collapse)
  sidebar_state?: string;
  // JSON of all the items the user saw in the sidebar when clicked on item- key:unique item name, value: number of notifications the user sees in this item. In case the type is navigated - please send the sidebar items list
  items_list?: string;
  // app_id of the item
  app_id?: string;
  // context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
  hosting_platform_context_id?: string;
  // dashboard / editor / onboarding
  hosting?: string;
  // metasite id
  msid?: GUID;
  // triggered automatically or by users
  TriggeredBy?: string;
};
export type formBuilderDesignPanelParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // main panel name
  panel_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // sub panel name
  control_name?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
  // value
  value?: string;
};
export type formBuildrComponentLoadTimeParams = {
  // appVersion
  appVersion?: string;
  // visitor_id
  visitor_id?: GUID;
  // panel name
  panel_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // loading time (milliseconds)
  loadingTime?: number;
  // panel opening origin
  origin?: string;
  // form template
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderDeleteFormParams = {
  // ADI / Editor
  builderOrigin?: string;
  // appVersion
  appVersion?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormCopyAttemptParams = {
  // visitor_id
  visitor_id?: GUID;
  // id of original form
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type quotesDeleteQuotePageOkParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderTemplatePickerOpenedParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type dummyNameSrc5Evid9100Params = {
};
export type formBuilderTemplatePickerClickOnTemplateParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // template selected
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderTemplatePickerChooseTemplateParams = {
  // ADI/Editor
  builderOrigin?: string;
  // appVersion
  appVersion?: string;
  // deprecated
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // app market / add panel
  source_name?: string;
  // template selected
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderManageFieldsPanelOpenedParams = {
  // ADI/Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderManageFieldsDeleteFieldParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderManageFieldsAddNewFieldDropDownOpenedParams = {
  // ADI/Editor
  builderOrigin?: string;
  // deprecated
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderManageFieldsAddNewFieldParams = {
  // form type = {'form-builder'/'get-subscribers'/'registration-form'}
  plugin?: string;
  // ADI / Editor
  builderOrigin?: string;
  // field type
  field_type?: string;
  // appVersion
  appVersion?: string;
  // deprecated
  visitor_id?: GUID;
  // tab name
  tabName?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // field group (e.g recommended, my custom, custom)
  field_group?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderEditFieldPanelOpenedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opened from (gfpp,manage fields...)
  origin?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderEditFieldUpdateValueParams = {
  // plugin
  plugin?: string;
  // placeholder, field name
  name?: string;
  // toggle state
  toggle_state?: boolean;
  // ADI / Editor
  builderOrigin?: string;
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'field settings','gfpp'
  origin?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderEditFieldUpdateMandatoryValueParams = {
  // form type = {'form-builder'/'get-subscribers'/'registration-form'}
  plugin?: string;
  // ADI / Editor
  builderOrigin?: string;
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // true if set to required
  is_required?: boolean;
  // vsi
  vsi?: GUID;
  // type of checkbox required / checked by default
  origin?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type quotesDeleteQuotePageCancelParams = {
  // view_type
  view_type?: string;
  // web,native
  origin_device?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderEditFieldConnectFieldDropDownOpenedParams = {
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // number of available fields to connect (0 if none)
  num_of_fields?: number;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type appInstallationInitiateParams = {
  // App Version
  appVersion?: string;
  // ACCOUNT/SITE
  tenantType?: string;
  // app def id (of the app) to install
  appdefid?: string;
  // account id/meta site id
  tenantId?: string;
  // installation id from client installer payload
  installation_id?: string;
};
export type appInstallationCompletedParams = {
  // the date the app was installed on the site/account
  installationDate?: DateTime;
  // app instance id - (app+tenant) instance guid
  appInstanceId?: GUID;
  // status (waiting for authentication/installed...)
  newStatus?: string;
  // App Version
  appVersion?: string;
  // ACCOUNT/SITE
  tenantType?: string;
  // app def id to install
  appdefid?: string;
  // is enabled (not revoked)
  isEnabled?: boolean;
  // account id/meta site id
  tenantId?: string;
  // installation id from client installer payload
  installation_id?: string;
};
export type appsBulkInstallationInitiateParams = {
  // List of JSONs, each JSON containing info of an app initiated installation on the tenant. f.e: [{“app_id”:””,”app_version”:””},{}]
  appInstances?: string;
  // ACCOUNT/SITE
  tenantType?: string;
  // account id/meta site id
  tenantId?: string;
  // installation id from client installer payload
  installation_id?: string;
};
export type appsBulkInstallationsCompletedParams = {
  // List of JSONs, each JSON containing info of an app installed on the tenant. f.e: [{“app_id”:””,”app_instance_id”:””,”app_version”:””,”is_enabled”:”” , “new_status”:””},{}]
  appInstances?: string;
  // ACCOUNT/SITE
  tenantType?: string;
  // account id/meta site id
  tenantId?: string;
  // installation id from client installer payload
  installation_id?: string;
};
export type formBuilderEditFieldConnectFieldParams = {
  // plugin
  plugin?: string;
  // ADI/Editor
  builderOrigin?: string;
  // name of CRM field connected to
  connected_field?: string;
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderFormSettingsPanelOpenedParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsUpdateValueParams = {
  // form name, email,second email, success message, error message,label
  name?: string;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'submissions','notifications'
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // 'save','cancel'
  action_type?: string;
};
export type formBuilderFormLayoutOpenAndChangeParams = {
  // ADI/Editor
  builderOrigin?: string;
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // new layout: single, 2 column, 3 column
  layout?: string;
  // msid
  msid?: GUID;
  // open,select
  action?: string;
};
export type formBuilderFormSettingsChangeDurationParams = {
  // duration in seconds
  duration?: number;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsMsgLinkParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // open link/message
  selection?: string;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsLinkSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // page url/lightbox_id
  sub_type?: string;
  // deprecated
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // none/page/lightbox
  type?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsCreateSubmissionsTableRequestParams = {
  // ADI / Editor
  builderOrigin?: string;
  // appVersion
  appVersion?: string;
  // {manual (user click), auto (from template}
  request_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'main tab' , 'settings tab'
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsCreateSubmissionsTableSuccessParams = {
  // ADI/Editor
  builderOrigin?: string;
  // appVersion
  appVersion?: string;
  // {manual (user click), auto (from template}
  request_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type quotesMarkAsAcceptedParams = {
  // instance_id
  instanceId?: GUID;
  // Total amount of the invoice, INTEGER multiplied by 100000
  totalAmountLong?: number;
  // create_order
  createOrder?: boolean;
  // uuid
  uuid?: GUID;
  // 'one time','recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // invoice_guid
  invoiceId?: GUID;
  // create invoice, edit invoice
  origin?: string;
  // currency
  currency?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
};
export type formBuilderBizMgrAddNewFormClickParams = {
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // {top button,empty}
  place?: string;
  // msid
  msid?: GUID;
};
export type formBuilderBizMgrViewFormSubmissionsClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'main tab' , 'settings tab'
  origin?: string;
  // template name
  template?: string;
  // place = 'availble forms' / 'deleted forms'
  place?: string;
  // msid
  msid?: GUID;
};
export type formBuilderManageFieldsDuplicateFieldParams = {
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // field group (e.g recommended, my custom, custom)
  field_group?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderRemoveSubmitButtonParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPremiumPanelOpenedParams = {
  // ADI / Editor / Responsive
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // plan name (Basic/Pro/..)  or ‘free’
  current_ascend_plan?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin
  origin?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPremiumPanelClickParams = {
  // visitor_id
  visitor_id?: GUID;
  // plan name (Basic/Pro/..)  or ‘free’
  current_ascend_plan?: string;
  // vsi
  vsi?: GUID;
  // later/upgrade
  selection?: string;
  // origin
  origin?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderUserSaveAnEditorTemplateWithFormParams = {
  // visitor_id
  visitor_id?: GUID;
  // editor template guid
  templateId?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // Form template selected
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormCopyAttemptFailedParams = {
  // visitor_id
  visitor_id?: GUID;
  // id of original form
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // fail reason
  failReason?: string;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderSubmitButtonUploadFileClickParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPresetGlobalDesignFailedParams = {
  // preset or global design
  name?: string;
  // visitor_id
  visitor_id?: GUID;
  // fail reason
  reason?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type quotesCreateInvoiceFromQuotesParams = {
  // instance_id
  instanceId?: GUID;
  // Total amount of the invoice, INTEGER multiplied by 100000
  totalAmountLong?: number;
  // create order?
  createOrder?: boolean;
  // uuid
  uuid?: GUID;
  // The optional type of the invoice deposit. Possible values: "FLAT"/"PERCENTAGE".
  depositType?: string;
  // 'one time','recurring'
  paymentType?: string;
  // view_type
  view_type?: string;
  // invoice_guid
  invoiceId?: GUID;
  // origin
  origin?: string;
  // invoiceTitle
  invoiceTitle?: string;
  // by app_def_id
  invoiceSource?: string;
  // currency
  currency?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // discountPercentage
  discountPercentage?: number;
};
export type formBuilderManageFieldsClickOnFieldButtonLearnAllAboutThisParams = {
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // tab name
  tabName?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // field group (e.g recommended, my custom, custom)
  field_group?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type biProfileDataForSiteDetailsActionsWidgetParams = {
  // installed apps - data from bi profile use for the site-details-actions widget . in case the BI Profile doesn't send the data report null.
  installedApps?: string;
  // the site guid
  msid?: GUID;
};
export type formBuilderAdiEditFormClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // {'dropdown', 'edit button'}
  origin?: string;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderAdiEditFormCompletedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // {'dropdown', 'edit button'}
  origin?: string;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderAdiReorderFieldClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // {'dropdown', 'edit button'}
  origin?: string;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
  // field_name
  field_name?: string;
};
export type formBuilderAdiReorderFieldCompleteParams = {
  // ADI / Editor
  builderOrigin?: string;
  // field_type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // {'dropdown', 'edit button'}
  origin?: string;
  // template name
  template?: string;
  // esi
  esi?: GUID;
  // msid
  msid?: GUID;
  // field_name
  field_name?: string;
};
export type formBuilderClickOnGfppOfConnectPanelParams = {
  // field type
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // name of button
  button_name?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // origin aof the gfpp
  origin?: string;
  // template name
  template?: string;
  // field group (e.g recommended, my custom, custom)
  field_group?: string;
  // msid
  msid?: GUID;
  // field name
  field_name?: string;
};
export type formBuilderFormLayoutSpaceBetweenRowsParams = {
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // space between rows value
  value?: string;
};
export type formBuilderFormLayoutSpaceBetweenColumnsParams = {
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // space between columns value
  value?: string;
};
export type formBuilderFormLayoutTextAlignmentParams = {
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // {right / center / left}
  value?: string;
};
export type formBuilderFormLayoutTitleAndPlaceholderPaddingParams = {
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // value of Input Text Padding
  value?: string;
};
export type quotesMarkAsAcceptedSrc5Evid95Params = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderFormLayoutSpaceBetweenFieldTitleAndInputParams = {
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // value of  Space between field title and input
  value?: string;
};
export type formBuilderFormLayoutFieldTitlePaddingParams = {
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // value of Field Title Padding
  value?: string;
};
export type formBuilderGlobalLayoutShowFieldTitleToggleParams = {
  // toggle state
  toggle_state?: boolean;
  // ADI / Editor
  builderOrigin?: string;
  // form layout panel / complex phone / complex address
  field_type?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInnerTabsClickParams = {
  // source
  source?: string;
  // ADI, Editor
  builderOrigin?: string;
  // main/settings/ submit message / automations / support / upgrade / contact list
  tab_name?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSettingsTabsClickParams = {
  // 'Email Notifications', 'Submission Table', 'Contact Labels'
  name?: string;
  // source
  source?: string;
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsGoToAutomationsClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'main tab' , 'automations tab'
  origin?: string;
  // workflows. automations...
  application_name?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // referral page
  referral?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSupportAboutWixFormsClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSupportWixSupportClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSupportSendYourFeedbackClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type quotesCreateInvoiceFromQuotesSrc5Evid96Params = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
  // msid
  msid?: string;
  // quote guid
  quoteId?: GUID;
};
export type formBuilderFormSettingsSupportAddAReviewClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsCreateAutomationParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // 'send a thank you email' , 'create a new task', 'send a chat message'
  automation_type?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsInformationIconHoverClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'contact labels' , 'submit message'
  information_icon?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsPublishYourSitePopupPresentedParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsPublishYourSitePopupSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'got it'/ 'dismiss'/ 'question'
  selection?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSubmitMessageChooseLinkClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // 'link to page or lightbox' / 'link to external URL'
  link_type?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsSubmitMessageRestoreSuccessMessageParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
  // field_name
  field_name?: string;
};
export type formBuilderFormSettingsSubmitMessageRestoreSubmitButtonParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingGetStartedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSettingLearnMoreParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type removePhoneNumberRemoveClickedParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type formBuilderPaymentFormSetupIsDisplayedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type unsubscriptionPageIsShownParams = {
  // sms/email
  channel?: string;
  // hashed_phone
  hashed_phone?: string;
  // in case the channel is email hashed email will be reported, otherwise null
  hashed_email?: string;
  // app_id - the app id of the app that owned the flow the user did unsubscribe from
  app_id?: string;
  // in case the contact reached the unsubscribe page through clicking on a notification report the flow_id as it sent in event 19:1130, otherwise report generic flow_id to be able to connect between the server and client events.
  flow_id?: string;
  // the site’s guid the unsubscription page will potentially affect
  msid?: GUID;
};
export type unsubscriptionPageClickOnUnsubscribeButtonParams = {
  // sms/email
  channel?: string;
  // in case the channel is sms hashed phone will be reported, otherwise null
  hashed_phone?: string;
  // in case the channel is email hashed email will be reported, otherwise null
  hashed_email?: string;
  // app_id - the app id of the app that owned the flow the user did unsubscribe from
  app_id?: GUID;
  // in case the contact reached the unsubscribe page through clicking on a notification report the flow_id as it sent in event 19:1130, otherwise report generic flow_id to be able to connect between the server and client events.
  flow_id?: string;
  // the site’s guid the unsubscription page will potentially affect
  msid?: GUID;
};
export type formBuilderPaymentFormSetupGetStartedClickOnDemoSiteParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSetupAddUpdateItemParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // itemPrice
  itemPrice?: number;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // itemName
  itemName?: string;
  // 'add' / 'update'
  type?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSetupItemPriceChangeCurrencyParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSetupConnectPaymentMethodParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSetupContinueToSetupFromBizmgParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSetupChangePaymentMethodParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSaveAndRefreshPopUpDisplayedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormSaveAndRefreshPopUpUserSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // = 'dismiss' / 'question sign'/'cancel'/'save & refresh'
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormViewPublishSitePopUpDisplayedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // viewerName
  viewerName?: string;
  // msid
  msid?: GUID;
};
export type removePhoneNumberRemoveNumberClickedParams = {
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type formBuilderPaymentFormViewPublishSitePopUpUserSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // = 'dismiss' / 'question sign'/‘got it’
  selection?: string;
  // viewer_name
  viewerName?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormRemovePaymentPopUpDisplayedParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormRemovePaymentPopUpUserSelectionParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // ='dismiss' / 'question sign'/ ‘remove'/ 'cancel'
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormOpenChangeRemoveDisconnectPaymentParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'Open Payment Overview' , 'Change Payment Method', 'Remove Payment from this site', 'Disconnect Payment from this site'
  selection?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormClickOnNextInPaymentFormSetupParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // 'back' / 'next'
  direction?: string;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // = 'add item' , 'connect payment' , 'upgrade', 'continue without accepting payment', 'done'
  move_to_step?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormTooltipHoverParams = {
  // 'item price'
  tooltip_name?: string;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // ='payment page in form settings' / 'add item step in payment form setup'
  origin?: string;
  // msid
  msid?: GUID;
};
export type formBuilderSubmissionSettingsPanelOpenedParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderCategoryPickerInAddPanelParams = {
  // ADI  /  Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // vsi
  vsi?: GUID;
  // 'Contact' / 'Payment Form' / 'Job Application' / etc...
  category?: string;
  // msid
  msid?: GUID;
};
export type formBuilderPaymentFormClickOnGoToSetupParams = {
  // ADI  /  Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form_comp_id
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'Contact' / 'Payment Form' / 'Job Application' / etc...
  category?: string;
  // msid
  msid?: GUID;
};
export type formBuilderTemplatePickerChooseTemplateStartToInstallParams = {
  // ADI/Editor
  builderOrigin?: string;
  // appVersion
  appVersion?: string;
  // deprecated
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // app market / add panel /ADI/ copy form/..
  source_name?: string;
  // template selected
  template?: string;
  // msid
  msid?: GUID;
};
export type removePhoneNumberPhoneRemovalAskedParams = {
  // hashed phone
  hashed_phone?: string;
  // view_type
  view_type?: string;
  // platform
  platform?: string;
};
export type formBuilderFormSettingsNotificationsHelpClickParams = {
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsUpdateValueClickParams = {
  // deprecated
  name?: string;
  // ADI / Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // 'save','cancel'
  selection?: string;
  // 'notifications', 'submissions'
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListContactLabelsClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListContactLabelsUpdateValueParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsClickParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // panel opening origin
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsUpdateValueParams = {
  // field name
  field?: string;
  // ADI/ Editor
  builderOrigin?: string;
  // visitor id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // the place where it was clicked
  origin?: string;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsSaveParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderHoverOnUpgradeAscendParams = {
  // ADI  /  Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // upgrade button / ascend title
  button_name?: string;
  // BM tab name
  tabName?: string;
  // plan name or ‘free’
  current_ascend_plan?: string;
  // vsi
  vsi?: GUID;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsCancelParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type formBuilderFormSettingsContactListChooseSavedFieldsLearnMoreParams = {
  // ADI/ Editor
  builderOrigin?: string;
  // visitor_id
  visitor_id?: GUID;
  // form unique id (per msid)
  form_comp_id?: string;
  // vsi
  vsi?: GUID;
  // template name
  template?: string;
  // msid
  msid?: GUID;
};
export type devCenterWebhookSubscribedParams = {
  // webhook slug
  webhookSlug?: string;
  // app id
  appId?: GUID;
};
export type dcWebhookUpdatedParams = {
  // webhook slug
  webhookSlug?: string;
  // Type of update: Edit callback
  action_name?: string;
  // app id
  appId?: GUID;
};
export type devCenterComponentTranslationAddingTranslatableComponentParams = {
  // How many translatable keys this component had before the current update? (when adding a new component- will get null)
  num_potential_keys_before?: number;
  // How many translatable keys this component has after the current update?
  num_potential_keys_after?: number;
  // How many translated keys this component had before the current update? (when adding a new component- will get null)
  num_of_translated_keys_before?: number;
  // How many translated keys this component has after the current update?
  num_of_translated_keys_after?: number;
  // component version
  component_version?: number;
  // app id
  app_id?: string;
  // component id (new or existing component)
  component_id?: string;
  // component type
  component_type?: string;
};
export type devCenterComponentTranslationAddLanguageToAnAppParams = {
  // the app's components types (array with comma as a separator)
  components_types?: string;
  // the language the user added
  language?: string;
  // the app's components id (array with comma as a separator)
  components_id?: string;
  // app id
  app_id?: string;
  // How many components this app has?
  num_components?: number;
};
export type devCenterComponentTranslationAddTranslationToAComponentParams = {
  // How many translated keys this component have after the current update?
  num_translated_keys_after?: number;
  // How many translatable keys this component has?
  num_potential_keys?: number;
  // the language the user adds
  language?: string;
  // component version
  component_version?: number;
  // How many translations keys the users try to add to this component in the current action?
  num_translations_added?: number;
  // app id
  app_id?: string;
  // component id (new or existing component)
  component_id?: string;
  // How many translated keys this component had before the current update? (when adding a new component- will get null)
  num_translated_keys_before?: number;
};
export type dummyNameParams = {
};
export type dcAppVersionsVersionAddedParams = {
  // Number of permission in this app version
  num_permission?: number;
  // Json field {Name of permission 1, Name of permission 2}
  permission_data?: string;
  // Json field {component_id: Version}
  components_data?: string;
  // version number
  version?: string;
  // true is the app is private (blocks/enterprise), false if not
  is_private_app?: boolean;
  // Number of dependencies in this app version
  num_dependencies?: number;
  // app id
  app_id?: string;
  // Json field {Name of dependency, dependency type}
  dependencies_data?: string;
  // Number of components in this app version
  num_components?: number;
};
export type dcAppVersionsStatusUpdatedParams = {
  // version number before status was changed
  previous_version?: string;
  // New status
  version_new_status?: string;
  // version number after the status was changed
  version?: string;
  // prev status
  version_prev_status?: string;
  // app id
  app_id?: string;
};
export type dummyNameSrc96Evid11900Params = {
};
export type dummyNameSrc96Evid12200Params = {
};
