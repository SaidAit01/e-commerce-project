// src/tips-settings-v1-tip-settings-tip-settings.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/tips-settings-v1-tip-settings-tip-settings.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixTipsSettingsV1TipSettingsServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/tip-settings",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/tip-settings",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/tip-settings",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/tip-settings",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tip-settings";
function queryTipSettings(payload) {
  function __queryTipSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "POST",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.QueryTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __queryTipSettings;
}
function updateTipSettings(payload) {
  function __updateTipSettings({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipSettings.createdDate" },
          { path: "tipSettings.updatedDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "tipSettings.presets.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "PATCH",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.UpdateTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __updateTipSettings;
}
function createTipSettings(payload) {
  function __createTipSettings({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipSettings.createdDate" },
          { path: "tipSettings.updatedDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "tipSettings.presets.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "POST",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.CreateTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __createTipSettings;
}
function createDefaultTipSettings(payload) {
  function __createDefaultTipSettings({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipSettings.createdDate" },
          { path: "tipSettings.updatedDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "tipSettings.presets.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "POST",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.CreateDefaultTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings/create-default",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __createDefaultTipSettings;
}
function deleteTipSettings(payload) {
  function __deleteTipSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "DELETE",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.DeleteTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings/{tipSettingsId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteTipSettings;
}

// src/tips-settings-v1-tip-settings-tip-settings.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var TipType = /* @__PURE__ */ ((TipType2) => {
  TipType2["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
  TipType2["PERCENTAGE"] = "PERCENTAGE";
  TipType2["AMOUNT"] = "AMOUNT";
  return TipType2;
})(TipType || {});
var StaffDistributionMethod = /* @__PURE__ */ ((StaffDistributionMethod2) => {
  StaffDistributionMethod2["UNKNOWN_SPLIT_METHOD"] = "UNKNOWN_SPLIT_METHOD";
  StaffDistributionMethod2["EQUAL"] = "EQUAL";
  StaffDistributionMethod2["PROPORTIONAL"] = "PROPORTIONAL";
  return StaffDistributionMethod2;
})(StaffDistributionMethod || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
function queryTipSettings2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryTipSettings(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.tipSettings,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function updateTipSettings2(tipSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    tipSettings
  });
  const reqOpts = updateTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.tipSettings;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createTipSettings2(tipSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    tipSettings
  });
  const reqOpts = createTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.tipSettings;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createDefaultTipSettings2(tipSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    tipSettings
  });
  const reqOpts = createDefaultTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteTipSettings2(tipSettingsId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    tipSettingsId
  });
  const reqOpts = deleteTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettingsId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettingsId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/tips-settings-v1-tip-settings-tip-settings.public.ts
function queryTipSettings3(httpClient) {
  return () => queryTipSettings2(
    // @ts-ignore
    { httpClient }
  );
}
function updateTipSettings3(httpClient) {
  return (tipSettings) => updateTipSettings2(
    tipSettings,
    // @ts-ignore
    { httpClient }
  );
}
function createTipSettings3(httpClient) {
  return (tipSettings) => createTipSettings2(
    tipSettings,
    // @ts-ignore
    { httpClient }
  );
}
function createDefaultTipSettings3(httpClient) {
  return (tipSettings) => createDefaultTipSettings2(
    tipSettings,
    // @ts-ignore
    { httpClient }
  );
}
function deleteTipSettings3(httpClient) {
  return (tipSettingsId) => deleteTipSettings2(
    tipSettingsId,
    // @ts-ignore
    { httpClient }
  );
}

// src/tips-settings-v1-tip-settings-tip-settings.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var queryTipSettings4 = /* @__PURE__ */ createRESTModule(queryTipSettings3);
var updateTipSettings4 = /* @__PURE__ */ createRESTModule(updateTipSettings3);
var createTipSettings4 = /* @__PURE__ */ createRESTModule(createTipSettings3);
var createDefaultTipSettings4 = /* @__PURE__ */ createRESTModule(createDefaultTipSettings3);
var deleteTipSettings4 = /* @__PURE__ */ createRESTModule(deleteTipSettings3);
export {
  SortOrder,
  StaffDistributionMethod,
  TipType,
  WebhookIdentityType,
  createDefaultTipSettings4 as createDefaultTipSettings,
  createTipSettings4 as createTipSettings,
  deleteTipSettings4 as deleteTipSettings,
  queryTipSettings4 as queryTipSettings,
  updateTipSettings4 as updateTipSettings
};
//# sourceMappingURL=index.mjs.map