import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { TipSettingsQueryBuilder, TipSettings, UpdateTipSettingsApplicationErrors, CreateTipSettingsApplicationErrors, CreateDefaultTipSettingsResponse, CreateDefaultTipSettingsApplicationErrors, DeleteTipSettingsApplicationErrors } from './index.typings.js';
export { ActionEvent, CreateDefaultTipSettingsRequest, CreateTipSettingsRequest, CreateTipSettingsResponse, CursorPaging, Cursors, DeleteTipSettingsRequest, DeleteTipSettingsResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ExtendedFields, IdentificationData, IdentificationDataIdOneOf, MessageEnvelope, Paging, PagingMetadataV2, Preset, QueryTipSettingsRequest, QueryTipSettingsResponse, QueryV2, QueryV2PagingMethodOneOf, RestoreInfo, SortOrder, SortOrderWithLiterals, Sorting, StaffDistributionMethod, StaffDistributionMethodWithLiterals, TipSettingsIdentifierOneOf, TipSettingsQueryResult, TipType, TipTypeWithLiterals, UpdateTipSettingsRequest, UpdateTipSettingsResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function queryTipSettings$1(httpClient: HttpClient): QueryTipSettingsSignature;
interface QueryTipSettingsSignature {
    /**
     * Creates a query to retrieve a list of tip settings.
     *
     * The `queryTipSettings()` function builds a query to retrieve a list of tip settings and returns a `TipSettingsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tip-settings/tip-settings-query-builder/find) function.
     *
     * You can refine the query by chaining `TipSettingsQueryBuilder` functions onto the query. `TipSettingsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipSettings()` returns.
     *
     * `queryTipSettings()` runs with the following `TipSettingsQueryBuilder` default that you can override:
     *
     * + `limit` is `50`.
     * + Sorted by `id` in ascending order.
     *
     * The functions that are chained to `queryTipSettings()` are applied in the order they are called. For example, if you apply `ascending("tipType")` and then `ascending("locationId")`, the results are sorted first by the `"tipType"`, and then, if there are multiple results with the same `"tipType"`, the items are sorted by `"locationId"`.
     *
     * The following `TipSettingsQueryBuilder` functions are supported for the `queryTipSettings()` function. For a full description of the tip settings object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tip-settings/tip-settings-query-result/items) property in `TipSettingsQueryResult`.
     */
    (): TipSettingsQueryBuilder;
}
declare function updateTipSettings$1(httpClient: HttpClient): UpdateTipSettingsSignature;
interface UpdateTipSettingsSignature {
    /**
     * Updates a `tipSettings` object.
     *
     *
     * You can't update the `default` field.
     * @param - Tip settings to update.
     * @param - Options to use when updating tip settings.
     * @returns Updated tip settings.
     */
    (tipSettings: TipSettings): Promise<NonNullablePaths<TipSettings, `tipType` | `presets` | `staffDistributionMethod`, 2> & {
        __applicationErrorsType?: UpdateTipSettingsApplicationErrors;
    }>;
}
declare function createTipSettings$1(httpClient: HttpClient): CreateTipSettingsSignature;
interface CreateTipSettingsSignature {
    /**
     * Creates a `tipSettings` object.
     *
     *
     * You can't create a `tipSettings` object with `{"default": true}`.
     * @param - Tip settings to create.
     * @returns Created tip settings.
     */
    (tipSettings: TipSettings): Promise<NonNullablePaths<TipSettings, `tipType` | `presets` | `staffDistributionMethod`, 2> & {
        __applicationErrorsType?: CreateTipSettingsApplicationErrors;
    }>;
}
declare function createDefaultTipSettings$1(httpClient: HttpClient): CreateDefaultTipSettingsSignature;
interface CreateDefaultTipSettingsSignature {
    /**
     * Creates a default `tipSettings` object.
     *
     *
     * The call fails if there is already an existing default `tipSettings` object.
     * @param - Default tip settings to create.
     */
    (tipSettings: TipSettings): Promise<NonNullablePaths<CreateDefaultTipSettingsResponse, `tipSettings.tipType` | `tipSettings.presets` | `tipSettings.staffDistributionMethod`, 3> & {
        __applicationErrorsType?: CreateDefaultTipSettingsApplicationErrors;
    }>;
}
declare function deleteTipSettings$1(httpClient: HttpClient): DeleteTipSettingsSignature;
interface DeleteTipSettingsSignature {
    /**
     * Deletes a `tipSettings` object.
     *
     *
     * You can't delete the default `tipSettings` object.
     * @param - ID of the `tipSettings` object to delete.
     */
    (tipSettingsId: string): Promise<void & {
        __applicationErrorsType?: DeleteTipSettingsApplicationErrors;
    }>;
}

declare const queryTipSettings: MaybeContext<BuildRESTFunction<typeof queryTipSettings$1> & typeof queryTipSettings$1>;
declare const updateTipSettings: MaybeContext<BuildRESTFunction<typeof updateTipSettings$1> & typeof updateTipSettings$1>;
declare const createTipSettings: MaybeContext<BuildRESTFunction<typeof createTipSettings$1> & typeof createTipSettings$1>;
declare const createDefaultTipSettings: MaybeContext<BuildRESTFunction<typeof createDefaultTipSettings$1> & typeof createDefaultTipSettings$1>;
declare const deleteTipSettings: MaybeContext<BuildRESTFunction<typeof deleteTipSettings$1> & typeof deleteTipSettings$1>;

export { CreateDefaultTipSettingsApplicationErrors, CreateDefaultTipSettingsResponse, CreateTipSettingsApplicationErrors, DeleteTipSettingsApplicationErrors, TipSettings, TipSettingsQueryBuilder, UpdateTipSettingsApplicationErrors, createDefaultTipSettings, createTipSettings, deleteTipSettings, queryTipSettings, updateTipSettings };
