"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  SortOrder: () => SortOrder,
  StaffDistributionMethod: () => StaffDistributionMethod,
  TipType: () => TipType,
  WebhookIdentityType: () => WebhookIdentityType,
  createDefaultTipSettings: () => createDefaultTipSettings4,
  createTipSettings: () => createTipSettings4,
  deleteTipSettings: () => deleteTipSettings4,
  queryTipSettings: () => queryTipSettings4,
  updateTipSettings: () => updateTipSettings4
});
module.exports = __toCommonJS(index_exports);

// src/tips-settings-v1-tip-settings-tip-settings.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/tips-settings-v1-tip-settings-tip-settings.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixTipsSettingsV1TipSettingsServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/tip-settings",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/tip-settings",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/tip-settings",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/tip-settings",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tip-settings";
function queryTipSettings(payload) {
  function __queryTipSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "POST",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.QueryTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __queryTipSettings;
}
function updateTipSettings(payload) {
  function __updateTipSettings({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipSettings.createdDate" },
          { path: "tipSettings.updatedDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "tipSettings.presets.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "PATCH",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.UpdateTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __updateTipSettings;
}
function createTipSettings(payload) {
  function __createTipSettings({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipSettings.createdDate" },
          { path: "tipSettings.updatedDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "tipSettings.presets.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "POST",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.CreateTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __createTipSettings;
}
function createDefaultTipSettings(payload) {
  function __createDefaultTipSettings({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "tipSettings.createdDate" },
          { path: "tipSettings.updatedDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "tipSettings.presets.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "POST",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.CreateDefaultTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings/create-default",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tipSettings.createdDate" },
            { path: "tipSettings.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "tipSettings.presets.value" }]
        }
      ])
    };
    return metadata;
  }
  return __createDefaultTipSettings;
}
function deleteTipSettings(payload) {
  function __deleteTipSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.tips.settings.v1.tip_settings",
      method: "DELETE",
      methodFqn: "wix.tips.settings.v1.TipSettingsService.DeleteTipSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixTipsSettingsV1TipSettingsServiceUrl({
        protoPath: "/v1/tip-settings/{tipSettingsId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteTipSettings;
}

// src/tips-settings-v1-tip-settings-tip-settings.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var TipType = /* @__PURE__ */ ((TipType2) => {
  TipType2["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
  TipType2["PERCENTAGE"] = "PERCENTAGE";
  TipType2["AMOUNT"] = "AMOUNT";
  return TipType2;
})(TipType || {});
var StaffDistributionMethod = /* @__PURE__ */ ((StaffDistributionMethod2) => {
  StaffDistributionMethod2["UNKNOWN_SPLIT_METHOD"] = "UNKNOWN_SPLIT_METHOD";
  StaffDistributionMethod2["EQUAL"] = "EQUAL";
  StaffDistributionMethod2["PROPORTIONAL"] = "PROPORTIONAL";
  return StaffDistributionMethod2;
})(StaffDistributionMethod || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
function queryTipSettings2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryTipSettings(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.tipSettings,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function updateTipSettings2(tipSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    tipSettings
  });
  const reqOpts = updateTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.tipSettings;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createTipSettings2(tipSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    tipSettings
  });
  const reqOpts = createTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.tipSettings;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createDefaultTipSettings2(tipSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    tipSettings
  });
  const reqOpts = createDefaultTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteTipSettings2(tipSettingsId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    tipSettingsId
  });
  const reqOpts = deleteTipSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tipSettingsId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tipSettingsId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/tips-settings-v1-tip-settings-tip-settings.public.ts
function queryTipSettings3(httpClient) {
  return () => queryTipSettings2(
    // @ts-ignore
    { httpClient }
  );
}
function updateTipSettings3(httpClient) {
  return (tipSettings) => updateTipSettings2(
    tipSettings,
    // @ts-ignore
    { httpClient }
  );
}
function createTipSettings3(httpClient) {
  return (tipSettings) => createTipSettings2(
    tipSettings,
    // @ts-ignore
    { httpClient }
  );
}
function createDefaultTipSettings3(httpClient) {
  return (tipSettings) => createDefaultTipSettings2(
    tipSettings,
    // @ts-ignore
    { httpClient }
  );
}
function deleteTipSettings3(httpClient) {
  return (tipSettingsId) => deleteTipSettings2(
    tipSettingsId,
    // @ts-ignore
    { httpClient }
  );
}

// src/tips-settings-v1-tip-settings-tip-settings.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var queryTipSettings4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryTipSettings3);
var updateTipSettings4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateTipSettings3);
var createTipSettings4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createTipSettings3);
var createDefaultTipSettings4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createDefaultTipSettings3);
var deleteTipSettings4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteTipSettings3);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SortOrder,
  StaffDistributionMethod,
  TipType,
  WebhookIdentityType,
  createDefaultTipSettings,
  createTipSettings,
  deleteTipSettings,
  queryTipSettings,
  updateTipSettings
});
//# sourceMappingURL=index.js.map