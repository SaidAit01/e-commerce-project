// src/ecom-subscription-contracts-v1-subscription-contract-subscription-contracts.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-subscription-contracts-v1-subscription-contract-subscription-contracts.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixEcomSubscriptionContractsV1SubscriptionContractsUrl(opts) {
  const domainToMappings = {};
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_subscription-contracts";
function getSubscriptionContract(payload) {
  function __getSubscriptionContract({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.subscription_contracts.v1.subscription_contract",
      method: "GET",
      methodFqn: "wix.ecom.subscription_contracts.v1.SubscriptionContracts.GetSubscriptionContract",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomSubscriptionContractsV1SubscriptionContractsUrl({
        protoPath: "/v1/subscription-contracts/{subscriptionContractId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "subscriptionContract.createdDate" },
            { path: "subscriptionContract.updatedDate" },
            { path: "subscriptionContract.subscriptionSettings.startDate" },
            {
              path: "subscriptionContract.lineItems.image.urlExpirationDate"
            },
            {
              path: "subscriptionContract.lineItems.digitalFile.expirationDate"
            },
            {
              path: "subscriptionContract.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "subscriptionContract.lineItems.image.focalPoint.x" },
            { path: "subscriptionContract.lineItems.image.focalPoint.y" },
            {
              path: "subscriptionContract.lineItems.physicalProperties.weight"
            },
            {
              path: "subscriptionContract.billingInfo.address.geocode.latitude"
            },
            {
              path: "subscriptionContract.billingInfo.address.geocode.longitude"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "subscriptionContract.recipientInfo.address.geocode.latitude"
            },
            {
              path: "subscriptionContract.recipientInfo.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getSubscriptionContract;
}
function querySubscriptionContracts(payload) {
  function __querySubscriptionContracts({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.subscription_contracts.v1.subscription_contract",
      method: "GET",
      methodFqn: "wix.ecom.subscription_contracts.v1.SubscriptionContracts.QuerySubscriptionContracts",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomSubscriptionContractsV1SubscriptionContractsUrl({
        protoPath: "/v1/subscription-contracts/query",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload, true),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "subscriptionContracts.createdDate" },
            { path: "subscriptionContracts.updatedDate" },
            { path: "subscriptionContracts.subscriptionSettings.startDate" },
            {
              path: "subscriptionContracts.lineItems.image.urlExpirationDate"
            },
            {
              path: "subscriptionContracts.lineItems.digitalFile.expirationDate"
            },
            {
              path: "subscriptionContracts.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "subscriptionContracts.lineItems.image.focalPoint.x" },
            { path: "subscriptionContracts.lineItems.image.focalPoint.y" },
            {
              path: "subscriptionContracts.lineItems.physicalProperties.weight"
            },
            {
              path: "subscriptionContracts.billingInfo.address.geocode.latitude"
            },
            {
              path: "subscriptionContracts.billingInfo.address.geocode.longitude"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "subscriptionContracts.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "subscriptionContracts.recipientInfo.address.geocode.latitude"
            },
            {
              path: "subscriptionContracts.recipientInfo.address.geocode.longitude"
            }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixEcomSubscriptionContractsV1SubscriptionContractsUrl({
            protoPath: "/v1/subscription-contracts/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __querySubscriptionContracts;
}

// src/ecom-subscription-contracts-v1-subscription-contract-subscription-contracts.universal.ts
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var V2SubscriptionFrequency = /* @__PURE__ */ ((V2SubscriptionFrequency2) => {
  V2SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  V2SubscriptionFrequency2["DAY"] = "DAY";
  V2SubscriptionFrequency2["WEEK"] = "WEEK";
  V2SubscriptionFrequency2["MONTH"] = "MONTH";
  V2SubscriptionFrequency2["YEAR"] = "YEAR";
  return V2SubscriptionFrequency2;
})(V2SubscriptionFrequency || {});
var AdjustmentType = /* @__PURE__ */ ((AdjustmentType2) => {
  AdjustmentType2["UNKNOWN_ADJUSTMENT_TYPE"] = "UNKNOWN_ADJUSTMENT_TYPE";
  AdjustmentType2["EXTRA_CHARGE"] = "EXTRA_CHARGE";
  AdjustmentType2["CREDIT"] = "CREDIT";
  return AdjustmentType2;
})(AdjustmentType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var DiscountReason = /* @__PURE__ */ ((DiscountReason2) => {
  DiscountReason2["UNSPECIFIED"] = "UNSPECIFIED";
  DiscountReason2["EXCHANGED_ITEMS"] = "EXCHANGED_ITEMS";
  DiscountReason2["BILLING_ADJUSTMENT"] = "BILLING_ADJUSTMENT";
  return DiscountReason2;
})(DiscountReason || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getSubscriptionContract2(subscriptionContractId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    subscriptionContractId
  });
  const reqOpts = getSubscriptionContract(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "subscriptionContract.lineItems.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "subscriptionContract.billingInfo.address" },
            {
              path: "subscriptionContract.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "subscriptionContract.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "subscriptionContract.recipientInfo.address" }
          ]
        }
      ])
    )?.subscriptionContract;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { subscriptionContractId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["subscriptionContractId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function querySubscriptionContracts2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = querySubscriptionContracts(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [
          {
            transformFn: transformRESTImageToSDKImage,
            paths: [{ path: "subscriptionContracts.lineItems.image" }]
          },
          {
            transformFn: transformRESTAddressToSDKAddress,
            paths: [
              { path: "subscriptionContracts.billingInfo.address" },
              {
                path: "subscriptionContracts.shippingInfo.logistics.shippingDestination.address"
              },
              {
                path: "subscriptionContracts.shippingInfo.logistics.pickupDetails.address"
              },
              { path: "subscriptionContracts.recipientInfo.address" }
            ]
          }
        ])
      );
      return {
        items: transformedData?.subscriptionContracts,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
export {
  AdjustmentType,
  ChannelType,
  DescriptionLineType,
  DiscountReason,
  DiscountType,
  ItemTypeItemType,
  JurisdictionType,
  PaymentOptionType,
  PickupMethod,
  SortOrder,
  SubscriptionFrequency,
  TaxableAddressType,
  V2SubscriptionFrequency,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  getSubscriptionContract2 as getSubscriptionContract,
  querySubscriptionContracts2 as querySubscriptionContracts
};
//# sourceMappingURL=index.typings.mjs.map