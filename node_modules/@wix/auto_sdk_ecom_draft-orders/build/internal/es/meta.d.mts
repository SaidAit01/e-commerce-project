import { CreateDraftOrderRequest as CreateDraftOrderRequest$1, CreateDraftOrderResponse as CreateDraftOrderResponse$1, CreateEmptyDraftOrderRequest as CreateEmptyDraftOrderRequest$1, CreateEmptyDraftOrderResponse as CreateEmptyDraftOrderResponse$1, AddLineItemsToDraftOrderRequest as AddLineItemsToDraftOrderRequest$1, AddLineItemsToDraftOrderResponse as AddLineItemsToDraftOrderResponse$1, UpdateLineItemsRequest as UpdateLineItemsRequest$1, UpdateLineItemsResponse as UpdateLineItemsResponse$1, SetDiscountsRequest as SetDiscountsRequest$1, SetDiscountsResponse as SetDiscountsResponse$1, CreateCustomDiscountsRequest as CreateCustomDiscountsRequest$1, CreateCustomDiscountsResponse as CreateCustomDiscountsResponse$1, DeleteCustomDiscountsRequest as DeleteCustomDiscountsRequest$1, DeleteCustomDiscountsResponse as DeleteCustomDiscountsResponse$1, SetAdditionalFeesRequest as SetAdditionalFeesRequest$1, SetAdditionalFeesResponse as SetAdditionalFeesResponse$1, CreateCustomAdditionalFeesRequest as CreateCustomAdditionalFeesRequest$1, CreateCustomAdditionalFeesResponse as CreateCustomAdditionalFeesResponse$1, DeleteCustomAdditionalFeesRequest as DeleteCustomAdditionalFeesRequest$1, DeleteCustomAdditionalFeesResponse as DeleteCustomAdditionalFeesResponse$1, SetShippingInfoRequest as SetShippingInfoRequest$1, SetShippingInfoResponse as SetShippingInfoResponse$1, SetBuyerInfoRequest as SetBuyerInfoRequest$1, SetBuyerInfoResponse as SetBuyerInfoResponse$1, SetRecipientInfoRequest as SetRecipientInfoRequest$1, SetRecipientInfoResponse as SetRecipientInfoResponse$1, SetBillingInfoRequest as SetBillingInfoRequest$1, SetBillingInfoResponse as SetBillingInfoResponse$1, GetDraftOrderRequest as GetDraftOrderRequest$1, GetDraftOrderResponse as GetDraftOrderResponse$1, GetOrderDraftabilityStatusRequest as GetOrderDraftabilityStatusRequest$1, GetOrderDraftabilityStatusResponse as GetOrderDraftabilityStatusResponse$1, CommitDraftOrderRequest as CommitDraftOrderRequest$1, CommitDraftOrderResponse as CommitDraftOrderResponse$1, CreateOrderFromDraftRequest as CreateOrderFromDraftRequest$1, CreateOrderFromDraftResponse as CreateOrderFromDraftResponse$1, DeleteDraftOrderRequest as DeleteDraftOrderRequest$1, DeleteDraftOrderResponse as DeleteDraftOrderResponse$1, QueryDraftOrdersRequest as QueryDraftOrdersRequest$1, QueryDraftOrdersResponse as QueryDraftOrdersResponse$1, UpdateExtendedFieldsRequest as UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse as UpdateExtendedFieldsResponse$1, SetTaxExemptionRequest as SetTaxExemptionRequest$1, SetTaxExemptionResponse as SetTaxExemptionResponse$1, SetBusinessLocationRequest as SetBusinessLocationRequest$1, SetBusinessLocationResponse as SetBusinessLocationResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

/**
 * Draft Order main entity.
 * A temporary version of an order, allowing modifications before finalization.
 */
interface DraftOrder {
    /**
     * Draft order ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * ID of the order this draft commits to.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Line items.
     * Includes details about changes when relevant.
     * @minSize 1
     * @maxSize 300
     */
    lineItems?: ItemDetails[];
    /**
     * Shipping info.
     * Includes details about changes when relevant.
     */
    shippingInfo?: ShippingDetails;
    /**
     * Buyer information.
     * @deprecated Buyer information.
     * @replacedBy buyer_details
     * @targetRemovalDate 2024-08-30
     */
    buyerInfo?: BuyerInfo;
    /**
     * Billing address and contact details.
     * @deprecated Billing address and contact details.
     * @replacedBy billing_details
     * @targetRemovalDate 2024-08-30
     */
    billingInfo?: AddressWithContact;
    /**
     * Additional fees.
     *
     * Includes details about the source, and whether the additional fee is applied to the order.
     * @maxSize 100
     */
    additionalFees?: AdditionalFeeDetails[];
    /**
     * Discounts.
     *
     * Includes details about the source, and whether the discount is applied to the order.
     * @maxSize 320
     */
    discounts?: DiscountDetails[];
    /**
     * Date and time the draft order was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the draft order was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Identity of the draft order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Draft order status.
     * @readonly
     */
    status?: EditingStatusWithLiterals;
    /** Weight measurement unit. Defaults to the site's weight unit. */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * Currency used for pricing.
     * @format CURRENCY
     */
    currency?: string | null;
    /**
     * Price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @readonly
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Side effects to perform on commit. */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Member ID (if order created by a member).
     * @format GUID
     */
    memberId?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: RecipientInfoDetails;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /**
     * Custom field data for the draft order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Buyer information.
     *
     * Includes details about changes when relevant.
     */
    buyerDetails?: BuyerDetails;
    /**
     * Billing address and contact details.
     * Includes details about changes when relevant.
     */
    billingDetails?: BillingDetails;
    /**
     * Order business location.
     *
     * Includes details about changes when relevant.
     */
    businessLocationDetails?: BusinessLocationDetails;
}
interface ItemDetails extends ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
    /** Line item details after applied changes. */
    lineItem?: OrderLineItem;
}
/** @oneof */
interface ItemDetailsChangeTypeOneOf {
    /** Whether the line item was added as part of the draft. */
    added?: boolean;
    /** Line item fields before the change. */
    changedDetails?: ItemChangedDetails;
    /** Whether the line item was removed as part of the draft. */
    removed?: boolean;
}
interface Price {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
interface PriceDescription {
    /**
     * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 100
     */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 100
     */
    translated?: string | null;
}
interface OrderLineItem {
    /**
     * Line item ID.
     * @immutable
     */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /**
     * Line item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     * @format GUID
     */
    fulfillerId?: string | null;
    /**
     * Number of items that were refunded.
     * @max 100000
     */
    refundQuantity?: number | null;
    /**
     * Number of items restocked.
     * @max 100000
     */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
    /** Address used for tax calculation. */
    taxableAddress?: TaxableAddress;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 10
     */
    modifierGroups?: ModifierGroup[];
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /**
     * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 100
     */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 200
     */
    translated?: string | null;
}
interface PlainTextValue {
    /**
     * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 600
     */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 600
     */
    translated?: string | null;
}
interface Color {
    /**
     * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 500
     */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 500
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** @enumType */
type ItemTypeItemTypeWithLiterals = ItemTypeItemType | 'UNRECOGNISED' | 'PHYSICAL' | 'DIGITAL' | 'GIFT_CARD' | 'SERVICE';
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE",
    /**
     * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.
     * @documentationMaturity preview
     */
    MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"
}
/** @enumType */
type PaymentOptionTypeWithLiterals = PaymentOptionType | 'FULL_PAYMENT_ONLINE' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP' | 'DEPOSIT_ONLINE' | 'MEMBERSHIP_OFFLINE' | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';
interface ItemTaxFullDetails {
    /** Taxable amount of this line item. */
    taxableAmount?: Price;
    /**
     * Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`.
     * @decimalValue options { gte:0, maxScale:6 }
     */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price;
}
interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price;
    /**
     * Tax rate %, as a decimal point.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /**
     * Tax information for a line item.
     * @maxSize 7
     */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
interface LineItemTaxBreakdown {
    /**
     * Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec".
     * @maxLength 200
     */
    jurisdiction?: string | null;
    /**
     * Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price;
    /**
     * The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc.
     * @maxLength 200
     */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     * @maxLength 200
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionTypeWithLiterals;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
/** @enumType */
type JurisdictionTypeWithLiterals = JurisdictionType | 'UNDEFINED' | 'COUNTRY' | 'STATE' | 'COUNTY' | 'CITY' | 'SPECIAL';
interface DigitalFile {
    /**
     * ID of the secure file in media.
     * @minLength 1
     * @maxLength 100
     */
    fileId?: string;
    /**
     * Link will exist after the digital links have been generated on the order.
     * @format WEB_URL
     * @minLength 1
     * @maxLength 2000
     */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
interface SubscriptionInfo {
    /**
     * Subscription ID.
     * @format GUID
     */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /**
     * Subscription option title. For example, `"Monthly coffee Subscription"`.
     * @maxLength 150
     * @deprecated Subscription option title. For example, `"Monthly coffee Subscription"`.
     * @replacedBy title
     * @targetRemovalDate 2025-10-01
     */
    subscriptionOptionTitle?: string;
    /**
     * Subscription option description. For example, `"1kg of selected coffee, once a month"`.
     * @maxLength 500
     * @deprecated Subscription option description. For example, `"1kg of selected coffee, once a month"`.
     * @replacedBy description
     * @targetRemovalDate 2025-10-01
     */
    subscriptionOptionDescription?: string | null;
    /**
     * Subscription detailed information.
     * @immutable
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Description of the charges that will be applied for subscription.
     * @maxLength 1000
     */
    chargesDescription?: string | null;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * Interval of recurring payment.
     * @min 1
     * @max 3650
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.
     * @min 1
     */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription. */
    enableCustomerCancellation?: boolean;
    /** Period until first cycle starts. If None => no free trial */
    freeTrialPeriod?: FreeTrialPeriod;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface FreeTrialPeriod {
    /** Frequency of period. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * interval of period
     * @min 1
     * @max 3650
     */
    interval?: number;
}
interface LocationAndQuantity {
    /**
     * Location id in the associated owner app.
     * @format GUID
     */
    id?: string;
    /**
     * Location owner app, if not provided then the site business info locations will be used.
     * @format GUID
     * @deprecated Location owner app, if not provided then the site business info locations will be used.
     * @targetRemovalDate 2025-03-01
     */
    appId?: string | null;
    /**
     * Quantity for specific location.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Location name.
     * @maxLength 500
     * @readonly
     */
    name?: string | null;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type TaxableAddressTypeWithLiterals = TaxableAddressType | 'UNKNOWN_TAXABLE_ADDRESS' | 'BUSINESS' | 'BILLING' | 'SHIPPING';
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 10
     */
    modifiers?: ItemModifier[];
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /** The price of the modifier. */
    price?: Price;
}
interface ItemChangedDetails {
    /**
     * Line item quantity before change.
     * @min 1
     * @max 1000000
     */
    quantityBeforeChange?: number | null;
    /** Line item price before change. */
    priceBeforeChange?: Price;
    /** Line item price description before change. */
    priceDescriptionBeforeChange?: PriceDescription;
}
interface ShippingDetails extends ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
    /** Selected Shipping details. */
    shippingInfo?: V1ShippingInformation;
}
/** @oneof */
interface ShippingDetailsChangeTypeOneOf {
    /** Whether shipping info was added as part of the draft. */
    added?: boolean;
    /** Shipping info before the change. */
    changedDetails?: ShippingChangedDetails;
    /** Whether shipping info was removed as part of the draft. */
    removed?: boolean;
}
interface V1ShippingInformation {
    /**
     * App Def Id of external provider which was a source of shipping info
     * @minLength 1
     * @maxLength 100
     */
    carrierId?: string | null;
    /**
     * Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"`.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     * @maxLength 250
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: V1DeliveryLogistics;
    /** Shipping costs. */
    cost?: V1ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion;
}
interface V1DeliveryLogistics extends V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
    /**
     * Expected delivery time in free text. For example, `"3-5 business days"`.
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`.
     * @maxLength 1000
     */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: V1DeliveryTimeSlot;
}
/** @oneof */
interface V1DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: V1PickupDetails;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatTypeWithLiterals;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
/** @enumType */
type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';
interface V1PickupDetails {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupDetailsPickupMethodWithLiterals;
}
/** Physical address */
interface PickupAddress {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 1000
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 1000
     */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 1000
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 1000
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
declare enum PickupDetailsPickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
/** @enumType */
type PickupDetailsPickupMethodWithLiterals = PickupDetailsPickupMethod | 'UNKNOWN_METHOD' | 'STORE_PICKUP' | 'PICKUP_POINT';
interface V1DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
interface V1ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price;
}
interface ShippingRegion {
    /**
     * Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`.
     * @maxLength 100
     */
    name?: string | null;
}
interface ShippingChangedDetails {
    /** Shipping info before the change. */
    shippingInfoBeforeChange?: V1ShippingInformation;
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is not a member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * @format EMAIL
     */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is not a member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
}
interface AdditionalFeeDetails {
    /** Additional fee. */
    additionalFee?: AdditionalFee;
    /** Tax details related to the additional fee. */
    taxDetails?: TaxDetails;
    /**
     * Source of the additional fee.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This additional fee is part of the original order.
     * + `AUTOMATIC`: User added a catalog item which is configured to have an additional fee.
     * + `CUSTOM`: This additional fee was created by the Create Custom Additional Fees method.
     */
    source?: SourceTypeWithLiterals;
    /** Whether this additional fee is applied to the order. */
    applied?: boolean;
}
interface AdditionalFee {
    /**
     * Additional fee's unique code for future processing.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Name of additional fee.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /** Additional fee's price. */
    price?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * SPI implementer's `appId`.
     * @format GUID
     */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price;
    /**
     * Additional fee's id.
     * @format GUID
     * @immutable
     */
    id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
}
interface TaxDetails {
    /** Whether the additional fee is taxable. */
    taxable?: boolean;
    /**
     * Optional tax group ID to use when calculating tax for this additional fee.
     * @format GUID
     */
    taxGroupId?: string | null;
}
declare enum SourceType {
    /** Part of the original order. */
    ORIGINAL_ORDER = "ORIGINAL_ORDER",
    /** Added automatically, as the result of recalculation caused by changes in draft order. */
    AUTOMATIC = "AUTOMATIC",
    /** Added manually to draft order. */
    CUSTOM = "CUSTOM"
}
/** @enumType */
type SourceTypeWithLiterals = SourceType | 'ORIGINAL_ORDER' | 'AUTOMATIC' | 'CUSTOM';
interface DiscountDetails {
    /** Discount details. */
    discount?: AppliedDiscount;
    /**
     * Source of the discount.
     *
     * Supported values:
     * + `ORIGINAL_ORDER`: This discount is part of the original order.
     * + `CUSTOM`: This discount was created by the Create Custom Discounts method.
     */
    source?: SourceTypeWithLiterals;
    /** Whether this discount is applied to the order. */
    applied?: boolean;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: AppliedDiscountDiscountTypeWithLiterals;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @format GUID
     * @maxSize 1
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /**
     * Discount id.
     * @format GUID
     * @immutable
     */
    id?: string | null;
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
}
declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type AppliedDiscountDiscountTypeWithLiterals = AppliedDiscountDiscountType | 'GLOBAL' | 'SPECIFIC_ITEMS' | 'SHIPPING';
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price;
}
interface MerchantDiscount extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReasonWithLiterals;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
    /** Discount amount. */
    amount?: Price;
}
/** @oneof */
interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReasonWithLiterals;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
}
declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS",
    BILLING_ADJUSTMENT = "BILLING_ADJUSTMENT"
}
/** @enumType */
type DiscountReasonWithLiterals = DiscountReason | 'UNSPECIFIED' | 'EXCHANGED_ITEMS' | 'BILLING_ADJUSTMENT';
interface DiscountRule {
    /**
     * Discount rule ID
     * @format GUID
     */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: Price;
}
interface DiscountRuleName {
    /**
     * Original discount rule name (in site's default language).
     * @minLength 1
     * @maxLength 256
     */
    original?: string;
    /**
     * Translated discount rule name according to buyer language. Defaults to `original` when not provided.
     * @minLength 1
     * @maxLength 500
     */
    translated?: string | null;
}
interface LineItemDiscount {
    /**
     * ID of line item the discount applies to.
     * @format GUID
     */
    id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price;
}
interface CreatedBy extends CreatedByStringOneOf {
    /**
     * User ID. When the draft order was created by a Wix user.
     * @format GUID
     */
    userId?: string;
    /**
     * App ID. When the draft order was created by an app.
     * @format GUID
     */
    appId?: string;
}
/** @oneof */
interface CreatedByStringOneOf {
    /**
     * User ID. When the draft order was created by a Wix user.
     * @format GUID
     */
    userId?: string;
    /**
     * App ID. When the draft order was created by an app.
     * @format GUID
     */
    appId?: string;
}
declare enum EditingStatus {
    /** Draft order is being edited. */
    DRAFT = "DRAFT",
    /**
     * Draft order has been committed - No further modifications allowed.
     *
     * Draft orders with status 'COMMITTED' cannot be deleted.
     */
    COMMITTED = "COMMITTED"
}
/** @enumType */
type EditingStatusWithLiterals = EditingStatus | 'DRAFT' | 'COMMITTED';
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface PriceSummary {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price;
    /** Total tax on this order. */
    tax?: Price;
    /** Total calculated discount value. */
    discount?: Price;
    /** Order’s total price after discounts and tax. */
    total?: Price;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price;
}
interface TaxSummary {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price;
}
interface BalanceSummary {
    /**
     * Amount left to pay for the order to be considered paid.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @decimalValue options { }
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
/** Side-effects upon committing a draft order. */
interface DraftOrderCommitSettings {
    /**
     * Whether to send notifications to the buyer.
     *
     * Default: `true`
     */
    sendNotificationsToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
    /**
     * Whether to add activities to the order.
     *
     * Default: `true`
     */
    addActivitiesToOrder?: boolean | null;
    /**
     * Whether to send email notifications to custom fulfillers when there is a change in the shippable items they fulfill.
     *
     * Default: `true`
     */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /**
     * Line item IDs for which to perform an inventory change.
     * When not provided, inventory will not change.
     * @maxSize 300
     */
    updateInventory?: InventoryUpdate[];
}
interface InventoryUpdate {
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
}
interface RecipientInfoDetails extends RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
    /** Order recipient address and contact details. */
    recipientInfo?: AddressWithContact;
}
/** @oneof */
interface RecipientInfoDetailsChangeTypeOneOf {
    /** Indicates that recipient information was added during draft. */
    added?: boolean;
    /** Indicates that recipient information was changed. Contains recipient information before draft. */
    changedDetails?: RecipientInfoChangedDetails;
    /** Indicates that recipient information was removed during draft. */
    removed?: boolean;
}
interface RecipientInfoChangedDetails {
    /** Order recipient address and contact details before draft. */
    recipientInfoBeforeChange?: AddressWithContact;
}
interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price;
    /**
     * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
     * @maxSize 50
     */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
interface OrderTaxBreakdown {
    /**
     * The name of the tax against which this tax amount was calculated.
     * @maxLength 200
     */
    taxName?: string;
    /**
     * The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws.
     * @maxLength 200
     */
    taxType?: string;
    /**
     * The name of the jurisdiction in which this tax detail applies.
     * @maxLength 200
     */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionTypeWithLiterals;
    /**
     * The rate at which this tax detail was calculated.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price;
}
interface BuyerDetails extends BuyerDetailsChangeTypeOneOf {
    /** Indicates that buyer information was added during draft. */
    added?: boolean;
    /** Indicates that buyer information was changed. Contains billing information before draft. */
    changedDetails?: BuyerChangedDetails;
    /** Indicates that buyer information was removed during draft. */
    removed?: boolean;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
}
/** @oneof */
interface BuyerDetailsChangeTypeOneOf {
    /** Indicates that buyer information was added during draft. */
    added?: boolean;
    /** Indicates that buyer information was changed. Contains billing information before draft. */
    changedDetails?: BuyerChangedDetails;
    /** Indicates that buyer information was removed during draft. */
    removed?: boolean;
}
interface BuyerChangedDetails {
    /** Buyer information before draft. */
    buyerInfoBeforeChange?: BuyerInfo;
}
interface BillingDetails extends BillingDetailsChangeTypeOneOf {
    /** Indicates that billing information was added during draft. */
    added?: boolean;
    /** Indicates that billing information was changed. Contains billing information before draft. */
    changedDetails?: BillingChangedDetails;
    /** Indicates that billing information was removed during draft. */
    removed?: boolean;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
}
/** @oneof */
interface BillingDetailsChangeTypeOneOf {
    /** Indicates that billing information was added during draft. */
    added?: boolean;
    /** Indicates that billing information was changed. Contains billing information before draft. */
    changedDetails?: BillingChangedDetails;
    /** Indicates that billing information was removed during draft. */
    removed?: boolean;
}
interface BillingChangedDetails {
    /** Billing address and contact details before draft. */
    billingInfoBeforeChange?: AddressWithContact;
}
interface BusinessLocationDetails extends BusinessLocationDetailsChangeTypeOneOf {
    /** Indicates that business location was added during draft. */
    added?: boolean;
    /** Indicates that business location was changed. Contains business location before draft. */
    changedDetails?: BusinessLocationChangedDetails;
    /** Indicates that business location was removed during draft. */
    removed?: boolean;
    /** Business location. */
    businessLocation?: Location;
}
/** @oneof */
interface BusinessLocationDetailsChangeTypeOneOf {
    /** Indicates that business location was added during draft. */
    added?: boolean;
    /** Indicates that business location was changed. Contains business location before draft. */
    changedDetails?: BusinessLocationChangedDetails;
    /** Indicates that business location was removed during draft. */
    removed?: boolean;
}
interface Location {
    /**
     * Location ID.
     * Learn more about the [Wix Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     * @format GUID
     */
    id?: string;
    /**
     * Location name.
     * @minLength 1
     * @maxLength 500
     * @readonly
     */
    name?: string;
}
interface BusinessLocationChangedDetails {
    /** Business location before draft. */
    businessLocationBeforeChange?: Location;
}
interface CreateDraftOrderRequest {
    /**
     * ID of the order to create a draft for.
     * @format GUID
     */
    orderId: string | null;
}
interface CreateDraftOrderResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
    /**
     * Whether the response contains a draft order that existed before request.
     *
     * `true`: The draft order already exists and is updated.
     * `false`: A new draft order is created.
     */
    preexistingDraftOrder?: boolean | null;
}
interface CalculatedDraftOrder {
    /** Draft order. */
    draftOrder?: DraftOrder;
    /** Shipping options. */
    shippingOptions?: ShippingOption[];
    /** Errors that occurred during calculation. */
    calculationErrors?: CalculationErrors;
}
interface ShippingOption {
    /**
     * Carrier ID.
     * @format GUID
     */
    carrierId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
    /** Shipping rate title. For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`. */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics;
    /** Shipping cost. */
    cost?: ShippingPrice;
}
interface DeliveryLogistics {
    /** When the item is expected to be delivered in free text, e.g "3-5 business days" */
    deliveryTime?: string | null;
    /**
     * Instructions for delivery.
     *
     * For example, "Please arrive during business hours."
     */
    instructions?: string | null;
    /** Additional pickup details. */
    pickupDetails?: PickupDetails;
    /** Expected delivery time slot. */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /** Pickup method. */
    pickupMethod?: PickupMethodWithLiterals;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    /** Store pickup. */
    STORE_PICKUP = "STORE_PICKUP",
    /** Pickup point. */
    PICKUP_POINT = "PICKUP_POINT"
}
/** @enumType */
type PickupMethodWithLiterals = PickupMethod | 'UNKNOWN_METHOD' | 'STORE_PICKUP' | 'PICKUP_POINT';
interface DeliveryTimeSlot {
    /** Delivery time slot start time. */
    from?: Date | null;
    /** Delivery time slot end time. */
    to?: Date | null;
}
interface ShippingPrice {
    /** Shipping price. Must align with the [currency's decimal separator](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
    price?: Price;
    /**
     * Currency of the shipping price as a 3-letter [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217). Must align with the `currency` passed to the method.
     * @format CURRENCY
     */
    currency?: string;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT",
    EXACT_LENGTH = "EXACT_LENGTH",
    EXACT_SIZE = "EXACT_SIZE",
    REQUIRED_ONE_OF_FIELD = "REQUIRED_ONE_OF_FIELD"
}
/** @enumType */
type RuleTypeWithLiterals = RuleType | 'VALIDATION' | 'OTHER' | 'MAX' | 'MIN' | 'MAX_LENGTH' | 'MIN_LENGTH' | 'MAX_SIZE' | 'MIN_SIZE' | 'FORMAT' | 'DECIMAL_LTE' | 'DECIMAL_GTE' | 'DECIMAL_LT' | 'DECIMAL_GT' | 'DECIMAL_MAX_SCALE' | 'INVALID_ENUM_VALUE' | 'REQUIRED_FIELD' | 'FIELD_NOT_ALLOWED' | 'ONE_OF_ALIGNMENT' | 'EXACT_LENGTH' | 'EXACT_SIZE' | 'REQUIRED_ONE_OF_FIELD';
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleTypeWithLiterals;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface CreateEmptyDraftOrderRequest {
}
interface CreateEmptyDraftOrderResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface AddLineItemsToDraftOrderRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Catalog line items to add to draft order.
     * @maxSize 300
     */
    catalogLineItems?: CatalogReferenceLineItem[];
    /**
     * Custom line items to add to draft order.
     *
     * Custom line items do not trigger the Catalog Service Plugin.
     * @maxSize 300
     */
    customLineItems?: CustomLineItem[];
}
interface CatalogReferenceLineItem {
    /**
     * Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info.
     * Optional for custom line items, which don't trigger the Catalog service plugin.
     */
    catalogReference?: CatalogReference;
    /**
     * Item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Item price override. */
    price?: Price;
    /**
     * Whether the price is not yet defined, and will be updated after the order is created.
     *
     * Default: `false`
     */
    priceUndetermined?: boolean;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
}
interface CustomLineItem {
    /**
     * Line item ID.
     * @format GUID
     */
    id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Catalog and item reference.
     *
     * Includes IDs for the item and the catalog it came from, as well as further optional info.
     * Optional for custom line items, which don't trigger the Catalog service plugin.
     */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /** URL to the item's page on the site. */
    url?: PageUrlV2;
    /** Item price **after** catalog-defined discount and line item discounts. */
    price?: Price;
    /** Total line item price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: Price;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price;
    /** Line item description lines. Used for display purposes for order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image details. */
    media?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Delivery Profile Id for the product
     * @format GUID
     */
    deliveryProfileId?: string | null;
    /**
     * Line item locations.
     *
     * The location's total quantity must not exceed the line item quantity.
     * @maxSize 5
     */
    locations?: LocationAndQuantity[];
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface AddLineItemsToDraftOrderResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface UpdateLineItemsRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Details of changes to apply per line item.
     * @minSize 1
     * @maxSize 300
     */
    lineItemChanges: LineItemChangeDetails[];
}
interface LineItemChangeDetails {
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * The line item's new quantity.
     *
     * > **Note:** Passing `0` will remove the line item.
     * @max 1000000
     */
    newQuantity?: number | null;
    /**
     * New price for 1 unit of the line item.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    newPrice?: string | null;
    /**
     * New description for the price.
     *
     * For example, when price is `0` but additional details about the actual price are needed - `"Starts at $67"`.
     */
    newPriceDescription?: PriceDescription;
}
interface UpdateLineItemsResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetDiscountsRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Discounts to set on the draft order.
     *
     * Any existing discounts that are not passed will not change.
     * @minSize 1
     * @maxSize 320
     */
    discounts: IdAndApplied[];
}
interface IdAndApplied {
    /**
     * Entity ID.
     *
     * Depending on the context, the value is either a discount ID or an additional fee ID.
     * @format GUID
     */
    id?: string;
    /** Whether the discount or additional fee should be applied to the draft order. */
    applied?: boolean;
}
interface SetDiscountsResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomDiscountsRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Custom discounts to create.
     *
     * Created discounts are not applied by default.
     * @minSize 1
     * @maxSize 100
     */
    discounts?: DiscountOption[];
}
interface DiscountOption extends DiscountOptionDiscountAmountOneOf {
    /** Amount to discount from the line item price. */
    priceAmount?: Price;
    /**
     * Percentage to discount from the line item price.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:100, maxScale:2 }
     */
    percentage?: string | null;
    /** Discount type. */
    discountType?: DiscountTypeWithLiterals;
    /**
     * ID of line item discount applies to.
     * @format GUID
     * @deprecated ID of line item discount applies to.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemId?: string | null;
    /**
     * Discount amount.
     * @deprecated Discount amount.
     * @replacedBy price_amount and percentage
     * @targetRemovalDate 2024-08-30
     */
    amount?: Price;
    /**
     * Discount description as free text (optional).
     * @maxLength 200
     */
    description?: string | null;
    /**
     * Whether to apply the discount to the draft order.
     *
     * Default: `false`
     */
    applyToDraftOrder?: boolean | null;
    /**
     * Line items the discount applies to.
     * @maxSize 1
     */
    lineItemDiscounts?: LineItemDiscount[];
}
/** @oneof */
interface DiscountOptionDiscountAmountOneOf {
    /** Amount to discount from the line item price. */
    priceAmount?: Price;
    /**
     * Percentage to discount from the line item price.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:100, maxScale:2 }
     */
    percentage?: string | null;
}
declare enum DiscountType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    /** Discount applies to the entire order. */
    GLOBAL = "GLOBAL",
    /** Discount applies to a specific item. */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    /** Discount applies to shipping fee. */
    SHIPPING = "SHIPPING"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'UNKNOWN_TYPE' | 'GLOBAL' | 'SPECIFIC_ITEMS' | 'SHIPPING';
interface CreateCustomDiscountsResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomDiscountsRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * IDs of the discounts to remove from the draft order.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    discountIds: string[];
}
interface DeleteCustomDiscountsResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetAdditionalFeesRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Additional fees to set on the draft order.
     *
     * Any existing additional fees that are not passed will not change.
     * @minSize 1
     * @maxSize 100
     */
    additionalFees: IdAndApplied[];
}
interface SetAdditionalFeesResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface CreateCustomAdditionalFeesRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Custom additional fees to create.
     *
     * Created additional fees are not applied by default.
     * @minSize 1
     * @maxSize 100
     */
    customAdditionalFees?: AdditionalFeeOption[];
}
interface AdditionalFeeOption {
    /**
     * Name of the additional fee.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /** Price of the additional fee. */
    price?: Price;
    /** Tax calculation details. */
    taxDetails?: TaxDetails;
    /**
     * Whether to apply the additional fee to the draft order.
     *
     * Default: `false`
     */
    applyToDraftOrder?: boolean | null;
    /**
     * Additional fee unique code (or ID) for future processing.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * IDs of the line items associated with this additional fee.
     *
     * If no `lineItemIds` are provided, the fee will be associated with the whole order.
     * @format GUID
     * @maxSize 300
     */
    lineItemIds?: string[];
}
interface CreateCustomAdditionalFeesResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface DeleteCustomAdditionalFeesRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * IDs of the additional fees to remove from the draft order.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    customAdditionalFees: string[];
}
interface DeleteCustomAdditionalFeesResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetShippingInfoRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Shipping info to set on the draft order.
     *
     * > **Note:** Passing an empty object will remove the existing shipping info.
     */
    shippingInfo?: V1ShippingInformation;
}
interface SetShippingInfoResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetBuyerInfoRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Shipping info to set on the draft order.
     *
     * > **Note:** Passing an empty object will remove the existing shipping info.
     */
    buyerInfo?: BuyerInfo;
}
interface SetBuyerInfoResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetRecipientInfoRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Recipient address and contact details.
     *
     * > **Note:** Passing an empty object will remove the existing recipient info.
     */
    recipientInfo?: AddressWithContact;
}
interface SetRecipientInfoResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetBillingInfoRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Billing address and contact details.
     *
     * > **Note:** Passing an empty object will remove the existing billing info.
     */
    billingInfo?: AddressWithContact;
}
interface SetBillingInfoResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface GetDraftOrderRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
}
interface GetDraftOrderResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface GetOrderDraftabilityStatusRequest {
    /**
     * Order ID.
     * @format GUID
     */
    orderId: string;
}
interface GetOrderDraftabilityStatusResponse {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string;
    /** Whether a draft can be created based on the order. */
    orderDraftable?: boolean;
    /**
     * Reasons why a draft order cannot be created from the order.
     * @maxSize 5
     */
    nonDraftableReasons?: NonDraftableReasonWithLiterals[];
}
declare enum NonDraftableReason {
    UNSPECIFIED = "UNSPECIFIED",
    /** Modifications of refunded orders are not supported. */
    PARTIALLY_OR_FULLY_REFUNDED = "PARTIALLY_OR_FULLY_REFUNDED",
    /**
     * Original order must be created via one of the following channel types:
     * + WEB
     * + POS
     * + BACKOFFICE_MERCHANT
     * + WIX_APP_STORE
     */
    UNSUPPORTED_CHANNEL_TYPE = "UNSUPPORTED_CHANNEL_TYPE",
    /** Order status is not APPROVED. */
    ORDER_STATUS_IS_NOT_SUPPORTED = "ORDER_STATUS_IS_NOT_SUPPORTED",
    /** Site and order currencies are different. */
    ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT",
    /** Site and order weight units are different. */
    ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT",
    /** Order not found. */
    ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
    /** Modifications of orders with subscription items are not supported. */
    SUBSCRIPTION_LINE_ITEM_EXISTS = "SUBSCRIPTION_LINE_ITEM_EXISTS"
}
/** @enumType */
type NonDraftableReasonWithLiterals = NonDraftableReason | 'UNSPECIFIED' | 'PARTIALLY_OR_FULLY_REFUNDED' | 'UNSUPPORTED_CHANNEL_TYPE' | 'ORDER_STATUS_IS_NOT_SUPPORTED' | 'ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT' | 'ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT' | 'ORDER_NOT_FOUND' | 'SUBSCRIPTION_LINE_ITEM_EXISTS';
interface CommitDraftOrderRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /** Optional side effects to trigger. */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Reason for edit, provided by user (optional).
     * @maxLength 200
     */
    reason?: string | null;
}
interface CommitDraftOrderResponse {
    /** Draft order after commit. */
    committedDraftOrder?: DraftOrder;
    /** Updated order after commit. */
    orderAfterCommit?: Order;
}
interface Order {
    /**
     * Order ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     * @immutable
     */
    createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Order line items.
     * @minSize 1
     * @maxSize 300
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order payment status. */
    paymentStatus?: PaymentStatusWithLiterals;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatusWithLiterals;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     * @format CURRENCY
     */
    currency?: string | null;
    /** Currency conversion details. For use with multi-currency sites. */
    currencyConversionDetails?: CurrencyConversionDetails;
    /**
     * Whether tax is included in line item prices.
     * @immutable
     */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     * @immutable
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /**
     * [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer.
     * @maxLength 1000
     */
    buyerNote?: string | null;
    /** Order status. */
    status?: OrderStatusWithLiterals;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /**
     * Applied discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscount[];
    /**
     * Order activities.
     * @readonly
     * @maxSize 1000
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSourceWithLiterals;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: V1CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /**
     * Checkout ID.
     * @format GUID
     */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: V1BalanceSummary;
    /**
     * Additional fees applied to the order.
     * @maxSize 100
     */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Order tags.
     *
     * [Tags](https://dev.wix.com/docs/rest/business-management/tags/introduction) are labels attached to entities, allowing for flexible categorization and data management.
     */
    tags?: Tags;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     * @immutable
     */
    purchasedDate?: Date | null;
    /** Order Location */
    businessLocation?: Location;
    /**
     * Pay after free trial price summary. Price summary that should be paid for subscriptions after free trial period.
     * @readonly
     */
    payAfterFreeTrial?: PriceSummary;
}
declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /**
     * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     */
    NOT_PAID = "NOT_PAID",
    /** All required payments associated with this order are paid. */
    PAID = "PAID",
    /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /**
     * All payments pending.
     *
     * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.
     * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).
     */
    PENDING = "PENDING",
    /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_PAID = "PARTIALLY_PAID",
    /**
     * Payment received, but not yet confirmed by the payment provider.
     *
     * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.
     * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.
     * @documentationMaturity preview
     */
    PENDING_MERCHANT = "PENDING_MERCHANT",
    /**
     * One or more payments canceled.
     * @documentationMaturity preview
     */
    CANCELED = "CANCELED",
    /**
     * One or more payments declined.
     * @documentationMaturity preview
     */
    DECLINED = "DECLINED"
}
/** @enumType */
type PaymentStatusWithLiterals = PaymentStatus | 'UNSPECIFIED' | 'NOT_PAID' | 'PAID' | 'PARTIALLY_REFUNDED' | 'FULLY_REFUNDED' | 'PENDING' | 'PARTIALLY_PAID' | 'PENDING_MERCHANT' | 'CANCELED' | 'DECLINED';
declare enum FulfillmentStatus {
    /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or the order was manually marked as fulfilled.
     * Orders without shipping info are fulfilled automatically.
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all, of the order items are fulfilled. */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
/** @enumType */
type FulfillmentStatusWithLiterals = FulfillmentStatus | 'NOT_FULFILLED' | 'FULFILLED' | 'PARTIALLY_FULFILLED';
interface CurrencyConversionDetails {
    /**
     * Currency used for the pricing of this order, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * This currency is used to calculate the pricing before conversion to the buyer's payment currency.
     * @readonly
     * @immutable
     * @format CURRENCY
     */
    originalCurrency?: string | null;
    /**
     * The rate used for converting the original currency to the currency used for payment.
     * @readonly
     * @immutable
     * @decimalValue options { gt:0, lte:1000000000000000 }
     */
    conversionRate?: string | null;
}
declare enum OrderStatus {
    /** Order created, but not yet approved or canceled. */
    INITIALIZED = "INITIALIZED",
    /**
     * Order approved.
     *
     * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).
     * Offline orders (cash payment) are automatically approved.
     */
    APPROVED = "APPROVED",
    /** Order canceled by the user. */
    CANCELED = "CANCELED",
    /**
     * Order pending.
     * @documentationMaturity preview
     */
    PENDING = "PENDING",
    /**
     * Order rejected.
     *
     * This happens when pending payments fail.
     * @documentationMaturity preview
     */
    REJECTED = "REJECTED"
}
/** @enumType */
type OrderStatusWithLiterals = OrderStatus | 'INITIALIZED' | 'APPROVED' | 'CANCELED' | 'PENDING' | 'REJECTED';
interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Activity author's email.
     * @format EMAIL
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityTypeWithLiterals;
}
/** @oneof */
interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
interface CustomActivity {
    /**
     * ID of the app that created the custom activity.
     * @format GUID
     */
    appId?: string;
    /**
     * Custom activity type. For example, `"Ticket number set"`.
     * @maxLength 100
     */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
interface MerchantComment {
    /**
     * Merchant comment message.
     * @minLength 1
     * @maxLength 5000
     */
    message?: string;
}
interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price;
    /**
     * Reason for refund.
     * @maxLength 200
     */
    reason?: string;
}
declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD",
    /** @documentationMaturity preview */
    PAYMENT_PENDING = "PAYMENT_PENDING",
    /** @documentationMaturity preview */
    PAYMENT_CANCELED = "PAYMENT_CANCELED",
    /** @documentationMaturity preview */
    PAYMENT_DECLINED = "PAYMENT_DECLINED",
    /** @documentationMaturity preview */
    ORDER_PENDING = "ORDER_PENDING",
    /** @documentationMaturity preview */
    ORDER_REJECTED = "ORDER_REJECTED"
}
/** @enumType */
type ActivityTypeWithLiterals = ActivityType | 'ORDER_REFUNDED' | 'ORDER_PLACED' | 'ORDER_PAID' | 'ORDER_FULFILLED' | 'ORDER_NOT_FULFILLED' | 'ORDER_CANCELED' | 'DOWNLOAD_LINK_SENT' | 'TRACKING_NUMBER_ADDED' | 'TRACKING_NUMBER_EDITED' | 'TRACKING_LINK_ADDED' | 'SHIPPING_CONFIRMATION_EMAIL_SENT' | 'INVOICE_ADDED' | 'INVOICE_REMOVED' | 'INVOICE_SENT' | 'FULFILLER_EMAIL_SENT' | 'SHIPPING_ADDRESS_EDITED' | 'EMAIL_EDITED' | 'PICKUP_READY_EMAIL_SENT' | 'CUSTOM_ACTIVITY' | 'MERCHANT_COMMENT' | 'ORDER_CREATED_FROM_EXCHANGE' | 'NEW_EXCHANGE_ORDER_CREATED' | 'ORDER_PARTIALLY_PAID' | 'DRAFT_ORDER_CHANGES_APPLIED' | 'SAVED_PAYMENT_METHOD' | 'PAYMENT_PENDING' | 'PAYMENT_CANCELED' | 'PAYMENT_DECLINED' | 'ORDER_PENDING' | 'ORDER_REJECTED';
declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
/** @enumType */
type AttributionSourceWithLiterals = AttributionSource | 'UNSPECIFIED' | 'FACEBOOK_ADS';
interface V1CreatedBy extends V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * Member ID - when the order was created by a **logged in** site visitor.
     * @format GUID
     */
    memberId?: string;
    /**
     * Visitor ID - when the order was created by a site visitor that was **not** logged in.
     * @format GUID
     */
    visitorId?: string;
    /**
     * App ID - when the order was created by an external application.
     * @format GUID
     */
    appId?: string;
}
/** @oneof */
interface V1CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * Member ID - when the order was created by a **logged in** site visitor.
     * @format GUID
     */
    memberId?: string;
    /**
     * Visitor ID - when the order was created by a site visitor that was **not** logged in.
     * @format GUID
     */
    visitorId?: string;
    /**
     * App ID - when the order was created by an external application.
     * @format GUID
     */
    appId?: string;
}
interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelTypeWithLiterals;
    /**
     * Reference to an order ID from an external system.
     * @maxLength 100
     */
    externalOrderId?: string | null;
    /**
     * URL to the order in the external system.
     * @maxLength 300
     */
    externalOrderUrl?: string | null;
}
declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM",
    /** PayPal Agentic Checkout sales channel. */
    PAYPAL_AGENTIC_CHECKOUT = "PAYPAL_AGENTIC_CHECKOUT"
}
/** @enumType */
type ChannelTypeWithLiterals = ChannelType | 'UNSPECIFIED' | 'WEB' | 'POS' | 'EBAY' | 'AMAZON' | 'OTHER_PLATFORM' | 'WIX_APP_STORE' | 'WIX_INVOICES' | 'BACKOFFICE_MERCHANT' | 'WISH' | 'CLASS_PASS' | 'GLOBAL_E' | 'FACEBOOK' | 'ETSY' | 'TIKTOK' | 'FAIRE_COM' | 'PAYPAL_AGENTIC_CHECKOUT';
interface CustomField {
    /** Custom field value. */
    value?: any;
    /**
     * Custom field title.
     * @minLength 1
     * @maxLength 500
     */
    title?: string;
    /**
     * Translated custom field title.
     * @minLength 1
     * @maxLength 500
     */
    translatedTitle?: string | null;
}
interface V1BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
    /**
     * Sum of all pending transactions.
     * @readonly
     */
    pending?: Price;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
interface TagList {
    /**
     * List of tag IDs
     * @maxSize 100
     * @maxLength 5
     */
    tagIds?: string[];
}
interface CreateOrderFromDraftRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /** Optional side effects to trigger. */
    createSettings?: OrderCreateSettings;
    /**
     * Reason for order creation, provided by user (optional).
     * @maxLength 200
     */
    reason?: string | null;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
}
interface OrderCreateSettings {
    /** Notification settings to be applied on order creation */
    notifications?: OrderCreateNotifications;
}
interface OrderCreateNotifications {
    /**
     * Whether to send notification to the buyer.
     *
     * Default: `true`
     */
    sendNotificationToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
}
interface CreateOrderFromDraftResponse {
    /** Draft order after commit. */
    committedDraftOrder?: DraftOrder;
    /** Created order. */
    createdOrder?: Order;
}
interface DeleteDraftOrderRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
}
interface DeleteDraftOrderResponse {
}
interface QueryDraftOrdersRequest {
    /** Query options. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryDraftOrdersResponse {
    /** Draft orders, found by query. */
    draftOrders?: DraftOrder[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated draft order. */
    draftOrder?: DraftOrder;
}
interface SetTaxExemptionRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /**
     * Whether the draft order is exempt from tax calculations.
     *
     * Default: `false`
     */
    taxExempt: boolean | null;
}
interface SetTaxExemptionResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}
interface SetBusinessLocationRequest {
    /**
     * Draft order ID.
     * @format GUID
     */
    draftOrderId: string;
    /** Business location. */
    businessLocation?: Location;
}
interface SetBusinessLocationResponse {
    /** Draft order calculated with the latest changes. */
    calculatedDraftOrder?: CalculatedDraftOrder;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createDraftOrder(): __PublicMethodMetaInfo<'POST', {}, CreateDraftOrderRequest$1, CreateDraftOrderRequest, CreateDraftOrderResponse$1, CreateDraftOrderResponse>;
declare function createEmptyDraftOrder(): __PublicMethodMetaInfo<'POST', {}, CreateEmptyDraftOrderRequest$1, CreateEmptyDraftOrderRequest, CreateEmptyDraftOrderResponse$1, CreateEmptyDraftOrderResponse>;
declare function addLineItemsToDraftOrder(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, AddLineItemsToDraftOrderRequest$1, AddLineItemsToDraftOrderRequest, AddLineItemsToDraftOrderResponse$1, AddLineItemsToDraftOrderResponse>;
declare function updateLineItems(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, UpdateLineItemsRequest$1, UpdateLineItemsRequest, UpdateLineItemsResponse$1, UpdateLineItemsResponse>;
declare function setDiscounts(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, SetDiscountsRequest$1, SetDiscountsRequest, SetDiscountsResponse$1, SetDiscountsResponse>;
declare function createCustomDiscounts(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CreateCustomDiscountsRequest$1, CreateCustomDiscountsRequest, CreateCustomDiscountsResponse$1, CreateCustomDiscountsResponse>;
declare function deleteCustomDiscounts(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, DeleteCustomDiscountsRequest$1, DeleteCustomDiscountsRequest, DeleteCustomDiscountsResponse$1, DeleteCustomDiscountsResponse>;
declare function setAdditionalFees(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, SetAdditionalFeesRequest$1, SetAdditionalFeesRequest, SetAdditionalFeesResponse$1, SetAdditionalFeesResponse>;
declare function createCustomAdditionalFees(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CreateCustomAdditionalFeesRequest$1, CreateCustomAdditionalFeesRequest, CreateCustomAdditionalFeesResponse$1, CreateCustomAdditionalFeesResponse>;
declare function deleteCustomAdditionalFees(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, DeleteCustomAdditionalFeesRequest$1, DeleteCustomAdditionalFeesRequest, DeleteCustomAdditionalFeesResponse$1, DeleteCustomAdditionalFeesResponse>;
declare function setShippingInfo(): __PublicMethodMetaInfo<'PUT', {}, SetShippingInfoRequest$1, SetShippingInfoRequest, SetShippingInfoResponse$1, SetShippingInfoResponse>;
declare function setBuyerInfo(): __PublicMethodMetaInfo<'PUT', {}, SetBuyerInfoRequest$1, SetBuyerInfoRequest, SetBuyerInfoResponse$1, SetBuyerInfoResponse>;
declare function setRecipientInfo(): __PublicMethodMetaInfo<'PUT', {}, SetRecipientInfoRequest$1, SetRecipientInfoRequest, SetRecipientInfoResponse$1, SetRecipientInfoResponse>;
declare function setBillingInfo(): __PublicMethodMetaInfo<'PUT', {}, SetBillingInfoRequest$1, SetBillingInfoRequest, SetBillingInfoResponse$1, SetBillingInfoResponse>;
declare function getDraftOrder(): __PublicMethodMetaInfo<'GET', {
    draftOrderId: string;
}, GetDraftOrderRequest$1, GetDraftOrderRequest, GetDraftOrderResponse$1, GetDraftOrderResponse>;
declare function getOrderDraftabilityStatus(): __PublicMethodMetaInfo<'GET', {
    orderId: string;
}, GetOrderDraftabilityStatusRequest$1, GetOrderDraftabilityStatusRequest, GetOrderDraftabilityStatusResponse$1, GetOrderDraftabilityStatusResponse>;
declare function commitDraftOrder(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CommitDraftOrderRequest$1, CommitDraftOrderRequest, CommitDraftOrderResponse$1, CommitDraftOrderResponse>;
declare function createOrderFromDraft(): __PublicMethodMetaInfo<'POST', {
    draftOrderId: string;
}, CreateOrderFromDraftRequest$1, CreateOrderFromDraftRequest, CreateOrderFromDraftResponse$1, CreateOrderFromDraftResponse>;
declare function deleteDraftOrder(): __PublicMethodMetaInfo<'DELETE', {
    draftOrderId: string;
}, DeleteDraftOrderRequest$1, DeleteDraftOrderRequest, DeleteDraftOrderResponse$1, DeleteDraftOrderResponse>;
declare function queryDraftOrders(): __PublicMethodMetaInfo<'POST', {}, QueryDraftOrdersRequest$1, QueryDraftOrdersRequest, QueryDraftOrdersResponse$1, QueryDraftOrdersResponse>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsRequest, UpdateExtendedFieldsResponse$1, UpdateExtendedFieldsResponse>;
declare function setTaxExemption(): __PublicMethodMetaInfo<'PUT', {}, SetTaxExemptionRequest$1, SetTaxExemptionRequest, SetTaxExemptionResponse$1, SetTaxExemptionResponse>;
declare function setBusinessLocation(): __PublicMethodMetaInfo<'PUT', {}, SetBusinessLocationRequest$1, SetBusinessLocationRequest, SetBusinessLocationResponse$1, SetBusinessLocationResponse>;

export { type __PublicMethodMetaInfo, addLineItemsToDraftOrder, commitDraftOrder, createCustomAdditionalFees, createCustomDiscounts, createDraftOrder, createEmptyDraftOrder, createOrderFromDraft, deleteCustomAdditionalFees, deleteCustomDiscounts, deleteDraftOrder, getDraftOrder, getOrderDraftabilityStatus, queryDraftOrders, setAdditionalFees, setBillingInfo, setBusinessLocation, setBuyerInfo, setDiscounts, setRecipientInfo, setShippingInfo, setTaxExemption, updateExtendedFields, updateLineItems };
