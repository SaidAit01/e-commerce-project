// src/ecom-v1-draft-order-draft-orders.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTAddressToSDKAddress as transformRESTAddressToSDKAddress2 } from "@wix/sdk-runtime/transformations/address";
import { transformRESTFloatToSDKFloat as transformRESTFloatToSDKFloat2 } from "@wix/sdk-runtime/transformations/float";
import { transformRESTImageToSDKImage as transformRESTImageToSDKImage2 } from "@wix/sdk-runtime/transformations/image";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/ecom-v1-draft-order-draft-orders.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-draft-order-draft-orders.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomOrdersDraftV1DraftOrdersUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/draft-orders",
        destPath: "/v1/draft-orders"
      },
      {
        srcPath: "/_api/v1/draft-orders",
        destPath: "/v1/draft-orders"
      },
      {
        srcPath: "/v1/draft-orders",
        destPath: "/v1/draft-orders"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/draft-orders",
        destPath: "/v1/draft-orders"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_draft-orders";
function createDraftOrder(payload) {
  function __createDraftOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.CreateDraftOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createDraftOrder;
}
function createEmptyDraftOrder(payload) {
  function __createEmptyDraftOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.CreateEmptyDraftOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/create-empty-draft-order",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createEmptyDraftOrder;
}
function addLineItemsToDraftOrder(payload) {
  function __addLineItemsToDraftOrder({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "customLineItems.media.urlExpirationDate" }]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "customLineItems.media.focalPoint.x" },
          { path: "customLineItems.media.focalPoint.y" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.AddLineItemsToDraftOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/add-line-items",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addLineItemsToDraftOrder;
}
function updateLineItems(payload) {
  function __updateLineItems({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.UpdateLineItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLineItems;
}
function setDiscounts(payload) {
  function __setDiscounts({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetDiscounts",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/set-discounts",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setDiscounts;
}
function createCustomDiscounts(payload) {
  function __createCustomDiscounts({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.CreateCustomDiscounts",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/create-custom-discounts",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCustomDiscounts;
}
function deleteCustomDiscounts(payload) {
  function __deleteCustomDiscounts({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.DeleteCustomDiscounts",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/delete-custom-discounts",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteCustomDiscounts;
}
function setAdditionalFees(payload) {
  function __setAdditionalFees({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetAdditionalFees",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/set-additional-fees",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setAdditionalFees;
}
function createCustomAdditionalFees(payload) {
  function __createCustomAdditionalFees({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.CreateCustomAdditionalFees",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/create-additional-fees",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCustomAdditionalFees;
}
function deleteCustomAdditionalFees(payload) {
  function __deleteCustomAdditionalFees({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.DeleteCustomAdditionalFees",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/delete-custom-additional-fees",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteCustomAdditionalFees;
}
function setShippingInfo(payload) {
  function __setShippingInfo({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "shippingInfo.logistics.deliverByDate" },
          { path: "shippingInfo.logistics.deliveryTimeSlot.from" },
          { path: "shippingInfo.logistics.deliveryTimeSlot.to" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "shippingInfo.logistics.shippingDestination.address.geocode.latitude"
          },
          {
            path: "shippingInfo.logistics.shippingDestination.address.geocode.longitude"
          },
          {
            path: "shippingInfo.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "shippingInfo.logistics.pickupDetails.address.geocode.longitude"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "PUT",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetShippingInfo",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/set-shipping-info",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setShippingInfo;
}
function setBuyerInfo(payload) {
  function __setBuyerInfo({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "PUT",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetBuyerInfo",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/set-buyer-info",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setBuyerInfo;
}
function setRecipientInfo(payload) {
  function __setRecipientInfo({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "recipientInfo.address.geocode.latitude" },
          { path: "recipientInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "PUT",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetRecipientInfo",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/set-recipient-info",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setRecipientInfo;
}
function setBillingInfo(payload) {
  function __setBillingInfo({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "billingInfo.address.geocode.latitude" },
          { path: "billingInfo.address.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "PUT",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetBillingInfo",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/set-billing-info",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setBillingInfo;
}
function getDraftOrder(payload) {
  function __getDraftOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.GetDraftOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ]),
      fallback: [
        {
          method: "GET",
          url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
            protoPath: "/v1/draft-orders/{draftOrderId}",
            data: payload,
            host
          }),
          params: toURLSearchParams(payload)
        }
      ]
    };
    return metadata;
  }
  return __getDraftOrder;
}
function getOrderDraftabilityStatus(payload) {
  function __getOrderDraftabilityStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.GetOrderDraftabilityStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{orderId}/draftability",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getOrderDraftabilityStatus;
}
function commitDraftOrder(payload) {
  function __commitDraftOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.CommitDraftOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/commit",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "committedDraftOrder.createdDate" },
            { path: "committedDraftOrder.updatedDate" },
            {
              path: "committedDraftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "committedDraftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "committedDraftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "orderAfterCommit.createdDate" },
            { path: "orderAfterCommit.updatedDate" },
            { path: "orderAfterCommit.purchasedDate" },
            { path: "orderAfterCommit.lineItems.image.urlExpirationDate" },
            { path: "orderAfterCommit.lineItems.digitalFile.expirationDate" },
            {
              path: "orderAfterCommit.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "orderAfterCommit.shippingInfo.logistics.deliverByDate" },
            {
              path: "orderAfterCommit.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "orderAfterCommit.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "orderAfterCommit.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "committedDraftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "committedDraftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            { path: "orderAfterCommit.lineItems.image.focalPoint.x" },
            { path: "orderAfterCommit.lineItems.image.focalPoint.y" },
            {
              path: "committedDraftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            { path: "orderAfterCommit.lineItems.physicalProperties.weight" },
            { path: "orderAfterCommit.billingInfo.address.geocode.latitude" },
            {
              path: "orderAfterCommit.billingInfo.address.geocode.longitude"
            },
            {
              path: "orderAfterCommit.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "orderAfterCommit.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "orderAfterCommit.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "orderAfterCommit.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "orderAfterCommit.recipientInfo.address.geocode.latitude"
            },
            {
              path: "orderAfterCommit.recipientInfo.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __commitDraftOrder;
}
function createOrderFromDraft(payload) {
  function __createOrderFromDraft({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.CreateOrderFromDraft",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}/create-order",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "committedDraftOrder.createdDate" },
            { path: "committedDraftOrder.updatedDate" },
            {
              path: "committedDraftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "committedDraftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "committedDraftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "createdOrder.createdDate" },
            { path: "createdOrder.updatedDate" },
            { path: "createdOrder.purchasedDate" },
            { path: "createdOrder.lineItems.image.urlExpirationDate" },
            { path: "createdOrder.lineItems.digitalFile.expirationDate" },
            {
              path: "createdOrder.lineItems.subscriptionInfo.subscriptionSettings.startDate"
            },
            { path: "createdOrder.shippingInfo.logistics.deliverByDate" },
            {
              path: "createdOrder.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "createdOrder.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            { path: "createdOrder.activities.createdDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "committedDraftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "committedDraftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            { path: "createdOrder.lineItems.image.focalPoint.x" },
            { path: "createdOrder.lineItems.image.focalPoint.y" },
            {
              path: "committedDraftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "committedDraftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "committedDraftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            { path: "createdOrder.lineItems.physicalProperties.weight" },
            { path: "createdOrder.billingInfo.address.geocode.latitude" },
            { path: "createdOrder.billingInfo.address.geocode.longitude" },
            {
              path: "createdOrder.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "createdOrder.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "createdOrder.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "createdOrder.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "createdOrder.recipientInfo.address.geocode.latitude" },
            { path: "createdOrder.recipientInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createOrderFromDraft;
}
function deleteDraftOrder(payload) {
  function __deleteDraftOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "DELETE",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.DeleteDraftOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{draftOrderId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteDraftOrder;
}
function queryDraftOrders(payload) {
  function __queryDraftOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.QueryDraftOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "draftOrders.createdDate" },
            { path: "draftOrders.updatedDate" },
            {
              path: "draftOrders.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "draftOrders.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "draftOrders.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "draftOrders.lineItems.lineItem.image.focalPoint.x" },
            { path: "draftOrders.lineItems.lineItem.image.focalPoint.y" },
            {
              path: "draftOrders.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "draftOrders.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "draftOrders.billingInfo.address.geocode.latitude" },
            { path: "draftOrders.billingInfo.address.geocode.longitude" },
            {
              path: "draftOrders.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "draftOrders.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "draftOrders.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "draftOrders.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "draftOrders.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "draftOrders.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "draftOrders.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "draftOrders.billingDetails.billingInfo.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryDraftOrders;
}
function updateExtendedFields(payload) {
  function __updateExtendedFields({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.UpdateExtendedFields",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/{id}/update-extended-fields",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "draftOrder.createdDate" },
            { path: "draftOrder.updatedDate" },
            { path: "draftOrder.lineItems.lineItem.image.urlExpirationDate" },
            {
              path: "draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "draftOrder.lineItems.lineItem.image.focalPoint.x" },
            { path: "draftOrder.lineItems.lineItem.image.focalPoint.y" },
            {
              path: "draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "draftOrder.billingInfo.address.geocode.latitude" },
            { path: "draftOrder.billingInfo.address.geocode.longitude" },
            {
              path: "draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateExtendedFields;
}
function setTaxExemption(payload) {
  function __setTaxExemption({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "PUT",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetTaxExemption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/set-tax-exemption",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setTaxExemption;
}
function setBusinessLocation(payload) {
  function __setBusinessLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.draft_order",
      method: "PUT",
      methodFqn: "com.wix.ecom.orders.draft.v1.DraftOrders.SetBusinessLocation",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersDraftV1DraftOrdersUrl({
        protoPath: "/v1/draft-orders/set-business-location",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "calculatedDraftOrder.draftOrder.createdDate" },
            { path: "calculatedDraftOrder.draftOrder.updatedDate" },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.urlExpirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.digitalFile.expirationDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliverByDate"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.deliveryTimeSlot.to"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.x"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image.focalPoint.y"
            },
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.physicalProperties.weight"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address.geocode.longitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setBusinessLocation;
}

// src/ecom-v1-draft-order-draft-orders.universal.ts
import { transformSDKAddressToRESTAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformSDKPageURLV2ToRESTPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var AdjustmentType = /* @__PURE__ */ ((AdjustmentType2) => {
  AdjustmentType2["UNKNOWN_ADJUSTMENT_TYPE"] = "UNKNOWN_ADJUSTMENT_TYPE";
  AdjustmentType2["EXTRA_CHARGE"] = "EXTRA_CHARGE";
  AdjustmentType2["CREDIT"] = "CREDIT";
  return AdjustmentType2;
})(AdjustmentType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var PickupDetailsPickupMethod = /* @__PURE__ */ ((PickupDetailsPickupMethod2) => {
  PickupDetailsPickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupDetailsPickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupDetailsPickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupDetailsPickupMethod2;
})(PickupDetailsPickupMethod || {});
var SourceType = /* @__PURE__ */ ((SourceType2) => {
  SourceType2["ORIGINAL_ORDER"] = "ORIGINAL_ORDER";
  SourceType2["AUTOMATIC"] = "AUTOMATIC";
  SourceType2["CUSTOM"] = "CUSTOM";
  return SourceType2;
})(SourceType || {});
var AppliedDiscountDiscountType = /* @__PURE__ */ ((AppliedDiscountDiscountType2) => {
  AppliedDiscountDiscountType2["GLOBAL"] = "GLOBAL";
  AppliedDiscountDiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  AppliedDiscountDiscountType2["SHIPPING"] = "SHIPPING";
  return AppliedDiscountDiscountType2;
})(AppliedDiscountDiscountType || {});
var DiscountReason = /* @__PURE__ */ ((DiscountReason2) => {
  DiscountReason2["UNSPECIFIED"] = "UNSPECIFIED";
  DiscountReason2["EXCHANGED_ITEMS"] = "EXCHANGED_ITEMS";
  DiscountReason2["BILLING_ADJUSTMENT"] = "BILLING_ADJUSTMENT";
  return DiscountReason2;
})(DiscountReason || {});
var EditingStatus = /* @__PURE__ */ ((EditingStatus2) => {
  EditingStatus2["DRAFT"] = "DRAFT";
  EditingStatus2["COMMITTED"] = "COMMITTED";
  return EditingStatus2;
})(EditingStatus || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var NonDraftableReason = /* @__PURE__ */ ((NonDraftableReason2) => {
  NonDraftableReason2["UNSPECIFIED"] = "UNSPECIFIED";
  NonDraftableReason2["PARTIALLY_OR_FULLY_REFUNDED"] = "PARTIALLY_OR_FULLY_REFUNDED";
  NonDraftableReason2["UNSUPPORTED_CHANNEL_TYPE"] = "UNSUPPORTED_CHANNEL_TYPE";
  NonDraftableReason2["ORDER_STATUS_IS_NOT_SUPPORTED"] = "ORDER_STATUS_IS_NOT_SUPPORTED";
  NonDraftableReason2["ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT"] = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT";
  NonDraftableReason2["ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT"] = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT";
  NonDraftableReason2["ORDER_NOT_FOUND"] = "ORDER_NOT_FOUND";
  NonDraftableReason2["SUBSCRIPTION_LINE_ITEM_EXISTS"] = "SUBSCRIPTION_LINE_ITEM_EXISTS";
  return NonDraftableReason2;
})(NonDraftableReason || {});
var PaymentStatus = /* @__PURE__ */ ((PaymentStatus2) => {
  PaymentStatus2["UNSPECIFIED"] = "UNSPECIFIED";
  PaymentStatus2["NOT_PAID"] = "NOT_PAID";
  PaymentStatus2["PAID"] = "PAID";
  PaymentStatus2["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
  PaymentStatus2["FULLY_REFUNDED"] = "FULLY_REFUNDED";
  PaymentStatus2["PENDING"] = "PENDING";
  PaymentStatus2["PARTIALLY_PAID"] = "PARTIALLY_PAID";
  PaymentStatus2["PENDING_MERCHANT"] = "PENDING_MERCHANT";
  PaymentStatus2["CANCELED"] = "CANCELED";
  PaymentStatus2["DECLINED"] = "DECLINED";
  return PaymentStatus2;
})(PaymentStatus || {});
var FulfillmentStatus = /* @__PURE__ */ ((FulfillmentStatus2) => {
  FulfillmentStatus2["NOT_FULFILLED"] = "NOT_FULFILLED";
  FulfillmentStatus2["FULFILLED"] = "FULFILLED";
  FulfillmentStatus2["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
  return FulfillmentStatus2;
})(FulfillmentStatus || {});
var OrderStatus = /* @__PURE__ */ ((OrderStatus2) => {
  OrderStatus2["INITIALIZED"] = "INITIALIZED";
  OrderStatus2["APPROVED"] = "APPROVED";
  OrderStatus2["CANCELED"] = "CANCELED";
  OrderStatus2["PENDING"] = "PENDING";
  OrderStatus2["REJECTED"] = "REJECTED";
  return OrderStatus2;
})(OrderStatus || {});
var LineItemQuantityChangeType = /* @__PURE__ */ ((LineItemQuantityChangeType2) => {
  LineItemQuantityChangeType2["QUANTITY_INCREASED"] = "QUANTITY_INCREASED";
  LineItemQuantityChangeType2["QUANTITY_DECREASED"] = "QUANTITY_DECREASED";
  return LineItemQuantityChangeType2;
})(LineItemQuantityChangeType || {});
var ActivityType = /* @__PURE__ */ ((ActivityType2) => {
  ActivityType2["ORDER_REFUNDED"] = "ORDER_REFUNDED";
  ActivityType2["ORDER_PLACED"] = "ORDER_PLACED";
  ActivityType2["ORDER_PAID"] = "ORDER_PAID";
  ActivityType2["ORDER_FULFILLED"] = "ORDER_FULFILLED";
  ActivityType2["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
  ActivityType2["ORDER_CANCELED"] = "ORDER_CANCELED";
  ActivityType2["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
  ActivityType2["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
  ActivityType2["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
  ActivityType2["TRACKING_LINK_ADDED"] = "TRACKING_LINK_ADDED";
  ActivityType2["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
  ActivityType2["INVOICE_ADDED"] = "INVOICE_ADDED";
  ActivityType2["INVOICE_REMOVED"] = "INVOICE_REMOVED";
  ActivityType2["INVOICE_SENT"] = "INVOICE_SENT";
  ActivityType2["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
  ActivityType2["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
  ActivityType2["EMAIL_EDITED"] = "EMAIL_EDITED";
  ActivityType2["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
  ActivityType2["CUSTOM_ACTIVITY"] = "CUSTOM_ACTIVITY";
  ActivityType2["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
  ActivityType2["ORDER_CREATED_FROM_EXCHANGE"] = "ORDER_CREATED_FROM_EXCHANGE";
  ActivityType2["NEW_EXCHANGE_ORDER_CREATED"] = "NEW_EXCHANGE_ORDER_CREATED";
  ActivityType2["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
  ActivityType2["DRAFT_ORDER_CHANGES_APPLIED"] = "DRAFT_ORDER_CHANGES_APPLIED";
  ActivityType2["SAVED_PAYMENT_METHOD"] = "SAVED_PAYMENT_METHOD";
  ActivityType2["PAYMENT_PENDING"] = "PAYMENT_PENDING";
  ActivityType2["PAYMENT_CANCELED"] = "PAYMENT_CANCELED";
  ActivityType2["PAYMENT_DECLINED"] = "PAYMENT_DECLINED";
  ActivityType2["ORDER_PENDING"] = "ORDER_PENDING";
  ActivityType2["ORDER_REJECTED"] = "ORDER_REJECTED";
  return ActivityType2;
})(ActivityType || {});
var AttributionSource = /* @__PURE__ */ ((AttributionSource2) => {
  AttributionSource2["UNSPECIFIED"] = "UNSPECIFIED";
  AttributionSource2["FACEBOOK_ADS"] = "FACEBOOK_ADS";
  return AttributionSource2;
})(AttributionSource || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createDraftOrder2(orderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId });
  const reqOpts = createDraftOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createEmptyDraftOrder2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = createEmptyDraftOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addLineItemsToDraftOrder2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      draftOrderId,
      catalogLineItems: options?.catalogLineItems,
      customLineItems: options?.customLineItems
    }),
    [
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "customLineItems.url" }]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "customLineItems.media" }]
      }
    ]
  );
  const reqOpts = addLineItemsToDraftOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          catalogLineItems: "$[1].catalogLineItems",
          customLineItems: "$[1].customLineItems"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateLineItems2(draftOrderId, lineItemChanges) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    lineItemChanges
  });
  const reqOpts = updateLineItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          lineItemChanges: "$[1]"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "lineItemChanges"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setDiscounts2(draftOrderId, discounts) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    discounts
  });
  const reqOpts = setDiscounts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { draftOrderId: "$[0]", discounts: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "discounts"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createCustomDiscounts2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    discounts: options?.discounts
  });
  const reqOpts = createCustomDiscounts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          discounts: "$[1].discounts"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCustomDiscounts2(draftOrderId, discountIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    discountIds
  });
  const reqOpts = deleteCustomDiscounts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { draftOrderId: "$[0]", discountIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "discountIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setAdditionalFees2(draftOrderId, additionalFees) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    additionalFees
  });
  const reqOpts = setAdditionalFees(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          additionalFees: "$[1]"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "additionalFees"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createCustomAdditionalFees2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    customAdditionalFees: options?.customAdditionalFees
  });
  const reqOpts = createCustomAdditionalFees(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          customAdditionalFees: "$[1].customAdditionalFees"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCustomAdditionalFees2(draftOrderId, customAdditionalFees) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    customAdditionalFees
  });
  const reqOpts = deleteCustomAdditionalFees(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          customAdditionalFees: "$[1]"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "customAdditionalFees"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setShippingInfo2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      draftOrderId,
      shippingInfo: options?.shippingInfo
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          { path: "shippingInfo.logistics.shippingDestination.address" },
          { path: "shippingInfo.logistics.pickupDetails.address" }
        ]
      }
    ]
  );
  const reqOpts = setShippingInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          shippingInfo: "$[1].shippingInfo"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setBuyerInfo2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    buyerInfo: options?.buyerInfo
  });
  const reqOpts = setBuyerInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          buyerInfo: "$[1].buyerInfo"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setRecipientInfo2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      draftOrderId,
      recipientInfo: options?.recipientInfo
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "recipientInfo.address" }]
      }
    ]
  );
  const reqOpts = setRecipientInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          recipientInfo: "$[1].recipientInfo"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setBillingInfo2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      draftOrderId,
      billingInfo: options?.billingInfo
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "billingInfo.address" }]
      }
    ]
  );
  const reqOpts = setBillingInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          billingInfo: "$[1].billingInfo"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getDraftOrder2(draftOrderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId
  });
  const reqOpts = getDraftOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { draftOrderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["draftOrderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrderDraftabilityStatus2(orderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId });
  const reqOpts = getOrderDraftabilityStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function commitDraftOrder2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    commitSettings: options?.commitSettings,
    reason: options?.reason
  });
  const reqOpts = commitDraftOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "committedDraftOrder.lineItems.lineItem.image" },
            { path: "orderAfterCommit.lineItems.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "committedDraftOrder.billingInfo.address" },
            {
              path: "committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            { path: "committedDraftOrder.recipientInfo.recipientInfo.address" },
            {
              path: "committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            { path: "committedDraftOrder.billingDetails.billingInfo.address" },
            { path: "orderAfterCommit.billingInfo.address" },
            {
              path: "orderAfterCommit.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "orderAfterCommit.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "orderAfterCommit.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          commitSettings: "$[1].commitSettings",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createOrderFromDraft2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    createSettings: options?.createSettings,
    reason: options?.reason,
    channelInfo: options?.channelInfo
  });
  const reqOpts = createOrderFromDraft(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "committedDraftOrder.lineItems.lineItem.image" },
            { path: "createdOrder.lineItems.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "committedDraftOrder.billingInfo.address" },
            {
              path: "committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            { path: "committedDraftOrder.recipientInfo.recipientInfo.address" },
            {
              path: "committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            { path: "committedDraftOrder.billingDetails.billingInfo.address" },
            { path: "createdOrder.billingInfo.address" },
            {
              path: "createdOrder.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "createdOrder.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "createdOrder.recipientInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          createSettings: "$[1].createSettings",
          reason: "$[1].reason",
          channelInfo: "$[1].channelInfo"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteDraftOrder2(draftOrderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId
  });
  const reqOpts = deleteDraftOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { draftOrderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["draftOrderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryDraftOrders2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryDraftOrders(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [
          {
            transformFn: transformRESTImageToSDKImage,
            paths: [{ path: "draftOrders.lineItems.lineItem.image" }]
          },
          {
            transformFn: transformRESTAddressToSDKAddress,
            paths: [
              {
                path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
              },
              {
                path: "draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
              },
              {
                path: "draftOrders.shippingInfo.shippingInfo.logistics.shippingDestination.address"
              },
              {
                path: "draftOrders.shippingInfo.shippingInfo.logistics.pickupDetails.address"
              },
              { path: "draftOrders.billingInfo.address" },
              {
                path: "draftOrders.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
              },
              { path: "draftOrders.recipientInfo.recipientInfo.address" },
              {
                path: "draftOrders.billingDetails.changedDetails.billingInfoBeforeChange.address"
              },
              { path: "draftOrders.billingDetails.billingInfo.address" }
            ]
          }
        ])
      );
      return {
        items: transformedData?.draftOrders,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function updateExtendedFields2(_id, namespace, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    namespace,
    namespaceData: options?.namespaceData
  });
  const reqOpts = updateExtendedFields(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "draftOrder.lineItems.lineItem.image" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "draftOrder.billingInfo.address" },
            {
              path: "draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            { path: "draftOrder.recipientInfo.recipientInfo.address" },
            {
              path: "draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            { path: "draftOrder.billingDetails.billingInfo.address" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          namespace: "$[1]",
          namespaceData: "$[2].namespaceData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "namespace", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setTaxExemption2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    taxExempt: options?.taxExempt
  });
  const reqOpts = setTaxExemption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          taxExempt: "$[1].taxExempt"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setBusinessLocation2(draftOrderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    draftOrderId,
    businessLocation: options?.businessLocation
  });
  const reqOpts = setBusinessLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.lineItems.lineItem.image"
            }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address"
            },
            { path: "calculatedDraftOrder.draftOrder.billingInfo.address" },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address"
            },
            {
              path: "calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address"
            },
            {
              path: "calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          draftOrderId: "$[0]",
          businessLocation: "$[1].businessLocation"
        },
        singleArgumentUnchanged: false
      },
      ["draftOrderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-draft-order-draft-orders.public.ts
function createDraftOrder3(httpClient) {
  return (orderId) => createDraftOrder2(
    orderId,
    // @ts-ignore
    { httpClient }
  );
}
function createEmptyDraftOrder3(httpClient) {
  return () => createEmptyDraftOrder2(
    // @ts-ignore
    { httpClient }
  );
}
function addLineItemsToDraftOrder3(httpClient) {
  return (draftOrderId, options) => addLineItemsToDraftOrder2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateLineItems3(httpClient) {
  return (draftOrderId, lineItemChanges) => updateLineItems2(
    draftOrderId,
    lineItemChanges,
    // @ts-ignore
    { httpClient }
  );
}
function setDiscounts3(httpClient) {
  return (draftOrderId, discounts) => setDiscounts2(
    draftOrderId,
    discounts,
    // @ts-ignore
    { httpClient }
  );
}
function createCustomDiscounts3(httpClient) {
  return (draftOrderId, options) => createCustomDiscounts2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteCustomDiscounts3(httpClient) {
  return (draftOrderId, discountIds) => deleteCustomDiscounts2(
    draftOrderId,
    discountIds,
    // @ts-ignore
    { httpClient }
  );
}
function setAdditionalFees3(httpClient) {
  return (draftOrderId, additionalFees) => setAdditionalFees2(
    draftOrderId,
    additionalFees,
    // @ts-ignore
    { httpClient }
  );
}
function createCustomAdditionalFees3(httpClient) {
  return (draftOrderId, options) => createCustomAdditionalFees2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteCustomAdditionalFees3(httpClient) {
  return (draftOrderId, customAdditionalFees) => deleteCustomAdditionalFees2(
    draftOrderId,
    customAdditionalFees,
    // @ts-ignore
    { httpClient }
  );
}
function setShippingInfo3(httpClient) {
  return (draftOrderId, options) => setShippingInfo2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function setBuyerInfo3(httpClient) {
  return (draftOrderId, options) => setBuyerInfo2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function setRecipientInfo3(httpClient) {
  return (draftOrderId, options) => setRecipientInfo2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function setBillingInfo3(httpClient) {
  return (draftOrderId, options) => setBillingInfo2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getDraftOrder3(httpClient) {
  return (draftOrderId) => getDraftOrder2(
    draftOrderId,
    // @ts-ignore
    { httpClient }
  );
}
function getOrderDraftabilityStatus3(httpClient) {
  return (orderId) => getOrderDraftabilityStatus2(
    orderId,
    // @ts-ignore
    { httpClient }
  );
}
function commitDraftOrder3(httpClient) {
  return (draftOrderId, options) => commitDraftOrder2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function createOrderFromDraft3(httpClient) {
  return (draftOrderId, options) => createOrderFromDraft2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteDraftOrder3(httpClient) {
  return (draftOrderId) => deleteDraftOrder2(
    draftOrderId,
    // @ts-ignore
    { httpClient }
  );
}
function queryDraftOrders3(httpClient) {
  return () => queryDraftOrders2(
    // @ts-ignore
    { httpClient }
  );
}
function updateExtendedFields3(httpClient) {
  return (_id, namespace, options) => updateExtendedFields2(
    _id,
    namespace,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function setTaxExemption3(httpClient) {
  return (draftOrderId, options) => setTaxExemption2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function setBusinessLocation3(httpClient) {
  return (draftOrderId, options) => setBusinessLocation2(
    draftOrderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onDraftOrderCreated = EventDefinition(
  "wix.ecom.v1.draft_order_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.lineItems.lineItem.digitalFile.expirationDate" },
          {
            path: "entity.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.deliverByDate"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
          },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "entity.lineItems.lineItem.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "entity.lineItems.lineItem.physicalProperties.weight" }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.shippingDestination.address"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.pickupDetails.address"
          },
          { path: "entity.billingInfo.address" },
          {
            path: "entity.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
          },
          { path: "entity.recipientInfo.recipientInfo.address" },
          {
            path: "entity.billingDetails.changedDetails.billingInfoBeforeChange.address"
          },
          { path: "entity.billingDetails.billingInfo.address" }
        ]
      }
    ])
  )
)();
var onDraftOrderDeleted = EventDefinition(
  "wix.ecom.v1.draft_order_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "undefined.lineItems.lineItem.digitalFile.expirationDate" },
          {
            path: "undefined.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
          },
          {
            path: "undefined.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
          },
          {
            path: "undefined.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
          },
          {
            path: "undefined.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
          },
          {
            path: "undefined.shippingInfo.shippingInfo.logistics.deliverByDate"
          },
          {
            path: "undefined.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
          },
          {
            path: "undefined.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
          },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "undefined.lineItems.lineItem.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "undefined.lineItems.lineItem.physicalProperties.weight" }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          {
            path: "undefined.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
          },
          {
            path: "undefined.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
          },
          {
            path: "undefined.shippingInfo.shippingInfo.logistics.shippingDestination.address"
          },
          {
            path: "undefined.shippingInfo.shippingInfo.logistics.pickupDetails.address"
          },
          { path: "undefined.billingInfo.address" },
          {
            path: "undefined.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
          },
          { path: "undefined.recipientInfo.recipientInfo.address" },
          {
            path: "undefined.billingDetails.changedDetails.billingInfoBeforeChange.address"
          },
          { path: "undefined.billingDetails.billingInfo.address" }
        ]
      }
    ])
  )
)();
var onDraftOrderUpdated = EventDefinition(
  "wix.ecom.v1.draft_order_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.lineItems.lineItem.digitalFile.expirationDate" },
          {
            path: "entity.lineItems.lineItem.subscriptionInfo.subscriptionSettings.startDate"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliverByDate"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.deliveryTimeSlot.to"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.deliverByDate"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.from"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.deliveryTimeSlot.to"
          },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "entity.lineItems.lineItem.image" }]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "entity.lineItems.lineItem.physicalProperties.weight" }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address"
          },
          {
            path: "entity.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.shippingDestination.address"
          },
          {
            path: "entity.shippingInfo.shippingInfo.logistics.pickupDetails.address"
          },
          { path: "entity.billingInfo.address" },
          {
            path: "entity.recipientInfo.changedDetails.recipientInfoBeforeChange.address"
          },
          { path: "entity.recipientInfo.recipientInfo.address" },
          {
            path: "entity.billingDetails.changedDetails.billingInfoBeforeChange.address"
          },
          { path: "entity.billingDetails.billingInfo.address" }
        ]
      }
    ])
  )
)();

// src/ecom-v1-draft-order-draft-orders.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createDraftOrder4 = /* @__PURE__ */ createRESTModule(createDraftOrder3);
var createEmptyDraftOrder4 = /* @__PURE__ */ createRESTModule(createEmptyDraftOrder3);
var addLineItemsToDraftOrder4 = /* @__PURE__ */ createRESTModule(addLineItemsToDraftOrder3);
var updateLineItems4 = /* @__PURE__ */ createRESTModule(updateLineItems3);
var setDiscounts4 = /* @__PURE__ */ createRESTModule(setDiscounts3);
var createCustomDiscounts4 = /* @__PURE__ */ createRESTModule(createCustomDiscounts3);
var deleteCustomDiscounts4 = /* @__PURE__ */ createRESTModule(deleteCustomDiscounts3);
var setAdditionalFees4 = /* @__PURE__ */ createRESTModule(setAdditionalFees3);
var createCustomAdditionalFees4 = /* @__PURE__ */ createRESTModule(createCustomAdditionalFees3);
var deleteCustomAdditionalFees4 = /* @__PURE__ */ createRESTModule(deleteCustomAdditionalFees3);
var setShippingInfo4 = /* @__PURE__ */ createRESTModule(setShippingInfo3);
var setBuyerInfo4 = /* @__PURE__ */ createRESTModule(setBuyerInfo3);
var setRecipientInfo4 = /* @__PURE__ */ createRESTModule(setRecipientInfo3);
var setBillingInfo4 = /* @__PURE__ */ createRESTModule(setBillingInfo3);
var getDraftOrder4 = /* @__PURE__ */ createRESTModule(getDraftOrder3);
var getOrderDraftabilityStatus4 = /* @__PURE__ */ createRESTModule(getOrderDraftabilityStatus3);
var commitDraftOrder4 = /* @__PURE__ */ createRESTModule(commitDraftOrder3);
var createOrderFromDraft4 = /* @__PURE__ */ createRESTModule(createOrderFromDraft3);
var deleteDraftOrder4 = /* @__PURE__ */ createRESTModule(deleteDraftOrder3);
var queryDraftOrders4 = /* @__PURE__ */ createRESTModule(queryDraftOrders3);
var updateExtendedFields4 = /* @__PURE__ */ createRESTModule(updateExtendedFields3);
var setTaxExemption4 = /* @__PURE__ */ createRESTModule(setTaxExemption3);
var setBusinessLocation4 = /* @__PURE__ */ createRESTModule(setBusinessLocation3);
var onDraftOrderCreated2 = createEventModule(
  onDraftOrderCreated
);
var onDraftOrderDeleted2 = createEventModule(
  onDraftOrderDeleted
);
var onDraftOrderUpdated2 = createEventModule(
  onDraftOrderUpdated
);
export {
  ActivityType,
  AdjustmentType,
  AppliedDiscountDiscountType,
  AttributionSource,
  ChannelType,
  DescriptionLineType,
  DiscountReason,
  DiscountType,
  EditingStatus,
  FileType,
  FulfillmentStatus,
  ItemTypeItemType,
  JurisdictionType,
  LineItemQuantityChangeType,
  NonDraftableReason,
  OrderStatus,
  PaymentOptionType,
  PaymentStatus,
  PickupDetailsPickupMethod,
  PickupMethod,
  RuleType,
  SortOrder,
  SourceType,
  SubscriptionFrequency,
  TaxableAddressType,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addLineItemsToDraftOrder4 as addLineItemsToDraftOrder,
  commitDraftOrder4 as commitDraftOrder,
  createCustomAdditionalFees4 as createCustomAdditionalFees,
  createCustomDiscounts4 as createCustomDiscounts,
  createDraftOrder4 as createDraftOrder,
  createEmptyDraftOrder4 as createEmptyDraftOrder,
  createOrderFromDraft4 as createOrderFromDraft,
  deleteCustomAdditionalFees4 as deleteCustomAdditionalFees,
  deleteCustomDiscounts4 as deleteCustomDiscounts,
  deleteDraftOrder4 as deleteDraftOrder,
  getDraftOrder4 as getDraftOrder,
  getOrderDraftabilityStatus4 as getOrderDraftabilityStatus,
  onDraftOrderCreated2 as onDraftOrderCreated,
  onDraftOrderDeleted2 as onDraftOrderDeleted,
  onDraftOrderUpdated2 as onDraftOrderUpdated,
  queryDraftOrders4 as queryDraftOrders,
  setAdditionalFees4 as setAdditionalFees,
  setBillingInfo4 as setBillingInfo,
  setBusinessLocation4 as setBusinessLocation,
  setBuyerInfo4 as setBuyerInfo,
  setDiscounts4 as setDiscounts,
  setRecipientInfo4 as setRecipientInfo,
  setShippingInfo4 as setShippingInfo,
  setTaxExemption4 as setTaxExemption,
  updateExtendedFields4 as updateExtendedFields,
  updateLineItems4 as updateLineItems
};
//# sourceMappingURL=index.mjs.map