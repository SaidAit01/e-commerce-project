// src/ecom-v1-orders-settings-orders-settings.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-orders-settings-orders-settings.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixEcomOrdersSettingsApiV1OrdersSettingsServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/orders-settings",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/orders-settings",
        destPath: "/v1/orders-settings"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/orders-settings",
        destPath: "/v1/orders-settings"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_orders-settings";
function getOrdersSettings(payload) {
  function __getOrdersSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.orders_settings",
      method: "GET",
      methodFqn: "wix.ecom.orders_settings.api.v1.OrdersSettingsService.GetOrdersSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrdersSettingsApiV1OrdersSettingsServiceUrl({
        protoPath: "/v1/orders-settings",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ordersSettings.createdDate" },
            { path: "ordersSettings.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrdersSettings;
}
function updateOrdersSettings(payload) {
  function __updateOrdersSettings({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "ordersSettings.createdDate" },
          { path: "ordersSettings.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.orders_settings",
      method: "PATCH",
      methodFqn: "wix.ecom.orders_settings.api.v1.OrdersSettingsService.UpdateOrdersSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomOrdersSettingsApiV1OrdersSettingsServiceUrl({
        protoPath: "/v1/orders-settings",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ordersSettings.createdDate" },
            { path: "ordersSettings.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateOrdersSettings;
}

// src/ecom-v1-orders-settings-orders-settings.universal.ts
var InventoryUpdateTrigger = /* @__PURE__ */ ((InventoryUpdateTrigger2) => {
  InventoryUpdateTrigger2["UNKNOWN_INVENTORY_UPDATE_TRIGGER"] = "UNKNOWN_INVENTORY_UPDATE_TRIGGER";
  InventoryUpdateTrigger2["ON_ORDER_PAID"] = "ON_ORDER_PAID";
  InventoryUpdateTrigger2["ON_ORDER_PLACED"] = "ON_ORDER_PLACED";
  return InventoryUpdateTrigger2;
})(InventoryUpdateTrigger || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getOrdersSettings2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = getOrdersSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateOrdersSettings2(ordersSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    ordersSettings
  });
  const reqOpts = updateOrdersSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ordersSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ordersSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  InventoryUpdateTrigger,
  WebhookIdentityType,
  getOrdersSettings2 as getOrdersSettings,
  updateOrdersSettings2 as updateOrdersSettings
};
//# sourceMappingURL=index.typings.mjs.map