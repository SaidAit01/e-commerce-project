{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_Image","_imageKit","_jsxFileName","compId","defaultProps","containerId","uri","alt","name","width","height","displayMode","getImage","overrides","_rendered$container","rendered","render","default","createElement","Image","_extends2","id","__self","__source","fileName","lineNumber","columnNumber","comp","node","container","firstElementChild","describe","test","expect","getAttribute","toEqual","className","classList","contains","toBe","getPlaceholder","fittingType","src","target","querySelector","toContain","dataset","hasSsrSrc","shouldUseLQIP","role","imageStyles","transform","toHaveStyle","JSON","parse","imageInfo","imageData","_image$getAttribute","_srcset2$match","isInFirstFold","containerWidth","containerHeight","image","srcset1","srcset2","split","src2x","replace","match","not","trim","isSEOBot","onError","jest","fn","fireEvent","error","toHaveBeenCalledTimes","onLoad","load","toHaveBeenCalled","toBeNull"],"sources":["../../../src/__tests__/Image.spec.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport { Image } from '../Image';\nimport { getPlaceholder } from '@wix/image-kit';\nimport type {\n  FittingType,\n  ImageTransformSource,\n  ImageTransformTarget,\n} from '@wix/image-kit';\nimport '@testing-library/jest-dom';\n\nconst compId = 'image0';\nconst defaultProps = {\n  containerId: 'container0',\n  uri: '11062b_9c53b59db1dc4bd4ad7a47340f0594b4~mv2.jpg',\n  alt: 'Paints and Brush',\n  name: 'Paints and Brush',\n  width: 5000,\n  height: 2763,\n  displayMode: 'fill' as FittingType,\n};\n\nfunction getImage(overrides = {}) {\n  const rendered = render(\n    <Image id={compId} {...defaultProps} {...overrides} />,\n  );\n\n  return {\n    comp: rendered,\n    node: rendered.container?.firstElementChild as HTMLElement,\n  };\n}\n\ndescribe('Image', () => {\n  describe('props', () => {\n    describe('id', () => {\n      test('should render id according to given prop', () => {\n        const { node } = getImage();\n\n        expect(node.getAttribute('id')).toEqual(compId);\n      });\n    });\n\n    describe('className', () => {\n      test('should render className according to given prop', () => {\n        const className = 'class-a';\n        const { node } = getImage({ className });\n\n        expect(node.classList.contains(className)).toBe(true);\n      });\n    });\n\n    describe('uri', () => {\n      test('should render uri according to given prop', () => {\n        const { node } = getImage({\n          getPlaceholder: ({\n            fittingType,\n            src,\n            target,\n          }: {\n            fittingType: FittingType;\n            src: ImageTransformSource;\n            target: ImageTransformTarget;\n          }) => getPlaceholder(fittingType, src, target),\n        });\n        const src = (\n          node.querySelector('img') as HTMLImageElement\n        ).getAttribute('src');\n\n        expect(src).toContain(defaultProps.uri);\n        expect(src).toContain('blur');\n        expect(node.dataset.hasSsrSrc).toEqual('true');\n      });\n\n      test('should render uri when shouldUseLQIP=true', () => {\n        const { node } = getImage({ shouldUseLQIP: true });\n        const src = (\n          node.querySelector('img') as HTMLImageElement\n        ).getAttribute('src');\n\n        expect(src).toContain(defaultProps.uri);\n        expect(src).toContain('blur');\n        expect(node.dataset.hasSsrSrc).toEqual('true');\n      });\n    });\n\n    describe('alt', () => {\n      test('should render alt according to prop', () => {\n        const { node } = getImage();\n\n        expect(\n          (node.querySelector('img') as HTMLImageElement).getAttribute('alt'),\n        ).toEqual(defaultProps.alt);\n      });\n    });\n\n    describe('role', () => {\n      test('should render role according to prop', () => {\n        const role = 'playing';\n        const { node } = getImage({ role });\n\n        expect(\n          (node.querySelector('img') as HTMLImageElement).getAttribute('role'),\n        ).toEqual(role);\n      });\n    });\n\n    describe('imageStyles', () => {\n      test('should render role according to prop', () => {\n        const imageStyles = { transform: 'translate(30px)' };\n        const { node } = getImage({ imageStyles });\n\n        expect(node.querySelector('img') as HTMLImageElement).toHaveStyle(\n          imageStyles,\n        );\n      });\n    });\n\n    describe('image info', () => {\n      test('should render data-image-info according to props', () => {\n        const { node } = getImage();\n\n        expect(JSON.parse(node.dataset.imageInfo as string)).toEqual({\n          containerId: defaultProps.containerId,\n          displayMode: defaultProps.displayMode,\n          imageData: {\n            width: defaultProps.width,\n            height: defaultProps.height,\n            uri: defaultProps.uri,\n            name: defaultProps.name,\n            displayMode: defaultProps.displayMode,\n          },\n        });\n      });\n    });\n\n    describe('inInFirstFold', () => {\n      test('should render HQ image when true', () => {\n        const target = {\n          width: 600,\n          height: 400,\n        };\n        const { node } = getImage({\n          isInFirstFold: true,\n          shouldUseLQIP: true,\n          containerWidth: target.width,\n          containerHeight: target.height,\n        });\n        const image = node.querySelector('img') as HTMLImageElement;\n        const src = image.getAttribute('src');\n        const [srcset1, srcset2] =\n          image.getAttribute('srcset')?.split(', ') || [];\n        const src2x = `${src\n          ?.replace(/w_600/, 'w_1200')\n          .replace(/h_400/, 'h_800')\n          .replace(/q_\\d+/, srcset2?.match(/q_\\d+/)?.[0] || '')}`;\n\n        expect(src).toContain(defaultProps.uri);\n        expect(src).not.toContain('blur');\n        expect(srcset1?.trim()).toEqual(`${src} 1x`);\n        expect(srcset2?.trim()).toEqual(`${src2x} 2x`);\n      });\n    });\n\n    describe('isSEOBot', () => {\n      test('should render HQ image when true', () => {\n        const { node } = getImage({\n          isSEOBot: true,\n          shouldUseLQIP: true,\n        });\n        const src = (\n          node.querySelector('img') as HTMLImageElement\n        ).getAttribute('src');\n        expect(src).toContain(defaultProps.uri);\n        expect(src).not.toContain('blur');\n      });\n    });\n    describe('onError', () => {\n      test('should trigger `onError` callback', () => {\n        const onError = jest.fn();\n        const { node } = getImage({ onError });\n        const image = node.querySelector('img') as HTMLImageElement;\n        fireEvent.error(image);\n        expect(onError).toHaveBeenCalledTimes(1);\n      });\n    });\n    describe('onLoad', () => {\n      test('should trigger `onLoad` callback', () => {\n        const onLoad = jest.fn();\n        const { node } = getImage({ onLoad });\n        const image = node.querySelector('img') as HTMLImageElement;\n        fireEvent.load(image);\n        expect(onLoad).toHaveBeenCalled();\n      });\n    });\n    describe('passing neither getPlaceholder, shouldUseLQIP, isInFirstFold or isSEOBot', () => {\n      test('src should be empty', () => {\n        const { node } = getImage({});\n        const src = (\n          node.querySelector('img') as HTMLImageElement\n        ).getAttribute('src');\n        expect(src).toBeNull();\n      });\n    });\n\n    describe('lazy loading', () => {\n      test('should not set loading=\"lazy\" by default', () => {\n        const { node } = getImage();\n        const image = node.querySelector('img') as HTMLImageElement;\n        expect(image.getAttribute('loading')).not.toEqual('lazy');\n      });\n      test('should set loading=\"lazy\" if not in first fold', () => {\n        const { node } = getImage({ isInFirstFold: false });\n        const image = node.querySelector('img') as HTMLImageElement;\n        expect(image.getAttribute('loading')).toEqual('lazy');\n      });\n\n      test('should not set loading=\"lazy\" if in first fold', () => {\n        const { node } = getImage({ isInFirstFold: true });\n        const image = node.querySelector('img') as HTMLImageElement;\n        expect(image.getAttribute('loading')).not.toEqual('lazy');\n      });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}