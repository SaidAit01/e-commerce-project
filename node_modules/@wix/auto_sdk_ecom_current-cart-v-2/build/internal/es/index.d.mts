import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { Cart, CreateCurrentCartOptions, CreateCurrentCartResponse, GetCurrentCartResponse, UpdateCurrentCartResponse, RefreshCurrentCartResponse, CalculateCurrentCartOptions, CalculateCurrentCartResponse, AddLineItemsToCurrentCartOptions, AddLineItemsToCurrentCartResponse, RemoveLineItemsFromCurrentCartResponse, UpdateLineItemsInCurrentCartOptions, UpdateLineItemsInCurrentCartResponse, AddDiscountToCurrentCartResponse, RemoveDiscountFromCurrentCartResponse, AddGiftCardToCurrentCartResponse, RemoveGiftCardFromCurrentCartResponse } from './index.typings.mjs';
export { ActionEvent, AddDiscountRequest, AddDiscountResponse, AddDiscountToCurrentCartRequest, AddGiftCardRequest, AddGiftCardResponse, AddGiftCardToCurrentCartRequest, AddLineItemsRequest, AddLineItemsResponse, AddLineItemsToCurrentCartRequest, AdditionalFee, AdditionalFeeTax, Address, AddressLocation, ApplicationError, CalculateCartRequest, CalculateCartResponse, CalculateCurrentCartRequest, CalculationComponent, CalculationComponentWithLiterals, CalculationConfig, CalculationError, CartSource, CartStatus, CartStatusWithLiterals, CartSummary, CatalogItemInput, CatalogOverrideFields, CatalogReference, ChannelType, ChannelTypeWithLiterals, Color, CompleteCheckoutRequest, CompleteCheckoutResponse, CreateCartRequest, CreateCartResponse, CreateCurrentCartRequest, CreatedBy, CreatedByIdOneOf, CustomContentReference, CustomItemAttributes, CustomItemDeliveryConfig, CustomItemInput, CustomItemPaymentConfig, CustomItemPricingInfo, CustomItemQuantityInfo, CustomItemSource, CustomItemTaxConfig, CustomSettings, CustomerInfo, CustomerInfoIdOneOf, DeleteCartRequest, DeleteCartResponse, DeleteCurrentCartRequest, DeleteCurrentCartResponse, DeliveryInfo, DeliveryMethod, DeliverySummary, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineTypeWithLiterals, DescriptionLineValueOneOf, Details, DetailsKindOneOf, Discount, DiscountBenefit, DiscountBenefitValueOneOf, DiscountScope, DiscountScopeWithLiterals, DiscountSource, DiscountSourceType, DiscountSourceTypeWithLiterals, DiscountStatus, DiscountStatusWithLiterals, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ErrorCode, ErrorCodeWithLiterals, ExtendedFields, ExternalReference, FieldViolation, FileType, FileTypeWithLiterals, FreeTrialPeriod, FullAddressContactDetails, GetCartRequest, GetCartResponse, GetCheckoutURLRequest, GetCheckoutURLResponse, GetCurrentCartRequest, GiftCard, GiftCardSummary, Group, HandleAsyncCheckoutCompletionRequest, HeadersEntry, IdentificationData, IdentificationDataIdOneOf, ItemAttributes, ItemDeliveryConfig, ItemModifier, ItemPaymentConfig, ItemPriceBreakdown, ItemPricingInfo, ItemQuantityInfo, ItemSource, ItemStatus, ItemStatusWithLiterals, ItemTaxConfig, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, ItemTypeItemTypeWithLiterals, LineItem, LineItemSummary, LineItemTax, LineItemUpdate, MarkCartAsCompletedRequest, MarkCartAsCompletedResponse, MessageEnvelope, ModifierGroup, MultiCurrencyPrice, NameInLineItem, NameInLineItemWithLiterals, NameInOther, NameInOtherWithLiterals, Other, PaymentInfo, PaymentOption, PaymentOptionType, PaymentOptionTypeWithLiterals, PaymentSummary, PhysicalProperties, PlainTextValue, Policy, PriceDescription, PriceSummary, PricingInfo, QuantityUpdate, RawHttpResponse, RedirectUrls, RefreshCartRequest, RefreshCartResponse, RefreshCurrentCartRequest, RemoveDiscountFromCurrentCartRequest, RemoveDiscountRequest, RemoveDiscountResponse, RemoveGiftCardFromCurrentCartRequest, RemoveGiftCardRequest, RemoveGiftCardResponse, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsRequest, RemoveLineItemsResponse, RestoreInfo, RuleType, RuleTypeWithLiterals, Scope, SecuredMedia, SelectedMembership, SelectedMembershipUpdate, ServiceProperties, Severity, SeverityWithLiterals, SiteInfo, StreetAddress, SubscriptionFrequency, SubscriptionFrequencyWithLiterals, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SuggestedFixWithLiterals, SystemError, Target, TargetTargetTypeOneOf, Tax, TaxDetails, TaxInfo, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, TaxableAddressTypeWithLiterals, Title, TranslatableString, UpdateCartRequest, UpdateCartResponse, UpdateCurrentCartRequest, UpdateLineItemsInCurrentCartRequest, UpdateLineItemsRequest, UpdateLineItemsResponse, V2AdditionalFee, V2LineItem, V2SelectedMembership, ValidationError, ValidationsConfig, ValidationsConfigWithLiterals, VatId, VatType, VatTypeWithLiterals, Violation, WebhookIdentityType, WebhookIdentityTypeWithLiterals, WeightUnit, WeightUnitWithLiterals } from './index.typings.mjs';

/** @internal */
declare function createCurrentCart$1(httpClient: HttpClient): CreateCurrentCartSignature;
interface CreateCurrentCartSignature {
    /**
     * Creates the Current Cart of the customer.
     * @param - Cart to be created.
     */
    (cart: Cart, options?: NonNullablePaths<CreateCurrentCartOptions, `catalogItems.${number}.catalogReference` | `catalogItems.${number}.quantity` | `catalogItems.${number}.selectedMembership._id` | `catalogItems.${number}.selectedMembership.appId` | `customItems.${number}.attributes.descriptionLines.${number}.name` | `customItems.${number}.name` | `customItems.${number}.pricing` | `customItems.${number}.pricing.price` | `customItems.${number}.quantityInfo` | `customItems.${number}.quantityInfo.requestedQuantity`, 7>): Promise<NonNullablePaths<CreateCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function getCurrentCart$1(httpClient: HttpClient): GetCurrentCartSignature;
interface GetCurrentCartSignature {
    /**
     * Retrieves the Current Cart of the customer.
     */
    (): Promise<NonNullablePaths<GetCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function updateCurrentCart$1(httpClient: HttpClient): UpdateCurrentCartSignature;
interface UpdateCurrentCartSignature {
    /**
     * Updates the Current Cart.
     *
     * Use this endpoint to set and replace fields such as buyer note and delivery method.
     * To add or remove elements from lists (e.g., line items, discounts, gift cards), use their dedicated endpoints.
     * @param - Cart to be updated, may be partial.
     */
    (cart: Cart): Promise<NonNullablePaths<UpdateCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function deleteCurrentCart$1(httpClient: HttpClient): DeleteCurrentCartSignature;
interface DeleteCurrentCartSignature {
    /**
     * Deletes the Current Cart of the customer.
     */
    (): Promise<void>;
}
/** @internal */
declare function refreshCurrentCart$1(httpClient: HttpClient): RefreshCurrentCartSignature;
interface RefreshCurrentCartSignature {
    /**
     * Re-evaluates prices, inventory and discounts to ensure the Cart is up-to-date with the latest changes.
     */
    (): Promise<NonNullablePaths<RefreshCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function calculateCurrentCart$1(httpClient: HttpClient): CalculateCurrentCartSignature;
interface CalculateCurrentCartSignature {
    /**
     * Calculates the cart based on its current state (line items, discounts, delivery method, etc.)
     * and returns a detailed summary including subtotal, delivery costs, taxes, fees and the total price.
     * Note that discounts are already pre-computed and applied to the Cart.
     *
     * This is a read-only operation that does not modify the cart.
     */
    (options?: CalculateCurrentCartOptions): Promise<NonNullablePaths<CalculateCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled` | `summary.cartId` | `summary.lineItems` | `summary.lineItems.${number}.lineItemId` | `summary.lineItems.${number}.quantity` | `summary.lineItems.${number}.unitPrice.amount` | `summary.lineItems.${number}.unitPrice.convertedAmount` | `summary.lineItems.${number}.unitPrice.formattedAmount` | `summary.lineItems.${number}.unitPrice.formattedConvertedAmount` | `summary.discounts` | `summary.discounts.${number}._id` | `summary.discounts.${number}.name.original` | `summary.discounts.${number}.source.sourceType` | `summary.discounts.${number}.scope` | `summary.discounts.${number}.status` | `summary.deliverySummary.method.appId` | `summary.deliverySummary.method.code` | `summary.deliverySummary.method.pickup` | `summary.additionalFees` | `summary.taxSummary.taxes` | `summary.taxSummary.taxes.${number}.rate` | `summary.taxSummary.pricesIncludeTax` | `summary.taxSummary.lineItemTaxes` | `summary.taxSummary.lineItemTaxes.${number}.lineItemId` | `summary.taxSummary.additionalFeeTaxes` | `summary.taxSummary.additionalFeeTaxes.${number}.additionalFeeCode` | `summary.paymentSummary.giftCards` | `summary.paymentSummary.giftCards.${number}.giftCardId` | `summary.paymentSummary.memberships` | `summary.paymentSummary.memberships.${number}._id` | `summary.paymentSummary.memberships.${number}.appId` | `summary.paymentSummary.requiresPaymentAfterGiftCard` | `summary.errors` | `summary.errors.${number}.component` | `summary.errors.${number}.code` | `summary.violations` | `summary.violations.${number}.severity` | `summary.violations.${number}.target.other.name` | `summary.violations.${number}.target.lineItem.name`, 7>>;
}
/** @internal */
declare function addLineItemsToCurrentCart$1(httpClient: HttpClient): AddLineItemsToCurrentCartSignature;
interface AddLineItemsToCurrentCartSignature {
    /**
     * Adds line items to the Cart.
     * If a Current Cart is not already existing, it will be created.
     */
    (options?: NonNullablePaths<AddLineItemsToCurrentCartOptions, `catalogItems.${number}.catalogReference` | `catalogItems.${number}.quantity` | `catalogItems.${number}.selectedMembership._id` | `catalogItems.${number}.selectedMembership.appId` | `customItems.${number}.attributes.descriptionLines.${number}.name` | `customItems.${number}.name` | `customItems.${number}.pricing` | `customItems.${number}.pricing.price` | `customItems.${number}.quantityInfo` | `customItems.${number}.quantityInfo.requestedQuantity`, 7>): Promise<NonNullablePaths<AddLineItemsToCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function removeLineItemsFromCurrentCart$1(httpClient: HttpClient): RemoveLineItemsFromCurrentCartSignature;
interface RemoveLineItemsFromCurrentCartSignature {
    /**
     * Removes line items from the Cart.
     * @param - Line item IDs to remove from cart.
     */
    (lineItemIds: string[]): Promise<NonNullablePaths<RemoveLineItemsFromCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function updateLineItemsInCurrentCart$1(httpClient: HttpClient): UpdateLineItemsInCurrentCartSignature;
interface UpdateLineItemsInCurrentCartSignature {
    /**
     * Updates line items in the Cart.
     * Use this endpoint to update line items properties such as quantity and selected membership.
     */
    (options?: NonNullablePaths<UpdateLineItemsInCurrentCartOptions, `lineItemUpdates.${number}.lineItemId` | `lineItemUpdates.${number}.quantityUpdate.quantity`, 5>): Promise<NonNullablePaths<UpdateLineItemsInCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function addDiscountToCurrentCart$1(httpClient: HttpClient): AddDiscountToCurrentCartSignature;
interface AddDiscountToCurrentCartSignature {
    /**
     * Applies a discount to the Cart.
     *
     * Currently only application of coupons is supported.
     * @param - Coupon to apply.
     *
     * Currently only one is supported.
     */
    (couponCode: string): Promise<NonNullablePaths<AddDiscountToCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function removeDiscountFromCurrentCart$1(httpClient: HttpClient): RemoveDiscountFromCurrentCartSignature;
interface RemoveDiscountFromCurrentCartSignature {
    /**
     * Removes a discount from the Cart.
     *
     * Currently only removal of coupons is supported.
     * @param - Discount ID.
     */
    (discountId: string): Promise<NonNullablePaths<RemoveDiscountFromCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function addGiftCardToCurrentCart$1(httpClient: HttpClient): AddGiftCardToCurrentCartSignature;
interface AddGiftCardToCurrentCartSignature {
    /**
     * Adds a gift card to the Current Cart.
     * Once added, the gift card’s balance will be used as a payment method during checkout, either partially or fully covering the cart total.
     * @param - Gift card code.
     *
     * Currently only one is supported.
     */
    (giftCardCode: string): Promise<NonNullablePaths<AddGiftCardToCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function removeGiftCardFromCurrentCart$1(httpClient: HttpClient): RemoveGiftCardFromCurrentCartSignature;
interface RemoveGiftCardFromCurrentCartSignature {
    /**
     * Removes a gift card from the Current Cart.
     * @param - Gift card ID.
     */
    (giftCardId: string): Promise<NonNullablePaths<RemoveGiftCardFromCurrentCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}

/** @internal */
declare const createCurrentCart: MaybeContext<BuildRESTFunction<typeof createCurrentCart$1> & typeof createCurrentCart$1>;
/** @internal */
declare const getCurrentCart: MaybeContext<BuildRESTFunction<typeof getCurrentCart$1> & typeof getCurrentCart$1>;
/** @internal */
declare const updateCurrentCart: MaybeContext<BuildRESTFunction<typeof updateCurrentCart$1> & typeof updateCurrentCart$1>;
/** @internal */
declare const deleteCurrentCart: MaybeContext<BuildRESTFunction<typeof deleteCurrentCart$1> & typeof deleteCurrentCart$1>;
/** @internal */
declare const refreshCurrentCart: MaybeContext<BuildRESTFunction<typeof refreshCurrentCart$1> & typeof refreshCurrentCart$1>;
/** @internal */
declare const calculateCurrentCart: MaybeContext<BuildRESTFunction<typeof calculateCurrentCart$1> & typeof calculateCurrentCart$1>;
/** @internal */
declare const addLineItemsToCurrentCart: MaybeContext<BuildRESTFunction<typeof addLineItemsToCurrentCart$1> & typeof addLineItemsToCurrentCart$1>;
/** @internal */
declare const removeLineItemsFromCurrentCart: MaybeContext<BuildRESTFunction<typeof removeLineItemsFromCurrentCart$1> & typeof removeLineItemsFromCurrentCart$1>;
/** @internal */
declare const updateLineItemsInCurrentCart: MaybeContext<BuildRESTFunction<typeof updateLineItemsInCurrentCart$1> & typeof updateLineItemsInCurrentCart$1>;
/** @internal */
declare const addDiscountToCurrentCart: MaybeContext<BuildRESTFunction<typeof addDiscountToCurrentCart$1> & typeof addDiscountToCurrentCart$1>;
/** @internal */
declare const removeDiscountFromCurrentCart: MaybeContext<BuildRESTFunction<typeof removeDiscountFromCurrentCart$1> & typeof removeDiscountFromCurrentCart$1>;
/** @internal */
declare const addGiftCardToCurrentCart: MaybeContext<BuildRESTFunction<typeof addGiftCardToCurrentCart$1> & typeof addGiftCardToCurrentCart$1>;
/** @internal */
declare const removeGiftCardFromCurrentCart: MaybeContext<BuildRESTFunction<typeof removeGiftCardFromCurrentCart$1> & typeof removeGiftCardFromCurrentCart$1>;

export { AddDiscountToCurrentCartResponse, AddGiftCardToCurrentCartResponse, AddLineItemsToCurrentCartOptions, AddLineItemsToCurrentCartResponse, CalculateCurrentCartOptions, CalculateCurrentCartResponse, Cart, CreateCurrentCartOptions, CreateCurrentCartResponse, GetCurrentCartResponse, RefreshCurrentCartResponse, RemoveDiscountFromCurrentCartResponse, RemoveGiftCardFromCurrentCartResponse, RemoveLineItemsFromCurrentCartResponse, UpdateCurrentCartResponse, UpdateLineItemsInCurrentCartOptions, UpdateLineItemsInCurrentCartResponse, addDiscountToCurrentCart, addGiftCardToCurrentCart, addLineItemsToCurrentCart, calculateCurrentCart, createCurrentCart, deleteCurrentCart, getCurrentCart, refreshCurrentCart, removeDiscountFromCurrentCart, removeGiftCardFromCurrentCart, removeLineItemsFromCurrentCart, updateCurrentCart, updateLineItemsInCurrentCart };
