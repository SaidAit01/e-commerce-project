"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  CalculationComponent: () => CalculationComponent,
  CartStatus: () => CartStatus,
  ChannelType: () => ChannelType,
  DescriptionLineType: () => DescriptionLineType,
  DiscountScope: () => DiscountScope,
  DiscountSourceType: () => DiscountSourceType,
  DiscountStatus: () => DiscountStatus,
  ErrorCode: () => ErrorCode,
  FileType: () => FileType,
  ItemStatus: () => ItemStatus,
  ItemTypeItemType: () => ItemTypeItemType,
  NameInLineItem: () => NameInLineItem,
  NameInOther: () => NameInOther,
  PaymentOptionType: () => PaymentOptionType,
  RuleType: () => RuleType,
  Severity: () => Severity,
  SubscriptionFrequency: () => SubscriptionFrequency,
  SuggestedFix: () => SuggestedFix,
  TaxableAddressType: () => TaxableAddressType,
  ValidationsConfig: () => ValidationsConfig,
  VatType: () => VatType,
  WebhookIdentityType: () => WebhookIdentityType,
  WeightUnit: () => WeightUnit,
  addDiscountToCurrentCart: () => addDiscountToCurrentCart2,
  addGiftCardToCurrentCart: () => addGiftCardToCurrentCart2,
  addLineItemsToCurrentCart: () => addLineItemsToCurrentCart2,
  calculateCurrentCart: () => calculateCurrentCart2,
  createCurrentCart: () => createCurrentCart2,
  deleteCurrentCart: () => deleteCurrentCart2,
  getCurrentCart: () => getCurrentCart2,
  refreshCurrentCart: () => refreshCurrentCart2,
  removeDiscountFromCurrentCart: () => removeDiscountFromCurrentCart2,
  removeGiftCardFromCurrentCart: () => removeGiftCardFromCurrentCart2,
  removeLineItemsFromCurrentCart: () => removeLineItemsFromCurrentCart2,
  updateCurrentCart: () => updateCurrentCart2,
  updateLineItemsInCurrentCart: () => updateLineItemsInCurrentCart2
});
module.exports = __toCommonJS(index_typings_exports);

// src/ecom-v2-cart-current-cart-v-2.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v2-cart-current-cart-v-2.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcomCartV2CurrentCartServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/cart-v2",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v2/carts",
        destPath: "/v2/carts"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_current-cart-v-2";
function createCurrentCart(payload) {
  function __createCurrentCart({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cart.createdDate" },
          { path: "cart.updatedDate" },
          {
            path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "cart.lineItems.attributes.image.urlExpirationDate" },
          {
            path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "cart.lineItems.attributes.serviceProperties.scheduledDate" },
          {
            path: "catalogItems.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "customItems.attributes.image.urlExpirationDate" },
          {
            path: "customItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "customItems.attributes.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cart.lineItems.attributes.physicalProperties.weight" },
          { path: "cart.deliveryInfo.address.geocode.latitude" },
          { path: "cart.deliveryInfo.address.geocode.longitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.longitude" },
          {
            path: "catalogItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "customItems.attributes.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.CreateCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCurrentCart;
}
function getCurrentCart(payload) {
  function __getCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "GET",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.GetCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCurrentCart;
}
function updateCurrentCart(payload) {
  function __updateCurrentCart({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cart.createdDate" },
          { path: "cart.updatedDate" },
          {
            path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "cart.lineItems.attributes.image.urlExpirationDate" },
          {
            path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "cart.lineItems.attributes.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cart.lineItems.attributes.physicalProperties.weight" },
          { path: "cart.deliveryInfo.address.geocode.latitude" },
          { path: "cart.deliveryInfo.address.geocode.longitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "PATCH",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.UpdateCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCurrentCart;
}
function deleteCurrentCart(payload) {
  function __deleteCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "DELETE",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.DeleteCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteCurrentCart;
}
function refreshCurrentCart(payload) {
  function __refreshCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.RefreshCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/refresh",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __refreshCurrentCart;
}
function calculateCurrentCart(payload) {
  function __calculateCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.CalculateCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/calculate",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __calculateCurrentCart;
}
function addLineItemsToCurrentCart(payload) {
  function __addLineItemsToCurrentCart({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "catalogItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "customItems.attributes.physicalProperties.weight" }
        ]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          {
            path: "catalogItems.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "customItems.attributes.image.urlExpirationDate" },
          {
            path: "customItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "customItems.attributes.serviceProperties.scheduledDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.AddLineItemsToCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/add-line-items",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addLineItemsToCurrentCart;
}
function removeLineItemsFromCurrentCart(payload) {
  function __removeLineItemsFromCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.RemoveLineItemsFromCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/remove-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeLineItemsFromCurrentCart;
}
function updateLineItemsInCurrentCart(payload) {
  function __updateLineItemsInCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.UpdateLineItemsInCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/update-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLineItemsInCurrentCart;
}
function addDiscountToCurrentCart(payload) {
  function __addDiscountToCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.AddDiscountToCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/add-discount",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDiscountToCurrentCart;
}
function removeDiscountFromCurrentCart(payload) {
  function __removeDiscountFromCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.RemoveDiscountFromCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/remove-discount",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDiscountFromCurrentCart;
}
function addGiftCardToCurrentCart(payload) {
  function __addGiftCardToCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.AddGiftCardToCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/add-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addGiftCardToCurrentCart;
}
function removeGiftCardFromCurrentCart(payload) {
  function __removeGiftCardFromCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CurrentCartService.RemoveGiftCardFromCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CurrentCartServiceUrl({
        protoPath: "/v2/carts/current/remove-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeGiftCardFromCurrentCart;
}

// src/ecom-v2-cart-current-cart-v-2.universal.ts
var import_address = require("@wix/sdk-runtime/transformations/address");
var import_address2 = require("@wix/sdk-runtime/transformations/address");
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_image2 = require("@wix/sdk-runtime/transformations/image");
var import_page_url_v2 = require("@wix/sdk-runtime/transformations/page-url-v2");
var import_page_url_v22 = require("@wix/sdk-runtime/transformations/page-url-v2");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var ItemStatus = /* @__PURE__ */ ((ItemStatus2) => {
  ItemStatus2["UNKNOWN_ITEM_STATUS"] = "UNKNOWN_ITEM_STATUS";
  ItemStatus2["AVAILABLE"] = "AVAILABLE";
  ItemStatus2["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
  ItemStatus2["OUT_OF_STOCK"] = "OUT_OF_STOCK";
  ItemStatus2["NOT_EXISTS"] = "NOT_EXISTS";
  return ItemStatus2;
})(ItemStatus || {});
var DiscountSourceType = /* @__PURE__ */ ((DiscountSourceType2) => {
  DiscountSourceType2["UNKNOWN_DISCOUNT_SOURCE_TYPE"] = "UNKNOWN_DISCOUNT_SOURCE_TYPE";
  DiscountSourceType2["AUTOMATIC_RULE"] = "AUTOMATIC_RULE";
  DiscountSourceType2["COUPON"] = "COUPON";
  return DiscountSourceType2;
})(DiscountSourceType || {});
var DiscountScope = /* @__PURE__ */ ((DiscountScope2) => {
  DiscountScope2["UNKNOWN_DISCOUNT_SCOPE"] = "UNKNOWN_DISCOUNT_SCOPE";
  DiscountScope2["CART_SUBTOTAL"] = "CART_SUBTOTAL";
  DiscountScope2["LINE_ITEM"] = "LINE_ITEM";
  DiscountScope2["DELIVERY"] = "DELIVERY";
  return DiscountScope2;
})(DiscountScope || {});
var DiscountStatus = /* @__PURE__ */ ((DiscountStatus2) => {
  DiscountStatus2["UNKNOWN_DISCOUNT_STATUS"] = "UNKNOWN_DISCOUNT_STATUS";
  DiscountStatus2["ACTIVE"] = "ACTIVE";
  DiscountStatus2["EXPIRED"] = "EXPIRED";
  DiscountStatus2["DELETED"] = "DELETED";
  DiscountStatus2["MAX_USAGE_REACHED"] = "MAX_USAGE_REACHED";
  return DiscountStatus2;
})(DiscountStatus || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var CartStatus = /* @__PURE__ */ ((CartStatus2) => {
  CartStatus2["CREATED"] = "CREATED";
  CartStatus2["CHECKOUT_COMPLETED"] = "CHECKOUT_COMPLETED";
  return CartStatus2;
})(CartStatus || {});
var CalculationComponent = /* @__PURE__ */ ((CalculationComponent2) => {
  CalculationComponent2["UNKNOWN_CALCULATION_COMPONENT"] = "UNKNOWN_CALCULATION_COMPONENT";
  CalculationComponent2["DISCOUNTS"] = "DISCOUNTS";
  CalculationComponent2["DELIVERY"] = "DELIVERY";
  CalculationComponent2["TAX"] = "TAX";
  CalculationComponent2["MEMBERSHIPS"] = "MEMBERSHIPS";
  CalculationComponent2["GIFT_CARDS"] = "GIFT_CARDS";
  return CalculationComponent2;
})(CalculationComponent || {});
var ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {
  ErrorCode2["UNKNOWN_ERROR_CODE"] = "UNKNOWN_ERROR_CODE";
  return ErrorCode2;
})(ErrorCode || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var Severity = /* @__PURE__ */ ((Severity2) => {
  Severity2["WARNING"] = "WARNING";
  Severity2["ERROR"] = "ERROR";
  return Severity2;
})(Severity || {});
var NameInOther = /* @__PURE__ */ ((NameInOther2) => {
  NameInOther2["OTHER_DEFAULT"] = "OTHER_DEFAULT";
  return NameInOther2;
})(NameInOther || {});
var NameInLineItem = /* @__PURE__ */ ((NameInLineItem2) => {
  NameInLineItem2["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
  return NameInLineItem2;
})(NameInLineItem || {});
var SuggestedFix = /* @__PURE__ */ ((SuggestedFix2) => {
  SuggestedFix2["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
  SuggestedFix2["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
  return SuggestedFix2;
})(SuggestedFix || {});
var ValidationsConfig = /* @__PURE__ */ ((ValidationsConfig2) => {
  ValidationsConfig2["UNKNOWN_VALIDATIONS_CONFIG"] = "UNKNOWN_VALIDATIONS_CONFIG";
  ValidationsConfig2["SKIP_VALIDATIONS"] = "SKIP_VALIDATIONS";
  ValidationsConfig2["PRE_CHECKOUT_VALIDATIONS"] = "PRE_CHECKOUT_VALIDATIONS";
  ValidationsConfig2["CHECKOUT_VALIDATIONS"] = "CHECKOUT_VALIDATIONS";
  return ValidationsConfig2;
})(ValidationsConfig || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCurrentCart2(cart, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      cart,
      catalogItems: options?.catalogItems,
      customItems: options?.customItems,
      couponCodes: options?.couponCodes,
      giftCardCodes: options?.giftCardCodes
    }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [
          { path: "cart.lineItems.source.catalogOverrideFields.image" },
          { path: "cart.lineItems.attributes.image" },
          { path: "catalogItems.catalogOverrideFields.image" },
          { path: "customItems.attributes.image" }
        ]
      },
      {
        transformFn: import_page_url_v2.transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "cart.lineItems.attributes.url" },
          { path: "customItems.attributes.url" }
        ]
      },
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [
          { path: "cart.deliveryInfo.address" },
          { path: "cart.paymentInfo.billingAddress" }
        ]
      }
    ]
  );
  const reqOpts = createCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cart: "$[0]",
          catalogItems: "$[1].catalogItems",
          customItems: "$[1].customItems",
          couponCodes: "$[1].couponCodes",
          giftCardCodes: "$[1].giftCardCodes"
        },
        singleArgumentUnchanged: false
      },
      ["cart", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCurrentCart2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = getCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCurrentCart2(cart) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ cart }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [
          { path: "cart.lineItems.source.catalogOverrideFields.image" },
          { path: "cart.lineItems.attributes.image" }
        ]
      },
      {
        transformFn: import_page_url_v2.transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "cart.lineItems.attributes.url" }]
      },
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [
          { path: "cart.deliveryInfo.address" },
          { path: "cart.paymentInfo.billingAddress" }
        ]
      }
    ]
  );
  const reqOpts = updateCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cart: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["cart"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCurrentCart2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = deleteCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function refreshCurrentCart2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = refreshCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function calculateCurrentCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    validationsConfig: options?.validationsConfig,
    customCalculationConfig: options?.customCalculationConfig
  });
  const reqOpts = calculateCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          validationsConfig: "$[0].validationsConfig",
          customCalculationConfig: "$[0].customCalculationConfig"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addLineItemsToCurrentCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      catalogItems: options?.catalogItems,
      customItems: options?.customItems
    }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [
          { path: "catalogItems.catalogOverrideFields.image" },
          { path: "customItems.attributes.image" }
        ]
      },
      {
        transformFn: import_page_url_v2.transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "customItems.attributes.url" }]
      }
    ]
  );
  const reqOpts = addLineItemsToCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          catalogItems: "$[0].catalogItems",
          customItems: "$[0].customItems"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeLineItemsFromCurrentCart2(lineItemIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    lineItemIds
  });
  const reqOpts = removeLineItemsFromCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { lineItemIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["lineItemIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateLineItemsInCurrentCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    lineItemUpdates: options?.lineItemUpdates
  });
  const reqOpts = updateLineItemsInCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { lineItemUpdates: "$[0].lineItemUpdates" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addDiscountToCurrentCart2(couponCode) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    couponCode
  });
  const reqOpts = addDiscountToCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { couponCode: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["couponCode"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDiscountFromCurrentCart2(discountId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    discountId
  });
  const reqOpts = removeDiscountFromCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { discountId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["discountId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addGiftCardToCurrentCart2(giftCardCode) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    giftCardCode
  });
  const reqOpts = addGiftCardToCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { giftCardCode: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["giftCardCode"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeGiftCardFromCurrentCart2(giftCardId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    giftCardId
  });
  const reqOpts = removeGiftCardFromCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: import_page_url_v22.transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { giftCardId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["giftCardId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CalculationComponent,
  CartStatus,
  ChannelType,
  DescriptionLineType,
  DiscountScope,
  DiscountSourceType,
  DiscountStatus,
  ErrorCode,
  FileType,
  ItemStatus,
  ItemTypeItemType,
  NameInLineItem,
  NameInOther,
  PaymentOptionType,
  RuleType,
  Severity,
  SubscriptionFrequency,
  SuggestedFix,
  TaxableAddressType,
  ValidationsConfig,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addDiscountToCurrentCart,
  addGiftCardToCurrentCart,
  addLineItemsToCurrentCart,
  calculateCurrentCart,
  createCurrentCart,
  deleteCurrentCart,
  getCurrentCart,
  refreshCurrentCart,
  removeDiscountFromCurrentCart,
  removeGiftCardFromCurrentCart,
  removeLineItemsFromCurrentCart,
  updateCurrentCart,
  updateLineItemsInCurrentCart
});
//# sourceMappingURL=index.typings.js.map