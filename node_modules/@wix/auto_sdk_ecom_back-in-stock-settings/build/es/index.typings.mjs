// src/ecom-v1-back-in-stock-settings-back-in-stock-settings.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-back-in-stock-settings-back-in-stock-settings.http.ts
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressEcomBackInStockBackInStockSettingsServiceUrl(opts) {
  const domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_back-in-stock-settings";
function startCollectingRequests(payload) {
  function __startCollectingRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_settings",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockSettingsService.StartCollectingRequests",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockSettingsServiceUrl({
        protoPath: "/v1/back-in-stock-notification-requests/settings/start-collecting",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __startCollectingRequests;
}
function stopCollectingRequests(payload) {
  function __stopCollectingRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_settings",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockSettingsService.StopCollectingRequests",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockSettingsServiceUrl({
        protoPath: "/v1/back-in-stock-notification-requests/settings/stop-collecting",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __stopCollectingRequests;
}
function getSettings(payload) {
  function __getSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_settings",
      method: "PUT",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockSettingsService.GetSettings",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockSettingsServiceUrl({
        protoPath: "/v1/back-in-stock-notification-requests/settings",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __getSettings;
}

// src/ecom-v1-back-in-stock-settings-back-in-stock-settings.universal.ts
async function startCollectingRequests2(appId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ appId });
  const reqOpts = startCollectingRequests(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { appId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["appId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function stopCollectingRequests2(appId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ appId });
  const reqOpts = stopCollectingRequests(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { appId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["appId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getSettings2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = getSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  getSettings2 as getSettings,
  startCollectingRequests2 as startCollectingRequests,
  stopCollectingRequests2 as stopCollectingRequests
};
//# sourceMappingURL=index.typings.mjs.map