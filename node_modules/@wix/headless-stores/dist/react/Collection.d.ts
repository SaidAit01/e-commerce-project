import { type V3Product } from "@wix/auto_sdk_stores_products-v-3";
/**
 * Props for Grid headless component
 */
export interface GridProps {
    /** Render prop function that receives product grid data */
    children: (props: GridRenderProps) => React.ReactNode;
}
/**
 * Render props for Grid component
 */
export interface GridRenderProps {
    /** Array of products */
    products: V3Product[];
    /** Whether products are loading */
    isLoading: boolean;
    /** Error message if any */
    error: string | null;
    /** Whether there are no products */
    isEmpty: boolean;
    /** Total number of products */
    totalProducts: number;
    /** Whether collection has products */
    hasProducts: boolean;
}
/**
 * Headless component for product grid
 *
 * @component
 * @example
 * ```tsx
 * import { Collection } from '@wix/stores/components';
 *
 * function ProductGrid() {
 *   return (
 *     <Collection.Grid>
 *       {({ products, isLoading, error, isEmpty, totalProducts, hasProducts }) => (
 *         <div>
 *           {isLoading && <div>Loading products...</div>}
 *           {error && <div>Error: {error}</div>}
 *           {isEmpty && <div>No products found</div>}
 *           {hasProducts && (
 *             <div>
 *               <p>Showing {products.length} of {totalProducts} products</p>
 *               <div className="product-grid">
 *                 {products.map(product => (
 *                   <div key={product.id} className="product-card">
 *                     <h3>{product.name}</h3>
 *                     <p>{product.price?.price} {product.price?.currency}</p>
 *                   </div>
 *                 ))}
 *               </div>
 *             </div>
 *           )}
 *         </div>
 *       )}
 *     </Collection.Grid>
 *   );
 * }
 * ```
 */
export declare const Grid: (props: GridProps) => import("react").ReactNode;
/**
 * Props for Item headless component
 */
export interface ItemProps {
    /** Product data */
    product: V3Product;
    /** Render prop function that receives product item data */
    children: (props: ItemRenderProps) => React.ReactNode;
}
/**
 * Render props for Item component
 */
export interface ItemRenderProps {
    /** Product ID */
    id: string;
    /** Product title */
    title: string;
    /** Product slug for URL */
    slug: string;
    /** Main product image URL */
    image: string | null;
    /** Product price */
    price: string;
    /** Compare at price (for strikethrough) */
    compareAtPrice: string | null;
    /** Product description */
    description: string;
    /** Whether product is available */
    available: boolean;
}
/**
 * Headless component for individual product item
 *
 * @component
 * @example
 * ```tsx
 * import { Collection } from '@wix/stores/components';
 *
 * function ProductCard({ product }) {
 *   return (
 *     <Collection.Item product={product}>
 *       {({ id, title, slug, image, price, compareAtPrice, description, available }) => (
 *         <div className={`product-card ${!available ? 'unavailable' : ''}`}>
 *           {image && <img src={image} alt={title} />}
 *           <h3>{title}</h3>
 *           <p>{description}</p>
 *           <div className="pricing">
 *             <span className="price">{price}</span>
 *             {compareAtPrice && (
 *               <span className="compare-price"><s>{compareAtPrice}</s></span>
 *             )}
 *           </div>
 *           {!available && <div className="badge">Out of Stock</div>}
 *           <a href={`/products/${slug}`}>View Product</a>
 *         </div>
 *       )}
 *     </Collection.Item>
 *   );
 * }
 * ```
 */
export declare const Item: (props: ItemProps) => import("react").ReactNode;
/**
 * Props for LoadMore headless component
 */
export interface LoadMoreProps {
    /** Render prop function that receives load more data */
    children: (props: LoadMoreRenderProps) => React.ReactNode;
}
/**
 * Render props for LoadMore component
 */
export interface LoadMoreRenderProps {
    /** Function to load more products */
    loadMore: () => Promise<void>;
    /** Function to refresh products */
    refresh: () => Promise<void>;
    /** Whether load more is currently loading */
    isLoading: boolean;
    /** Whether there are products */
    hasProducts: boolean;
    /** Total number of products currently loaded */
    totalProducts: number;
    /** Whether there are more products to load */
    hasMoreProducts: boolean;
}
/**
 * Headless component for load more products functionality
 * Note: V3 API uses simplified loading without traditional pagination
 *
 * @component
 * @example
 * ```tsx
 * import { Collection } from '@wix/stores/components';
 *
 * function LoadMoreButton() {
 *   return (
 *     <Collection.LoadMore>
 *       {({ loadMore, refresh, isLoading, hasProducts, totalProducts, hasMoreProducts }) => (
 *         <div className="load-more-section">
 *           {hasProducts && (
 *             <div>
 *               <p>Loaded {totalProducts} products</p>
 *               <div className="actions">
 *                 {hasMoreProducts && (
 *                   <button
 *                     onClick={loadMore}
 *                     disabled={isLoading}
 *                   >
 *                     {isLoading ? 'Loading...' : 'Load More Products'}
 *                   </button>
 *                 )}
 *                 <button onClick={refresh}>Refresh Collection</button>
 *               </div>
 *             </div>
 *           )}
 *         </div>
 *       )}
 *     </Collection.LoadMore>
 *   );
 * }
 * ```
 */
export declare const LoadMore: (props: LoadMoreProps) => import("react").ReactNode;
/**
 * Props for Header headless component
 */
export interface HeaderProps {
    /** Render prop function that receives collection header data */
    children: (props: HeaderRenderProps) => React.ReactNode;
}
/**
 * Render props for Header component
 */
export interface HeaderRenderProps {
    /** Total number of products */
    totalProducts: number;
    /** Whether collection is loading */
    isLoading: boolean;
    /** Whether collection has products */
    hasProducts: boolean;
}
/**
 * Headless component for collection header with product count
 *
 * @component
 * @example
 * ```tsx
 * import { Collection } from '@wix/stores/components';
 *
 * function CollectionHeader() {
 *   return (
 *     <Collection.Header>
 *       {({ totalProducts, isLoading, hasProducts }) => (
 *         <div className="collection-header">
 *           {isLoading && <div>Loading collection...</div>}
 *           {hasProducts && !isLoading && (
 *             <h2>Products ({totalProducts} items)</h2>
 *           )}
 *           {!hasProducts && !isLoading && (
 *             <h2>No products found</h2>
 *           )}
 *         </div>
 *       )}
 *     </Collection.Header>
 *   );
 * }
 * ```
 */
export declare const Header: (props: HeaderProps) => import("react").ReactNode;
/**
 * Props for Actions headless component
 */
export interface ActionsProps {
    /** Render prop function that receives collection actions data */
    children: (props: ActionsRenderProps) => React.ReactNode;
}
/**
 * Render props for Actions component
 */
export interface ActionsRenderProps {
    /** Function to refresh the collection */
    refresh: () => Promise<void>;
    /** Function to load more products */
    loadMore: () => Promise<void>;
    /** Whether actions are loading */
    isLoading: boolean;
    /** Error message if any */
    error: string | null;
}
/**
 * Headless component for collection actions (refresh, load more)
 * Replaces traditional pagination for V3 API
 *
 * @component
 * @example
 * ```tsx
 * import { Collection } from '@wix/stores/components';
 *
 * function CollectionActions() {
 *   return (
 *     <Collection.Actions>
 *       {({ refresh, loadMore, isLoading, error }) => (
 *         <div className="collection-actions">
 *           {error && (
 *             <div className="error">
 *               Error: {error}
 *               <button onClick={refresh}>Retry</button>
 *             </div>
 *           )}
 *           <div className="action-buttons">
 *             <button
 *               onClick={refresh}
 *               disabled={isLoading}
 *             >
 *               {isLoading ? 'Refreshing...' : 'Refresh'}
 *             </button>
 *             <button
 *               onClick={loadMore}
 *               disabled={isLoading}
 *             >
 *               Load More
 *             </button>
 *           </div>
 *         </div>
 *       )}
 *     </Collection.Actions>
 *   );
 * }
 * ```
 */
export declare const Actions: (props: ActionsProps) => import("react").ReactNode;
