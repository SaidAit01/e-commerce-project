import React from "react";
import { useService } from "@wix/services-manager-react";
import { RelatedProductsServiceDefinition } from "../services/related-products-service.js";
import { SignalsServiceDefinition } from "@wix/services-definitions/core-services/signals";
import { InventoryAvailabilityStatus, } from "@wix/auto_sdk_stores_products-v-3";
/**
 * Headless component for displaying related products list
 *
 * @component
 * @example
 * ```tsx
 * import { RelatedProducts } from '@wix/stores/components';
 *
 * function RecommendedProducts() {
 *   return (
 *     <RelatedProducts.List>
 *       {({ products, isLoading, error, hasProducts, refresh }) => (
 *         <div>
 *           <h3>You might also like</h3>
 *           {isLoading && <div>Loading related products...</div>}
 *           {error && <div>Error: {error}</div>}
 *           {hasProducts && (
 *             <div className="products-grid">
 *               {products.map(product => (
 *                 <div key={product.id}>
 *                   <h4>{product.name}</h4>
 *                   <p>{product.price?.price} {product.price?.currency}</p>
 *                 </div>
 *               ))}
 *             </div>
 *           )}
 *           <button onClick={refresh}>Refresh Recommendations</button>
 *         </div>
 *       )}
 *     </RelatedProducts.List>
 *   );
 * }
 * ```
 */
export const List = (props) => {
    const service = useService(RelatedProductsServiceDefinition);
    const signalsService = useService(SignalsServiceDefinition);
    const [products, setProducts] = React.useState([]);
    const [isLoading, setIsLoading] = React.useState(false);
    const [error, setError] = React.useState(null);
    const [hasProducts, setHasProducts] = React.useState(false);
    React.useEffect(() => {
        const effects = [
            signalsService.effect(() => {
                setProducts(service.relatedProducts.get());
            }),
            signalsService.effect(() => {
                setIsLoading(service.isLoading.get());
            }),
            signalsService.effect(() => {
                setError(service.error.get());
            }),
            signalsService.effect(() => {
                setHasProducts(service.hasRelatedProducts.get());
            }),
        ];
        return () => effects.forEach((dispose) => dispose());
    }, [service, signalsService]);
    return props.children({
        products,
        isLoading,
        error,
        hasProducts,
        refresh: service.refreshRelatedProducts,
    });
};
/**
 * Headless component for individual related product item
 *
 * @component
 * @example
 * ```tsx
 * import { RelatedProducts } from '@wix/stores/components';
 *
 * function RelatedProductCard({ product }) {
 *   return (
 *     <RelatedProducts.Item product={product}>
 *       {({ title, image, price, available, description, onQuickAdd }) => (
 *         <div className={`related-product ${!available ? 'unavailable' : ''}`}>
 *           {image && <img src={image} alt={title} />}
 *           <h4>{title}</h4>
 *           {description && <p>{description}</p>}
 *           <div className="price">{price}</div>
 *           {!available && <div className="badge">Out of Stock</div>}
 *           <div className="actions">
 *             <button onClick={onQuickAdd} disabled={!available}>
 *               Quick Add
 *             </button>
 *             <a href={`/product/${product.slug}`}>View Details</a>
 *           </div>
 *         </div>
 *       )}
 *     </RelatedProducts.Item>
 *   );
 * }
 * ```
 */
export const Item = (props) => {
    const { product } = props;
    const title = product.name || "Unknown Product";
    // Use actual v3 media structure - image is directly a string URL
    const image = product.media?.main?.image || null;
    // Create formatted price from raw amount since formattedAmount may not be available
    const rawPrice = product.actualPriceRange?.minValue?.amount;
    const price = rawPrice ? `$${rawPrice}` : "Price unavailable";
    const availabilityStatus = product.inventory?.availabilityStatus;
    const available = availabilityStatus === InventoryAvailabilityStatus.IN_STOCK ||
        availabilityStatus === InventoryAvailabilityStatus.PARTIALLY_OUT_OF_STOCK;
    const description = typeof product.description === "string" ? product.description : "";
    const handleQuickAdd = () => {
        // This would typically add the product to cart
        // For now, we'll just log it
        console.log("Quick add:", product.name);
    };
    return props.children({
        title,
        image,
        price,
        available,
        description,
        onQuickAdd: handleQuickAdd,
    });
};
