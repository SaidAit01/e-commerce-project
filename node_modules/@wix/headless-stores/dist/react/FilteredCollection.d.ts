import React, { type ReactNode } from "react";
import { type AvailableOptions, type FilterServiceAPI, type Filter } from "../services/filter-service.js";
import { type V3Product } from "@wix/auto_sdk_stores_products-v-3";
export type { AvailableOptions, Filter, FilterServiceAPI };
export interface FiltersLoadingProps {
    children: (data: {
        isFullyLoaded: boolean;
    }) => ReactNode;
}
/**
 * Headless component for displaying a loading state for filters
 *
 * @component
 * @example
 * ```tsx
 * import { FilteredCollection } from '@wix/stores/components';
 *
 * function FiltersLoadingIndicator() {
 *   return (
 *     <FilteredCollection.FiltersLoading>
 *       {({ isFullyLoaded }) => (
 *         <div>
 *           {!isFullyLoaded && (
 *             <div className="loading-pulse">
 *               Loading filters...
 *             </div>
 *           )}
 *         </div>
 *       )}
 *     </FilteredCollection.FiltersLoading>
 *   );
 * }
 * ```
 */
export declare const FiltersLoading: React.FC<FiltersLoadingProps>;
export interface FilteredGridProps {
    children: (data: {
        products: V3Product[];
        totalProducts: number;
        isLoading: boolean;
        error: string | null;
        isEmpty: boolean;
        hasMoreProducts: boolean;
    }) => ReactNode;
}
/**
 * Headless component for displaying a grid of filtered products
 *
 * @component
 * @example
 * ```tsx
 * import { FilteredCollection } from '@wix/stores/components';
 *
 * function FilteredProductsGrid() {
 *   return (
 *     <FilteredCollection.Grid>
 *       {({ products, isLoading, error, isEmpty, totalProducts, hasMoreProducts }) => (
 *         <div>
 *           {isLoading && <div>Loading filtered products...</div>}
 *           {error && <div>Error: {error}</div>}
 *           {isEmpty && <div>No products match your filters</div>}
 *           {products.length > 0 && (
 *             <div>
 *               <p>Showing {products.length} of {totalProducts} products</p>
 *               <div className="filtered-grid">
 *                 {products.map(product => (
 *                   <div key={product.id}>{product.name}</div>
 *                 ))}
 *               </div>
 *               {hasMoreProducts && <button>Load More</button>}
 *             </div>
 *           )}
 *         </div>
 *       )}
 *     </FilteredCollection.Grid>
 *   );
 * }
 * ```
 */
export declare const Grid: React.FC<FilteredGridProps>;
export interface FilteredItemProps {
    product: V3Product;
    children: (data: {
        title: string;
        image: string | null;
        imageAltText: string | null;
        price: string;
        compareAtPrice: string | null;
        available: boolean;
        slug: string;
        description?: string;
    }) => ReactNode;
}
/**
 * Headless component for displaying a filtered product item
 *
 * @component
 * @example
 * ```tsx
 * import { FilteredCollection } from '@wix/stores/components';
 *
 * function FilteredProductItem({ product }) {
 *   return (
 *     <FilteredCollection.Item product={product}>
 *       {({ title, image, price, compareAtPrice, available, slug, description }) => (
 *         <div className={`product-item ${!available ? 'unavailable' : ''}`}>
 *           {image && <img src={image} alt={title} />}
 *           <h3>{title}</h3>
 *           {description && <p>{description}</p>}
 *           <div className="price">
 *             <span className="current">{price}</span>
 *             {compareAtPrice && <span className="compare"><s>{compareAtPrice}</s></span>}
 *           </div>
 *           {!available && <div className="out-of-stock">Out of Stock</div>}
 *           <a href={`/product/${slug}`}>View Details</a>
 *         </div>
 *       )}
 *     </FilteredCollection.Item>
 *   );
 * }
 * ```
 */
export declare const Item: React.FC<FilteredItemProps>;
export interface FilteredLoadMoreProps {
    children: (data: {
        loadMore: () => Promise<void>;
        refresh: () => Promise<void>;
        isLoading: boolean;
        hasProducts: boolean;
        totalProducts: number;
        hasMoreProducts: boolean;
    }) => ReactNode;
}
/**
 * Headless component for load more filtered products functionality
 *
 * @component
 * @example
 * ```tsx
 * import { FilteredCollection } from '@wix/stores/components';
 *
 * function LoadMoreProducts() {
 *   return (
 *     <FilteredCollection.LoadMore>
 *       {({ loadMore, refresh, isLoading, hasProducts, totalProducts, hasMoreProducts }) => (
 *         <div>
 *           {hasProducts && (
 *             <div>
 *               <p>Showing products ({totalProducts} total)</p>
 *               {hasMoreProducts && (
 *                 <button
 *                   onClick={loadMore}
 *                   disabled={isLoading}
 *                 >
 *                   {isLoading ? 'Loading...' : 'Load More'}
 *                 </button>
 *               )}
 *               <button onClick={refresh}>Refresh</button>
 *             </div>
 *           )}
 *         </div>
 *       )}
 *     </FilteredCollection.LoadMore>
 *   );
 * }
 * ```
 */
export declare const LoadMore: React.FC<FilteredLoadMoreProps>;
export interface FilteredFiltersProps {
    children: (data: {
        applyFilters: (filters: Filter) => void;
        clearFilters: () => void;
        currentFilters: Filter;
        allProducts: V3Product[];
        availableOptions: AvailableOptions;
        isFiltered: boolean;
    }) => ReactNode;
}
/**
 * Headless component for product filters with available options
 *
 * @component
 * @example
 * ```tsx
 * import { FilteredCollection } from '@wix/stores/components';
 *
 * function ProductFilters() {
 *   return (
 *     <FilteredCollection.Filters>
 *       {({ applyFilters, clearFilters, currentFilters, availableOptions, isFiltered }) => (
 *         <div className="filters">
 *           <h3>Filters</h3>
 *           <div className="price-filter">
 *             <label>Price Range</label>
 *             <input
 *               type="range"
 *               min={availableOptions.priceRange.min}
 *               max={availableOptions.priceRange.max}
 *               value={currentFilters.priceRange.min}
 *               onChange={(e) => applyFilters({
 *                 ...currentFilters,
 *                 priceRange: { ...currentFilters.priceRange, min: Number(e.target.value) }
 *               })}
 *             />
 *           </div>
 *           {isFiltered && (
 *             <button onClick={clearFilters}>Clear All Filters</button>
 *           )}
 *         </div>
 *       )}
 *     </FilteredCollection.Filters>
 *   );
 * }
 * ```
 */
export declare const Filters: React.FC<FilteredFiltersProps>;
