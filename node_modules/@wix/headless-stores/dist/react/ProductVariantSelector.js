import { useService } from "@wix/services-manager-react";
import { SelectedVariantServiceDefinition } from "../services/selected-variant-service.js";
import { InventoryAvailabilityStatus, } from "@wix/auto_sdk_stores_products-v-3";
/**
 * Headless component for all product options
 *
 * @component
 * @example
 * ```tsx
 * import { ProductVariantSelector } from '@wix/stores/components';
 *
 * function VariantPicker() {
 *   return (
 *     <ProductVariantSelector.Options>
 *       {({ options, hasOptions, selectedChoices }) => (
 *         <div>
 *           {hasOptions && options.map(option => (
 *             <div key={option.id}>
 *               <label>{option.name}</label>
 *               <select value={selectedChoices[option.id] || ''}>
 *                 {option.choices?.map(choice => (
 *                   <option key={choice.id} value={choice.id}>
 *                     {choice.description}
 *                   </option>
 *                 ))}
 *               </select>
 *             </div>
 *           ))}
 *         </div>
 *       )}
 *     </ProductVariantSelector.Options>
 *   );
 * }
 * ```
 */
export const Options = (props) => {
    const variantService = useService(SelectedVariantServiceDefinition);
    const selectedChoices = variantService.selectedChoices.get();
    const options = variantService.productOptions.get();
    return props.children({
        options,
        hasOptions: options.length > 0,
        selectedChoices,
    });
};
/**
 * Headless component for choices within a specific product option
 *
 * @component
 * @example
 * ```tsx
 * import { ProductVariantSelector } from '@wix/stores/components';
 *
 * function OptionSelector({ option }) {
 *   return (
 *     <ProductVariantSelector.Option option={option}>
 *       {({ name, choices, selectedValue, hasChoices }) => (
 *         <div>
 *           <label>{name}</label>
 *           {hasChoices && (
 *             <select value={selectedValue || ''}>
 *               <option value="">Select {name}</option>
 *               {choices.map(choice => (
 *                 <option key={choice.id} value={choice.name}>
 *                   {choice.description}
 *                 </option>
 *               ))}
 *             </select>
 *           )}
 *         </div>
 *       )}
 *     </ProductVariantSelector.Option>
 *   );
 * }
 * ```
 */
export const Option = (props) => {
    const variantService = useService(SelectedVariantServiceDefinition);
    const selectedChoices = variantService.selectedChoices.get();
    const { option } = props;
    const name = option.name || "";
    const choices = option.choicesSettings?.choices || [];
    const selectedValue = selectedChoices[name] || null;
    return props.children({
        name,
        type: option.optionRenderType,
        choices,
        selectedValue,
        hasChoices: choices.length > 0,
    });
};
/**
 * Headless component for individual choice selection
 *
 * @component
 * @example
 * ```tsx
 * import { ProductVariantSelector } from '@wix/stores/components';
 *
 * function ChoiceButton({ option, choice }) {
 *   return (
 *     <ProductVariantSelector.Choice option={option} choice={choice}>
 *       {({ value, isSelected, isVisible, isInStock, onSelect }) => (
 *         <button
 *           onClick={onSelect}
 *           disabled={!isVisible || !isInStock}
 *           className={`choice-btn ${isSelected ? 'selected' : ''} ${!isInStock ? 'out-of-stock' : ''}`}
 *         >
 *           {value}
 *           {!isInStock && ' (Out of Stock)'}
 *         </button>
 *       )}
 *     </ProductVariantSelector.Choice>
 *   );
 * }
 * ```
 */
export const Choice = (props) => {
    const variantService = useService(SelectedVariantServiceDefinition);
    const selectedChoices = variantService.selectedChoices.get();
    const { option, choice } = props;
    const optionName = option.name || "";
    const choiceValue = choice.name || "";
    const isSelected = selectedChoices[optionName] === choiceValue;
    // Check if this choice is available based on current selections
    const isVisible = variantService.isChoiceAvailable(optionName, choiceValue);
    // Check if this choice results in an in-stock variant
    const isInStock = variantService.isChoiceInStock(optionName, choiceValue);
    // Check if this choice is available for pre-order
    const isPreOrderEnabled = variantService.isChoicePreOrderEnabled(optionName, choiceValue);
    const value = choiceValue;
    const onSelect = () => {
        const newChoices = {
            ...selectedChoices,
            [optionName]: choiceValue,
        };
        variantService.setSelectedChoices(newChoices);
    };
    return props.children({
        value,
        description: undefined, // v3 choices don't have separate description field
        isSelected,
        isVisible,
        isInStock,
        isPreOrderEnabled,
        onSelect,
        optionName,
        choiceValue,
    });
};
/**
 * Headless component for product stock status
 *
 * @component
 * @example
 * ```tsx
 * import { ProductVariantSelector } from '@wix/stores/components';
 *
 * function StockIndicator() {
 *   return (
 *     <ProductVariantSelector.Stock>
 *       {({ inStock, isPreOrderEnabled, selectedQuantity, availableQuantity, incrementQuantity, decrementQuantity }) => (
 *         <div>
 *           <div className={`stock-status ${inStock ? 'in-stock' : 'out-of-stock'}`}>
 *             {inStock ? 'In Stock' : isPreOrderEnabled ? 'Pre-order Available' : 'Out of Stock'}
 *           </div>
 *           {availableQuantity && (
 *             <div>Only {availableQuantity} left!</div>
 *           )}
 *           <div className="quantity-selector">
 *             <button onClick={decrementQuantity}>-</button>
 *             <span>{selectedQuantity}</span>
 *             <button onClick={incrementQuantity}>+</button>
 *           </div>
 *         </div>
 *       )}
 *     </ProductVariantSelector.Stock>
 *   );
 * }
 * ```
 */
export const Stock = (props) => {
    const variantService = useService(SelectedVariantServiceDefinition);
    const inStock = variantService.isInStock.get();
    const isPreOrderEnabled = variantService.isPreOrderEnabled.get();
    const trackInventory = variantService.trackQuantity.get();
    const currentVariantId = variantService.selectedVariantId.get();
    const availableQuantity = variantService.quantityAvailable.get();
    const selectedQuantity = variantService.selectedQuantity.get();
    // Return raw availability status - UI components will handle display conversion
    const availabilityStatus = inStock
        ? InventoryAvailabilityStatus.IN_STOCK
        : InventoryAvailabilityStatus.OUT_OF_STOCK;
    const incrementQuantity = () => {
        variantService.incrementQuantity();
    };
    const decrementQuantity = () => {
        variantService.decrementQuantity();
    };
    return props.children({
        inStock,
        availableQuantity,
        isPreOrderEnabled,
        currentVariantId,
        availabilityStatus,
        trackInventory,
        selectedQuantity,
        incrementQuantity,
        decrementQuantity,
    });
};
/**
 * Headless component for resetting variant selections
 *
 * @component
 * @example
 * ```tsx
 * import { ProductVariantSelector } from '@wix/stores/components';
 *
 * function ResetButton() {
 *   return (
 *     <ProductVariantSelector.Reset>
 *       {({ onReset, hasSelections }) => (
 *         hasSelections && (
 *           <button onClick={onReset} className="reset-button">
 *             Clear All Selections
 *           </button>
 *         )
 *       )}
 *     </ProductVariantSelector.Reset>
 *   );
 * }
 * ```
 */
export const Reset = (props) => {
    const variantService = useService(SelectedVariantServiceDefinition);
    const selectedChoices = variantService.selectedChoices.get();
    const hasSelections = Object.keys(selectedChoices).length > 0;
    const onReset = () => {
        variantService.resetSelections();
    };
    return props.children({
        onReset,
        hasSelections,
    });
};
