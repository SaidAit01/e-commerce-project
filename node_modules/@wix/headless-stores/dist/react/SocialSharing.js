import React from "react";
import { useService } from "@wix/services-manager-react";
import { SocialSharingServiceDefinition, } from "../services/social-sharing-service.js";
import { SignalsServiceDefinition } from "@wix/services-definitions/core-services/signals";
/**
 * Headless component for social sharing root
 *
 * @component
 * @example
 * ```tsx
 * import { SocialSharing } from '@wix/stores/components';
 *
 * function ShareProduct() {
 *   const productUrl = 'https://example.com/product/123';
 *   const productTitle = 'Amazing Product';
 *
 *   return (
 *     <SocialSharing.Root>
 *       {({ platforms, shareCount, shareFacebook, shareTwitter, copyLink, shareNative }) => (
 *         <div>
 *           <p>Share this product ({shareCount} shares)</p>
 *           <div className="share-buttons">
 *             <button onClick={() => shareFacebook(productUrl, productTitle)}>
 *               Share on Facebook
 *             </button>
 *             <button onClick={() => shareTwitter(productUrl, `Check out ${productTitle}!`)}>
 *               Share on Twitter
 *             </button>
 *             <button onClick={() => copyLink(productUrl)}>
 *               Copy Link
 *             </button>
 *             <button onClick={() => shareNative({
 *               title: productTitle,
 *               text: 'Check this out!',
 *               url: productUrl
 *             })}>
 *               Share
 *             </button>
 *           </div>
 *         </div>
 *       )}
 *     </SocialSharing.Root>
 *   );
 * }
 * ```
 */
export const Root = (props) => {
    const service = useService(SocialSharingServiceDefinition);
    const signalsService = useService(SignalsServiceDefinition);
    const [platforms, setPlatforms] = React.useState([]);
    const [shareCount, setShareCount] = React.useState(0);
    const [lastShared, setLastShared] = React.useState(null);
    React.useEffect(() => {
        const effects = [
            signalsService.effect(() => {
                setPlatforms(service.availablePlatforms.get());
            }),
            signalsService.effect(() => {
                setShareCount(service.shareCount.get());
            }),
            signalsService.effect(() => {
                setLastShared(service.lastSharedPlatform.get());
            }),
        ];
        return () => effects.forEach((dispose) => dispose());
    }, [service, signalsService]);
    return props.children({
        platforms,
        shareCount,
        lastShared,
        shareFacebook: service.shareToFacebook,
        shareTwitter: service.shareToTwitter,
        shareLinkedIn: service.shareToLinkedIn,
        shareWhatsApp: service.shareToWhatsApp,
        shareEmail: service.shareToEmail,
        copyLink: service.copyToClipboard,
        shareNative: service.shareNative,
    });
};
/**
 * Headless component for individual social platform
 *
 * @component
 * @example
 * ```tsx
 * import { SocialSharing } from '@wix/stores/components';
 *
 * function SocialButton({ platform, onClick }) {
 *   return (
 *     <SocialSharing.Platform platform={platform} onClick={onClick}>
 *       {({ platform, onSelect }) => (
 *         <button
 *           onClick={onSelect}
 *           className={`social-btn social-btn-${platform.name.toLowerCase()}`}
 *         >
 *           <span className="icon">{platform.icon}</span>
 *           Share on {platform.name}
 *         </button>
 *       )}
 *     </SocialSharing.Platform>
 *   );
 * }
 * ```
 */
export const Platform = (props) => {
    const { platform, onClick } = props;
    return props.children({
        platform,
        onSelect: onClick,
    });
};
/**
 * Headless component for social sharing platforms with logic
 *
 * @component
 * @example
 * ```tsx
 * import { SocialSharing } from '@wix/stores/components';
 *
 * function SocialShareButtons() {
 *   return (
 *     <SocialSharing.Platforms
 *       url="https://example.com/product/123"
 *       title="Amazing Product"
 *       description="Check out this amazing product!"
 *       hashtags={['product', 'amazing']}
 *     >
 *       {({ platforms, shareFacebook, shareTwitter, shareLinkedIn, copyLink, shareNative }) => (
 *         <div className="social-platforms">
 *           <button onClick={shareFacebook}>Share on Facebook</button>
 *           <button onClick={shareTwitter}>Share on Twitter</button>
 *           <button onClick={shareLinkedIn}>Share on LinkedIn</button>
 *           <button onClick={() => copyLink()}>Copy Link</button>
 *           <button onClick={() => shareNative()}>Share</button>
 *         </div>
 *       )}
 *     </SocialSharing.Platforms>
 *   );
 * }
 * ```
 */
export const Platforms = (props) => {
    const { url, title, description = "", hashtags = [] } = props;
    const service = useService(SocialSharingServiceDefinition);
    const signalsService = useService(SignalsServiceDefinition);
    const [platforms, setPlatforms] = React.useState([]);
    React.useEffect(() => {
        const dispose = signalsService.effect(() => {
            setPlatforms(service.availablePlatforms.get());
        });
        return dispose;
    }, [service, signalsService]);
    const shareFacebook = () => service.shareToFacebook(url, title, description);
    const shareTwitter = () => service.shareToTwitter(url, title, hashtags);
    const shareLinkedIn = () => service.shareToLinkedIn(url, title, description);
    const shareWhatsApp = () => service.shareToWhatsApp(url, `${title} - ${description}`);
    const shareEmail = () => service.shareToEmail(url, title, description);
    const copyLink = () => service.copyToClipboard(url);
    const shareNative = () => service.shareNative({ title, text: description, url });
    return props.children({
        platforms,
        shareFacebook,
        shareTwitter,
        shareLinkedIn,
        shareWhatsApp,
        shareEmail,
        copyLink,
        shareNative,
    });
};
