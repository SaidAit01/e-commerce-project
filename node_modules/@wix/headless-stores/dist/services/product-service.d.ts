import { type Signal } from "@wix/services-definitions/core-services/signals";
import * as productsV3 from "@wix/auto_sdk_stores_products-v-3";
export interface ProductServiceAPI {
    product: Signal<productsV3.V3Product>;
    isLoading: Signal<boolean>;
    error: Signal<string | null>;
    loadProduct: (slug: string) => Promise<void>;
}
export declare const ProductServiceDefinition: string & {
    __api: ProductServiceAPI;
    __config: {};
    isServiceDefinition?: boolean;
} & ProductServiceAPI;
export interface ProductServiceConfig {
    product: productsV3.V3Product;
}
export declare const ProductService: import("@wix/services-definitions").ServiceFactory<string & {
    __api: ProductServiceAPI;
    __config: {};
    isServiceDefinition?: boolean;
} & ProductServiceAPI, ProductServiceConfig>;
export interface SuccessProductServiceConfigResult {
    type: "success";
    config: ProductServiceConfig;
}
export interface NotFoundProductServiceConfigResult {
    type: "notFound";
}
/**
 * Loads product service configuration from the Wix Products API for SSR initialization.
 * This function is designed to be used during Server-Side Rendering (SSR) to preload
 * a specific product by slug that will be used to configure the ProductService.
 *
 * @param productSlug The product slug to load
 * @returns Promise that resolves to ProductServiceConfigResult (success with config or notFound)
 *
 * @example
 * ```astro
 * ---
 * // Astro page example - pages/product/[slug].astro
 * import { loadProductServiceConfig } from '@wix/stores/services';
 * import { Product } from '@wix/stores/components';
 *
 * // Get product slug from URL params
 * const { slug } = Astro.params;
 *
 * // Load product data during SSR
 * const productResult = await loadProductServiceConfig(slug);
 *
 * // Handle not found case
 * if (productResult.type === 'notFound') {
 *   return Astro.redirect('/404');
 * }
 * ---
 *
 * <Product.Root productConfig={productResult.config}>
 *   <Product.Name>
 *     {({ name }) => <h1>{name}</h1>}
 *   </Product.Name>
 * </Product.Root>
 * ```
 *
 * @example
 * ```tsx
 * // Next.js page example - pages/product/[slug].tsx
 * import { GetServerSideProps } from 'next';
 * import { loadProductServiceConfig } from '@wix/stores/services';
 * import { Product } from '@wix/stores/components';
 *
 * interface ProductPageProps {
 *   productConfig: Awaited<ReturnType<typeof loadProductServiceConfig>>['config'];
 * }
 *
 * export const getServerSideProps: GetServerSideProps<ProductPageProps> = async ({ params }) => {
 *   const slug = params?.slug as string;
 *
 *   // Load product data during SSR
 *   const productResult = await loadProductServiceConfig(slug);
 *
 *   // Handle not found case
 *   if (productResult.type === 'notFound') {
 *     return {
 *       notFound: true,
 *     };
 *   }
 *
 *   return {
 *     props: {
 *       productConfig: productResult.config,
 *     },
 *   };
 * };
 *
 * export default function ProductPage({ productConfig }: ProductPageProps) {
 *   return (
 *     <Product.Root productConfig={productConfig}>
 *       <Product.Name>
 *         {({ name }) => <h1>{name}</h1>}
 *       </Product.Name>
 *     </Product.Root>
 *   );
 * }
 * ```
 */
export declare function loadProductServiceConfig(productSlug: string): Promise<SuccessProductServiceConfigResult | NotFoundProductServiceConfigResult>;
