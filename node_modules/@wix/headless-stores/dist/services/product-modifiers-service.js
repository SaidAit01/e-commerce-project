import { defineService, implementService, } from "@wix/services-definitions";
import { SignalsServiceDefinition, } from "@wix/services-definitions/core-services/signals";
import * as productsV3 from "@wix/auto_sdk_stores_products-v-3";
import { ProductServiceDefinition } from "./product-service.js";
export const ProductModifiersServiceDefinition = defineService("productModifiers");
export const ProductModifiersService = implementService.withConfig()(ProductModifiersServiceDefinition, ({ getService }) => {
    const signalsService = getService(SignalsServiceDefinition);
    const productService = getService(ProductServiceDefinition);
    const selectedModifiers = signalsService.signal({});
    const isLoading = signalsService.signal(false);
    const error = signalsService.signal(null);
    // Extract modifiers from product
    const modifiers = signalsService.computed(() => {
        const configProduct = productService.product.get();
        return (configProduct?.modifiers || []);
    });
    const hasModifiers = signalsService.computed(() => {
        const mods = modifiers.get();
        return mods.length > 0;
    });
    const setModifierChoice = (modifierName, choiceValue) => {
        const current = selectedModifiers.get();
        selectedModifiers.set({
            ...current,
            [modifierName]: {
                modifierName,
                choiceValue,
            },
        });
    };
    const setModifierFreeText = (modifierName, freeTextValue) => {
        const current = selectedModifiers.get();
        selectedModifiers.set({
            ...current,
            [modifierName]: {
                modifierName,
                freeTextValue,
            },
        });
    };
    const clearModifier = (modifierName) => {
        const current = selectedModifiers.get();
        const updated = { ...current };
        delete updated[modifierName];
        selectedModifiers.set(updated);
    };
    const clearAllModifiers = () => {
        selectedModifiers.set({});
    };
    const getModifierValue = (modifierName) => {
        const current = selectedModifiers.get();
        return current[modifierName] || null;
    };
    const isModifierRequired = (modifierName) => {
        const mods = modifiers.get();
        const modifier = mods.find((m) => m.name === modifierName);
        return modifier?.mandatory || false;
    };
    const hasRequiredModifiers = () => {
        const mods = modifiers.get();
        return mods.some((m) => m.mandatory);
    };
    const areAllRequiredModifiersFilled = () => {
        const mods = modifiers.get();
        const current = selectedModifiers.get();
        return mods.every((modifier) => {
            if (!modifier.mandatory)
                return true;
            const selectedValue = current[modifier.name || ""];
            if (!selectedValue)
                return false;
            // Check based on modifier type
            const renderType = modifier.modifierRenderType;
            if (!renderType)
                return false;
            if (renderType === productsV3.ModifierRenderType.SWATCH_CHOICES ||
                renderType === productsV3.ModifierRenderType.TEXT_CHOICES) {
                return !!selectedValue.choiceValue;
            }
            else if (renderType === productsV3.ModifierRenderType.FREE_TEXT) {
                return (!!selectedValue.freeTextValue &&
                    selectedValue.freeTextValue.trim() !== "");
            }
            return false;
        });
    };
    return {
        modifiers,
        selectedModifiers,
        hasModifiers,
        isLoading,
        error,
        setModifierChoice,
        setModifierFreeText,
        clearModifier,
        clearAllModifiers,
        getModifierValue,
        isModifierRequired,
        hasRequiredModifiers,
        areAllRequiredModifiersFilled,
    };
});
export function createProductModifiersServiceConfig(product) {
    return {
        product,
    };
}
