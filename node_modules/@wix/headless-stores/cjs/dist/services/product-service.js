import { defineService, implementService } from "@wix/services-definitions";
import { SignalsServiceDefinition, } from "@wix/services-definitions/core-services/signals";
import * as productsV3 from "@wix/auto_sdk_stores_products-v-3";
export const ProductServiceDefinition = defineService("product");
export const ProductService = implementService.withConfig()(ProductServiceDefinition, ({ getService, config }) => {
    const signalsService = getService(SignalsServiceDefinition);
    const product = signalsService.signal(config.product);
    const isLoading = signalsService.signal(false);
    const error = signalsService.signal(null);
    const loadProduct = async (slug) => {
        isLoading.set(true);
        const productResponse = await loadProductBySlug(slug);
        if (!productResponse.product) {
            error.set("Product not found");
        }
        else {
            product.set(productResponse.product);
            error.set(null);
        }
        isLoading.set(false);
    };
    return {
        product,
        isLoading,
        error,
        loadProduct,
    };
});
const loadProductBySlug = async (slug) => {
    const productResponse = await productsV3.getProductBySlug(slug, {
        fields: [
            "DESCRIPTION",
            "DIRECT_CATEGORIES_INFO",
            "BREADCRUMBS_INFO",
            "INFO_SECTION",
            "MEDIA_ITEMS_INFO",
            "PLAIN_DESCRIPTION",
            "THUMBNAIL",
            "URL",
            "VARIANT_OPTION_CHOICE_NAMES",
            "WEIGHT_MEASUREMENT_UNIT_INFO",
        ],
    });
    return productResponse;
};
/**
 * Loads product service configuration from the Wix Products API for SSR initialization.
 * This function is designed to be used during Server-Side Rendering (SSR) to preload
 * a specific product by slug that will be used to configure the ProductService.
 *
 * @param productSlug The product slug to load
 * @returns Promise that resolves to ProductServiceConfigResult (success with config or notFound)
 *
 * @example
 * ```astro
 * ---
 * // Astro page example - pages/product/[slug].astro
 * import { loadProductServiceConfig } from '@wix/stores/services';
 * import { Product } from '@wix/stores/components';
 *
 * // Get product slug from URL params
 * const { slug } = Astro.params;
 *
 * // Load product data during SSR
 * const productResult = await loadProductServiceConfig(slug);
 *
 * // Handle not found case
 * if (productResult.type === 'notFound') {
 *   return Astro.redirect('/404');
 * }
 * ---
 *
 * <Product.Root productConfig={productResult.config}>
 *   <Product.Name>
 *     {({ name }) => <h1>{name}</h1>}
 *   </Product.Name>
 * </Product.Root>
 * ```
 *
 * @example
 * ```tsx
 * // Next.js page example - pages/product/[slug].tsx
 * import { GetServerSideProps } from 'next';
 * import { loadProductServiceConfig } from '@wix/stores/services';
 * import { Product } from '@wix/stores/components';
 *
 * interface ProductPageProps {
 *   productConfig: Awaited<ReturnType<typeof loadProductServiceConfig>>['config'];
 * }
 *
 * export const getServerSideProps: GetServerSideProps<ProductPageProps> = async ({ params }) => {
 *   const slug = params?.slug as string;
 *
 *   // Load product data during SSR
 *   const productResult = await loadProductServiceConfig(slug);
 *
 *   // Handle not found case
 *   if (productResult.type === 'notFound') {
 *     return {
 *       notFound: true,
 *     };
 *   }
 *
 *   return {
 *     props: {
 *       productConfig: productResult.config,
 *     },
 *   };
 * };
 *
 * export default function ProductPage({ productConfig }: ProductPageProps) {
 *   return (
 *     <Product.Root productConfig={productConfig}>
 *       <Product.Name>
 *         {({ name }) => <h1>{name}</h1>}
 *       </Product.Name>
 *     </Product.Root>
 *   );
 * }
 * ```
 */
export async function loadProductServiceConfig(productSlug) {
    try {
        // Use getProductBySlug directly - single API call with comprehensive fields
        const productResponse = await loadProductBySlug(productSlug);
        if (!productResponse.product) {
            return { type: "notFound" };
        }
        return {
            type: "success",
            config: {
                product: productResponse.product,
            },
        };
    }
    catch (error) {
        console.error(`Failed to load product for slug "${productSlug}":`, error);
        return { type: "notFound" };
    }
}
