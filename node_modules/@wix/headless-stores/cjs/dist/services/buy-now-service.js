import { defineService, implementService, } from "@wix/services-definitions";
import { SignalsServiceDefinition, } from "@wix/services-definitions/core-services/signals";
import { getCheckoutUrlForProduct } from "../utils/index.js";
import { getProductBySlug } from "@wix/auto_sdk_stores_products-v-3";
export const BuyNowServiceDefinition = defineService("BuyNow");
export const BuyNowServiceImplementation = implementService.withConfig()(BuyNowServiceDefinition, ({ getService, config }) => {
    const signalsService = getService(SignalsServiceDefinition);
    const loadingSignal = signalsService.signal(false);
    const errorSignal = signalsService.signal(null);
    const inStockSignal = signalsService.signal(config.inStock);
    const preOrderAvailableSignal = signalsService.signal(config.preOrderAvailable);
    return {
        redirectToCheckout: async () => {
            loadingSignal.set(true);
            try {
                const checkoutUrl = await getCheckoutUrlForProduct(config.productId, config.variantId);
                window.location.href = checkoutUrl;
            }
            catch (error) {
                errorSignal.set(error.toString());
                loadingSignal.set(false);
            }
        },
        loadingSignal,
        errorSignal,
        inStockSignal,
        preOrderAvailableSignal,
        productName: config.productName,
        price: config.price,
        currency: config.currency,
    };
});
export const loadBuyNowServiceInitialData = async (productSlug, variantId) => {
    const res = await getProductBySlug(productSlug, {
        fields: ["CURRENCY"],
    });
    const product = res.product;
    const selectedVariant = variantId
        ? product.variantsInfo?.variants?.find((v) => v._id === variantId)
        : product.variantsInfo?.variants?.[0];
    const price = selectedVariant?.price?.actualPrice?.amount ??
        product.actualPriceRange?.minValue?.amount;
    const inStock = selectedVariant?.inventoryStatus?.inStock;
    const preOrderAvailable = selectedVariant?.inventoryStatus?.preorderEnabled;
    return {
        [BuyNowServiceDefinition]: {
            productId: product._id,
            productName: product.name,
            price: price,
            currency: product.currency,
            variantId: selectedVariant?._id,
            inStock,
            preOrderAvailable,
        },
    };
};
export const buyNowServiceBinding = (servicesConfigs, additionalConfig = {}) => {
    return [
        BuyNowServiceDefinition,
        BuyNowServiceImplementation,
        {
            ...servicesConfigs[BuyNowServiceDefinition],
            ...additionalConfig,
        },
    ];
};
