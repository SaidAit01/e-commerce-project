import { defineService, implementService } from "@wix/services-definitions";
import { SignalsServiceDefinition, } from "@wix/services-definitions/core-services/signals";
import { SocialPlatform, SocialPlatformShareUrl, } from "../enums/social-platform-enums.js";
export const SocialSharingServiceDefinition = defineService("socialSharing");
export const SocialSharingService = implementService.withConfig()(SocialSharingServiceDefinition, ({ getService }) => {
    const signalsService = getService(SignalsServiceDefinition);
    // Platform metadata is handled in components layer, only business logic here
    const availablePlatforms = signalsService.signal([
        {
            name: "Facebook",
            icon: "facebook",
            color: "#1877F2",
            shareUrl: SocialPlatformShareUrl.FACEBOOK,
        },
        {
            name: "Twitter",
            icon: "twitter",
            color: "#1DA1F2",
            shareUrl: SocialPlatformShareUrl.TWITTER,
        },
        {
            name: "LinkedIn",
            icon: "linkedin",
            color: "#0A66C2",
            shareUrl: SocialPlatformShareUrl.LINKEDIN,
        },
        {
            name: "WhatsApp",
            icon: "whatsapp",
            color: "#25D366",
            shareUrl: SocialPlatformShareUrl.WHATSAPP,
        },
        {
            name: "Email",
            icon: "mail",
            color: "#EA4335",
            shareUrl: SocialPlatformShareUrl.EMAIL,
        },
    ]);
    const shareCount = signalsService.signal(0);
    const lastSharedPlatform = signalsService.signal(null);
    const openShareWindow = (url, platform) => {
        const width = 600;
        const height = 400;
        const left = (window.screen.width - width) / 2;
        const top = (window.screen.height - height) / 2;
        window.open(url, `share-${platform}`, `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes`);
        trackShare(platform);
    };
    const shareToFacebook = (url, title, description) => {
        const shareUrl = new URL(SocialPlatformShareUrl.FACEBOOK);
        shareUrl.searchParams.set("u", url);
        shareUrl.searchParams.set("quote", `${title}${description ? ` - ${description}` : ""}`);
        openShareWindow(shareUrl.toString(), SocialPlatform.FACEBOOK);
    };
    const shareToTwitter = (url, text, hashtags) => {
        const shareUrl = new URL(SocialPlatformShareUrl.TWITTER);
        shareUrl.searchParams.set("url", url);
        shareUrl.searchParams.set("text", text);
        if (hashtags && hashtags.length > 0) {
            shareUrl.searchParams.set("hashtags", hashtags.join(","));
        }
        openShareWindow(shareUrl.toString(), SocialPlatform.TWITTER);
    };
    const shareToLinkedIn = (url, title, summary) => {
        const shareUrl = new URL(SocialPlatformShareUrl.LINKEDIN);
        shareUrl.searchParams.set("url", url);
        shareUrl.searchParams.set("title", title);
        if (summary) {
            shareUrl.searchParams.set("summary", summary);
        }
        openShareWindow(shareUrl.toString(), SocialPlatform.LINKEDIN);
    };
    const shareToWhatsApp = (url, text) => {
        const message = `${text} ${url}`;
        const shareUrl = `${SocialPlatformShareUrl.WHATSAPP}?text=${encodeURIComponent(message)}`;
        openShareWindow(shareUrl, SocialPlatform.WHATSAPP);
    };
    const shareToEmail = (url, subject, body) => {
        const emailBody = `${body}\n\n${url}`;
        const mailtoUrl = `${SocialPlatformShareUrl.EMAIL}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(emailBody)}`;
        window.location.href = mailtoUrl;
        trackShare(SocialPlatform.EMAIL);
    };
    const copyToClipboard = async (url) => {
        try {
            await navigator.clipboard.writeText(url);
            trackShare(SocialPlatform.CLIPBOARD);
            return true;
        }
        catch (err) {
            console.error("Failed to copy to clipboard:", err);
            return false;
        }
    };
    const shareNative = async (data) => {
        try {
            if (navigator.share) {
                await navigator.share(data);
                trackShare(SocialPlatform.NATIVE);
                return true;
            }
            return false;
        }
        catch (err) {
            console.error("Failed to share natively:", err);
            return false;
        }
    };
    const trackShare = (platform) => {
        const currentCount = shareCount.get();
        shareCount.set(currentCount + 1);
        lastSharedPlatform.set(platform);
        console.log(`Shared to ${platform} - Total shares: ${currentCount + 1}`);
    };
    return {
        availablePlatforms,
        shareCount,
        lastSharedPlatform,
        shareToFacebook,
        shareToTwitter,
        shareToLinkedIn,
        shareToWhatsApp,
        shareToEmail,
        copyToClipboard,
        shareNative,
        trackShare,
    };
});
