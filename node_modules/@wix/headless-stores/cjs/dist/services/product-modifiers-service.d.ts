import { type ServiceFactoryConfig } from "@wix/services-definitions";
import { type Signal, type ReadOnlySignal } from "@wix/services-definitions/core-services/signals";
import * as productsV3 from "@wix/auto_sdk_stores_products-v-3";
export interface ModifierValue {
    modifierName: string;
    choiceValue?: string;
    freeTextValue?: string;
}
export interface ProductModifiersServiceAPI {
    modifiers: ReadOnlySignal<productsV3.ConnectedModifier[]>;
    selectedModifiers: Signal<Record<string, ModifierValue>>;
    hasModifiers: ReadOnlySignal<boolean>;
    isLoading: Signal<boolean>;
    error: Signal<string | null>;
    setModifierChoice: (modifierName: string, choiceValue: string) => void;
    setModifierFreeText: (modifierName: string, freeTextValue: string) => void;
    clearModifier: (modifierName: string) => void;
    clearAllModifiers: () => void;
    getModifierValue: (modifierName: string) => ModifierValue | null;
    isModifierRequired: (modifierName: string) => boolean;
    hasRequiredModifiers: () => boolean;
    areAllRequiredModifiersFilled: () => boolean;
}
export declare const ProductModifiersServiceDefinition: string & {
    __api: ProductModifiersServiceAPI;
    __config: {};
    isServiceDefinition?: boolean;
} & ProductModifiersServiceAPI;
export declare const ProductModifiersService: import("@wix/services-definitions").ServiceFactory<string & {
    __api: ProductModifiersServiceAPI;
    __config: {};
    isServiceDefinition?: boolean;
} & ProductModifiersServiceAPI, unknown>;
export declare function createProductModifiersServiceConfig(product: productsV3.V3Product): ServiceFactoryConfig<typeof ProductModifiersService>;
