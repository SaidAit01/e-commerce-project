import { checkout } from "@wix/ecom";
import { redirects } from "@wix/redirects";
import { auth } from "@wix/essentials";
/**
 * Creates a factory function to generate checkout URLs for custom line items with a fixed price.
 * This is useful when you have a single product or service with a known price,
 * and you want to dynamically create checkout sessions for it.
 *
 * @param factoryOpts - The options for the factory, including the price.
 * @returns A function that takes `CustomLineItemCheckoutOptions` and returns a checkout URL.
 */
export function getCustomLineItemCheckoutURLFactory(factoryOpts) {
    /**
     * Generates a checkout URL for a custom line item.
     * @param opts - The options for the custom line item checkout.
     * @returns A promise that resolves to the full URL for the redirect session to the checkout.
     * @throws Will throw an error if the checkout creation or redirect session fails.
     */
    return async function getCustomLineItemCheckoutURL() {
        try {
            const checkoutResult = await auth.elevate(checkout.createCheckout)({
                customLineItems: [
                    {
                        productName: {
                            original: factoryOpts.productName,
                        },
                        price: factoryOpts.price,
                        quantity: factoryOpts.quantity || 1,
                        itemType: {
                            preset: checkout.ItemTypeItemType.PHYSICAL,
                        },
                        priceDescription: {
                            original: factoryOpts.priceDescription
                        },
                        policies: factoryOpts.policies || [],
                    }
                ],
                channelType: checkout.ChannelType.WEB,
                ...(factoryOpts.currency ? {
                    checkoutInfo: {
                        currency: factoryOpts.currency,
                    }
                } : {})
            });
            if (!checkoutResult._id) {
                throw new Error(`Failed to create checkout for custom line item ${factoryOpts.productName}`);
            }
            const { redirectSession } = await redirects.createRedirectSession({
                ecomCheckout: { checkoutId: checkoutResult._id },
                callbacks: {
                    ...(factoryOpts.postFlowUrl ? { postFlowUrl: factoryOpts.postFlowUrl } : {})
                },
            });
            return redirectSession?.fullUrl;
        }
        catch (error) {
            throw error;
        }
    };
}
