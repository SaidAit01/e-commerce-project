"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  AggregationType: () => AggregationType,
  Alignment: () => Alignment,
  AppType: () => AppType,
  AspectRatio: () => AspectRatio,
  BackgroundType: () => BackgroundType,
  ButtonDataType: () => ButtonDataType,
  Crop: () => Crop,
  DecorationType: () => DecorationType,
  Direction: () => Direction,
  DividerDataAlignment: () => DividerDataAlignment,
  FontType: () => FontType,
  GIFType: () => GIFType,
  ImageStylesPosition: () => ImageStylesPosition,
  InitialExpandedItems: () => InitialExpandedItems,
  Interval: () => Interval,
  Layout: () => Layout,
  LayoutType: () => LayoutType,
  LineStyle: () => LineStyle,
  MapType: () => MapType,
  MissingValues: () => MissingValues,
  Mode: () => Mode,
  MoveItemInCategoryRequestPosition: () => MoveItemInCategoryRequestPosition,
  NestedAggregationType: () => NestedAggregationType,
  NodeType: () => NodeType,
  NullValue: () => NullValue,
  Orientation: () => Orientation,
  Placement: () => Placement,
  PluginContainerDataAlignment: () => PluginContainerDataAlignment,
  PollLayoutDirection: () => PollLayoutDirection,
  PollLayoutType: () => PollLayoutType,
  Position: () => Position,
  RequestedFields: () => RequestedFields,
  Resizing: () => Resizing,
  ScalarType: () => ScalarType,
  SingleEntityOpsRequestedFields: () => SingleEntityOpsRequestedFields,
  SortDirection: () => SortDirection,
  SortOrder: () => SortOrder,
  SortType: () => SortType,
  Source: () => Source,
  StylesPosition: () => StylesPosition,
  Target: () => Target,
  TextAlignment: () => TextAlignment,
  ThumbnailsAlignment: () => ThumbnailsAlignment,
  Type: () => Type,
  VerticalAlignment: () => VerticalAlignment,
  ViewMode: () => ViewMode,
  ViewRole: () => ViewRole,
  VoteRole: () => VoteRole,
  WebhookIdentityType: () => WebhookIdentityType,
  Width: () => Width,
  WidthType: () => WidthType,
  bulkAddItemToCategories: () => bulkAddItemToCategories2,
  bulkAddItemsToCategory: () => bulkAddItemsToCategory2,
  bulkRemoveItemFromCategories: () => bulkRemoveItemFromCategories2,
  bulkRemoveItemsFromCategory: () => bulkRemoveItemsFromCategory2,
  bulkSetItemCategories: () => bulkSetItemCategories2,
  bulkShowCategories: () => bulkShowCategories2,
  bulkUpdateCategories: () => bulkUpdateCategories2,
  countCategories: () => countCategories2,
  createCategory: () => createCategory2,
  deleteCategory: () => deleteCategory2,
  getArrangedItems: () => getArrangedItems2,
  getCategory: () => getCategory2,
  listCategoriesForItem: () => listCategoriesForItem2,
  listCategoriesForItems: () => listCategoriesForItems2,
  listItemsInCategory: () => listItemsInCategory2,
  listTrees: () => listTrees2,
  moveCategory: () => moveCategory2,
  queryCategories: () => queryCategories2,
  searchCategories: () => searchCategories2,
  setArrangedItems: () => setArrangedItems2,
  updateCategory: () => updateCategory2,
  updateCategoryVisibility: () => updateCategoryVisibility2
});
module.exports = __toCommonJS(index_typings_exports);

// src/categories-v1-category-categories.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/categories-v1-category-categories.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixCategoriesApiV1CategoriesServiceUrl(opts) {
  const domainToMappings = {
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/categories",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/categories/v1/bulk/categories",
        destPath: "/v1/bulk/categories"
      },
      {
        srcPath: "/categories/v1/categories",
        destPath: "/v1/categories"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/categories",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/categories-service",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/categories-service",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/categories-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/categories/v1/bulk/categories",
        destPath: "/v1/bulk/categories"
      },
      {
        srcPath: "/categories/v1/categories",
        destPath: "/v1/categories"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_categories_categories";
function createCategory(payload) {
  function __createCategory({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "category.createdDate" },
          { path: "category.updatedDate" },
          { path: "category.image.urlExpirationDate" },
          { path: "category.richContentDescription.metadata.createdTimestamp" },
          { path: "category.richContentDescription.metadata.updatedTimestamp" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "category.richContentDescription.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "category.richContentDescription.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "category.richContentDescription.nodes.galleryData.options.item.ratio"
          },
          {
            path: "category.richContentDescription.nodes.imageData.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.mapData.mapSettings.lat"
          },
          {
            path: "category.richContentDescription.nodes.mapData.mapSettings.lng"
          },
          {
            path: "category.richContentDescription.nodes.pollData.poll.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.appEmbedData.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.videoData.video.duration"
          },
          {
            path: "category.richContentDescription.nodes.videoData.thumbnail.duration"
          },
          {
            path: "category.richContentDescription.nodes.audioData.audio.duration"
          },
          {
            path: "category.richContentDescription.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.CreateCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.createdDate" },
            { path: "category.updatedDate" },
            { path: "category.image.urlExpirationDate" },
            {
              path: "category.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "category.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "category.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "category.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCategory;
}
function getCategory(payload) {
  function __getCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "GET",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.GetCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{categoryId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.createdDate" },
            { path: "category.updatedDate" },
            { path: "category.image.urlExpirationDate" },
            {
              path: "category.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "category.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "category.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "category.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCategory;
}
function updateCategory(payload) {
  function __updateCategory({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "category.createdDate" },
          { path: "category.updatedDate" },
          { path: "category.image.urlExpirationDate" },
          { path: "category.richContentDescription.metadata.createdTimestamp" },
          { path: "category.richContentDescription.metadata.updatedTimestamp" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "category.richContentDescription.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "category.richContentDescription.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "category.richContentDescription.nodes.galleryData.options.item.ratio"
          },
          {
            path: "category.richContentDescription.nodes.imageData.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.mapData.mapSettings.lat"
          },
          {
            path: "category.richContentDescription.nodes.mapData.mapSettings.lng"
          },
          {
            path: "category.richContentDescription.nodes.pollData.poll.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.appEmbedData.image.duration"
          },
          {
            path: "category.richContentDescription.nodes.videoData.video.duration"
          },
          {
            path: "category.richContentDescription.nodes.videoData.thumbnail.duration"
          },
          {
            path: "category.richContentDescription.nodes.audioData.audio.duration"
          },
          {
            path: "category.richContentDescription.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "PATCH",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.UpdateCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{category.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.createdDate" },
            { path: "category.updatedDate" },
            { path: "category.image.urlExpirationDate" },
            {
              path: "category.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "category.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "category.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "category.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCategory;
}
function deleteCategory(payload) {
  function __deleteCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "DELETE",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.DeleteCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{categoryId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteCategory;
}
function queryCategories(payload) {
  function __queryCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.QueryCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "categories.createdDate" },
            { path: "categories.updatedDate" },
            { path: "categories.image.urlExpirationDate" },
            {
              path: "categories.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "categories.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "categories.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "categories.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "categories.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "categories.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "categories.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "categories.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "categories.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "categories.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "categories.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "categories.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryCategories;
}
function searchCategories(payload) {
  function __searchCategories({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "search.aggregations.range.buckets.from" },
          { path: "search.aggregations.range.buckets.to" },
          {
            path: "search.aggregations.nested.nestedAggregations.range.buckets.from"
          },
          {
            path: "search.aggregations.nested.nestedAggregations.range.buckets.to"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.SearchCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/search",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "categories.createdDate" },
            { path: "categories.updatedDate" },
            { path: "categories.image.urlExpirationDate" },
            {
              path: "categories.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "categories.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "categories.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "categories.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "categories.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "categories.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "categories.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "categories.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "categories.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "categories.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "categories.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "categories.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "categories.richContentDescription.nodes.audioData.coverImage.duration"
            },
            { path: "aggregationData.results.ranges.results.from" },
            { path: "aggregationData.results.ranges.results.to" },
            {
              path: "aggregationData.results.groupedByValue.results.nestedResults.ranges.results.from"
            },
            {
              path: "aggregationData.results.groupedByValue.results.nestedResults.ranges.results.to"
            },
            {
              path: "aggregationData.results.nested.results.results.*.range.from"
            },
            {
              path: "aggregationData.results.nested.results.results.*.range.to"
            },
            { path: "aggregationData.results.scalar.value" },
            {
              path: "aggregationData.results.groupedByValue.results.nestedResults.scalar.value"
            },
            {
              path: "aggregationData.results.nested.results.results.*.scalar.value"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __searchCategories;
}
function countCategories(payload) {
  function __countCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.CountCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/count",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __countCategories;
}
function moveCategory(payload) {
  function __moveCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.MoveCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{categoryId}/move",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __moveCategory;
}
function bulkUpdateCategories(payload) {
  function __bulkUpdateCategories({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "categories.fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "categories.category.createdDate" },
          { path: "categories.category.updatedDate" },
          { path: "categories.category.image.urlExpirationDate" },
          {
            path: "categories.category.richContentDescription.metadata.createdTimestamp"
          },
          {
            path: "categories.category.richContentDescription.metadata.updatedTimestamp"
          }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "categories.category.richContentDescription.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.galleryData.options.item.ratio"
          },
          {
            path: "categories.category.richContentDescription.nodes.imageData.image.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.mapData.mapSettings.lat"
          },
          {
            path: "categories.category.richContentDescription.nodes.mapData.mapSettings.lng"
          },
          {
            path: "categories.category.richContentDescription.nodes.pollData.poll.image.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.appEmbedData.image.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.videoData.video.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.videoData.thumbnail.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.audioData.audio.duration"
          },
          {
            path: "categories.category.richContentDescription.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkUpdateCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.category.createdDate" },
            { path: "results.category.updatedDate" },
            { path: "results.category.image.urlExpirationDate" },
            {
              path: "results.category.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "results.category.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.category.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "results.category.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "results.category.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "results.category.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateCategories;
}
function updateCategoryVisibility(payload) {
  function __updateCategoryVisibility({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "PATCH",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.UpdateCategoryVisibility",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/visibility",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.createdDate" },
            { path: "category.updatedDate" },
            { path: "category.image.urlExpirationDate" },
            {
              path: "category.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "category.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "category.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "category.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "category.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "category.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "category.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCategoryVisibility;
}
function bulkShowCategories(payload) {
  function __bulkShowCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkShowCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/show",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.category.createdDate" },
            { path: "results.category.updatedDate" },
            { path: "results.category.image.urlExpirationDate" },
            {
              path: "results.category.richContentDescription.metadata.createdTimestamp"
            },
            {
              path: "results.category.richContentDescription.metadata.updatedTimestamp"
            }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.category.richContentDescription.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.galleryData.options.item.ratio"
            },
            {
              path: "results.category.richContentDescription.nodes.imageData.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.mapData.mapSettings.lat"
            },
            {
              path: "results.category.richContentDescription.nodes.mapData.mapSettings.lng"
            },
            {
              path: "results.category.richContentDescription.nodes.pollData.poll.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.appEmbedData.image.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.videoData.video.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.videoData.thumbnail.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.audioData.audio.duration"
            },
            {
              path: "results.category.richContentDescription.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkShowCategories;
}
function bulkAddItemsToCategory(payload) {
  function __bulkAddItemsToCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkAddItemsToCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/{categoryId}/add-items",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkAddItemsToCategory;
}
function bulkAddItemToCategories(payload) {
  function __bulkAddItemToCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkAddItemToCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/add-item",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkAddItemToCategories;
}
function bulkRemoveItemsFromCategory(payload) {
  function __bulkRemoveItemsFromCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkRemoveItemsFromCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/{categoryId}/remove-items",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkRemoveItemsFromCategory;
}
function bulkRemoveItemFromCategories(payload) {
  function __bulkRemoveItemFromCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkRemoveItemFromCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/remove-item",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkRemoveItemFromCategories;
}
function listItemsInCategory(payload) {
  function __listItemsInCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "GET",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.ListItemsInCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{categoryId}/list-items",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      fallback: [
        {
          method: "POST",
          url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
            protoPath: "/v1/categories/{categoryId}/list-items",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __listItemsInCategory;
}
function listCategoriesForItem(payload) {
  function __listCategoriesForItem({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "GET",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.ListCategoriesForItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/list-categories-for-item",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      fallback: [
        {
          method: "POST",
          url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
            protoPath: "/v1/categories/list-categories-for-item",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __listCategoriesForItem;
}
function listCategoriesForItems(payload) {
  function __listCategoriesForItems({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "GET",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.ListCategoriesForItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/list-categories-for-items",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      fallback: [
        {
          method: "POST",
          url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
            protoPath: "/v1/categories/list-categories-for-items",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __listCategoriesForItems;
}
function listTrees(payload) {
  function __listTrees({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "GET",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.ListTrees",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/list-trees",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __listTrees;
}
function setArrangedItems(payload) {
  function __setArrangedItems({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.SetArrangedItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{categoryId}/set-arranged-items",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __setArrangedItems;
}
function getArrangedItems(payload) {
  function __getArrangedItems({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "GET",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.GetArrangedItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/categories/{categoryId}/arranged-items",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getArrangedItems;
}
function bulkSetItemCategories(payload) {
  function __bulkSetItemCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.categories.v1.category",
      method: "POST",
      methodFqn: "com.wix.categories.api.v1.CategoriesService.BulkSetItemCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixCategoriesApiV1CategoriesServiceUrl({
        protoPath: "/v1/bulk/categories/set-item-categories",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkSetItemCategories;
}

// src/categories-v1-category-categories.universal.ts
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_image2 = require("@wix/sdk-runtime/transformations/image");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var NodeType = /* @__PURE__ */ ((NodeType2) => {
  NodeType2["PARAGRAPH"] = "PARAGRAPH";
  NodeType2["TEXT"] = "TEXT";
  NodeType2["HEADING"] = "HEADING";
  NodeType2["BULLETED_LIST"] = "BULLETED_LIST";
  NodeType2["ORDERED_LIST"] = "ORDERED_LIST";
  NodeType2["LIST_ITEM"] = "LIST_ITEM";
  NodeType2["BLOCKQUOTE"] = "BLOCKQUOTE";
  NodeType2["CODE_BLOCK"] = "CODE_BLOCK";
  NodeType2["VIDEO"] = "VIDEO";
  NodeType2["DIVIDER"] = "DIVIDER";
  NodeType2["FILE"] = "FILE";
  NodeType2["GALLERY"] = "GALLERY";
  NodeType2["GIF"] = "GIF";
  NodeType2["HTML"] = "HTML";
  NodeType2["IMAGE"] = "IMAGE";
  NodeType2["LINK_PREVIEW"] = "LINK_PREVIEW";
  NodeType2["MAP"] = "MAP";
  NodeType2["POLL"] = "POLL";
  NodeType2["APP_EMBED"] = "APP_EMBED";
  NodeType2["BUTTON"] = "BUTTON";
  NodeType2["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
  NodeType2["TABLE"] = "TABLE";
  NodeType2["EMBED"] = "EMBED";
  NodeType2["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
  NodeType2["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
  NodeType2["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
  NodeType2["TABLE_CELL"] = "TABLE_CELL";
  NodeType2["TABLE_ROW"] = "TABLE_ROW";
  NodeType2["EXTERNAL"] = "EXTERNAL";
  NodeType2["AUDIO"] = "AUDIO";
  NodeType2["CAPTION"] = "CAPTION";
  NodeType2["LAYOUT"] = "LAYOUT";
  NodeType2["LAYOUT_CELL"] = "LAYOUT_CELL";
  return NodeType2;
})(NodeType || {});
var WidthType = /* @__PURE__ */ ((WidthType2) => {
  WidthType2["CONTENT"] = "CONTENT";
  WidthType2["SMALL"] = "SMALL";
  WidthType2["ORIGINAL"] = "ORIGINAL";
  WidthType2["FULL_WIDTH"] = "FULL_WIDTH";
  return WidthType2;
})(WidthType || {});
var PluginContainerDataAlignment = /* @__PURE__ */ ((PluginContainerDataAlignment2) => {
  PluginContainerDataAlignment2["CENTER"] = "CENTER";
  PluginContainerDataAlignment2["LEFT"] = "LEFT";
  PluginContainerDataAlignment2["RIGHT"] = "RIGHT";
  return PluginContainerDataAlignment2;
})(PluginContainerDataAlignment || {});
var ButtonDataType = /* @__PURE__ */ ((ButtonDataType2) => {
  ButtonDataType2["LINK"] = "LINK";
  ButtonDataType2["ACTION"] = "ACTION";
  return ButtonDataType2;
})(ButtonDataType || {});
var Target = /* @__PURE__ */ ((Target2) => {
  Target2["SELF"] = "SELF";
  Target2["BLANK"] = "BLANK";
  Target2["PARENT"] = "PARENT";
  Target2["TOP"] = "TOP";
  return Target2;
})(Target || {});
var TextAlignment = /* @__PURE__ */ ((TextAlignment2) => {
  TextAlignment2["AUTO"] = "AUTO";
  TextAlignment2["LEFT"] = "LEFT";
  TextAlignment2["RIGHT"] = "RIGHT";
  TextAlignment2["CENTER"] = "CENTER";
  TextAlignment2["JUSTIFY"] = "JUSTIFY";
  return TextAlignment2;
})(TextAlignment || {});
var LineStyle = /* @__PURE__ */ ((LineStyle2) => {
  LineStyle2["SINGLE"] = "SINGLE";
  LineStyle2["DOUBLE"] = "DOUBLE";
  LineStyle2["DASHED"] = "DASHED";
  LineStyle2["DOTTED"] = "DOTTED";
  return LineStyle2;
})(LineStyle || {});
var Width = /* @__PURE__ */ ((Width2) => {
  Width2["LARGE"] = "LARGE";
  Width2["MEDIUM"] = "MEDIUM";
  Width2["SMALL"] = "SMALL";
  return Width2;
})(Width || {});
var DividerDataAlignment = /* @__PURE__ */ ((DividerDataAlignment2) => {
  DividerDataAlignment2["CENTER"] = "CENTER";
  DividerDataAlignment2["LEFT"] = "LEFT";
  DividerDataAlignment2["RIGHT"] = "RIGHT";
  return DividerDataAlignment2;
})(DividerDataAlignment || {});
var ViewMode = /* @__PURE__ */ ((ViewMode2) => {
  ViewMode2["NONE"] = "NONE";
  ViewMode2["FULL"] = "FULL";
  ViewMode2["MINI"] = "MINI";
  return ViewMode2;
})(ViewMode || {});
var LayoutType = /* @__PURE__ */ ((LayoutType2) => {
  LayoutType2["COLLAGE"] = "COLLAGE";
  LayoutType2["MASONRY"] = "MASONRY";
  LayoutType2["GRID"] = "GRID";
  LayoutType2["THUMBNAIL"] = "THUMBNAIL";
  LayoutType2["SLIDER"] = "SLIDER";
  LayoutType2["SLIDESHOW"] = "SLIDESHOW";
  LayoutType2["PANORAMA"] = "PANORAMA";
  LayoutType2["COLUMN"] = "COLUMN";
  LayoutType2["MAGIC"] = "MAGIC";
  LayoutType2["FULLSIZE"] = "FULLSIZE";
  return LayoutType2;
})(LayoutType || {});
var Orientation = /* @__PURE__ */ ((Orientation2) => {
  Orientation2["ROWS"] = "ROWS";
  Orientation2["COLUMNS"] = "COLUMNS";
  return Orientation2;
})(Orientation || {});
var Crop = /* @__PURE__ */ ((Crop2) => {
  Crop2["FILL"] = "FILL";
  Crop2["FIT"] = "FIT";
  return Crop2;
})(Crop || {});
var ThumbnailsAlignment = /* @__PURE__ */ ((ThumbnailsAlignment2) => {
  ThumbnailsAlignment2["TOP"] = "TOP";
  ThumbnailsAlignment2["RIGHT"] = "RIGHT";
  ThumbnailsAlignment2["BOTTOM"] = "BOTTOM";
  ThumbnailsAlignment2["LEFT"] = "LEFT";
  ThumbnailsAlignment2["NONE"] = "NONE";
  return ThumbnailsAlignment2;
})(ThumbnailsAlignment || {});
var GIFType = /* @__PURE__ */ ((GIFType2) => {
  GIFType2["NORMAL"] = "NORMAL";
  GIFType2["STICKER"] = "STICKER";
  return GIFType2;
})(GIFType || {});
var Source = /* @__PURE__ */ ((Source2) => {
  Source2["HTML"] = "HTML";
  Source2["ADSENSE"] = "ADSENSE";
  return Source2;
})(Source || {});
var StylesPosition = /* @__PURE__ */ ((StylesPosition2) => {
  StylesPosition2["START"] = "START";
  StylesPosition2["END"] = "END";
  StylesPosition2["TOP"] = "TOP";
  StylesPosition2["HIDDEN"] = "HIDDEN";
  return StylesPosition2;
})(StylesPosition || {});
var MapType = /* @__PURE__ */ ((MapType2) => {
  MapType2["ROADMAP"] = "ROADMAP";
  MapType2["SATELITE"] = "SATELITE";
  MapType2["HYBRID"] = "HYBRID";
  MapType2["TERRAIN"] = "TERRAIN";
  return MapType2;
})(MapType || {});
var ViewRole = /* @__PURE__ */ ((ViewRole2) => {
  ViewRole2["CREATOR"] = "CREATOR";
  ViewRole2["VOTERS"] = "VOTERS";
  ViewRole2["EVERYONE"] = "EVERYONE";
  return ViewRole2;
})(ViewRole || {});
var VoteRole = /* @__PURE__ */ ((VoteRole2) => {
  VoteRole2["SITE_MEMBERS"] = "SITE_MEMBERS";
  VoteRole2["ALL"] = "ALL";
  return VoteRole2;
})(VoteRole || {});
var PollLayoutType = /* @__PURE__ */ ((PollLayoutType2) => {
  PollLayoutType2["LIST"] = "LIST";
  PollLayoutType2["GRID"] = "GRID";
  return PollLayoutType2;
})(PollLayoutType || {});
var PollLayoutDirection = /* @__PURE__ */ ((PollLayoutDirection2) => {
  PollLayoutDirection2["LTR"] = "LTR";
  PollLayoutDirection2["RTL"] = "RTL";
  return PollLayoutDirection2;
})(PollLayoutDirection || {});
var BackgroundType = /* @__PURE__ */ ((BackgroundType2) => {
  BackgroundType2["COLOR"] = "COLOR";
  BackgroundType2["IMAGE"] = "IMAGE";
  BackgroundType2["GRADIENT"] = "GRADIENT";
  return BackgroundType2;
})(BackgroundType || {});
var DecorationType = /* @__PURE__ */ ((DecorationType2) => {
  DecorationType2["BOLD"] = "BOLD";
  DecorationType2["ITALIC"] = "ITALIC";
  DecorationType2["UNDERLINE"] = "UNDERLINE";
  DecorationType2["SPOILER"] = "SPOILER";
  DecorationType2["ANCHOR"] = "ANCHOR";
  DecorationType2["MENTION"] = "MENTION";
  DecorationType2["LINK"] = "LINK";
  DecorationType2["COLOR"] = "COLOR";
  DecorationType2["FONT_SIZE"] = "FONT_SIZE";
  DecorationType2["EXTERNAL"] = "EXTERNAL";
  DecorationType2["STRIKETHROUGH"] = "STRIKETHROUGH";
  DecorationType2["SUPERSCRIPT"] = "SUPERSCRIPT";
  DecorationType2["SUBSCRIPT"] = "SUBSCRIPT";
  return DecorationType2;
})(DecorationType || {});
var FontType = /* @__PURE__ */ ((FontType2) => {
  FontType2["PX"] = "PX";
  FontType2["EM"] = "EM";
  return FontType2;
})(FontType || {});
var ImageStylesPosition = /* @__PURE__ */ ((ImageStylesPosition2) => {
  ImageStylesPosition2["START"] = "START";
  ImageStylesPosition2["END"] = "END";
  ImageStylesPosition2["TOP"] = "TOP";
  return ImageStylesPosition2;
})(ImageStylesPosition || {});
var AspectRatio = /* @__PURE__ */ ((AspectRatio2) => {
  AspectRatio2["SQUARE"] = "SQUARE";
  AspectRatio2["RECTANGLE"] = "RECTANGLE";
  return AspectRatio2;
})(AspectRatio || {});
var Resizing = /* @__PURE__ */ ((Resizing2) => {
  Resizing2["FILL"] = "FILL";
  Resizing2["FIT"] = "FIT";
  return Resizing2;
})(Resizing || {});
var Placement = /* @__PURE__ */ ((Placement2) => {
  Placement2["IMAGE"] = "IMAGE";
  Placement2["PRODUCT_INFO"] = "PRODUCT_INFO";
  return Placement2;
})(Placement || {});
var Type = /* @__PURE__ */ ((Type2) => {
  Type2["CONTAINED"] = "CONTAINED";
  Type2["FRAMELESS"] = "FRAMELESS";
  return Type2;
})(Type || {});
var Alignment = /* @__PURE__ */ ((Alignment2) => {
  Alignment2["START"] = "START";
  Alignment2["CENTER"] = "CENTER";
  Alignment2["END"] = "END";
  return Alignment2;
})(Alignment || {});
var Layout = /* @__PURE__ */ ((Layout2) => {
  Layout2["STACKED"] = "STACKED";
  Layout2["SIDE_BY_SIDE"] = "SIDE_BY_SIDE";
  return Layout2;
})(Layout || {});
var AppType = /* @__PURE__ */ ((AppType2) => {
  AppType2["PRODUCT"] = "PRODUCT";
  AppType2["EVENT"] = "EVENT";
  AppType2["BOOKING"] = "BOOKING";
  return AppType2;
})(AppType || {});
var InitialExpandedItems = /* @__PURE__ */ ((InitialExpandedItems2) => {
  InitialExpandedItems2["FIRST"] = "FIRST";
  InitialExpandedItems2["ALL"] = "ALL";
  InitialExpandedItems2["NONE"] = "NONE";
  return InitialExpandedItems2;
})(InitialExpandedItems || {});
var Direction = /* @__PURE__ */ ((Direction2) => {
  Direction2["LTR"] = "LTR";
  Direction2["RTL"] = "RTL";
  return Direction2;
})(Direction || {});
var VerticalAlignment = /* @__PURE__ */ ((VerticalAlignment2) => {
  VerticalAlignment2["TOP"] = "TOP";
  VerticalAlignment2["MIDDLE"] = "MIDDLE";
  VerticalAlignment2["BOTTOM"] = "BOTTOM";
  return VerticalAlignment2;
})(VerticalAlignment || {});
var NullValue = /* @__PURE__ */ ((NullValue2) => {
  NullValue2["NULL_VALUE"] = "NULL_VALUE";
  return NullValue2;
})(NullValue || {});
var SingleEntityOpsRequestedFields = /* @__PURE__ */ ((SingleEntityOpsRequestedFields2) => {
  SingleEntityOpsRequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  SingleEntityOpsRequestedFields2["BREADCRUMBS_INFO"] = "BREADCRUMBS_INFO";
  SingleEntityOpsRequestedFields2["DESCRIPTION"] = "DESCRIPTION";
  SingleEntityOpsRequestedFields2["RICH_CONTENT_DESCRIPTION"] = "RICH_CONTENT_DESCRIPTION";
  return SingleEntityOpsRequestedFields2;
})(SingleEntityOpsRequestedFields || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var RequestedFields = /* @__PURE__ */ ((RequestedFields2) => {
  RequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  RequestedFields2["BREADCRUMBS_INFO"] = "BREADCRUMBS_INFO";
  return RequestedFields2;
})(RequestedFields || {});
var SortType = /* @__PURE__ */ ((SortType2) => {
  SortType2["COUNT"] = "COUNT";
  SortType2["VALUE"] = "VALUE";
  return SortType2;
})(SortType || {});
var SortDirection = /* @__PURE__ */ ((SortDirection2) => {
  SortDirection2["DESC"] = "DESC";
  SortDirection2["ASC"] = "ASC";
  return SortDirection2;
})(SortDirection || {});
var MissingValues = /* @__PURE__ */ ((MissingValues2) => {
  MissingValues2["EXCLUDE"] = "EXCLUDE";
  MissingValues2["INCLUDE"] = "INCLUDE";
  return MissingValues2;
})(MissingValues || {});
var ScalarType = /* @__PURE__ */ ((ScalarType2) => {
  ScalarType2["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
  ScalarType2["COUNT_DISTINCT"] = "COUNT_DISTINCT";
  ScalarType2["MIN"] = "MIN";
  ScalarType2["MAX"] = "MAX";
  return ScalarType2;
})(ScalarType || {});
var NestedAggregationType = /* @__PURE__ */ ((NestedAggregationType2) => {
  NestedAggregationType2["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
  NestedAggregationType2["VALUE"] = "VALUE";
  NestedAggregationType2["RANGE"] = "RANGE";
  NestedAggregationType2["SCALAR"] = "SCALAR";
  NestedAggregationType2["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
  return NestedAggregationType2;
})(NestedAggregationType || {});
var Interval = /* @__PURE__ */ ((Interval2) => {
  Interval2["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
  Interval2["YEAR"] = "YEAR";
  Interval2["MONTH"] = "MONTH";
  Interval2["WEEK"] = "WEEK";
  Interval2["DAY"] = "DAY";
  Interval2["HOUR"] = "HOUR";
  Interval2["MINUTE"] = "MINUTE";
  Interval2["SECOND"] = "SECOND";
  return Interval2;
})(Interval || {});
var AggregationType = /* @__PURE__ */ ((AggregationType2) => {
  AggregationType2["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
  AggregationType2["VALUE"] = "VALUE";
  AggregationType2["RANGE"] = "RANGE";
  AggregationType2["SCALAR"] = "SCALAR";
  AggregationType2["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
  AggregationType2["NESTED"] = "NESTED";
  return AggregationType2;
})(AggregationType || {});
var Mode = /* @__PURE__ */ ((Mode2) => {
  Mode2["OR"] = "OR";
  Mode2["AND"] = "AND";
  return Mode2;
})(Mode || {});
var Position = /* @__PURE__ */ ((Position2) => {
  Position2["UNKNOWN_POSITION"] = "UNKNOWN_POSITION";
  Position2["FIRST"] = "FIRST";
  Position2["LAST"] = "LAST";
  Position2["AFTER"] = "AFTER";
  return Position2;
})(Position || {});
var MoveItemInCategoryRequestPosition = /* @__PURE__ */ ((MoveItemInCategoryRequestPosition2) => {
  MoveItemInCategoryRequestPosition2["UNKNOWN_POSITION"] = "UNKNOWN_POSITION";
  MoveItemInCategoryRequestPosition2["FIRST"] = "FIRST";
  MoveItemInCategoryRequestPosition2["LAST"] = "LAST";
  MoveItemInCategoryRequestPosition2["BEFORE"] = "BEFORE";
  MoveItemInCategoryRequestPosition2["NONE"] = "NONE";
  return MoveItemInCategoryRequestPosition2;
})(MoveItemInCategoryRequestPosition || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCategory2(category, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
      {
        category,
        treeReference: options?.treeReference,
        fields: options?.fields
      },
      ["category.richContentDescription"]
    ),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "category.image" }]
      }
    ]
  );
  const reqOpts = createCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.image" }]
        }
      ]),
      ["category.richContentDescription"]
    )?.category;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          category: "$[0]",
          treeReference: "$[1].treeReference",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["category", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCategory2(categoryId, treeReference, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      treeReference,
      fields: options?.fields
    },
    []
  );
  const reqOpts = getCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.image" }]
        }
      ]),
      ["category.richContentDescription"]
    )?.category;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          treeReference: "$[1]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "treeReference", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCategory2(_id, category, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
      {
        category: { ...category, id: _id },
        treeReference: options?.treeReference,
        fields: options?.fields
      },
      ["category.richContentDescription"]
    ),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "category.image" }]
      }
    ]
  );
  const reqOpts = updateCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.image" }]
        }
      ]),
      ["category.richContentDescription"]
    )?.category;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { category: "$[1]" },
        explicitPathsToArguments: {
          "category.id": "$[0]",
          treeReference: "$[2].treeReference",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "category", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCategory2(categoryId, treeReference) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    { categoryId, treeReference },
    []
  );
  const reqOpts = deleteCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { categoryId: "$[0]", treeReference: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["categoryId", "treeReference"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryCategories2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryCategories({
        ...payload,
        ...options
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
        { ...args?.[1], query: args?.[0] },
        []
      );
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [
          {
            transformFn: import_image2.transformRESTImageToSDKImage,
            paths: [{ path: "categories.image" }]
          }
        ]),
        ["categories.richContentDescription"]
      );
      return {
        items: transformedData?.categories,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function searchCategories2(search, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      search,
      treeReference: options?.treeReference,
      returnNonVisibleCategories: options?.returnNonVisibleCategories,
      fields: options?.fields
    },
    []
  );
  const reqOpts = searchCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "categories.image" }]
        }
      ]),
      ["categories.richContentDescription"]
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          search: "$[0]",
          treeReference: "$[1].treeReference",
          returnNonVisibleCategories: "$[1].returnNonVisibleCategories",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["search", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function countCategories2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      filter: options?.filter,
      search: options?.search,
      treeReference: options?.treeReference,
      returnNonVisibleCategories: options?.returnNonVisibleCategories
    },
    []
  );
  const reqOpts = countCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          filter: "$[0].filter",
          search: "$[0].search",
          treeReference: "$[0].treeReference",
          returnNonVisibleCategories: "$[0].returnNonVisibleCategories"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function moveCategory2(categoryId, treeReference, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      treeReference,
      parentCategoryId: options?.parentCategoryId,
      position: options?.position,
      moveAfterCategoryId: options?.moveAfterCategoryId
    },
    []
  );
  const reqOpts = moveCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          treeReference: "$[1]",
          parentCategoryId: "$[2].parentCategoryId",
          position: "$[2].position",
          moveAfterCategoryId: "$[2].moveAfterCategoryId"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "treeReference", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateCategories2(categories, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
      {
        categories,
        treeReference: options?.treeReference,
        returnEntity: options?.returnEntity,
        fields: options?.fields
      },
      ["categories.category.richContentDescription"]
    ),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "categories.category.image" }]
      }
    ]
  );
  const reqOpts = bulkUpdateCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "results.category.image" }]
        }
      ]),
      ["results.category.richContentDescription"]
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categories: "$[0]",
          treeReference: "$[1].treeReference",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["categories", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCategoryVisibility2(categoryId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      visible: options?.visible,
      treeReference: options?.treeReference,
      revision: options?.revision,
      fields: options?.fields
    },
    []
  );
  const reqOpts = updateCategoryVisibility(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.image" }]
        }
      ]),
      ["category.richContentDescription"]
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          visible: "$[1].visible",
          treeReference: "$[1].treeReference",
          revision: "$[1].revision",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkShowCategories2(categoryIds, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryIds,
      treeReference: options?.treeReference,
      returnEntity: options?.returnEntity,
      fields: options?.fields
    },
    []
  );
  const reqOpts = bulkShowCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "results.category.image" }]
        }
      ]),
      ["results.category.richContentDescription"]
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryIds: "$[0]",
          treeReference: "$[1].treeReference",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["categoryIds", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkAddItemsToCategory2(categoryId, items, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      items,
      treeReference: options?.treeReference
    },
    []
  );
  const reqOpts = bulkAddItemsToCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          items: "$[1]",
          treeReference: "$[2].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "items", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkAddItemToCategories2(item, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      item,
      categoryIds: options?.categoryIds,
      treeReference: options?.treeReference
    },
    []
  );
  const reqOpts = bulkAddItemToCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          item: "$[0]",
          categoryIds: "$[1].categoryIds",
          treeReference: "$[1].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["item", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkRemoveItemsFromCategory2(categoryId, items, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      items,
      treeReference: options?.treeReference
    },
    []
  );
  const reqOpts = bulkRemoveItemsFromCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          items: "$[1]",
          treeReference: "$[2].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "items", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkRemoveItemFromCategories2(item, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      item,
      categoryIds: options?.categoryIds,
      treeReference: options?.treeReference
    },
    []
  );
  const reqOpts = bulkRemoveItemFromCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          item: "$[0]",
          categoryIds: "$[1].categoryIds",
          treeReference: "$[1].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["item", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listItemsInCategory2(categoryId, treeReference, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      treeReference,
      useCategoryArrangement: options?.useCategoryArrangement,
      includeItemsFromSubcategories: options?.includeItemsFromSubcategories,
      cursorPaging: options?.cursorPaging
    },
    []
  );
  const reqOpts = listItemsInCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          treeReference: "$[1]",
          useCategoryArrangement: "$[2].useCategoryArrangement",
          includeItemsFromSubcategories: "$[2].includeItemsFromSubcategories",
          cursorPaging: "$[2].cursorPaging"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "treeReference", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listCategoriesForItem2(item, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    { item, treeReference: options?.treeReference },
    []
  );
  const reqOpts = listCategoriesForItem(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          item: "$[0]",
          treeReference: "$[1].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["item", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listCategoriesForItems2(items, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    { items, treeReference: options?.treeReference },
    []
  );
  const reqOpts = listCategoriesForItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          items: "$[0]",
          treeReference: "$[1].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["items", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listTrees2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({}, []);
  const reqOpts = listTrees(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setArrangedItems2(categoryId, treeReference, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      categoryId,
      treeReference,
      items: options?.items
    },
    []
  );
  const reqOpts = setArrangedItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          treeReference: "$[1]",
          items: "$[2].items"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "treeReference", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getArrangedItems2(categoryId, treeReference) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    { categoryId, treeReference },
    []
  );
  const reqOpts = getArrangedItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { categoryId: "$[0]", treeReference: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["categoryId", "treeReference"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkSetItemCategories2(item, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)(
    {
      item,
      categoryIds: options?.categoryIds,
      treeReference: options?.treeReference
    },
    []
  );
  const reqOpts = bulkSetItemCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data, []);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          item: "$[0]",
          categoryIds: "$[1].categoryIds",
          treeReference: "$[1].treeReference"
        },
        singleArgumentUnchanged: false
      },
      ["item", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AggregationType,
  Alignment,
  AppType,
  AspectRatio,
  BackgroundType,
  ButtonDataType,
  Crop,
  DecorationType,
  Direction,
  DividerDataAlignment,
  FontType,
  GIFType,
  ImageStylesPosition,
  InitialExpandedItems,
  Interval,
  Layout,
  LayoutType,
  LineStyle,
  MapType,
  MissingValues,
  Mode,
  MoveItemInCategoryRequestPosition,
  NestedAggregationType,
  NodeType,
  NullValue,
  Orientation,
  Placement,
  PluginContainerDataAlignment,
  PollLayoutDirection,
  PollLayoutType,
  Position,
  RequestedFields,
  Resizing,
  ScalarType,
  SingleEntityOpsRequestedFields,
  SortDirection,
  SortOrder,
  SortType,
  Source,
  StylesPosition,
  Target,
  TextAlignment,
  ThumbnailsAlignment,
  Type,
  VerticalAlignment,
  ViewMode,
  ViewRole,
  VoteRole,
  WebhookIdentityType,
  Width,
  WidthType,
  bulkAddItemToCategories,
  bulkAddItemsToCategory,
  bulkRemoveItemFromCategories,
  bulkRemoveItemsFromCategory,
  bulkSetItemCategories,
  bulkShowCategories,
  bulkUpdateCategories,
  countCategories,
  createCategory,
  deleteCategory,
  getArrangedItems,
  getCategory,
  listCategoriesForItem,
  listCategoriesForItems,
  listItemsInCategory,
  listTrees,
  moveCategory,
  queryCategories,
  searchCategories,
  setArrangedItems,
  updateCategory,
  updateCategoryVisibility
});
//# sourceMappingURL=index.typings.js.map