import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { C as Category, a as CreateCategoryOptions, b as CreateCategoryApplicationErrors, T as TreeReference, G as GetCategoryOptions, U as UpdateCategory, c as UpdateCategoryOptions, d as UpdateCategoryApplicationErrors, D as DeleteCategoryApplicationErrors, Q as QueryCategoriesOptions, e as CategoriesQueryBuilder, f as CategorySearch, S as SearchCategoriesOptions, g as SearchCategoriesResponse, h as CountCategoriesOptions, i as CountCategoriesResponse, M as MoveCategoryOptions, j as MoveCategoryResponse, k as MoveCategoryApplicationErrors, l as MaskedCategory, B as BulkUpdateCategoriesOptions, m as BulkUpdateCategoriesResponse, n as BulkUpdateCategoriesApplicationErrors, o as UpdateCategoryVisibilityOptions, p as UpdateCategoryVisibilityResponse, q as UpdateCategoryVisibilityApplicationErrors, r as BulkShowCategoriesOptions, s as BulkShowCategoriesResponse, I as ItemReference, t as BulkAddItemsToCategoryOptions, u as BulkAddItemsToCategoryResponse, v as BulkAddItemsToCategoryApplicationErrors, w as BulkAddItemToCategoriesOptions, x as BulkAddItemToCategoriesResponse, y as BulkAddItemToCategoriesApplicationErrors, z as BulkRemoveItemsFromCategoryOptions, A as BulkRemoveItemsFromCategoryResponse, E as BulkRemoveItemsFromCategoryApplicationErrors, F as BulkRemoveItemFromCategoriesOptions, H as BulkRemoveItemFromCategoriesResponse, J as BulkRemoveItemFromCategoriesApplicationErrors, L as ListItemsInCategoryOptions, K as ListItemsInCategoryResponse, N as ListCategoriesForItemOptions, O as ListCategoriesForItemResponse, P as ListCategoriesForItemsOptions, R as ListCategoriesForItemsResponse, V as ListTreesResponse, W as SetArrangedItemsOptions, X as SetArrangedItemsResponse, Y as SetArrangedItemsApplicationErrors, Z as GetArrangedItemsResponse, _ as CategoryMovedEnvelope, $ as CategoryCreatedEnvelope, a0 as CategoryDeletedEnvelope, a1 as CategoryItemAddedToCategoryEnvelope, a2 as CategoryItemRemovedFromCategoryEnvelope, a3 as CategoryItemsArrangedInCategoryEnvelope, a4 as CategoryUpdatedEnvelope } from './categories-v1-category-categories.universal-DWEZmpMq.js';
export { en as ActionEvent, d5 as Aggregation, di as AggregationData, d6 as AggregationKindOneOf, dC as AggregationResults, dD as AggregationResultsResultOneOf, dq as AggregationResultsScalarResult, aP as AggregationType, fg as AggregationTypeWithLiterals, az as Alignment, f0 as AlignmentWithLiterals, b_ as AnchorData, cA as App, c4 as AppEmbedData, c5 as AppEmbedDataAppDataOneOf, aB as AppType, f2 as AppTypeWithLiterals, dP as ApplicationError, av as AspectRatio, eY as AspectRatioWithLiterals, co as AudioData, bQ as Background, bR as BackgroundBackgroundOneOf, ar as BackgroundType, eU as BackgroundTypeWithLiterals, es as BaseEventMetadata, cr as BlockquoteData, c6 as BookingData, b4 as Border, cm as BorderColors, aV as Breadcrumb, aU as BreadcrumbsInfo, dQ as BulkActionMetadata, dZ as BulkAddItemToCategoriesRequest, dW as BulkAddItemsToCategoryRequest, dN as BulkCategoriesResult, dT as BulkDeleteCategoriesRequest, dU as BulkDeleteCategoriesResponse, dV as BulkDeleteCategoriesResponseBulkCategoriesResult, d_ as BulkItemToCategoriesResult, dX as BulkItemsToCategoryResult, e0 as BulkRemoveItemFromCategoriesRequest, d$ as BulkRemoveItemsFromCategoryRequest, fl as BulkSetItemCategoriesApplicationErrors, ex as BulkSetItemCategoriesOptions, ec as BulkSetItemCategoriesRequest, ed as BulkSetItemCategoriesResponse, dS as BulkShowCategoriesRequest, dM as BulkUpdateCategoriesRequest, cq as BulletedListData, b3 as ButtonData, a8 as ButtonDataType, eB as ButtonDataTypeWithLiterals, c8 as ButtonStyles, cs as CaptionData, cb as CardStyles, eu as CategoriesQueryResult, cF as CategoryMoved, ev as CategorySearchSpec, eg as CategoryTreeNode, cl as CellStyle, bf as CodeBlockData, ch as CollapsibleListData, b$ as ColorData, b5 as Colors, fm as CommonSearchWithEntityContext, d1 as CompactCategory, dK as CountCategoriesRequest, cL as CreateCategoryRequest, cM as CreateCategoryResponse, ah as Crop, eK as CropWithLiterals, cX as CursorPaging, cZ as CursorPagingMetadata, cU as CursorQuery, cV as CursorQueryPagingMethodOneOf, d3 as CursorSearch, d4 as CursorSearchPagingMethodOneOf, c_ as Cursors, cE as CustomTag, dd as DateHistogramAggregation, dy as DateHistogramResult, dA as DateHistogramResults, bY as Decoration, bZ as DecorationDataOneOf, as as DecorationType, eV as DecorationTypeWithLiterals, cR as DeleteCategoryRequest, cS as DeleteCategoryResponse, dE as DeprecatedSearchCategoriesWithOffsetRequest, dI as DeprecatedSearchCategoriesWithOffsetResponse, bW as Design, cj as Dimensions, aD as Direction, f4 as DirectionWithLiterals, bh as DividerData, ad as DividerDataAlignment, eG as DividerDataAlignmentWithLiterals, cv as DocumentStyle, eh as DomainEvent, ei as DomainEventBodyOneOf, cf as EmbedData, eo as Empty, ej as EntityCreatedEvent, em as EntityDeletedEvent, el as EntityUpdatedEvent, c7 as EventData, et as EventMetadata, cx as ExtendedFields, cD as File, bi as FileData, bj as FileSource, bk as FileSourceDataOneOf, c2 as FontSizeData, at as FontType, eW as FontTypeWithLiterals, bx as GIF, bw as GIFData, aj as GIFType, eM as GIFTypeWithLiterals, bm as GalleryData, bs as GalleryOptions, bt as GalleryOptionsLayout, eb as GetArrangedItemsRequest, ee as GetCategoriesTreeRequest, ef as GetCategoriesTreeResponse, cN as GetCategoryRequest, cO as GetCategoryResponse, bP as Gradient, dz as GroupByValueResults, bz as HTMLData, bA as HTMLDataDataOneOf, by as HeadingData, ba as Height, eq as IdentificationData, er as IdentificationDataIdOneOf, bo as Image, bB as ImageData, bD as ImageDataStyles, c9 as ImageStyles, au as ImageStylesPosition, eX as ImageStylesPositionWithLiterals, d8 as IncludeMissingValuesOptions, aC as InitialExpandedItems, f3 as InitialExpandedItemsWithLiterals, aO as Interval, ff as IntervalWithLiterals, cy as InvalidateCache, cz as InvalidateCacheGetByOneOf, bq as Item, cG as ItemAddedToCategory, br as ItemDataOneOf, dO as ItemMetadata, dY as ItemReferenceMetadata, cI as ItemRemovedFromCategory, bu as ItemStyle, cH as ItemsAddedToCategory, cK as ItemsArrangedInCategory, cJ as ItemsRemovedFromCategory, aY as Keyword, aA as Layout, ct as LayoutCellData, af as LayoutType, eI as LayoutTypeWithLiterals, f1 as LayoutWithLiterals, ab as LineStyle, eE as LineStyleWithLiterals, bc as Link, c0 as LinkData, bd as LinkDataOneOf, bE as LinkPreviewData, bF as LinkPreviewDataStyles, e4 as ListCategoriesForItemRequest, e5 as ListCategoriesForItemsRequest, c$ as ListCompactCategoriesByIdsRequest, d0 as ListCompactCategoriesByIdsResponse, ew as ListItemsInCategoryOptionsPagingMethodOneOf, e1 as ListItemsInCategoryRequest, e2 as ListItemsInCategoryRequestPagingMethodOneOf, e7 as ListTreesRequest, cn as ListValue, bG as MapData, e6 as MapItemToCategories, bH as MapSettings, am as MapType, eP as MapTypeWithLiterals, bn as Media, c1 as MentionData, ep as MessageEnvelope, cu as Metadata, aL as MissingValues, fc as MissingValuesWithLiterals, aQ as Mode, fh as ModeWithLiterals, dL as MoveCategoryRequest, e8 as MoveItemInCategoryRequest, aS as MoveItemInCategoryRequestPosition, fj as MoveItemInCategoryRequestPositionWithLiterals, e9 as MoveItemInCategoryResponse, dg as NestedAggregation, de as NestedAggregationItem, df as NestedAggregationItemKindOneOf, dl as NestedAggregationResults, dm as NestedAggregationResultsResultOneOf, aN as NestedAggregationType, fe as NestedAggregationTypeWithLiterals, dv as NestedResultValue, dw as NestedResultValueResultOneOf, dB as NestedResults, dr as NestedValueAggregationResult, b0 as Node, b1 as NodeDataOneOf, b2 as NodeStyle, a5 as NodeType, ey as NodeTypeWithLiterals, aF as NullValue, f6 as NullValueWithLiterals, cg as Oembed, dF as OffsetSearch, dG as OffsetSearchPagingMethodOneOf, bL as Option, bT as OptionDesign, bO as OptionLayout, cp as OrderedListData, ag as Orientation, eJ as OrientationWithLiterals, bl as PDFSettings, cB as Page, dH as Paging, dJ as PagingMetadata, e3 as PagingMetadataV2, bI as ParagraphData, aW as ParentCategory, bK as Permissions, ax as Placement, e_ as PlacementWithLiterals, ce as PlaybackOptions, b6 as PluginContainerData, a7 as PluginContainerDataAlignment, eA as PluginContainerDataAlignmentWithLiterals, b7 as PluginContainerDataWidth, b8 as PluginContainerDataWidthDataOneOf, bU as Poll, bJ as PollData, bV as PollDataLayout, bS as PollDesign, bN as PollLayout, aq as PollLayoutDirection, eT as PollLayoutDirectionWithLiterals, ap as PollLayoutType, eS as PollLayoutTypeWithLiterals, bM as PollSettings, aR as Position, fi as PositionWithLiterals, cc as PricingData, cT as QueryCategoriesRequest, cY as QueryCategoriesResponse, db as RangeAggregation, dk as RangeAggregationResult, d7 as RangeBucket, dt as RangeResult, dp as RangeResults, be as Rel, aI as RequestedFields, f9 as RequestedFieldsWithLiterals, aw as Resizing, eZ as ResizingWithLiterals, ek as RestoreInfo, dx as Results, ca as RibbonStyles, a$ as RichContent, dc as ScalarAggregation, du as ScalarResult, aM as ScalarType, fd as ScalarTypeWithLiterals, d2 as SearchCategoriesRequest, dh as SearchDetails, aX as SeoSchema, ea as SetArrangedItemsRequest, a_ as Settings, aG as SingleEntityOpsRequestedFields, f7 as SingleEntityOpsRequestedFieldsWithLiterals, aK as SortDirection, fb as SortDirectionWithLiterals, aH as SortOrder, f8 as SortOrderWithLiterals, aJ as SortType, fa as SortTypeWithLiterals, cW as Sorting, ak as Source, eN as SourceWithLiterals, b9 as Spoiler, c3 as SpoilerData, bb as Styles, bC as StylesBorder, al as StylesPosition, eO as StylesPositionWithLiterals, ck as TableCellData, ci as TableData, aZ as Tag, a9 as Target, eC as TargetWithLiterals, aa as TextAlignment, eD as TextAlignmentWithLiterals, bX as TextData, cw as TextNodeStyle, bg as TextStyle, bv as Thumbnails, ai as ThumbnailsAlignment, eL as ThumbnailsAlignmentWithLiterals, ay as Type, e$ as TypeWithLiterals, cC as URI, cP as UpdateCategoryRequest, cQ as UpdateCategoryResponse, dR as UpdateCategoryVisibilityRequest, d9 as ValueAggregation, da as ValueAggregationOptionsOneOf, dj as ValueAggregationResult, ds as ValueResult, dn as ValueResults, aE as VerticalAlignment, f5 as VerticalAlignmentWithLiterals, bp as Video, cd as VideoData, ae as ViewMode, eH as ViewModeWithLiterals, an as ViewRole, eQ as ViewRoleWithLiterals, ao as VoteRole, eR as VoteRoleWithLiterals, aT as WebhookIdentityType, fk as WebhookIdentityTypeWithLiterals, ac as Width, a6 as WidthType, ez as WidthTypeWithLiterals, eF as WidthWithLiterals } from './categories-v1-category-categories.universal-DWEZmpMq.js';

declare function createCategory$1(httpClient: HttpClient): CreateCategorySignature;
interface CreateCategorySignature {
    /**
     * Creates a category.
     * @param - Category to create.
     * @returns Created category.
     */
    (category: NonNullablePaths<Category, `name` | `parentCategory._id`, 3>, options?: NonNullablePaths<CreateCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<Category, `itemCounter` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain`, 6> & {
        __applicationErrorsType?: CreateCategoryApplicationErrors;
    }>;
}
declare function getCategory$1(httpClient: HttpClient): GetCategorySignature;
interface GetCategorySignature {
    /**
     * Retrieves a category.
     * @param - Category ID.
     * @param - Category tree reference details.
     * @returns Category.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: GetCategoryOptions): Promise<NonNullablePaths<Category, `itemCounter` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain`, 6>>;
}
declare function updateCategory$1(httpClient: HttpClient): UpdateCategorySignature;
interface UpdateCategorySignature {
    /**
     * Updates a category.
     *
     * Each time the category is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the category.
     * This ensures you're working with the latest category and prevents unintended overwrites.
     * @param - Category ID.
     * @returns Updated category.
     */
    (_id: string, category: NonNullablePaths<UpdateCategory, `revision`, 2>, options?: NonNullablePaths<UpdateCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<Category, `itemCounter` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain`, 6> & {
        __applicationErrorsType?: UpdateCategoryApplicationErrors;
    }>;
}
declare function deleteCategory$1(httpClient: HttpClient): DeleteCategorySignature;
interface DeleteCategorySignature {
    /**
     * Deletes a category.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>): Promise<void & {
        __applicationErrorsType?: DeleteCategoryApplicationErrors;
    }>;
}
declare function queryCategories$1(httpClient: HttpClient): QueryCategoriesSignature;
interface QueryCategoriesSignature {
    /**
     * Retrieves a list of up to 1,000 categories, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * For field support for filters and sorting,
     * see [Categories: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options: QueryCategoriesOptions): CategoriesQueryBuilder;
}
declare function searchCategories$1(httpClient: HttpClient): SearchCategoriesSignature;
interface SearchCategoriesSignature {
    /**
     * Retrieves a list of up to 1,000 categories with the specified filtering, sorting, and cursor paging.
     * Specify supported values in `fields` to include those fields in the response.
     *
     * ## Defaults
     *
     * Search Categories has the following default settings, which you can override:
     * + Sorted by `createdDate` in descending order.
     * + `cursorPaging.limit` set to `100`.
     *
     * ## Filters
     *
     * When using filters for dates, you must use
     * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
     *
     * Refer to the [supported filters & sorting table](https://dev.wix.com/docs/sdk/backend-modules/categories/categories/search-categories) (SDK)
     * or the [supported filters article](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting) (REST)
     * for a complete list of supported filters and sorting options.
     *
     * ## See also
     *
     * To learn about working with *Search* methods, see
     * _API Query Language_
     * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/get-started/api-query-language))
     * and *Sorting and Paging*
     * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#the-sort-array) | [REST](https://dev.wix.com/docs/rest/articles/get-started/sorting-and-paging)).
     * @param - Search criteria including filter, sort, aggregations, and paging options.
     *
     * Refer to the [supported filters & sorting table](https://dev.wix.com/docs/sdk/backend-modules/categories/categories/search-categories) (SDK)
     * or the [supported filters article](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting) (REST)
     * for a complete list of supported filters and sorting options.
     */
    (search: CategorySearch, options?: NonNullablePaths<SearchCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<SearchCategoriesResponse, `categories` | `categories.${number}.itemCounter` | `categories.${number}.seoData.settings.preventAutoRedirect` | `aggregationData.results` | `aggregationData.results.${number}.scalar.type` | `aggregationData.results.${number}.scalar.value` | `aggregationData.results.${number}.name` | `aggregationData.results.${number}.type` | `aggregationData.results.${number}.fieldPath`, 6>>;
}
declare function countCategories$1(httpClient: HttpClient): CountCategoriesSignature;
interface CountCategoriesSignature {
    /**
     * Counts the number of categories that match the provided filtering.
     *
     * For field support for filters and sorting,
     * see [Categories: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting).
     */
    (options?: NonNullablePaths<CountCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<CountCategoriesResponse, `count`, 2>>;
}
declare function moveCategory$1(httpClient: HttpClient): MoveCategorySignature;
interface MoveCategorySignature {
    /**
     * Moves a category within its parent category, or to a different parent category.
     * @param - ID of the category to move.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: NonNullablePaths<MoveCategoryOptions, `position`, 2>): Promise<NonNullablePaths<MoveCategoryResponse, `categoriesAfterMove`, 2> & {
        __applicationErrorsType?: MoveCategoryApplicationErrors;
    }>;
}
declare function bulkUpdateCategories$1(httpClient: HttpClient): BulkUpdateCategoriesSignature;
interface BulkUpdateCategoriesSignature {
    /**
     * Updates multiple categories.
     *
     * Each time a category is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a category.
     * This ensures you're working with the latest category and prevents unintended overwrites.
     * @param - List of categories to update.
     */
    (categories: NonNullablePaths<MaskedCategory, `category` | `category._id` | `category.revision`, 3>[], options?: NonNullablePaths<BulkUpdateCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkUpdateCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.category.itemCounter` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkUpdateCategoriesApplicationErrors;
    }>;
}
declare function updateCategoryVisibility$1(httpClient: HttpClient): UpdateCategoryVisibilitySignature;
interface UpdateCategoryVisibilitySignature {
    /**
     * Updates category visibility.
     *
     *
     * Each time a category is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a category.
     * This ensures you're working with the latest category and prevents unintended overwrites.
     * @param - Category ID.
     */
    (categoryId: string, options?: NonNullablePaths<UpdateCategoryVisibilityOptions, `revision` | `treeReference` | `treeReference.appNamespace` | `visible`, 3>): Promise<NonNullablePaths<UpdateCategoryVisibilityResponse, `category.itemCounter` | `category.breadcrumbsInfo.breadcrumbs` | `category.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `category.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `category.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `category.seoData.tags` | `category.seoData.tags.${number}.type` | `category.seoData.tags.${number}.children` | `category.seoData.tags.${number}.custom` | `category.seoData.tags.${number}.disabled` | `category.seoData.settings.preventAutoRedirect` | `category.seoData.settings.keywords` | `category.seoData.settings.keywords.${number}.term` | `category.seoData.settings.keywords.${number}.isMain`, 7> & {
        __applicationErrorsType?: UpdateCategoryVisibilityApplicationErrors;
    }>;
}
declare function bulkShowCategories$1(httpClient: HttpClient): BulkShowCategoriesSignature;
interface BulkShowCategoriesSignature {
    /**
     * Updates the visibility of multiple categories so that they are visible to site visitors in dynamic pages.
     *
     * Calling this method sets each category's `visible` field to `true`.
     * > **Note:** If one of the passed categories has a parent category that is not visible, the passed category will not be updated.
     * @param - IDs of the categories to update.
     */
    (categoryIds: string[], options?: NonNullablePaths<BulkShowCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkShowCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.category.itemCounter` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkAddItemsToCategory$1(httpClient: HttpClient): BulkAddItemsToCategorySignature;
interface BulkAddItemsToCategorySignature {
    /**
     * Adds multiple items to a single category.
     * @param - Category ID.
     * @param - List of items to add.
     */
    (categoryId: string, items: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>[], options: NonNullablePaths<BulkAddItemsToCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkAddItemsToCategoryResponse, `results` | `results.${number}.itemMetadata.item.catalogItemId` | `results.${number}.itemMetadata.item.appId` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkAddItemsToCategoryApplicationErrors;
    }>;
}
declare function bulkAddItemToCategories$1(httpClient: HttpClient): BulkAddItemToCategoriesSignature;
interface BulkAddItemToCategoriesSignature {
    /**
     * Adds a single item to multiple categories.
     * @param - Item to add.
     */
    (item: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>, options: NonNullablePaths<BulkAddItemToCategoriesOptions, `categoryIds` | `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkAddItemToCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkAddItemToCategoriesApplicationErrors;
    }>;
}
declare function bulkRemoveItemsFromCategory$1(httpClient: HttpClient): BulkRemoveItemsFromCategorySignature;
interface BulkRemoveItemsFromCategorySignature {
    /**
     * Removes multiple items from a single category.
     * @param - Category ID.
     * @param - List of items to remove.
     */
    (categoryId: string, items: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>[], options: NonNullablePaths<BulkRemoveItemsFromCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkRemoveItemsFromCategoryResponse, `results` | `results.${number}.itemMetadata.item.catalogItemId` | `results.${number}.itemMetadata.item.appId` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkRemoveItemsFromCategoryApplicationErrors;
    }>;
}
declare function bulkRemoveItemFromCategories$1(httpClient: HttpClient): BulkRemoveItemFromCategoriesSignature;
interface BulkRemoveItemFromCategoriesSignature {
    /**
     * Removes a single item from multiple categories.
     * @param - Item to remove.
     */
    (item: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>, options: NonNullablePaths<BulkRemoveItemFromCategoriesOptions, `categoryIds` | `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkRemoveItemFromCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkRemoveItemFromCategoriesApplicationErrors;
    }>;
}
declare function listItemsInCategory$1(httpClient: HttpClient): ListItemsInCategorySignature;
interface ListItemsInCategorySignature {
    /**
     * Retrieves a list of up to 100 items from a single category, given the provided cursor paging.
     *
     *
     * List Items In Categories defaults to sorting by the time the item was added to the category, in descending order.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: ListItemsInCategoryOptions): Promise<NonNullablePaths<ListItemsInCategoryResponse, `items` | `items.${number}.catalogItemId` | `items.${number}.appId`, 4>>;
}
declare function listCategoriesForItem$1(httpClient: HttpClient): ListCategoriesForItemSignature;
interface ListCategoriesForItemSignature {
    /**
     * Retrieves a list of categories that contain the specified item.
     * @param - Item reference info.
     */
    (item: ItemReference, options: NonNullablePaths<ListCategoriesForItemOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<ListCategoriesForItemResponse, `directCategoryIds` | `allCategoryIds`, 2>>;
}
declare function listCategoriesForItems$1(httpClient: HttpClient): ListCategoriesForItemsSignature;
interface ListCategoriesForItemsSignature {
    /**
     * Retrieves a map where the keys are ItemReferences, and the values are lists of categories that contain the corresponding item.
     * @param - List of Item reference info.
     */
    (items: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>[], options: NonNullablePaths<ListCategoriesForItemsOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<ListCategoriesForItemsResponse, `categoriesForItems` | `categoriesForItems.${number}.item.catalogItemId` | `categoriesForItems.${number}.item.appId`, 5>>;
}
declare function listTrees$1(httpClient: HttpClient): ListTreesSignature;
interface ListTreesSignature {
    /**
     * Retrieves a list of all trees installed on the site, sorted by `appNamespace` in ascending order.
     */
    (): Promise<NonNullablePaths<ListTreesResponse, `trees` | `trees.${number}.appNamespace`, 4>>;
}
declare function setArrangedItems$1(httpClient: HttpClient): SetArrangedItemsSignature;
interface SetArrangedItemsSignature {
    /**
     * Sets arranged items in a category.
     *
     * The order of items in the `items` array determines the order of items in the category.
     * The category's existing list of arranged items will be overridden.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: SetArrangedItemsOptions): Promise<NonNullablePaths<SetArrangedItemsResponse, `items` | `items.${number}.catalogItemId` | `items.${number}.appId`, 4> & {
        __applicationErrorsType?: SetArrangedItemsApplicationErrors;
    }>;
}
declare function getArrangedItems$1(httpClient: HttpClient): GetArrangedItemsSignature;
interface GetArrangedItemsSignature {
    /**
     * Retrieves a list of arranged items in a category.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>): Promise<NonNullablePaths<GetArrangedItemsResponse, `items` | `items.${number}.catalogItemId` | `items.${number}.appId`, 4>>;
}
declare const onCategoryMoved$1: EventDefinition<CategoryMovedEnvelope, "wix.categories.v1.category_category_moved">;
declare const onCategoryCreated$1: EventDefinition<CategoryCreatedEnvelope, "wix.categories.v1.category_created">;
declare const onCategoryDeleted$1: EventDefinition<CategoryDeletedEnvelope, "wix.categories.v1.category_deleted">;
declare const onCategoryItemAddedToCategory$1: EventDefinition<CategoryItemAddedToCategoryEnvelope, "wix.categories.v1.category_item_added_to_category">;
declare const onCategoryItemRemovedFromCategory$1: EventDefinition<CategoryItemRemovedFromCategoryEnvelope, "wix.categories.v1.category_item_removed_from_category">;
declare const onCategoryItemsArrangedInCategory$1: EventDefinition<CategoryItemsArrangedInCategoryEnvelope, "wix.categories.v1.category_items_arranged_in_category">;
declare const onCategoryUpdated$1: EventDefinition<CategoryUpdatedEnvelope, "wix.categories.v1.category_updated">;

declare const createCategory: MaybeContext<BuildRESTFunction<typeof createCategory$1> & typeof createCategory$1>;
declare const getCategory: MaybeContext<BuildRESTFunction<typeof getCategory$1> & typeof getCategory$1>;
declare const updateCategory: MaybeContext<BuildRESTFunction<typeof updateCategory$1> & typeof updateCategory$1>;
declare const deleteCategory: MaybeContext<BuildRESTFunction<typeof deleteCategory$1> & typeof deleteCategory$1>;
declare const queryCategories: MaybeContext<BuildRESTFunction<typeof queryCategories$1> & typeof queryCategories$1>;
declare const searchCategories: MaybeContext<BuildRESTFunction<typeof searchCategories$1> & typeof searchCategories$1>;
declare const countCategories: MaybeContext<BuildRESTFunction<typeof countCategories$1> & typeof countCategories$1>;
declare const moveCategory: MaybeContext<BuildRESTFunction<typeof moveCategory$1> & typeof moveCategory$1>;
declare const bulkUpdateCategories: MaybeContext<BuildRESTFunction<typeof bulkUpdateCategories$1> & typeof bulkUpdateCategories$1>;
declare const updateCategoryVisibility: MaybeContext<BuildRESTFunction<typeof updateCategoryVisibility$1> & typeof updateCategoryVisibility$1>;
declare const bulkShowCategories: MaybeContext<BuildRESTFunction<typeof bulkShowCategories$1> & typeof bulkShowCategories$1>;
declare const bulkAddItemsToCategory: MaybeContext<BuildRESTFunction<typeof bulkAddItemsToCategory$1> & typeof bulkAddItemsToCategory$1>;
declare const bulkAddItemToCategories: MaybeContext<BuildRESTFunction<typeof bulkAddItemToCategories$1> & typeof bulkAddItemToCategories$1>;
declare const bulkRemoveItemsFromCategory: MaybeContext<BuildRESTFunction<typeof bulkRemoveItemsFromCategory$1> & typeof bulkRemoveItemsFromCategory$1>;
declare const bulkRemoveItemFromCategories: MaybeContext<BuildRESTFunction<typeof bulkRemoveItemFromCategories$1> & typeof bulkRemoveItemFromCategories$1>;
declare const listItemsInCategory: MaybeContext<BuildRESTFunction<typeof listItemsInCategory$1> & typeof listItemsInCategory$1>;
declare const listCategoriesForItem: MaybeContext<BuildRESTFunction<typeof listCategoriesForItem$1> & typeof listCategoriesForItem$1>;
declare const listCategoriesForItems: MaybeContext<BuildRESTFunction<typeof listCategoriesForItems$1> & typeof listCategoriesForItems$1>;
declare const listTrees: MaybeContext<BuildRESTFunction<typeof listTrees$1> & typeof listTrees$1>;
declare const setArrangedItems: MaybeContext<BuildRESTFunction<typeof setArrangedItems$1> & typeof setArrangedItems$1>;
declare const getArrangedItems: MaybeContext<BuildRESTFunction<typeof getArrangedItems$1> & typeof getArrangedItems$1>;
/**
 * Triggered when a category is moved.
 */
declare const onCategoryMoved: BuildEventDefinition<typeof onCategoryMoved$1> & typeof onCategoryMoved$1;
/** */
declare const onCategoryCreated: BuildEventDefinition<typeof onCategoryCreated$1> & typeof onCategoryCreated$1;
/** */
declare const onCategoryDeleted: BuildEventDefinition<typeof onCategoryDeleted$1> & typeof onCategoryDeleted$1;
/**
 * Triggered when an item is added to a category.
 */
declare const onCategoryItemAddedToCategory: BuildEventDefinition<typeof onCategoryItemAddedToCategory$1> & typeof onCategoryItemAddedToCategory$1;
/**
 * Triggered when an item is removed from a category.
 */
declare const onCategoryItemRemovedFromCategory: BuildEventDefinition<typeof onCategoryItemRemovedFromCategory$1> & typeof onCategoryItemRemovedFromCategory$1;
/**
 * Triggered when items arrangement in category is changed.
 */
declare const onCategoryItemsArrangedInCategory: BuildEventDefinition<typeof onCategoryItemsArrangedInCategory$1> & typeof onCategoryItemsArrangedInCategory$1;
/** */
declare const onCategoryUpdated: BuildEventDefinition<typeof onCategoryUpdated$1> & typeof onCategoryUpdated$1;

export { BulkAddItemToCategoriesApplicationErrors, BulkAddItemToCategoriesOptions, BulkAddItemToCategoriesResponse, BulkAddItemsToCategoryApplicationErrors, BulkAddItemsToCategoryOptions, BulkAddItemsToCategoryResponse, BulkRemoveItemFromCategoriesApplicationErrors, BulkRemoveItemFromCategoriesOptions, BulkRemoveItemFromCategoriesResponse, BulkRemoveItemsFromCategoryApplicationErrors, BulkRemoveItemsFromCategoryOptions, BulkRemoveItemsFromCategoryResponse, BulkShowCategoriesOptions, BulkShowCategoriesResponse, BulkUpdateCategoriesApplicationErrors, BulkUpdateCategoriesOptions, BulkUpdateCategoriesResponse, CategoriesQueryBuilder, Category, CategoryCreatedEnvelope, CategoryDeletedEnvelope, CategoryItemAddedToCategoryEnvelope, CategoryItemRemovedFromCategoryEnvelope, CategoryItemsArrangedInCategoryEnvelope, CategoryMovedEnvelope, CategorySearch, CategoryUpdatedEnvelope, CountCategoriesOptions, CountCategoriesResponse, CreateCategoryApplicationErrors, CreateCategoryOptions, DeleteCategoryApplicationErrors, GetArrangedItemsResponse, GetCategoryOptions, ItemReference, ListCategoriesForItemOptions, ListCategoriesForItemResponse, ListCategoriesForItemsOptions, ListCategoriesForItemsResponse, ListItemsInCategoryOptions, ListItemsInCategoryResponse, ListTreesResponse, MaskedCategory, MoveCategoryApplicationErrors, MoveCategoryOptions, MoveCategoryResponse, QueryCategoriesOptions, SearchCategoriesOptions, SearchCategoriesResponse, SetArrangedItemsApplicationErrors, SetArrangedItemsOptions, SetArrangedItemsResponse, TreeReference, UpdateCategory, UpdateCategoryApplicationErrors, UpdateCategoryOptions, UpdateCategoryVisibilityApplicationErrors, UpdateCategoryVisibilityOptions, UpdateCategoryVisibilityResponse, bulkAddItemToCategories, bulkAddItemsToCategory, bulkRemoveItemFromCategories, bulkRemoveItemsFromCategory, bulkShowCategories, bulkUpdateCategories, countCategories, createCategory, deleteCategory, getArrangedItems, getCategory, listCategoriesForItem, listCategoriesForItems, listItemsInCategory, listTrees, moveCategory, onCategoryCreated, onCategoryDeleted, onCategoryItemAddedToCategory, onCategoryItemRemovedFromCategory, onCategoryItemsArrangedInCategory, onCategoryMoved, onCategoryUpdated, queryCategories, searchCategories, setArrangedItems, updateCategory, updateCategoryVisibility };
