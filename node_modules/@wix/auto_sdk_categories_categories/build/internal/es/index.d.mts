import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { C as Category, a as CreateCategoryOptions, b as CreateCategoryApplicationErrors, T as TreeReference, G as GetCategoryOptions, U as UpdateCategory, c as UpdateCategoryOptions, d as UpdateCategoryApplicationErrors, D as DeleteCategoryApplicationErrors, Q as QueryCategoriesOptions, e as CategoriesQueryBuilder, f as CategorySearch, S as SearchCategoriesOptions, g as SearchCategoriesResponse, h as CountCategoriesOptions, i as CountCategoriesResponse, M as MoveCategoryOptions, j as MoveCategoryResponse, k as MoveCategoryApplicationErrors, l as MaskedCategory, B as BulkUpdateCategoriesOptions, m as BulkUpdateCategoriesResponse, n as BulkUpdateCategoriesApplicationErrors, o as UpdateCategoryVisibilityOptions, p as UpdateCategoryVisibilityResponse, q as UpdateCategoryVisibilityApplicationErrors, r as BulkShowCategoriesOptions, s as BulkShowCategoriesResponse, I as ItemReference, t as BulkAddItemsToCategoryOptions, u as BulkAddItemsToCategoryResponse, v as BulkAddItemsToCategoryApplicationErrors, w as BulkAddItemToCategoriesOptions, x as BulkAddItemToCategoriesResponse, y as BulkAddItemToCategoriesApplicationErrors, z as BulkRemoveItemsFromCategoryOptions, A as BulkRemoveItemsFromCategoryResponse, E as BulkRemoveItemsFromCategoryApplicationErrors, F as BulkRemoveItemFromCategoriesOptions, H as BulkRemoveItemFromCategoriesResponse, J as BulkRemoveItemFromCategoriesApplicationErrors, L as ListItemsInCategoryOptions, K as ListItemsInCategoryResponse, N as ListCategoriesForItemOptions, O as ListCategoriesForItemResponse, P as ListCategoriesForItemsOptions, R as ListCategoriesForItemsResponse, V as ListTreesResponse, W as SetArrangedItemsOptions, X as SetArrangedItemsResponse, Y as SetArrangedItemsApplicationErrors, Z as GetArrangedItemsResponse, _ as BulkSetItemCategoriesOptions, $ as BulkSetItemCategoriesResponse, a0 as BulkSetItemCategoriesApplicationErrors, a1 as CategoryMovedEnvelope, a2 as CategoryCreatedEnvelope, a3 as CategoryDeletedEnvelope, a4 as CategoryItemAddedToCategoryEnvelope, a5 as CategoryItemRemovedFromCategoryEnvelope, a6 as CategoryItemsArrangedInCategoryEnvelope, a7 as CategoryUpdatedEnvelope } from './categories-v1-category-categories.universal-sddSStoo.mjs';
export { ep as ActionEvent, d8 as Aggregation, dl as AggregationData, d9 as AggregationKindOneOf, dF as AggregationResults, dG as AggregationResultsResultOneOf, dt as AggregationResultsScalarResult, aS as AggregationType, fh as AggregationTypeWithLiterals, aC as Alignment, f1 as AlignmentWithLiterals, c1 as AnchorData, cD as App, c7 as AppEmbedData, c8 as AppEmbedDataAppDataOneOf, aE as AppType, f3 as AppTypeWithLiterals, dS as ApplicationError, ay as AspectRatio, eZ as AspectRatioWithLiterals, cr as AudioData, bT as Background, bU as BackgroundBackgroundOneOf, au as BackgroundType, eV as BackgroundTypeWithLiterals, eu as BaseEventMetadata, cu as BlockquoteData, c9 as BookingData, b7 as Border, cp as BorderColors, aY as Breadcrumb, aX as BreadcrumbsInfo, dT as BulkActionMetadata, e0 as BulkAddItemToCategoriesRequest, dZ as BulkAddItemsToCategoryRequest, dQ as BulkCategoriesResult, dW as BulkDeleteCategoriesRequest, dX as BulkDeleteCategoriesResponse, dY as BulkDeleteCategoriesResponseBulkCategoriesResult, e1 as BulkItemToCategoriesResult, d_ as BulkItemsToCategoryResult, e3 as BulkRemoveItemFromCategoriesRequest, e2 as BulkRemoveItemsFromCategoryRequest, ef as BulkSetItemCategoriesRequest, dV as BulkShowCategoriesRequest, dP as BulkUpdateCategoriesRequest, ct as BulletedListData, b6 as ButtonData, ab as ButtonDataType, eC as ButtonDataTypeWithLiterals, cb as ButtonStyles, cv as CaptionData, ce as CardStyles, ew as CategoriesQueryResult, cI as CategoryMoved, ex as CategorySearchSpec, ei as CategoryTreeNode, co as CellStyle, bi as CodeBlockData, ck as CollapsibleListData, c2 as ColorData, b8 as Colors, fm as CommonSearchWithEntityContext, d4 as CompactCategory, dN as CountCategoriesRequest, cO as CreateCategoryRequest, cP as CreateCategoryResponse, ak as Crop, eL as CropWithLiterals, c_ as CursorPaging, d0 as CursorPagingMetadata, cX as CursorQuery, cY as CursorQueryPagingMethodOneOf, d6 as CursorSearch, d7 as CursorSearchPagingMethodOneOf, d1 as Cursors, cH as CustomTag, dg as DateHistogramAggregation, dB as DateHistogramResult, dD as DateHistogramResults, b$ as Decoration, c0 as DecorationDataOneOf, av as DecorationType, eW as DecorationTypeWithLiterals, cU as DeleteCategoryRequest, cV as DeleteCategoryResponse, dH as DeprecatedSearchCategoriesWithOffsetRequest, dL as DeprecatedSearchCategoriesWithOffsetResponse, bZ as Design, cm as Dimensions, aG as Direction, f5 as DirectionWithLiterals, bk as DividerData, ag as DividerDataAlignment, eH as DividerDataAlignmentWithLiterals, cy as DocumentStyle, ej as DomainEvent, ek as DomainEventBodyOneOf, ci as EmbedData, eq as Empty, el as EntityCreatedEvent, eo as EntityDeletedEvent, en as EntityUpdatedEvent, ca as EventData, ev as EventMetadata, cA as ExtendedFields, cG as File, bl as FileData, bm as FileSource, bn as FileSourceDataOneOf, c5 as FontSizeData, aw as FontType, eX as FontTypeWithLiterals, bA as GIF, bz as GIFData, am as GIFType, eN as GIFTypeWithLiterals, bp as GalleryData, bv as GalleryOptions, bw as GalleryOptionsLayout, ee as GetArrangedItemsRequest, eg as GetCategoriesTreeRequest, eh as GetCategoriesTreeResponse, cQ as GetCategoryRequest, cR as GetCategoryResponse, bS as Gradient, dC as GroupByValueResults, bC as HTMLData, bD as HTMLDataDataOneOf, bB as HeadingData, bd as Height, es as IdentificationData, et as IdentificationDataIdOneOf, br as Image, bE as ImageData, bG as ImageDataStyles, cc as ImageStyles, ax as ImageStylesPosition, eY as ImageStylesPositionWithLiterals, db as IncludeMissingValuesOptions, aF as InitialExpandedItems, f4 as InitialExpandedItemsWithLiterals, aR as Interval, fg as IntervalWithLiterals, cB as InvalidateCache, cC as InvalidateCacheGetByOneOf, bt as Item, cJ as ItemAddedToCategory, bu as ItemDataOneOf, dR as ItemMetadata, d$ as ItemReferenceMetadata, cL as ItemRemovedFromCategory, bx as ItemStyle, cK as ItemsAddedToCategory, cN as ItemsArrangedInCategory, cM as ItemsRemovedFromCategory, a$ as Keyword, aD as Layout, cw as LayoutCellData, ai as LayoutType, eJ as LayoutTypeWithLiterals, f2 as LayoutWithLiterals, ae as LineStyle, eF as LineStyleWithLiterals, bf as Link, c3 as LinkData, bg as LinkDataOneOf, bH as LinkPreviewData, bI as LinkPreviewDataStyles, e7 as ListCategoriesForItemRequest, e8 as ListCategoriesForItemsRequest, d2 as ListCompactCategoriesByIdsRequest, d3 as ListCompactCategoriesByIdsResponse, ey as ListItemsInCategoryOptionsPagingMethodOneOf, e4 as ListItemsInCategoryRequest, e5 as ListItemsInCategoryRequestPagingMethodOneOf, ea as ListTreesRequest, cq as ListValue, bJ as MapData, e9 as MapItemToCategories, bK as MapSettings, ap as MapType, eQ as MapTypeWithLiterals, bq as Media, c4 as MentionData, er as MessageEnvelope, cx as Metadata, aO as MissingValues, fd as MissingValuesWithLiterals, aT as Mode, fi as ModeWithLiterals, dO as MoveCategoryRequest, eb as MoveItemInCategoryRequest, aV as MoveItemInCategoryRequestPosition, fk as MoveItemInCategoryRequestPositionWithLiterals, ec as MoveItemInCategoryResponse, dj as NestedAggregation, dh as NestedAggregationItem, di as NestedAggregationItemKindOneOf, dp as NestedAggregationResults, dq as NestedAggregationResultsResultOneOf, aQ as NestedAggregationType, ff as NestedAggregationTypeWithLiterals, dy as NestedResultValue, dz as NestedResultValueResultOneOf, dE as NestedResults, du as NestedValueAggregationResult, b3 as Node, b4 as NodeDataOneOf, b5 as NodeStyle, a8 as NodeType, ez as NodeTypeWithLiterals, aI as NullValue, f7 as NullValueWithLiterals, cj as Oembed, dI as OffsetSearch, dJ as OffsetSearchPagingMethodOneOf, bO as Option, bW as OptionDesign, bR as OptionLayout, cs as OrderedListData, aj as Orientation, eK as OrientationWithLiterals, bo as PDFSettings, cE as Page, dK as Paging, dM as PagingMetadata, e6 as PagingMetadataV2, bL as ParagraphData, aZ as ParentCategory, bN as Permissions, aA as Placement, e$ as PlacementWithLiterals, ch as PlaybackOptions, b9 as PluginContainerData, aa as PluginContainerDataAlignment, eB as PluginContainerDataAlignmentWithLiterals, ba as PluginContainerDataWidth, bb as PluginContainerDataWidthDataOneOf, bX as Poll, bM as PollData, bY as PollDataLayout, bV as PollDesign, bQ as PollLayout, at as PollLayoutDirection, eU as PollLayoutDirectionWithLiterals, as as PollLayoutType, eT as PollLayoutTypeWithLiterals, bP as PollSettings, aU as Position, fj as PositionWithLiterals, cf as PricingData, cW as QueryCategoriesRequest, c$ as QueryCategoriesResponse, de as RangeAggregation, dn as RangeAggregationResult, da as RangeBucket, dw as RangeResult, ds as RangeResults, bh as Rel, aL as RequestedFields, fa as RequestedFieldsWithLiterals, az as Resizing, e_ as ResizingWithLiterals, em as RestoreInfo, dA as Results, cd as RibbonStyles, b2 as RichContent, df as ScalarAggregation, dx as ScalarResult, aP as ScalarType, fe as ScalarTypeWithLiterals, d5 as SearchCategoriesRequest, dk as SearchDetails, a_ as SeoSchema, ed as SetArrangedItemsRequest, b1 as Settings, aJ as SingleEntityOpsRequestedFields, f8 as SingleEntityOpsRequestedFieldsWithLiterals, aN as SortDirection, fc as SortDirectionWithLiterals, aK as SortOrder, f9 as SortOrderWithLiterals, aM as SortType, fb as SortTypeWithLiterals, cZ as Sorting, an as Source, eO as SourceWithLiterals, bc as Spoiler, c6 as SpoilerData, be as Styles, bF as StylesBorder, ao as StylesPosition, eP as StylesPositionWithLiterals, cn as TableCellData, cl as TableData, b0 as Tag, ac as Target, eD as TargetWithLiterals, ad as TextAlignment, eE as TextAlignmentWithLiterals, b_ as TextData, cz as TextNodeStyle, bj as TextStyle, by as Thumbnails, al as ThumbnailsAlignment, eM as ThumbnailsAlignmentWithLiterals, aB as Type, f0 as TypeWithLiterals, cF as URI, cS as UpdateCategoryRequest, cT as UpdateCategoryResponse, dU as UpdateCategoryVisibilityRequest, dc as ValueAggregation, dd as ValueAggregationOptionsOneOf, dm as ValueAggregationResult, dv as ValueResult, dr as ValueResults, aH as VerticalAlignment, f6 as VerticalAlignmentWithLiterals, bs as Video, cg as VideoData, ah as ViewMode, eI as ViewModeWithLiterals, aq as ViewRole, eR as ViewRoleWithLiterals, ar as VoteRole, eS as VoteRoleWithLiterals, aW as WebhookIdentityType, fl as WebhookIdentityTypeWithLiterals, af as Width, a9 as WidthType, eA as WidthTypeWithLiterals, eG as WidthWithLiterals } from './categories-v1-category-categories.universal-sddSStoo.mjs';

declare function createCategory$1(httpClient: HttpClient): CreateCategorySignature;
interface CreateCategorySignature {
    /**
     * Creates a category.
     * @param - Category to create.
     * @returns Created category.
     */
    (category: NonNullablePaths<Category, `name` | `parentCategory._id`, 3>, options?: NonNullablePaths<CreateCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<Category, `itemCounter` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain`, 6> & {
        __applicationErrorsType?: CreateCategoryApplicationErrors;
    }>;
}
declare function getCategory$1(httpClient: HttpClient): GetCategorySignature;
interface GetCategorySignature {
    /**
     * Retrieves a category.
     * @param - Category ID.
     * @param - Category tree reference details.
     * @returns Category.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: GetCategoryOptions): Promise<NonNullablePaths<Category, `itemCounter` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain`, 6>>;
}
declare function updateCategory$1(httpClient: HttpClient): UpdateCategorySignature;
interface UpdateCategorySignature {
    /**
     * Updates a category.
     *
     * Each time the category is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the category.
     * This ensures you're working with the latest category and prevents unintended overwrites.
     * @param - Category ID.
     * @returns Updated category.
     */
    (_id: string, category: NonNullablePaths<UpdateCategory, `revision`, 2>, options?: NonNullablePaths<UpdateCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<Category, `itemCounter` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain`, 6> & {
        __applicationErrorsType?: UpdateCategoryApplicationErrors;
    }>;
}
declare function deleteCategory$1(httpClient: HttpClient): DeleteCategorySignature;
interface DeleteCategorySignature {
    /**
     * Deletes a category.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>): Promise<void & {
        __applicationErrorsType?: DeleteCategoryApplicationErrors;
    }>;
}
declare function queryCategories$1(httpClient: HttpClient): QueryCategoriesSignature;
interface QueryCategoriesSignature {
    /**
     * Retrieves a list of up to 1,000 categories, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * For field support for filters and sorting,
     * see [Categories: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options: QueryCategoriesOptions): CategoriesQueryBuilder;
}
declare function searchCategories$1(httpClient: HttpClient): SearchCategoriesSignature;
interface SearchCategoriesSignature {
    /**
     * Retrieves a list of up to 1,000 categories with the specified filtering, sorting, and cursor paging.
     * Specify supported values in `fields` to include those fields in the response.
     *
     * ## Defaults
     *
     * Search Categories has the following default settings, which you can override:
     * + Sorted by `createdDate` in descending order.
     * + `cursorPaging.limit` set to `100`.
     *
     * ## Filters
     *
     * When using filters for dates, you must use
     * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
     *
     * Refer to the [supported filters & sorting table](https://dev.wix.com/docs/sdk/backend-modules/categories/categories/search-categories) (SDK)
     * or the [supported filters article](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting) (REST)
     * for a complete list of supported filters and sorting options.
     *
     * ## See also
     *
     * To learn about working with *Search* methods, see
     * _API Query Language_
     * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/get-started/api-query-language))
     * and *Sorting and Paging*
     * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#the-sort-array) | [REST](https://dev.wix.com/docs/rest/articles/get-started/sorting-and-paging)).
     * @param - Search criteria including filter, sort, aggregations, and paging options.
     *
     * Refer to the [supported filters & sorting table](https://dev.wix.com/docs/sdk/backend-modules/categories/categories/search-categories) (SDK)
     * or the [supported filters article](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting) (REST)
     * for a complete list of supported filters and sorting options.
     */
    (search: CategorySearch, options?: NonNullablePaths<SearchCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<SearchCategoriesResponse, `categories` | `categories.${number}.itemCounter` | `categories.${number}.seoData.settings.preventAutoRedirect` | `aggregationData.results` | `aggregationData.results.${number}.scalar.type` | `aggregationData.results.${number}.scalar.value` | `aggregationData.results.${number}.name` | `aggregationData.results.${number}.type` | `aggregationData.results.${number}.fieldPath`, 6>>;
}
declare function countCategories$1(httpClient: HttpClient): CountCategoriesSignature;
interface CountCategoriesSignature {
    /**
     * Counts the number of categories that match the provided filtering.
     *
     * For field support for filters and sorting,
     * see [Categories: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/categories/supported-filters-and-sorting).
     */
    (options?: NonNullablePaths<CountCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<CountCategoriesResponse, `count`, 2>>;
}
declare function moveCategory$1(httpClient: HttpClient): MoveCategorySignature;
interface MoveCategorySignature {
    /**
     * Moves a category within its parent category, or to a different parent category.
     * @param - ID of the category to move.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: NonNullablePaths<MoveCategoryOptions, `position`, 2>): Promise<NonNullablePaths<MoveCategoryResponse, `categoriesAfterMove`, 2> & {
        __applicationErrorsType?: MoveCategoryApplicationErrors;
    }>;
}
declare function bulkUpdateCategories$1(httpClient: HttpClient): BulkUpdateCategoriesSignature;
interface BulkUpdateCategoriesSignature {
    /**
     * Updates multiple categories.
     *
     * Each time a category is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a category.
     * This ensures you're working with the latest category and prevents unintended overwrites.
     * @param - List of categories to update.
     */
    (categories: NonNullablePaths<MaskedCategory, `category` | `category._id` | `category.revision`, 3>[], options?: NonNullablePaths<BulkUpdateCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkUpdateCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.category.itemCounter` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkUpdateCategoriesApplicationErrors;
    }>;
}
declare function updateCategoryVisibility$1(httpClient: HttpClient): UpdateCategoryVisibilitySignature;
interface UpdateCategoryVisibilitySignature {
    /**
     * Updates category visibility.
     *
     *
     * Each time a category is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a category.
     * This ensures you're working with the latest category and prevents unintended overwrites.
     * @param - Category ID.
     */
    (categoryId: string, options?: NonNullablePaths<UpdateCategoryVisibilityOptions, `revision` | `treeReference` | `treeReference.appNamespace` | `visible`, 3>): Promise<NonNullablePaths<UpdateCategoryVisibilityResponse, `category.itemCounter` | `category.breadcrumbsInfo.breadcrumbs` | `category.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `category.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `category.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `category.seoData.tags` | `category.seoData.tags.${number}.type` | `category.seoData.tags.${number}.children` | `category.seoData.tags.${number}.custom` | `category.seoData.tags.${number}.disabled` | `category.seoData.settings.preventAutoRedirect` | `category.seoData.settings.keywords` | `category.seoData.settings.keywords.${number}.term` | `category.seoData.settings.keywords.${number}.isMain`, 7> & {
        __applicationErrorsType?: UpdateCategoryVisibilityApplicationErrors;
    }>;
}
declare function bulkShowCategories$1(httpClient: HttpClient): BulkShowCategoriesSignature;
interface BulkShowCategoriesSignature {
    /**
     * Updates the visibility of multiple categories so that they are visible to site visitors in dynamic pages.
     *
     * Calling this method sets each category's `visible` field to `true`.
     * > **Note:** If one of the passed categories has a parent category that is not visible, the passed category will not be updated.
     * @param - IDs of the categories to update.
     */
    (categoryIds: string[], options?: NonNullablePaths<BulkShowCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkShowCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.category.itemCounter` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkAddItemsToCategory$1(httpClient: HttpClient): BulkAddItemsToCategorySignature;
interface BulkAddItemsToCategorySignature {
    /**
     * Adds multiple items to a single category.
     * @param - Category ID.
     * @param - List of items to add.
     */
    (categoryId: string, items: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>[], options: NonNullablePaths<BulkAddItemsToCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkAddItemsToCategoryResponse, `results` | `results.${number}.itemMetadata.item.catalogItemId` | `results.${number}.itemMetadata.item.appId` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkAddItemsToCategoryApplicationErrors;
    }>;
}
declare function bulkAddItemToCategories$1(httpClient: HttpClient): BulkAddItemToCategoriesSignature;
interface BulkAddItemToCategoriesSignature {
    /**
     * Adds a single item to multiple categories.
     * @param - Item to add.
     */
    (item: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>, options: NonNullablePaths<BulkAddItemToCategoriesOptions, `categoryIds` | `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkAddItemToCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkAddItemToCategoriesApplicationErrors;
    }>;
}
declare function bulkRemoveItemsFromCategory$1(httpClient: HttpClient): BulkRemoveItemsFromCategorySignature;
interface BulkRemoveItemsFromCategorySignature {
    /**
     * Removes multiple items from a single category.
     * @param - Category ID.
     * @param - List of items to remove.
     */
    (categoryId: string, items: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>[], options: NonNullablePaths<BulkRemoveItemsFromCategoryOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkRemoveItemsFromCategoryResponse, `results` | `results.${number}.itemMetadata.item.catalogItemId` | `results.${number}.itemMetadata.item.appId` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkRemoveItemsFromCategoryApplicationErrors;
    }>;
}
declare function bulkRemoveItemFromCategories$1(httpClient: HttpClient): BulkRemoveItemFromCategoriesSignature;
interface BulkRemoveItemFromCategoriesSignature {
    /**
     * Removes a single item from multiple categories.
     * @param - Item to remove.
     */
    (item: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>, options: NonNullablePaths<BulkRemoveItemFromCategoriesOptions, `categoryIds` | `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkRemoveItemFromCategoriesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkRemoveItemFromCategoriesApplicationErrors;
    }>;
}
declare function listItemsInCategory$1(httpClient: HttpClient): ListItemsInCategorySignature;
interface ListItemsInCategorySignature {
    /**
     * Retrieves a list of up to 100 items from a single category, given the provided cursor paging.
     *
     *
     * List Items In Categories defaults to sorting by the time the item was added to the category, in descending order.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: ListItemsInCategoryOptions): Promise<NonNullablePaths<ListItemsInCategoryResponse, `items` | `items.${number}.catalogItemId` | `items.${number}.appId`, 4>>;
}
declare function listCategoriesForItem$1(httpClient: HttpClient): ListCategoriesForItemSignature;
interface ListCategoriesForItemSignature {
    /**
     * Retrieves a list of categories that contain the specified item.
     * @param - Item reference info.
     */
    (item: ItemReference, options: NonNullablePaths<ListCategoriesForItemOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<ListCategoriesForItemResponse, `directCategoryIds` | `allCategoryIds`, 2>>;
}
declare function listCategoriesForItems$1(httpClient: HttpClient): ListCategoriesForItemsSignature;
interface ListCategoriesForItemsSignature {
    /**
     * Retrieves a map where the keys are ItemReferences, and the values are lists of categories that contain the corresponding item.
     * @param - List of Item reference info.
     */
    (items: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>[], options: NonNullablePaths<ListCategoriesForItemsOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<ListCategoriesForItemsResponse, `categoriesForItems` | `categoriesForItems.${number}.item.catalogItemId` | `categoriesForItems.${number}.item.appId`, 5>>;
}
declare function listTrees$1(httpClient: HttpClient): ListTreesSignature;
interface ListTreesSignature {
    /**
     * Retrieves a list of all trees installed on the site, sorted by `appNamespace` in ascending order.
     */
    (): Promise<NonNullablePaths<ListTreesResponse, `trees` | `trees.${number}.appNamespace`, 4>>;
}
declare function setArrangedItems$1(httpClient: HttpClient): SetArrangedItemsSignature;
interface SetArrangedItemsSignature {
    /**
     * Sets arranged items in a category.
     *
     * The order of items in the `items` array determines the order of items in the category.
     * The category's existing list of arranged items will be overridden.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>, options?: SetArrangedItemsOptions): Promise<NonNullablePaths<SetArrangedItemsResponse, `items` | `items.${number}.catalogItemId` | `items.${number}.appId`, 4> & {
        __applicationErrorsType?: SetArrangedItemsApplicationErrors;
    }>;
}
declare function getArrangedItems$1(httpClient: HttpClient): GetArrangedItemsSignature;
interface GetArrangedItemsSignature {
    /**
     * Retrieves a list of arranged items in a category.
     * @param - Category ID.
     * @param - Category tree reference details.
     */
    (categoryId: string, treeReference: NonNullablePaths<TreeReference, `appNamespace`, 2>): Promise<NonNullablePaths<GetArrangedItemsResponse, `items` | `items.${number}.catalogItemId` | `items.${number}.appId`, 4>>;
}
/** @internal */
declare function bulkSetItemCategories$1(httpClient: HttpClient): BulkSetItemCategoriesSignature;
interface BulkSetItemCategoriesSignature {
    /**
     * Sets categories of an item by providing a sequence of category IDs.
     * The item's categories will be completely overridden with the provided list.
     * @param - The item to update.
     */
    (item: NonNullablePaths<ItemReference, `appId` | `catalogItemId`, 2>, options?: NonNullablePaths<BulkSetItemCategoriesOptions, `treeReference` | `treeReference.appNamespace`, 3>): Promise<NonNullablePaths<BulkSetItemCategoriesResponse, `addResults` | `addResults.${number}.itemMetadata.originalIndex` | `addResults.${number}.itemMetadata.success` | `addResults.${number}.itemMetadata.error.code` | `addResults.${number}.itemMetadata.error.description` | `removeResults` | `removeResults.${number}.itemMetadata.originalIndex` | `removeResults.${number}.itemMetadata.success` | `removeResults.${number}.itemMetadata.error.code` | `removeResults.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkSetItemCategoriesApplicationErrors;
    }>;
}
declare const onCategoryMoved$1: EventDefinition<CategoryMovedEnvelope, "wix.categories.v1.category_category_moved">;
declare const onCategoryCreated$1: EventDefinition<CategoryCreatedEnvelope, "wix.categories.v1.category_created">;
declare const onCategoryDeleted$1: EventDefinition<CategoryDeletedEnvelope, "wix.categories.v1.category_deleted">;
declare const onCategoryItemAddedToCategory$1: EventDefinition<CategoryItemAddedToCategoryEnvelope, "wix.categories.v1.category_item_added_to_category">;
declare const onCategoryItemRemovedFromCategory$1: EventDefinition<CategoryItemRemovedFromCategoryEnvelope, "wix.categories.v1.category_item_removed_from_category">;
declare const onCategoryItemsArrangedInCategory$1: EventDefinition<CategoryItemsArrangedInCategoryEnvelope, "wix.categories.v1.category_items_arranged_in_category">;
declare const onCategoryUpdated$1: EventDefinition<CategoryUpdatedEnvelope, "wix.categories.v1.category_updated">;

declare const createCategory: MaybeContext<BuildRESTFunction<typeof createCategory$1> & typeof createCategory$1>;
declare const getCategory: MaybeContext<BuildRESTFunction<typeof getCategory$1> & typeof getCategory$1>;
declare const updateCategory: MaybeContext<BuildRESTFunction<typeof updateCategory$1> & typeof updateCategory$1>;
declare const deleteCategory: MaybeContext<BuildRESTFunction<typeof deleteCategory$1> & typeof deleteCategory$1>;
declare const queryCategories: MaybeContext<BuildRESTFunction<typeof queryCategories$1> & typeof queryCategories$1>;
declare const searchCategories: MaybeContext<BuildRESTFunction<typeof searchCategories$1> & typeof searchCategories$1>;
declare const countCategories: MaybeContext<BuildRESTFunction<typeof countCategories$1> & typeof countCategories$1>;
declare const moveCategory: MaybeContext<BuildRESTFunction<typeof moveCategory$1> & typeof moveCategory$1>;
declare const bulkUpdateCategories: MaybeContext<BuildRESTFunction<typeof bulkUpdateCategories$1> & typeof bulkUpdateCategories$1>;
declare const updateCategoryVisibility: MaybeContext<BuildRESTFunction<typeof updateCategoryVisibility$1> & typeof updateCategoryVisibility$1>;
declare const bulkShowCategories: MaybeContext<BuildRESTFunction<typeof bulkShowCategories$1> & typeof bulkShowCategories$1>;
declare const bulkAddItemsToCategory: MaybeContext<BuildRESTFunction<typeof bulkAddItemsToCategory$1> & typeof bulkAddItemsToCategory$1>;
declare const bulkAddItemToCategories: MaybeContext<BuildRESTFunction<typeof bulkAddItemToCategories$1> & typeof bulkAddItemToCategories$1>;
declare const bulkRemoveItemsFromCategory: MaybeContext<BuildRESTFunction<typeof bulkRemoveItemsFromCategory$1> & typeof bulkRemoveItemsFromCategory$1>;
declare const bulkRemoveItemFromCategories: MaybeContext<BuildRESTFunction<typeof bulkRemoveItemFromCategories$1> & typeof bulkRemoveItemFromCategories$1>;
declare const listItemsInCategory: MaybeContext<BuildRESTFunction<typeof listItemsInCategory$1> & typeof listItemsInCategory$1>;
declare const listCategoriesForItem: MaybeContext<BuildRESTFunction<typeof listCategoriesForItem$1> & typeof listCategoriesForItem$1>;
declare const listCategoriesForItems: MaybeContext<BuildRESTFunction<typeof listCategoriesForItems$1> & typeof listCategoriesForItems$1>;
declare const listTrees: MaybeContext<BuildRESTFunction<typeof listTrees$1> & typeof listTrees$1>;
declare const setArrangedItems: MaybeContext<BuildRESTFunction<typeof setArrangedItems$1> & typeof setArrangedItems$1>;
declare const getArrangedItems: MaybeContext<BuildRESTFunction<typeof getArrangedItems$1> & typeof getArrangedItems$1>;
/** @internal */
declare const bulkSetItemCategories: MaybeContext<BuildRESTFunction<typeof bulkSetItemCategories$1> & typeof bulkSetItemCategories$1>;
/**
 * Triggered when a category is moved.
 */
declare const onCategoryMoved: BuildEventDefinition<typeof onCategoryMoved$1> & typeof onCategoryMoved$1;
/** */
declare const onCategoryCreated: BuildEventDefinition<typeof onCategoryCreated$1> & typeof onCategoryCreated$1;
/** */
declare const onCategoryDeleted: BuildEventDefinition<typeof onCategoryDeleted$1> & typeof onCategoryDeleted$1;
/**
 * Triggered when an item is added to a category.
 */
declare const onCategoryItemAddedToCategory: BuildEventDefinition<typeof onCategoryItemAddedToCategory$1> & typeof onCategoryItemAddedToCategory$1;
/**
 * Triggered when an item is removed from a category.
 */
declare const onCategoryItemRemovedFromCategory: BuildEventDefinition<typeof onCategoryItemRemovedFromCategory$1> & typeof onCategoryItemRemovedFromCategory$1;
/**
 * Triggered when items arrangement in category is changed.
 */
declare const onCategoryItemsArrangedInCategory: BuildEventDefinition<typeof onCategoryItemsArrangedInCategory$1> & typeof onCategoryItemsArrangedInCategory$1;
/** */
declare const onCategoryUpdated: BuildEventDefinition<typeof onCategoryUpdated$1> & typeof onCategoryUpdated$1;

export { BulkAddItemToCategoriesApplicationErrors, BulkAddItemToCategoriesOptions, BulkAddItemToCategoriesResponse, BulkAddItemsToCategoryApplicationErrors, BulkAddItemsToCategoryOptions, BulkAddItemsToCategoryResponse, BulkRemoveItemFromCategoriesApplicationErrors, BulkRemoveItemFromCategoriesOptions, BulkRemoveItemFromCategoriesResponse, BulkRemoveItemsFromCategoryApplicationErrors, BulkRemoveItemsFromCategoryOptions, BulkRemoveItemsFromCategoryResponse, BulkSetItemCategoriesApplicationErrors, BulkSetItemCategoriesOptions, BulkSetItemCategoriesResponse, BulkShowCategoriesOptions, BulkShowCategoriesResponse, BulkUpdateCategoriesApplicationErrors, BulkUpdateCategoriesOptions, BulkUpdateCategoriesResponse, CategoriesQueryBuilder, Category, CategoryCreatedEnvelope, CategoryDeletedEnvelope, CategoryItemAddedToCategoryEnvelope, CategoryItemRemovedFromCategoryEnvelope, CategoryItemsArrangedInCategoryEnvelope, CategoryMovedEnvelope, CategorySearch, CategoryUpdatedEnvelope, CountCategoriesOptions, CountCategoriesResponse, CreateCategoryApplicationErrors, CreateCategoryOptions, DeleteCategoryApplicationErrors, GetArrangedItemsResponse, GetCategoryOptions, ItemReference, ListCategoriesForItemOptions, ListCategoriesForItemResponse, ListCategoriesForItemsOptions, ListCategoriesForItemsResponse, ListItemsInCategoryOptions, ListItemsInCategoryResponse, ListTreesResponse, MaskedCategory, MoveCategoryApplicationErrors, MoveCategoryOptions, MoveCategoryResponse, QueryCategoriesOptions, SearchCategoriesOptions, SearchCategoriesResponse, SetArrangedItemsApplicationErrors, SetArrangedItemsOptions, SetArrangedItemsResponse, TreeReference, UpdateCategory, UpdateCategoryApplicationErrors, UpdateCategoryOptions, UpdateCategoryVisibilityApplicationErrors, UpdateCategoryVisibilityOptions, UpdateCategoryVisibilityResponse, bulkAddItemToCategories, bulkAddItemsToCategory, bulkRemoveItemFromCategories, bulkRemoveItemsFromCategory, bulkSetItemCategories, bulkShowCategories, bulkUpdateCategories, countCategories, createCategory, deleteCategory, getArrangedItems, getCategory, listCategoriesForItem, listCategoriesForItems, listItemsInCategory, listTrees, moveCategory, onCategoryCreated, onCategoryDeleted, onCategoryItemAddedToCategory, onCategoryItemRemovedFromCategory, onCategoryItemsArrangedInCategory, onCategoryMoved, onCategoryUpdated, queryCategories, searchCategories, setArrangedItems, updateCategory, updateCategoryVisibility };
