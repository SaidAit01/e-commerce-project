import { ListAvailableAlgorithmsRequest as ListAvailableAlgorithmsRequest$1, ListAvailableAlgorithmsResponse as ListAvailableAlgorithmsResponse$1, GetRecommendationRequest as GetRecommendationRequest$1, GetRecommendationResponse as GetRecommendationResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

interface Recommendation {
    /**
     * Recommended items.
     * @maxSize 100
     */
    items?: CatalogReference[];
    /** The algorithm used to provide the recommendation. */
    algorithm?: Algorithm;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface Algorithm {
    /**
     * Algorithm ID defined by the app providing the algorithm.
     * @format GUID
     */
    id?: string;
    /**
     * App ID of the Wix or 3rd-party app providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     * @minLength 1
     * @maxLength 36
     */
    appId?: string;
}
interface ListAvailableAlgorithmsRequest {
}
interface ListAvailableAlgorithmsResponse {
    /**
     * Algorithms available for use on your Wix site or project. See the method description for more information.
     * @maxSize 500
     */
    availableAlgorithms?: AlgorithmInfo[];
}
interface AlgorithmInfo {
    /** How the algorithm is configured. */
    config?: AlgorithmConfig;
    /**
     * The app ID of the application providing the algorithm.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     * @minLength 1
     * @maxLength 36
     */
    appId?: string;
    /**
     * App IDs of catalogs to which the algorithm can be applied.
     *
     * Wix app IDs are <a href="https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions" target="_blank">listed here</a>.
     * @minSize 1
     * @maxSize 100
     * @minLength 1
     * @maxLength 36
     */
    catalogAppIds?: string[];
}
interface AlgorithmConfig {
    /**
     * Algorithm name. This value is not translatable.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Algorithm description. This describes how the algorithm works and if it has any limitations regarding site content, number of items in the catalog, site traffic, and so on. This value is not translatable.
     * @minLength 1
     * @maxLength 500
     */
    description?: string;
    /**
     * A supplemental `description`. It can be used to help break up and organize information. You can, for example, display this information as a tooltip or as an additional section that is collapsed by default.
     * @minLength 1
     * @maxLength 300
     */
    additionalInfo?: string | null;
    /**
     * Algorithms may have the following types:
     * * `RELATED_ITEMS` - This type of algorithm provides recommendations based on 1 or more other provided items. For example, when an item is added to a cart, the algorithm can suggest other items frequently bought together with that item.
     * * `GLOBAL` - This type of algorithm provides general recommendations based on site or project statistics. For example, bestsellers or new arrivals.
     */
    algorithmType?: AlgorithmTypeWithLiterals;
    /**
     * Algorithm ID. This must be unique for a specific app but does not have to be unique across all apps on the site or in the project.
     * @format GUID
     */
    algorithmId?: string;
}
declare enum AlgorithmType {
    UNSPECIFIED = "UNSPECIFIED",
    RELATED_ITEMS = "RELATED_ITEMS",
    GLOBAL = "GLOBAL"
}
/** @enumType */
type AlgorithmTypeWithLiterals = AlgorithmType | 'UNSPECIFIED' | 'RELATED_ITEMS' | 'GLOBAL';
interface GetRecommendationRequest {
    /**
     * The set of items for which to get recommendations. Required if the `algorithmType` is `RELATED_ITEMS`.
     * @maxSize 300
     */
    items?: CatalogReference[];
    /**
     * A list of algorithms checked in a specific order determined by their `appID` and their position in the `algorithms` array.
     * See the method description for more information.
     *
     * If no algorithm is able to return at least `minimumRecommendedItems` items, an empty array is returned.
     * @minSize 1
     * @maxSize 10
     */
    algorithms: Algorithm[];
    /**
     * The minimum number of items that must be recommended by the algorithm for those items to be returned in the response.
     *
     * Max: `100`
     * @max 100
     */
    minimumRecommendedItems?: number;
}
interface GetRecommendationResponse {
    /** An object containing a list of items recommended by 1 of the specified algorithms. The recommendation is empty if none of the specified algorithms recommended enough items. */
    recommendation?: Recommendation;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listAvailableAlgorithms(): __PublicMethodMetaInfo<'GET', {}, ListAvailableAlgorithmsRequest$1, ListAvailableAlgorithmsRequest, ListAvailableAlgorithmsResponse$1, ListAvailableAlgorithmsResponse>;
declare function getRecommendation(): __PublicMethodMetaInfo<'POST', {}, GetRecommendationRequest$1, GetRecommendationRequest, GetRecommendationResponse$1, GetRecommendationResponse>;

export { type __PublicMethodMetaInfo, getRecommendation, listAvailableAlgorithms };
