import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { ListAvailableAlgorithmsResponse, Algorithm, GetRecommendationOptions, GetRecommendationResponse, GetRecommendationApplicationErrors } from './index.typings.mjs';
export { AlgorithmConfig, AlgorithmInfo, AlgorithmType, AlgorithmTypeWithLiterals, CatalogReference, GetRecommendationRequest, ItemAppIdNotSupportedByProvider, ListAvailableAlgorithmsRequest, Recommendation, RecommendationAlgorithmNotSupported } from './index.typings.mjs';

declare function listAvailableAlgorithms$1(httpClient: HttpClient): ListAvailableAlgorithmsSignature;
interface ListAvailableAlgorithmsSignature {
    /**
     * Returns a list of recommendation algorithms that can be used on your Wix site or project. These algorithms can be used with [`getRecommendation()`](#getRecommendation) to provide item recommendations to the customer.
     *
     * Algorithms are run by the apps that provide them, and can only be used on catalogs they support. Apps may provide algorithms for use with their own catalogs and/or catalogs from other apps.
     *
     * The app which provides an algorithm is referenced by that algorithm’s `appId`. The apps whose catalogs are supported by an algorithm are referenced by the IDs in that algorithm’s `catalogAppIds` array.
     *
     *
     * For an algorithm to be considered “Available” and returned in this method’s response, the algorithm must meet the following conditions:
     * 1. The algorithm’s `appId` must match the ID of an installed Wix app.
     * 2. At least 1 of the IDs in `catalogAppIds` must match the ID of an installed Wix app.
     *
     * Wix app IDs are [listed here](https://dev.wix.com/api/rest/getting-started/wix-business-solutions#getting-started_wix-business-solutions_about-wix-business-solutions).
     */
    (): Promise<NonNullablePaths<ListAvailableAlgorithmsResponse, `availableAlgorithms` | `availableAlgorithms.${number}.config.name` | `availableAlgorithms.${number}.config.description` | `availableAlgorithms.${number}.config.algorithmType` | `availableAlgorithms.${number}.config.algorithmId` | `availableAlgorithms.${number}.appId`, 5>>;
}
declare function getRecommendation$1(httpClient: HttpClient): GetRecommendationSignature;
interface GetRecommendationSignature {
    /**
     * Returns a recommendation object containing a list of items to recommend to the customer.
     *
     * `getRecommendation()` determines which items to recommend based on the given recommendation algorithms.
     *
     * `getRecommendation()` doesn’t run the algorithms. It calls the installed apps that provide them.
     *
     * Apps may provide algorithms for use with their own catalogs, or for use with catalogs from other apps.
     * For example, Wix Stores provides algorithms that can only be used on its own catalogs.
     * To run an algorithm, the app providing it must be installed, and an app providing a supported catalog must be installed.
     * For more information and to see which algorithms are available on your site or project, call [`listAvailableAlgorithms()`](#listavailablealgorithms).
     *
     * `getRecommendation()` operates as follows:
     * 1. `getRecommendation()` receives as input a list of algorithms as an array. These algorithms can be provided by different apps and can apply to different catalogs.
     * 2. `getRecommendation()` calls the app that corresponds to the `appId` of the first algorithm in the list of algorithms. It passes that algorithm’s ID and the IDs of any subsequent algorithms in the array for the same app.
     * 3. The app runs the algorithms.
     * 4. `getRecommendation()` returns items recommendations from the first algorithm (according to its position in the `algorithms` array) that meets the minimum number of recommendations. At that point `getRecommendation()` stops calling other apps.
     * 5. If none of the algorithms run by the first app meet the minimum recommended items, `getRecommendation()` finds the next algorithm in the array with a new `appId` (an ID of an app that has not yet been called), and repeats the process.
     * 6. If no algorithms in the `algorithms` array recommend at least the minimum recommended items, `getRecommendation()` returns an empty array.
     * @param - A list of algorithms checked in a specific order determined by their `appID` and their position in the `algorithms` array.
     * See the method description for more information.
     *
     * If no algorithm is able to return at least `minimumRecommendedItems` items, an empty array is returned.
     * @param - Get recommendation options.
     */
    (algorithms: NonNullablePaths<Algorithm, `_id` | `appId`, 2>[], options?: NonNullablePaths<GetRecommendationOptions, `items.${number}.appId` | `items.${number}.catalogItemId`, 4>): Promise<NonNullablePaths<GetRecommendationResponse, `recommendation.items` | `recommendation.items.${number}.catalogItemId` | `recommendation.items.${number}.appId` | `recommendation.algorithm._id` | `recommendation.algorithm.appId`, 5> & {
        __applicationErrorsType?: GetRecommendationApplicationErrors;
    }>;
}

declare const listAvailableAlgorithms: MaybeContext<BuildRESTFunction<typeof listAvailableAlgorithms$1> & typeof listAvailableAlgorithms$1>;
declare const getRecommendation: MaybeContext<BuildRESTFunction<typeof getRecommendation$1> & typeof getRecommendation$1>;

export { Algorithm, GetRecommendationApplicationErrors, GetRecommendationOptions, GetRecommendationResponse, ListAvailableAlgorithmsResponse, getRecommendation, listAvailableAlgorithms };
