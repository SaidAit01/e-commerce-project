// src/ecom-v1-cart-cart.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTAddressToSDKAddress as transformRESTAddressToSDKAddress2 } from "@wix/sdk-runtime/transformations/address";
import { transformRESTFloatToSDKFloat as transformRESTFloatToSDKFloat2 } from "@wix/sdk-runtime/transformations/float";
import { transformRESTImageToSDKImage as transformRESTImageToSDKImage2 } from "@wix/sdk-runtime/transformations/image";
import { transformRESTPageURLV2ToSDKPageURLV2 as transformRESTPageURLV2ToSDKPageURLV22 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/ecom-v1-cart-cart.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-cart-cart.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomCartApiV1CartServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/cart",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "www.wixgateway.com": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    _: [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      },
      {
        srcPath: "/_api/cart",
        destPath: ""
      },
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_cart";
function createCart(payload) {
  function __createCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cartInfo.createdDate" },
          { path: "cartInfo.updatedDate" },
          { path: "cartInfo.lineItems.image.urlExpirationDate" },
          {
            path: "cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "cartInfo.lineItems.serviceProperties.scheduledDate" },
          { path: "lineItems.image.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "cartInfo.lineItems.image.focalPoint.x" },
          { path: "cartInfo.lineItems.image.focalPoint.y" },
          { path: "lineItems.image.focalPoint.x" },
          { path: "lineItems.image.focalPoint.y" },
          { path: "cartInfo.lineItems.physicalProperties.weight" },
          {
            path: "cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cartInfo.contactInfo.address.geocode.latitude" },
          { path: "cartInfo.contactInfo.address.geocode.longitude" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.CreateCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCart;
}
function updateCart(payload) {
  function __updateCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "cartFieldmask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cartInfo.createdDate" },
          { path: "cartInfo.updatedDate" },
          { path: "cartInfo.lineItems.image.urlExpirationDate" },
          {
            path: "cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "cartInfo.lineItems.serviceProperties.scheduledDate" },
          { path: "lineItems.image.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "cartInfo.lineItems.image.focalPoint.x" },
          { path: "cartInfo.lineItems.image.focalPoint.y" },
          { path: "lineItems.image.focalPoint.x" },
          { path: "lineItems.image.focalPoint.y" },
          { path: "cartInfo.lineItems.physicalProperties.weight" },
          {
            path: "cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cartInfo.contactInfo.address.geocode.latitude" },
          { path: "cartInfo.contactInfo.address.geocode.longitude" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "PATCH",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.UpdateCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{cartInfo.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCart;
}
function getCart(payload) {
  function __getCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "GET",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.GetCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCart;
}
function getCartByCheckoutId(payload) {
  function __getCartByCheckoutId({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "GET",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.GetCartByCheckoutId",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/by-checkout-id/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCartByCheckoutId;
}
function addToCart(payload) {
  function __addToCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItems.image.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItems.image.focalPoint.x" },
          { path: "lineItems.image.focalPoint.y" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.AddToCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/add-to-cart",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addToCart;
}
function removeLineItems(payload) {
  function __removeLineItems({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.RemoveLineItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/remove-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeLineItems;
}
function createCheckout(payload) {
  function __createCheckout({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "shippingAddress.geocode.latitude" },
          { path: "shippingAddress.geocode.longitude" },
          { path: "billingAddress.geocode.latitude" },
          { path: "billingAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.CreateCheckout",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/create-checkout",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __createCheckout;
}
function removeCoupon(payload) {
  function __removeCoupon({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.RemoveCoupon",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/remove-coupon",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeCoupon;
}
function updateLineItemsQuantity(payload) {
  function __updateLineItemsQuantity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.UpdateLineItemsQuantity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/update-line-items-quantity",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLineItemsQuantity;
}
function estimateTotals(payload) {
  function __estimateTotals({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "shippingAddress.geocode.latitude" },
          { path: "shippingAddress.geocode.longitude" },
          { path: "billingAddress.geocode.latitude" },
          { path: "billingAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.EstimateTotals",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/estimate-totals",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            { path: "membershipOptions.eligibleMemberships.expirationDate" },
            {
              path: "membershipOptions.invalidMemberships.membership.expirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __estimateTotals;
}
function deleteCart(payload) {
  function __deleteCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "DELETE",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.DeleteCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteCart;
}
function removeBusinessLocation(payload) {
  function __removeBusinessLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CartService.RemoveBusinessLocation",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CartServiceUrl({
        protoPath: "/v1/carts/{id}/remove-business-location",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeBusinessLocation;
}

// src/ecom-v1-cart-cart.universal.ts
import { transformSDKAddressToRESTAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformSDKPageURLV2ToRESTPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformRESTPageURLV2ToSDKPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var ItemAvailabilityStatus = /* @__PURE__ */ ((ItemAvailabilityStatus2) => {
  ItemAvailabilityStatus2["AVAILABLE"] = "AVAILABLE";
  ItemAvailabilityStatus2["NOT_FOUND"] = "NOT_FOUND";
  ItemAvailabilityStatus2["NOT_AVAILABLE"] = "NOT_AVAILABLE";
  ItemAvailabilityStatus2["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
  return ItemAvailabilityStatus2;
})(ItemAvailabilityStatus || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var RateType = /* @__PURE__ */ ((RateType2) => {
  RateType2["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
  RateType2["MANUAL_RATE"] = "MANUAL_RATE";
  RateType2["AUTO_RATE"] = "AUTO_RATE";
  RateType2["FALLBACK_RATE"] = "FALLBACK_RATE";
  return RateType2;
})(RateType || {});
var ManualCalculationReason = /* @__PURE__ */ ((ManualCalculationReason2) => {
  ManualCalculationReason2["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
  ManualCalculationReason2["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
  return ManualCalculationReason2;
})(ManualCalculationReason || {});
var FallbackReason = /* @__PURE__ */ ((FallbackReason2) => {
  FallbackReason2["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
  FallbackReason2["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
  return FallbackReason2;
})(FallbackReason || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var ChargeType = /* @__PURE__ */ ((ChargeType2) => {
  ChargeType2["HANDLING_FEE"] = "HANDLING_FEE";
  ChargeType2["INSURANCE"] = "INSURANCE";
  return ChargeType2;
})(ChargeType || {});
var AppliedDiscountDiscountType = /* @__PURE__ */ ((AppliedDiscountDiscountType2) => {
  AppliedDiscountDiscountType2["GLOBAL"] = "GLOBAL";
  AppliedDiscountDiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  AppliedDiscountDiscountType2["SHIPPING"] = "SHIPPING";
  return AppliedDiscountDiscountType2;
})(AppliedDiscountDiscountType || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var AdditionalFeeSource = /* @__PURE__ */ ((AdditionalFeeSource2) => {
  AdditionalFeeSource2["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
  AdditionalFeeSource2["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
  AdditionalFeeSource2["ITEM"] = "ITEM";
  AdditionalFeeSource2["MANUAL"] = "MANUAL";
  AdditionalFeeSource2["SHIPPING"] = "SHIPPING";
  return AdditionalFeeSource2;
})(AdditionalFeeSource || {});
var Severity = /* @__PURE__ */ ((Severity2) => {
  Severity2["WARNING"] = "WARNING";
  Severity2["ERROR"] = "ERROR";
  return Severity2;
})(Severity || {});
var NameInOther = /* @__PURE__ */ ((NameInOther2) => {
  NameInOther2["OTHER_DEFAULT"] = "OTHER_DEFAULT";
  return NameInOther2;
})(NameInOther || {});
var NameInLineItem = /* @__PURE__ */ ((NameInLineItem2) => {
  NameInLineItem2["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
  return NameInLineItem2;
})(NameInLineItem || {});
var SuggestedFix = /* @__PURE__ */ ((SuggestedFix2) => {
  SuggestedFix2["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
  SuggestedFix2["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
  return SuggestedFix2;
})(SuggestedFix || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      cartInfo: options?.cartInfo,
      couponCode: options?.couponCode,
      merchantDiscounts: options?.merchantDiscounts,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems
    }),
    [
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "cartInfo.lineItems.url" },
          { path: "lineItems.url" },
          { path: "customLineItems.url" }
        ]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "cartInfo.lineItems.image" },
          { path: "cartInfo.lineItems.catalogOverrideFields.image" },
          { path: "lineItems.image" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "cartInfo.contactInfo.address" }]
      }
    ]
  );
  const reqOpts = createCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartInfo: "$[0].cartInfo",
          couponCode: "$[0].couponCode",
          merchantDiscounts: "$[0].merchantDiscounts",
          lineItems: "$[0].lineItems",
          customLineItems: "$[0].customLineItems"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCart2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      cartInfo: { ...options?.cartInfo, id: _id },
      couponCode: options?.couponCode,
      merchantDiscounts: options?.merchantDiscounts,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems
    }),
    [
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "cartInfo.lineItems.url" },
          { path: "lineItems.url" },
          { path: "customLineItems.url" }
        ]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "cartInfo.lineItems.image" },
          { path: "cartInfo.lineItems.catalogOverrideFields.image" },
          { path: "lineItems.image" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "cartInfo.contactInfo.address" }]
      }
    ]
  );
  const reqOpts = updateCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { cartInfo: "$[1].cartInfo" },
        explicitPathsToArguments: {
          "cartInfo.id": "$[0]",
          couponCode: "$[1].couponCode",
          merchantDiscounts: "$[1].merchantDiscounts",
          lineItems: "$[1].lineItems",
          customLineItems: "$[1].customLineItems"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCart2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCartByCheckoutId2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getCartByCheckoutId(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addToCart2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      id: _id,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems,
      businessLocationId: options?.businessLocationId
    }),
    [
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "lineItems.url" }, { path: "customLineItems.url" }]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "lineItems.image" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      }
    ]
  );
  const reqOpts = addToCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          lineItems: "$[1].lineItems",
          customLineItems: "$[1].customLineItems",
          businessLocationId: "$[1].businessLocationId"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeLineItems2(_id, lineItemIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    lineItemIds
  });
  const reqOpts = removeLineItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", lineItemIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "lineItemIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createCheckout2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      id: _id,
      channelType: options?.channelType,
      shippingAddress: options?.shippingAddress,
      billingAddress: options?.billingAddress,
      selectedShippingOption: options?.selectedShippingOption,
      email: options?.email
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "shippingAddress" }, { path: "billingAddress" }]
      }
    ]
  );
  const reqOpts = createCheckout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          channelType: "$[1].channelType",
          shippingAddress: "$[1].shippingAddress",
          billingAddress: "$[1].billingAddress",
          selectedShippingOption: "$[1].selectedShippingOption",
          email: "$[1].email"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeCoupon2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = removeCoupon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateLineItemsQuantity2(_id, lineItems) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    lineItems
  });
  const reqOpts = updateLineItemsQuantity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", lineItems: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "lineItems"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function estimateTotals2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      id: _id,
      selectedShippingOption: options?.selectedShippingOption,
      shippingAddress: options?.shippingAddress,
      billingAddress: options?.billingAddress,
      selectedMemberships: options?.selectedMemberships,
      calculateTax: options?.calculateTax,
      calculateShipping: options?.calculateShipping
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "shippingAddress" }, { path: "billingAddress" }]
      }
    ]
  );
  const reqOpts = estimateTotals(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.contactInfo.address" },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          selectedShippingOption: "$[1].selectedShippingOption",
          shippingAddress: "$[1].shippingAddress",
          billingAddress: "$[1].billingAddress",
          selectedMemberships: "$[1].selectedMemberships",
          calculateTax: "$[1].calculateTax",
          calculateShipping: "$[1].calculateShipping"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCart2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeBusinessLocation2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = removeBusinessLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-cart-cart.public.ts
function createCart3(httpClient) {
  return (options) => createCart2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateCart3(httpClient) {
  return (_id, options) => updateCart2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getCart3(httpClient) {
  return (_id) => getCart2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function getCartByCheckoutId3(httpClient) {
  return (_id) => getCartByCheckoutId2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function addToCart3(httpClient) {
  return (_id, options) => addToCart2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeLineItems3(httpClient) {
  return (_id, lineItemIds) => removeLineItems2(
    _id,
    lineItemIds,
    // @ts-ignore
    { httpClient }
  );
}
function createCheckout3(httpClient) {
  return (_id, options) => createCheckout2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeCoupon3(httpClient) {
  return (_id) => removeCoupon2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateLineItemsQuantity3(httpClient) {
  return (_id, lineItems) => updateLineItemsQuantity2(
    _id,
    lineItems,
    // @ts-ignore
    { httpClient }
  );
}
function estimateTotals3(httpClient) {
  return (_id, options) => estimateTotals2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteCart3(httpClient) {
  return (_id) => deleteCart2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeBusinessLocation3(httpClient) {
  return (_id) => removeBusinessLocation2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
var onCartDeleted = EventDefinition(
  "wix.ecom.v1.cart_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          {
            path: "undefined.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "undefined.lineItems.serviceProperties.scheduledDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTPageURLV2ToSDKPageURLV22,
        paths: [{ path: "undefined.lineItems.url" }]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [
          { path: "undefined.lineItems.image" },
          { path: "undefined.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "undefined.lineItems.physicalProperties.weight" },
          {
            path: "undefined.lineItems.catalogOverrideFields.physicalProperties.weight"
          }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [{ path: "undefined.contactInfo.address" }]
      }
    ])
  )
)();
var onCartUpdated = EventDefinition(
  "wix.ecom.v1.cart_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          {
            path: "entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.lineItems.serviceProperties.scheduledDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTPageURLV2ToSDKPageURLV22,
        paths: [{ path: "entity.lineItems.url" }]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [
          { path: "entity.lineItems.image" },
          { path: "entity.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "entity.lineItems.physicalProperties.weight" },
          {
            path: "entity.lineItems.catalogOverrideFields.physicalProperties.weight"
          }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [{ path: "entity.contactInfo.address" }]
      }
    ])
  )
)();
var onCartCreated = EventDefinition(
  "wix.ecom.v1.cart_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          {
            path: "entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.lineItems.serviceProperties.scheduledDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTPageURLV2ToSDKPageURLV22,
        paths: [{ path: "entity.lineItems.url" }]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [
          { path: "entity.lineItems.image" },
          { path: "entity.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "entity.lineItems.physicalProperties.weight" },
          {
            path: "entity.lineItems.catalogOverrideFields.physicalProperties.weight"
          }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [{ path: "entity.contactInfo.address" }]
      }
    ])
  )
)();

// src/ecom-v1-cart-cart.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createCart4 = /* @__PURE__ */ createRESTModule(createCart3);
var updateCart4 = /* @__PURE__ */ createRESTModule(updateCart3);
var getCart4 = /* @__PURE__ */ createRESTModule(getCart3);
var getCartByCheckoutId4 = /* @__PURE__ */ createRESTModule(getCartByCheckoutId3);
var addToCart4 = /* @__PURE__ */ createRESTModule(addToCart3);
var removeLineItems4 = /* @__PURE__ */ createRESTModule(removeLineItems3);
var createCheckout4 = /* @__PURE__ */ createRESTModule(createCheckout3);
var removeCoupon4 = /* @__PURE__ */ createRESTModule(removeCoupon3);
var updateLineItemsQuantity4 = /* @__PURE__ */ createRESTModule(updateLineItemsQuantity3);
var estimateTotals4 = /* @__PURE__ */ createRESTModule(estimateTotals3);
var deleteCart4 = /* @__PURE__ */ createRESTModule(deleteCart3);
var removeBusinessLocation4 = /* @__PURE__ */ createRESTModule(removeBusinessLocation3);
var onCartDeleted2 = createEventModule(onCartDeleted);
var onCartUpdated2 = createEventModule(onCartUpdated);
var onCartCreated2 = createEventModule(onCartCreated);
export {
  AdditionalFeeSource,
  AppliedDiscountDiscountType,
  ChannelType,
  ChargeType,
  DescriptionLineType,
  DiscountType,
  FallbackReason,
  FileType,
  ItemAvailabilityStatus,
  ItemTypeItemType,
  JurisdictionType,
  ManualCalculationReason,
  NameInLineItem,
  NameInOther,
  PaymentOptionType,
  PickupMethod,
  RateType,
  RuleType,
  Severity,
  SubscriptionFrequency,
  SuggestedFix,
  TaxableAddressType,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addToCart4 as addToCart,
  createCart4 as createCart,
  createCheckout4 as createCheckout,
  deleteCart4 as deleteCart,
  estimateTotals4 as estimateTotals,
  getCart4 as getCart,
  getCartByCheckoutId4 as getCartByCheckoutId,
  onCartCreated2 as onCartCreated,
  onCartDeleted2 as onCartDeleted,
  onCartUpdated2 as onCartUpdated,
  removeBusinessLocation4 as removeBusinessLocation,
  removeCoupon4 as removeCoupon,
  removeLineItems4 as removeLineItems,
  updateCart4 as updateCart,
  updateLineItemsQuantity4 as updateLineItemsQuantity
};
//# sourceMappingURL=index.mjs.map