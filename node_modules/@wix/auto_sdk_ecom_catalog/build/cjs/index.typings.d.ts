import { a3 as GetCatalogItemsEnvelope, c as GetCatalogItemsResponse } from './interfaces-ecommerce-v1-catalog-provider.public-QV0KK8iu.js';
export { J as AdditionalFee, Z as AllItemsDiscountConfig, U as BasicItem, B as BuyerInfo, b as BuyerInfoIdOneOf, a as CatalogReference, C as CatalogReferenceAndQuantity, Y as CatalogSPIConfig, l as Color, $ as Context, t as Description, D as DescriptionLine, i as DescriptionLineDescriptionLineValueOneOf, j as DescriptionLineName, m as DescriptionLineType, h as DescriptionLineValueOneOf, v as FileType, F as FreeTrialPeriod, G as GetCatalogItemsRequest, o as Group, a1 as IdentificationData, a2 as IdentificationDataIdOneOf, a0 as IdentityType, I as Item, d as ItemData, N as ItemModifier, e as ItemType, g as ItemTypeItemType, f as ItemTypeItemTypeDataOneOf, M as ModifierGroup, V as NumericPropertyRange, O as Paging, X as PagingMetadata, w as PaymentOptionType, n as PhysicalProperties, k as PlainTextValue, H as Policy, y as PriceDescription, P as ProductName, Q as QueryCatalogItemsRequest, R as QueryCatalogItemsResponse, S as Scope, u as SecuredMedia, x as ServiceProperties, _ as SpecificItemsDiscountConfig, s as SubscriptionFrequency, q as SubscriptionOptionInfo, r as SubscriptionSettings, K as TaxDetails, z as TaxableAddress, A as TaxableAddressTaxableAddressDataOneOf, E as TaxableAddressType, T as Title, L as TranslatableString, W as WeightUnit } from './interfaces-ecommerce-v1-catalog-provider.public-QV0KK8iu.js';
import '@wix/sdk-types';

/**
 * Retrieves data for specified items in a specified catalog.
 *
 * Wix calls this method whenever a cart or checkout is updated, and when an item is added to an order.
 *
 * The method receives a `catalogReferences` array. Each catalog reference in the array contains:
 * + The ID of the item whose latest information Wix needs to retrieve.
 * + The ID of the app providing the catalog containing the item.
 * + Optional details about preferences or customization of the item.
 *
 * The method also receives preferences for the currency and weight unit to be used in the response.
 *
 * Your external catalog can store and organize item details in any way you prefer.
 * When implementing the Catalog service plugin, learn how to handle item variants ([REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/catalog-service-plugin/handle-item-variants) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/service-plugins/catalog/handle-item-variants)) in a way that meets your needs.
 *
 * The method's response must contain a `catalogItems` array. Each item in the array must contain:
 * + A `catalogReference` object. This must be identical to the `catalogReference` object received in the request.
 * + A `data` object with full details about the item.
 *
 * > **Notes:**
 * > + If an item doesn't exist in the catalog, the response must exclude it from the `catalogItems` array in the response.
 * > + When none of the items requested exist in the catalog, `catalogItems` must contain an empty array.
 * > + Wix calls the method every time a cart or checkout is updated. If the response doesn't include an item that was already in the cart or checkout, Wix removes the item from the cart or checkout.
 */
declare function getCatalogItems(payload: GetCatalogItemsEnvelope): GetCatalogItemsResponse | Promise<GetCatalogItemsResponse>;

export { GetCatalogItemsEnvelope, GetCatalogItemsResponse, getCatalogItems };
