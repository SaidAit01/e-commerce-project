"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  AdditionalFeeSource: () => AdditionalFeeSource,
  ChargeType: () => ChargeType,
  DataFetchType: () => DataFetchType,
  DiscountType: () => DiscountType,
  FallbackReason: () => FallbackReason,
  ItemTypeItemType: () => ItemTypeItemType,
  JurisdictionType: () => JurisdictionType,
  ManualCalculationReason: () => ManualCalculationReason,
  PaymentOptionType: () => PaymentOptionType,
  PickupMethod: () => PickupMethod,
  RateType: () => RateType,
  RuleType: () => RuleType,
  SubscriptionFrequency: () => SubscriptionFrequency,
  TaxableAddressType: () => TaxableAddressType,
  WeightUnit: () => WeightUnit,
  calculateTotals: () => calculateTotals4
});
module.exports = __toCommonJS(index_exports);

// src/ecom-v1-totals-calculation-totals-calculator.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-totals-calculation-totals-calculator.http.ts
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomTotalsCalculatorV1TotalsCalculatorUrl(opts) {
  const domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/totals-calculator",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/totals-calculator",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/totals-calculator",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/calculate-totals",
        destPath: "/v1/calculate-totals"
      }
    ],
    _: [
      {
        srcPath: "/_api/totals-calculator",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/totals-calculator",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_totals-calculator";
function calculateTotals(payload) {
  function __calculateTotals({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItems.physicalProperties.weight" },
          { path: "shippingAddress.geocode.latitude" },
          { path: "shippingAddress.geocode.longitude" },
          { path: "billingAddress.geocode.latitude" },
          { path: "billingAddress.geocode.longitude" },
          {
            path: "shippingOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
          },
          {
            path: "shippingOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
          },
          { path: "appliedDiscounts.merchantDiscount.percentage" }
        ]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "shippingOptions.shippingOptions.logistics.deliveryTimeSlot.from"
          },
          {
            path: "shippingOptions.shippingOptions.logistics.deliveryTimeSlot.to"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.totals_calculation",
      method: "POST",
      methodFqn: "com.wix.ecom.totals_calculator.v1.TotalsCalculator.CalculateTotals",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomTotalsCalculatorV1TotalsCalculatorUrl({
        protoPath: "/v1/calculate-totals",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "appliedDiscounts.merchantDiscount.percentage" }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            { path: "membershipOptions.eligibleMemberships.expirationDate" },
            {
              path: "membershipOptions.invalidMemberships.membership.expirationDate"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __calculateTotals;
}

// src/ecom-v1-totals-calculation-totals-calculator.universal.ts
var import_address = require("@wix/sdk-runtime/transformations/address");
var import_address2 = require("@wix/sdk-runtime/transformations/address");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var ChargeType = /* @__PURE__ */ ((ChargeType2) => {
  ChargeType2["HANDLING_FEE"] = "HANDLING_FEE";
  ChargeType2["INSURANCE"] = "INSURANCE";
  return ChargeType2;
})(ChargeType || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var DataFetchType = /* @__PURE__ */ ((DataFetchType2) => {
  DataFetchType2["SHIPPING"] = "SHIPPING";
  DataFetchType2["DISCOUNT"] = "DISCOUNT";
  DataFetchType2["ADDITIONAL_FEES"] = "ADDITIONAL_FEES";
  DataFetchType2["ORDER_VALIDATION"] = "ORDER_VALIDATION";
  return DataFetchType2;
})(DataFetchType || {});
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var RateType = /* @__PURE__ */ ((RateType2) => {
  RateType2["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
  RateType2["MANUAL_RATE"] = "MANUAL_RATE";
  RateType2["AUTO_RATE"] = "AUTO_RATE";
  RateType2["FALLBACK_RATE"] = "FALLBACK_RATE";
  return RateType2;
})(RateType || {});
var ManualCalculationReason = /* @__PURE__ */ ((ManualCalculationReason2) => {
  ManualCalculationReason2["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
  ManualCalculationReason2["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
  return ManualCalculationReason2;
})(ManualCalculationReason || {});
var FallbackReason = /* @__PURE__ */ ((FallbackReason2) => {
  FallbackReason2["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
  FallbackReason2["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
  return FallbackReason2;
})(FallbackReason || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var AdditionalFeeSource = /* @__PURE__ */ ((AdditionalFeeSource2) => {
  AdditionalFeeSource2["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
  AdditionalFeeSource2["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
  AdditionalFeeSource2["ITEM"] = "ITEM";
  AdditionalFeeSource2["MANUAL"] = "MANUAL";
  AdditionalFeeSource2["SHIPPING"] = "SHIPPING";
  return AdditionalFeeSource2;
})(AdditionalFeeSource || {});
async function calculateTotals2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      calculationId: options?.calculationId,
      lineItems: options?.lineItems,
      shippingAddress: options?.shippingAddress,
      billingAddress: options?.billingAddress,
      selectedShippingOption: options?.selectedShippingOption,
      couponId: options?.couponId,
      couponCode: options?.couponCode,
      giftCardId: options?.giftCardId,
      giftCardCode: options?.giftCardCode,
      buyerEmail: options?.buyerEmail,
      memberId: options?.memberId,
      selectedMemberships: options?.selectedMemberships,
      buyerPhone: options?.buyerPhone,
      purchaseFlowId: options?.purchaseFlowId,
      externalReferences: options?.externalReferences,
      businessLocationId: options?.businessLocationId,
      giftCardRedeemAmount: options?.giftCardRedeemAmount
    }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [
          { path: "shippingAddress" },
          { path: "billingAddress" },
          {
            path: "shippingOptions.shippingOptions.logistics.pickupDetails.address"
          }
        ]
      }
    ]
  );
  const reqOpts = calculateTotals(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          calculationId: "$[0].calculationId",
          lineItems: "$[0].lineItems",
          shippingAddress: "$[0].shippingAddress",
          billingAddress: "$[0].billingAddress",
          selectedShippingOption: "$[0].selectedShippingOption",
          couponId: "$[0].couponId",
          couponCode: "$[0].couponCode",
          giftCardId: "$[0].giftCardId",
          giftCardCode: "$[0].giftCardCode",
          buyerEmail: "$[0].buyerEmail",
          memberId: "$[0].memberId",
          selectedMemberships: "$[0].selectedMemberships",
          buyerPhone: "$[0].buyerPhone",
          purchaseFlowId: "$[0].purchaseFlowId",
          externalReferences: "$[0].externalReferences",
          businessLocationId: "$[0].businessLocationId",
          giftCardRedeemAmount: "$[0].giftCardRedeemAmount"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-totals-calculation-totals-calculator.public.ts
function calculateTotals3(httpClient) {
  return (options) => calculateTotals2(
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/ecom-v1-totals-calculation-totals-calculator.context.ts
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
var calculateTotals4 = /* @__PURE__ */ (0, import_rest_modules2.createRESTModule)(calculateTotals3);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AdditionalFeeSource,
  ChargeType,
  DataFetchType,
  DiscountType,
  FallbackReason,
  ItemTypeItemType,
  JurisdictionType,
  ManualCalculationReason,
  PaymentOptionType,
  PickupMethod,
  RateType,
  RuleType,
  SubscriptionFrequency,
  TaxableAddressType,
  WeightUnit,
  calculateTotals
});
//# sourceMappingURL=index.js.map