{"version":3,"sources":["../../index.typings.ts","../../src/ecom-v1-order-billing-order-billing.universal.ts","../../src/ecom-v1-order-billing-order-billing.http.ts"],"sourcesContent":["export * from './src/ecom-v1-order-billing-order-billing.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixEcomV1OrderBilling from './ecom-v1-order-billing-order-billing.http.js';\n\nexport interface OrderBilling {\n  /**\n   * Entity ID.\n   * @format GUID\n   */\n  _id?: string | null;\n}\n\nexport interface GetOrderRefundabilityRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n}\n\nexport interface GetOrderRefundabilityResponse {\n  /**\n   * Payments and their refundability amounts and statuses.\n   * @maxSize 100\n   */\n  payments?: PaymentRefundability[];\n  /** Aggregated payments summary. */\n  paymentsSummary?: PaymentsSummary;\n  /**\n   * List of line item refund quantities.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefundability[];\n  /** Shipping refund amounts - both previously refunded and the amount still available for refund. */\n  shipping?: ShippingRefundability;\n  /**\n   * List of additional fee refund amounts - both previously refunded and the amount still available for refund.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFeeRefundability[];\n}\n\nexport interface PaymentRefundability extends PaymentRefundabilityStatusOneOf {\n  /** Whether the payment is available for both automatic and manual refunds. */\n  refundable?: boolean;\n  /** Reason why the payment is only manually refundable. */\n  manuallyRefundable?: ManuallyRefundablePaymentStatus;\n  /** Reason why the payment is not refundable. */\n  nonRefundable?: NonRefundablePaymentStatus;\n  /** Payment details. */\n  payment?: PaymentInfo;\n  /**\n   * URL to the payment provider's dashboard.\n   * @format WEB_URL\n   */\n  providerLink?: string | null;\n}\n\n/** @oneof */\nexport interface PaymentRefundabilityStatusOneOf {\n  /** Whether the payment is available for both automatic and manual refunds. */\n  refundable?: boolean;\n  /** Reason why the payment is only manually refundable. */\n  manuallyRefundable?: ManuallyRefundablePaymentStatus;\n  /** Reason why the payment is not refundable. */\n  nonRefundable?: NonRefundablePaymentStatus;\n}\n\nexport interface PaymentInfo\n  extends PaymentInfoSummaryOneOf,\n    PaymentInfoPaymentMethodDetailsOneOf {\n  /** Monetary payment summary. */\n  monetary?: MonetaryPaymentSummary;\n  /** Membership payment summary. */\n  membership?: MembershipPaymentSummary;\n  /** Details of the credit card used for this payment. */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /**\n   * Payment method. Non-exhaustive list of supported values:\n   *\n   * `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`\n   * @maxLength 50\n   */\n  paymentMethod?: string | null;\n  /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */\n  offlinePayment?: boolean;\n}\n\n/** @oneof */\nexport interface PaymentInfoSummaryOneOf {\n  /** Monetary payment summary. */\n  monetary?: MonetaryPaymentSummary;\n  /** Membership payment summary. */\n  membership?: MembershipPaymentSummary;\n}\n\n/** @oneof */\nexport interface PaymentInfoPaymentMethodDetailsOneOf {\n  /** Details of the credit card used for this payment. */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n}\n\nexport interface MonetaryPaymentSummary {\n  /** Paid amount. */\n  paid?: Price;\n  /** Refunded amount. */\n  refunded?: Price;\n  /** Pending refund amount. */\n  refundPending?: Price;\n  /**\n   * Maximum amount to refund,  **if** the refund is available.\n   * max_refund = paid - refunded - refund_pending\n   * `maxRefund` is calculated as `paid` minus `refunded` minus `refundPending`.\n   */\n  maxRefund?: Price;\n}\n\nexport interface Price {\n  /**\n   * Amount.\n   * @decimalValue options { gte:0, lte:1000000000000000 }\n   */\n  amount?: string;\n  /**\n   * Amount formatted with currency symbol.\n   * @readonly\n   */\n  formattedAmount?: string;\n}\n\nexport interface MembershipPaymentSummary {\n  /**\n   * IDs of line items paid with a membership.\n   * @format GUID\n   * @maxSize 100\n   */\n  paidLineItemIds?: string[];\n  /**\n   * IDs of line items previously refunded, and paid with a membership.\n   * @format GUID\n   * @maxSize 100\n   */\n  refundedLineItemIds?: string[];\n  /**\n   * IDs of line items paid with a membership and available for refund.\n   * @format GUID\n   * @maxSize 100\n   */\n  refundableLineItemIds?: string[];\n}\n\nexport interface CreditCardPaymentMethodDetails {\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface ManuallyRefundablePaymentStatus {\n  /** Reason why the payment must be manually refunded via the payment provider's dashboard. */\n  reason?: ManuallyRefundableReasonWithLiterals;\n}\n\nexport enum ManuallyRefundableReason {\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  EXPIRED = 'EXPIRED',\n  NOT_SUPPORTED = 'NOT_SUPPORTED',\n  OFFLINE = 'OFFLINE',\n  REQUIRES_CARD_READER = 'REQUIRES_CARD_READER',\n}\n\n/** @enumType */\nexport type ManuallyRefundableReasonWithLiterals =\n  | ManuallyRefundableReason\n  | 'UNKNOWN_REASON'\n  | 'EXPIRED'\n  | 'NOT_SUPPORTED'\n  | 'OFFLINE'\n  | 'REQUIRES_CARD_READER';\n\nexport interface NonRefundablePaymentStatus {\n  /** Reason why the payment is not refundable. */\n  reason?: NonRefundableReasonWithLiterals;\n}\n\nexport enum NonRefundableReason {\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  ALREADY_REFUNDED = 'ALREADY_REFUNDED',\n  PROVIDER_IS_DOWN = 'PROVIDER_IS_DOWN',\n  NOT_PAID = 'NOT_PAID',\n  ZERO_PRICE = 'ZERO_PRICE',\n  DISABLED_BY_PROVIDER = 'DISABLED_BY_PROVIDER',\n  PENDING_REFUND = 'PENDING_REFUND',\n  FORBIDDEN = 'FORBIDDEN',\n  TRANSACTION_NOT_FOUND = 'TRANSACTION_NOT_FOUND',\n  ORDER_IS_PENDING = 'ORDER_IS_PENDING',\n  ORDER_IS_REJECTED = 'ORDER_IS_REJECTED',\n  AMOUNT_OFFSET_BY_CHARGEBACK = 'AMOUNT_OFFSET_BY_CHARGEBACK',\n}\n\n/** @enumType */\nexport type NonRefundableReasonWithLiterals =\n  | NonRefundableReason\n  | 'UNKNOWN_REASON'\n  | 'ALREADY_REFUNDED'\n  | 'PROVIDER_IS_DOWN'\n  | 'NOT_PAID'\n  | 'ZERO_PRICE'\n  | 'DISABLED_BY_PROVIDER'\n  | 'PENDING_REFUND'\n  | 'FORBIDDEN'\n  | 'TRANSACTION_NOT_FOUND'\n  | 'ORDER_IS_PENDING'\n  | 'ORDER_IS_REJECTED'\n  | 'AMOUNT_OFFSET_BY_CHARGEBACK';\n\nexport interface PaymentsSummary {\n  /** Monetary payments summary. */\n  monetary?: MonetaryPaymentSummary;\n  /** Membership payments summary. */\n  membership?: MembershipPaymentSummary;\n}\n\nexport interface LineItemRefundability {\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /** Original line item quantity before any refunds. */\n  originalQuantity?: number;\n  /** Previously refunded line item quantity. */\n  refundedQuantity?: number;\n  /** Line item quantity that is available for refund. */\n  availableRefundQuantity?: number;\n}\n\nexport interface ShippingRefundability {\n  /** Original shipping fee amount. */\n  amount?: Price;\n  /** Previously refunded shipping fee amount. */\n  refundedAmount?: Price;\n  /** Shipping fee amount available for refund. */\n  availableRefundAmount?: Price;\n}\n\nexport interface AdditionalFeeRefundability {\n  /**\n   * Additional fee ID.\n   * @format GUID\n   */\n  additionalFeeId?: string;\n  /** Original additional fee amount. */\n  amount?: Price;\n  /** Previously refunded additional fee amount. */\n  refundedAmount?: Price;\n  /** Additional fee amount available for refund. */\n  availableRefundAmount?: Price;\n}\n\nexport interface CalculateRefundRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /** List of line items, shipping and additional fees to be calculated for refund. */\n  refundItems?: RefundItems;\n}\n\nexport interface RefundItems {\n  /**\n   * Line items and their quantities to refund.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefund[];\n  /**\n   * Additional fees and their amounts to refund.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFeeRefund[];\n  /** Shipping amount to refund. */\n  shipping?: ShippingRefund;\n}\n\nexport interface LineItemRefund {\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Quantity to refund.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface AdditionalFeeRefund {\n  /**\n   * Additional fee ID.\n   * @format GUID\n   */\n  additionalFeeId?: string;\n  /**\n   * Amount to refund.\n   *\n   * Passing an empty value will refund the remaining refundable amount.\n   */\n  amount?: Price;\n}\n\nexport interface ShippingRefund {\n  /**\n   * Amount to refund.\n   *\n   * Passing an empty value will refund the remaining refundable amount.\n   */\n  amount?: Price;\n}\n\nexport interface CalculateRefundResponse\n  extends CalculateRefundResponseStatusOneOf {\n  /** Whether refund is available for the given list of items. */\n  available?: boolean;\n  /** If the calculated refund is not available, this field contains error details and amounts for each item. */\n  notAvailable?: CalculatedRefundNotAvailableStatus;\n  /**\n   * Aggregated summary of all items provided for refund.\n   *\n   * This field is not returned when refund is not available for the given list of items.\n   */\n  summary?: AggregatedRefundSummary;\n  /** Calculated summary of each item provided for refund. */\n  calculatedRefundItems?: CalculatedRefundItems;\n}\n\n/** @oneof */\nexport interface CalculateRefundResponseStatusOneOf {\n  /** Whether refund is available for the given list of items. */\n  available?: boolean;\n  /** If the calculated refund is not available, this field contains error details and amounts for each item. */\n  notAvailable?: CalculatedRefundNotAvailableStatus;\n}\n\nexport interface AggregatedRefundSummary {\n  /** Total refund amount. */\n  total?: Price;\n  /** Tax amount for the items being refunded. */\n  tax?: Price;\n  /** Discount amount for the items being refunded. */\n  discount?: Price;\n  /** Total cost of the items being refunded (without tax and discount). */\n  subtotal?: Price;\n  /** Total cost of the line items being refunded (without tax and discount). */\n  lineItemsSubtotal?: Price;\n  /** Total cost of the additional fees being refunded. */\n  additionalFeesTotal?: Price;\n}\n\nexport interface CalculatedRefundItems {\n  /**\n   * Calculated refund details for each line item.\n   * @maxSize 300\n   */\n  lineItems?: CalculatedLineItemRefund[];\n  /**\n   * Calculated refund details for each additional fee.\n   * @maxSize 100\n   */\n  additionalFees?: CalculatedAdditionalFeeRefund[];\n  /** Calculated refund details for the shipping fee. */\n  shipping?: CalculatedShippingRefund;\n}\n\nexport interface CalculatedLineItemRefund {\n  /** Line item refund details. */\n  item?: LineItemRefund;\n  /** Calculated refund summary for this line item. */\n  summary?: CalculatedRefundSummary;\n}\n\nexport interface CalculatedRefundSummary {\n  /** Total refundable amount. */\n  total?: Price;\n  /** Tax amount for the items being refunded. */\n  tax?: Price;\n  /** Discount amount for the items being refunded. */\n  discount?: Price;\n  /** Total cost of the items being refunded (without tax and discount). */\n  subtotal?: Price;\n}\n\nexport interface CalculatedAdditionalFeeRefund {\n  /** Additional fee refund details. */\n  additionalFee?: AdditionalFeeRefund;\n  /** Calculated refund summary for this additional fee. */\n  summary?: CalculatedRefundSummary;\n}\n\nexport interface CalculatedShippingRefund {\n  /** Shipping refund details. */\n  shipping?: ShippingRefund;\n  /** Calculated refund summary for shipping. */\n  summary?: CalculatedRefundSummary;\n}\n\nexport interface CalculatedRefundNotAvailableStatus {\n  /**\n   * Refund calculation errors.\n   * @maxSize 401\n   */\n  errors?: CalculationError[];\n}\n\nexport interface CalculationError extends CalculationErrorItemOneOf {\n  /** Line item */\n  lineItem?: LineItemRefund;\n  /** Additional fee */\n  additionalFee?: AdditionalFeeRefund;\n  /** Shipping */\n  shipping?: ShippingRefund;\n  /** Error details */\n  error?: Details;\n}\n\n/** @oneof */\nexport interface CalculationErrorItemOneOf {\n  /** Line item */\n  lineItem?: LineItemRefund;\n  /** Additional fee */\n  additionalFee?: AdditionalFeeRefund;\n  /** Shipping */\n  shipping?: ShippingRefund;\n}\n\nexport interface Details extends DetailsKindOneOf {\n  applicationError?: ApplicationError;\n  validationError?: ValidationError;\n  systemError?: SystemError;\n  /**\n   * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response\n   * @deprecated\n   */\n  tracing?: Record<string, string>;\n}\n\n/** @oneof */\nexport interface DetailsKindOneOf {\n  applicationError?: ApplicationError;\n  validationError?: ValidationError;\n  systemError?: SystemError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\n/**\n * example result:\n * {\n * \"fieldViolations\": [\n * {\n * \"field\": \"fieldA\",\n * \"description\": \"invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]\",\n * \"violatedRule\": \"OTHER\",\n * \"ruleName\": \"INVALID_NOTE\",\n * \"data\": {\n * \"value\": \"FI\"\n * }\n * },\n * {\n * \"field\": \"fieldB\",\n * \"description\": \"field value out of range. supported range: [0-20]\",\n * \"violatedRule\": \"MAX\",\n * \"data\": {\n * \"threshold\": 20\n * }\n * },\n * {\n * \"field\": \"fieldC\",\n * \"description\": \"invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]\",\n * \"violatedRule\": \"FORMAT\",\n * \"data\": {\n * \"type\": \"PHONE\"\n * }\n * }\n * ]\n * }\n */\nexport interface ValidationError {\n  fieldViolations?: FieldViolation[];\n}\n\nexport enum RuleType {\n  VALIDATION = 'VALIDATION',\n  OTHER = 'OTHER',\n  MAX = 'MAX',\n  MIN = 'MIN',\n  MAX_LENGTH = 'MAX_LENGTH',\n  MIN_LENGTH = 'MIN_LENGTH',\n  MAX_SIZE = 'MAX_SIZE',\n  MIN_SIZE = 'MIN_SIZE',\n  FORMAT = 'FORMAT',\n  DECIMAL_LTE = 'DECIMAL_LTE',\n  DECIMAL_GTE = 'DECIMAL_GTE',\n  DECIMAL_LT = 'DECIMAL_LT',\n  DECIMAL_GT = 'DECIMAL_GT',\n  DECIMAL_MAX_SCALE = 'DECIMAL_MAX_SCALE',\n  INVALID_ENUM_VALUE = 'INVALID_ENUM_VALUE',\n  REQUIRED_FIELD = 'REQUIRED_FIELD',\n  FIELD_NOT_ALLOWED = 'FIELD_NOT_ALLOWED',\n  ONE_OF_ALIGNMENT = 'ONE_OF_ALIGNMENT',\n  EXACT_LENGTH = 'EXACT_LENGTH',\n  EXACT_SIZE = 'EXACT_SIZE',\n  REQUIRED_ONE_OF_FIELD = 'REQUIRED_ONE_OF_FIELD',\n}\n\n/** @enumType */\nexport type RuleTypeWithLiterals =\n  | RuleType\n  | 'VALIDATION'\n  | 'OTHER'\n  | 'MAX'\n  | 'MIN'\n  | 'MAX_LENGTH'\n  | 'MIN_LENGTH'\n  | 'MAX_SIZE'\n  | 'MIN_SIZE'\n  | 'FORMAT'\n  | 'DECIMAL_LTE'\n  | 'DECIMAL_GTE'\n  | 'DECIMAL_LT'\n  | 'DECIMAL_GT'\n  | 'DECIMAL_MAX_SCALE'\n  | 'INVALID_ENUM_VALUE'\n  | 'REQUIRED_FIELD'\n  | 'FIELD_NOT_ALLOWED'\n  | 'ONE_OF_ALIGNMENT'\n  | 'EXACT_LENGTH'\n  | 'EXACT_SIZE'\n  | 'REQUIRED_ONE_OF_FIELD';\n\nexport interface FieldViolation {\n  field?: string;\n  description?: string;\n  violatedRule?: RuleTypeWithLiterals;\n  /** applicable when violated_rule=OTHER */\n  ruleName?: string | null;\n  data?: Record<string, any> | null;\n}\n\nexport interface SystemError {\n  /** Error code. */\n  errorCode?: string | null;\n}\n\nexport interface RefundPaymentsRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * List of payments and their amounts to refund.\n   * @minSize 1\n   * @maxSize 50\n   */\n  paymentRefunds: PaymentRefund[];\n  /** Side effect actions for restocking and notifications. */\n  sideEffects?: RefundSideEffects;\n  /** List of line items, shipping and additional fees to refund. */\n  refundItems?: RefundItems;\n  /**\n   * Customer-provided reason for the refund.\n   * @maxLength 200\n   */\n  customerReason?: string | null;\n}\n\nexport interface PaymentRefund {\n  /**\n   * Specific payment within the order to refund\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Refund amount. Not relevant for membership and gift card refunds. */\n  amount?: Price;\n  /**\n   * Indicates that refund is made externally and manually (on the payment provider's side)\n   * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.\n   * When true, the payment will only be *marked* as refunded, refund will be added with status SUCCEEDED and no actual refund will be performed.\n   */\n  externalRefund?: boolean;\n  /**\n   * If set, indicates that refund is made externally and manually (on the payment provider's side) and payment gateway will NOT be called to make an actual refund.\n   * When not set (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.\n   * @internal\n   */\n  externalRefundInfo?: ExternalRefundInfo;\n}\n\nexport interface ExternalRefundInfo {\n  /**\n   * Affects the refund status of the refund and payment.\n   * If set to `SUCCEEDED`, the payment will be marked as refunded immediately.\n   * If set to `PENDING`, the payment will not be marked as refunded until the payment provider notifies us about the success/failure of the refund\n   * OR until the caller updates the refund status to SUCCEEDED/FAILED. Meanwhile additional refunds for this payment are blocked.\n   */\n  refundStatus?: ExternalRefundStatusWithLiterals;\n}\n\nexport enum ExternalRefundStatus {\n  /** An external refund transaction succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** An external refund was or going to be initiated on payment provider side. */\n  PENDING = 'PENDING',\n}\n\n/** @enumType */\nexport type ExternalRefundStatusWithLiterals =\n  | ExternalRefundStatus\n  | 'SUCCEEDED'\n  | 'PENDING';\n\nexport interface RefundSideEffects {\n  /** Restocking side effects. */\n  restock?: RestockSideEffects;\n  /** Notification side effects. */\n  notifications?: NotificationSideEffects;\n}\n\nexport interface RestockItem {\n  /**\n   * Line item ID.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Quantity to restock.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface RestockSideEffects {\n  /**\n   * List of items to restock.\n   * @maxSize 300\n   */\n  lineItems?: RestockItem[];\n}\n\nexport interface NotificationSideEffects {\n  /**\n   * Whether to send a refund confirmation email to the customer.\n   *\n   * Default: `false`\n   */\n  sendCustomerEmail?: boolean;\n  /**\n   * Custom message added to the refund confirmation email.\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n}\n\nexport interface RefundPaymentsResponse {\n  /** Refund details. */\n  refund?: Refund;\n  /** The order's transactions records after the refunds were performed. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface Refund {\n  /**\n   * Refund ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string;\n  /**\n   * List of transactions.\n   * @maxSize 50\n   */\n  transactions?: RefundTransaction[];\n  /** Refund business details. */\n  details?: RefundDetails;\n  /**\n   * Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Aggregated refund summary.\n   * @readonly\n   */\n  summary?: V1AggregatedRefundSummary;\n  /**\n   * ID of the app that initiated this refund.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  requestingServiceAppId?: string | null;\n}\n\nexport interface RefundTransaction {\n  /**\n   * ID of the payment associated with this refund.\n   * @format GUID\n   * @immutable\n   */\n  paymentId?: string;\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n  /** Refund status. */\n  refundStatus?: RefundStatusWithLiterals;\n  /** Optional details of current refund status. */\n  refundStatusInfo?: RefundStatusInfo;\n  /**\n   * Payment gateway's refund ID.\n   * This field is only returned when the value of `external_refund` is `false`.\n   * @format GUID\n   */\n  gatewayRefundId?: string | null;\n  /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */\n  providerRefundId?: string | null;\n  /**\n   * Whether refund was made externally and manually on the payment provider's side.\n   * @immutable\n   */\n  externalRefund?: boolean;\n}\n\n/** Refund transaction status. */\nexport enum RefundStatus {\n  /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */\n  PENDING = 'PENDING',\n  /** Refund transaction succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Refund transaction failed. */\n  FAILED = 'FAILED',\n  /** Refund request acknowledged, and will be executed soon. */\n  SCHEDULED = 'SCHEDULED',\n  /** Refund was initiated on payment provider side. */\n  STARTED = 'STARTED',\n}\n\n/** @enumType */\nexport type RefundStatusWithLiterals =\n  | RefundStatus\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED'\n  | 'SCHEDULED'\n  | 'STARTED';\n\nexport interface RefundStatusInfo {\n  /**\n   * Reason code for the refund's current status.\n   *\n   * Learn more about [reason codes](https://dev.wix.com/docs/rest/business-management/payments/service-plugins/payment-service-provider-service-plugin/reason-codes).\n   * @minLength 1\n   * @maxLength 10\n   */\n  paymentGatewayReasonCode?: string | null;\n  /**\n   * Free text explanation of current refund status.\n   * @minLength 1\n   * @maxLength 1000\n   */\n  description?: string | null;\n}\n\n/** Business model of a refund request */\nexport interface RefundDetails {\n  /**\n   * Order line item IDs and quantities that were refunded.\n   * @maxSize 300\n   */\n  items?: RefundItem[];\n  /** Whether the shipping fee was also refunded. */\n  shippingIncluded?: boolean;\n  /**\n   * Reason for the refund, provided by customer (optional).\n   * @maxLength 200\n   */\n  reason?: string | null;\n  /**\n   * Line items that were refunded.\n   * @maxSize 300\n   */\n  lineItems?: V1LineItemRefund[];\n  /**\n   * Additional fees that were refunded.\n   * @maxSize 100\n   */\n  additionalFees?: V1AdditionalFeeRefund[];\n  /** Shipping amount that was refunded. */\n  shipping?: V1ShippingRefund;\n}\n\nexport interface RefundItem {\n  /**\n   * Line item ID the refunded line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity refunded.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface V1LineItemRefund {\n  /**\n   * Line item ID.\n   * @format GUID\n   * @immutable\n   */\n  lineItemId?: string;\n  /**\n   * Refund quantity.\n   * @min 1\n   * @max 100000\n   * @immutable\n   */\n  quantity?: number;\n}\n\nexport interface V1AdditionalFeeRefund {\n  /**\n   * Additional fee ID.\n   * @format GUID\n   * @immutable\n   */\n  additionalFeeId?: string;\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n}\n\nexport interface V1ShippingRefund {\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n}\n\nexport interface V1AggregatedRefundSummary {\n  /** Total amount requested for refund. */\n  requestedRefund?: Price;\n  /** Pending refund amount - the portion of `requestedRefund` that is still pending. */\n  pendingRefund?: Price;\n  /** Refunded amount - the portion of `requestedRefund` that refunded successfully. */\n  refunded?: Price;\n  /** Failed refund amount - the portion of `requestedRefund` that failed. */\n  failedRefundAmount?: Price;\n  /** Whether at least one refund transaction is still in `\"PENDING\"` status. */\n  pending?: boolean;\n  /** Breakdown of refunded items. Available only after refund is complete. */\n  breakdown?: RefundItemsBreakdown;\n}\n\nexport interface RefundItemsBreakdown {\n  /**\n   * Refunded line items and the amount refunded for each.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefundSummary[];\n}\n\nexport interface LineItemRefundSummary {\n  /**\n   * ID of the refunded line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /** Total refunded amount for the line item. */\n  totalRefundedAmount?: Price;\n}\n\nexport interface OrderTransactions {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Record of payments made to the merchant.\n   * @maxSize 100\n   */\n  payments?: Payment[];\n  /**\n   * Record of refunds made to the buyer.\n   * @maxSize 300\n   */\n  refunds?: Refund[];\n}\n\nexport interface Payment\n  extends PaymentPaymentDetailsOneOf,\n    PaymentReceiptInfoOneOf {\n  /** Regular payment details. */\n  regularPaymentDetails?: RegularPaymentDetails;\n  /** Gift card payment details. */\n  giftcardPaymentDetails?: GiftCardPaymentDetails;\n  /**\n   * Receipt created by Wix\n   * @internal\n   */\n  wixReceipt?: WixReceiptInfo;\n  /**\n   * Receipt created by an external system.\n   * @internal\n   */\n  externalReceipt?: ExternalReceiptInfo;\n  /**\n   * Payment ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /** Payment amount. */\n  amount?: Price;\n  /**\n   * Whether refunds for this payment are disabled.\n   * + `true`: This payment is not refundable.\n   * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.\n   */\n  refundDisabled?: boolean;\n  /**\n   * Whether receipt generation for this payment are allowed.\n   * + `true`: This payment supports receipt generation.\n   * + `false`: This payment not supports receipt generation, or receipt already generated\n   * @internal\n   * @readonly\n   */\n  supportReceiptGeneration?: boolean;\n}\n\n/** @oneof */\nexport interface PaymentPaymentDetailsOneOf {\n  /** Regular payment details. */\n  regularPaymentDetails?: RegularPaymentDetails;\n  /** Gift card payment details. */\n  giftcardPaymentDetails?: GiftCardPaymentDetails;\n}\n\n/** @oneof */\nexport interface PaymentReceiptInfoOneOf {\n  /**\n   * Receipt created by Wix\n   * @internal\n   */\n  wixReceipt?: WixReceiptInfo;\n  /**\n   * Receipt created by an external system.\n   * @internal\n   */\n  externalReceipt?: ExternalReceiptInfo;\n}\n\nexport interface RegularPaymentDetails\n  extends RegularPaymentDetailsPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n  /**\n   * Wix Payments order ID.\n   * @maxLength 100\n   */\n  paymentOrderId?: string | null;\n  /**\n   * Payment gateway's transaction ID.\n   * This field is only returned when the value of `offline_payment` is `false`.\n   * @maxLength 100\n   */\n  gatewayTransactionId?: string | null;\n  /**\n   * Payment method. Non-exhaustive list of supported values:\n   * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`\n   * @maxLength 100\n   */\n  paymentMethod?: string | null;\n  /**\n   * Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments.\n   * @maxLength 100\n   */\n  providerTransactionId?: string | null;\n  /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */\n  offlinePayment?: boolean;\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n  /**\n   * Whether there is a payment agreement that allows for future charges.\n   * @immutable\n   */\n  savedPaymentMethod?: boolean;\n  /** Authorization details. */\n  authorizationDetails?: AuthorizationDetails;\n  /**\n   * Payment service provider display name. Non-exhaustive list of supported values: Wix Payments, PayPal, Square, Stripe, etc.\n   * @internal\n   * @maxLength 300\n   */\n  paymentProvider?: string | null;\n  /**\n   * Record of chargebacks made by the buyer.\n   * @maxSize 6\n   */\n  chargebacks?: Chargeback[];\n}\n\n/** @oneof */\nexport interface RegularPaymentDetailsPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n}\n\nexport enum TransactionStatus {\n  UNDEFINED = 'UNDEFINED',\n  APPROVED = 'APPROVED',\n  PENDING = 'PENDING',\n  PENDING_MERCHANT = 'PENDING_MERCHANT',\n  CANCELED = 'CANCELED',\n  DECLINED = 'DECLINED',\n  REFUNDED = 'REFUNDED',\n  PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',\n  AUTHORIZED = 'AUTHORIZED',\n  VOIDED = 'VOIDED',\n}\n\n/** @enumType */\nexport type TransactionStatusWithLiterals =\n  | TransactionStatus\n  | 'UNDEFINED'\n  | 'APPROVED'\n  | 'PENDING'\n  | 'PENDING_MERCHANT'\n  | 'CANCELED'\n  | 'DECLINED'\n  | 'REFUNDED'\n  | 'PARTIALLY_REFUNDED'\n  | 'AUTHORIZED'\n  | 'VOIDED';\n\nexport interface AuthorizationDetails {\n  /**\n   * Whether the authorized payment is of a delayed capture.\n   * @readonly\n   */\n  delayedCapture?: boolean;\n  /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  authorizedDate?: Date | null;\n  /**\n   * List of captures associated with payment\n   * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses\n   * @maxSize 1\n   */\n  captures?: AuthorizationCapture[];\n  /** Void associated with payment */\n  void?: AuthorizationVoid;\n  /** Scheduled action for this transaction */\n  scheduledAction?: V1ScheduledAction;\n}\n\nexport interface AuthorizationCapture {\n  /**\n   * Capture ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /** Status of this capture action */\n  status?: AuthorizationCaptureStatusWithLiterals;\n  /**\n   * Amount of this capture\n   * @immutable\n   */\n  amount?: Price;\n  /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  _createdDate?: Date | null;\n  /** In case of status is FAILED may contain failure details */\n  failureDetails?: AuthorizationActionFailureDetails;\n}\n\nexport enum AuthorizationCaptureStatus {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Capture operation still in progress. */\n  PENDING = 'PENDING',\n  /** Capture operation succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Capture operation failed. */\n  FAILED = 'FAILED',\n}\n\n/** @enumType */\nexport type AuthorizationCaptureStatusWithLiterals =\n  | AuthorizationCaptureStatus\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED';\n\nexport interface AuthorizationActionFailureDetails {\n  /** @maxLength 100 */\n  failureCode?: string;\n}\n\nexport interface AuthorizationVoid {\n  /** Status of this void action */\n  status?: AuthorizationVoidStatusWithLiterals;\n  /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  voidedDate?: Date | null;\n  /** In case of status is FAILED may contain failure details */\n  failureDetails?: AuthorizationActionFailureDetails;\n  /** Reason of void action */\n  reason?: ReasonWithLiterals;\n}\n\nexport enum AuthorizationVoidStatus {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Void operation still in progress. */\n  PENDING = 'PENDING',\n  /** Void operation succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Void operation failed. */\n  FAILED = 'FAILED',\n}\n\n/** @enumType */\nexport type AuthorizationVoidStatusWithLiterals =\n  | AuthorizationVoidStatus\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED';\n\n/** Reason the authorization was voided. */\nexport enum Reason {\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  /** Authorization was voided by user. */\n  MANUAL = 'MANUAL',\n  /** Authorization passed execution date. */\n  SCHEDULED = 'SCHEDULED',\n}\n\n/** @enumType */\nexport type ReasonWithLiterals =\n  | Reason\n  | 'UNKNOWN_REASON'\n  | 'MANUAL'\n  | 'SCHEDULED';\n\nexport interface V1ScheduledAction {\n  /** Type of the action. */\n  actionType?: ActionTypeWithLiterals;\n  /** The date and time of the action. */\n  executionDate?: Date | null;\n}\n\nexport enum ActionType {\n  UNKNOWN_ACTION_TYPE = 'UNKNOWN_ACTION_TYPE',\n  VOID = 'VOID',\n  CAPTURE = 'CAPTURE',\n}\n\n/** @enumType */\nexport type ActionTypeWithLiterals =\n  | ActionType\n  | 'UNKNOWN_ACTION_TYPE'\n  | 'VOID'\n  | 'CAPTURE';\n\nexport interface Chargeback {\n  /**\n   * Chargeback ID.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  _id?: string;\n  /**\n   * Date and time the chargeback was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the chargeback was updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Amount.\n   * @readonly\n   * @immutable\n   */\n  amount?: Price;\n  /**\n   * Reversal amount. Present only when status is REVERSED.\n   * @readonly\n   */\n  reversalAmount?: Price;\n  /**\n   * Status.\n   *\n   * Default: `\"APPROVED\"`.\n   */\n  status?: ChargebackStatusWithLiterals;\n  /**\n   * External chargeback ID.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  externalId?: string | null;\n}\n\nexport enum ChargebackStatus {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** Chargeback was approved. */\n  APPROVED = 'APPROVED',\n  /** Chargeback was reversed. */\n  REVERSED = 'REVERSED',\n}\n\n/** @enumType */\nexport type ChargebackStatusWithLiterals =\n  | ChargebackStatus\n  | 'UNSPECIFIED'\n  | 'APPROVED'\n  | 'REVERSED';\n\nexport interface GiftCardPaymentDetails {\n  /**\n   * Gift card payment ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  giftCardPaymentId?: string;\n  /**\n   * ID of the app that created the gift card.\n   * @format GUID\n   */\n  appId?: string;\n  /**\n   * Whether the gift card is voided.\n   * @readonly\n   */\n  voided?: boolean;\n  /**\n   * Gift card obfuscated code.\n   * @internal\n   * @maxLength 30\n   * @immutable\n   */\n  obfuscatedCode?: string | null;\n}\n\nexport interface MembershipPaymentDetails {\n  /**\n   * Membership ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  membershipId?: string;\n  /**\n   * ID of the line item this membership applies to.\n   * @minLength 1\n   * @maxLength 100\n   */\n  lineItemId?: string;\n  /** Payment status. */\n  status?: MembershipPaymentStatusWithLiterals;\n  /** Membership name. */\n  name?: MembershipName;\n  /**\n   * The transaction ID in the membership system. Can be used to void the transaction.\n   * @minLength 1\n   * @maxLength 100\n   */\n  externalTransactionId?: string | null;\n  /**\n   * Whether the membership is voided.\n   * @readonly\n   */\n  voided?: boolean;\n  /**\n   * ID of the application providing this payment option.\n   * @format GUID\n   */\n  providerAppId?: string;\n}\n\nexport enum MembershipPaymentStatus {\n  /** Payment was charged. */\n  CHARGED = 'CHARGED',\n  /** The attempt to charge the payment failed, for example, due to lack of credits. */\n  CHARGE_FAILED = 'CHARGE_FAILED',\n}\n\n/** @enumType */\nexport type MembershipPaymentStatusWithLiterals =\n  | MembershipPaymentStatus\n  | 'CHARGED'\n  | 'CHARGE_FAILED';\n\nexport interface MembershipName {\n  /**\n   * Membership name.\n   * @maxLength 100\n   */\n  original?: string;\n  /**\n   * Translated membership name. Defaults to `original` when not provided.\n   * @maxLength 100\n   */\n  translated?: string | null;\n}\n\nexport interface WixReceiptInfo {\n  /**\n   * Receipt ID\n   * @format GUID\n   */\n  receiptId?: string;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface ExternalReceiptInfo {\n  /**\n   * External receipt ID\n   * @maxLength 100\n   */\n  receiptId?: string | null;\n  /**\n   * ID of the app providing the receipt\n   * @format GUID\n   */\n  appId?: string | null;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface PaymentNotRefundableDetails {\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Reason why payment is not refundable. */\n  nonRefundableReason?: NonRefundableReasonWithLiterals;\n}\n\nexport interface AuthorizeChargeWithSavedPaymentMethodRequest {\n  /**\n   * Order ID.\n   *\n   * The order must have a saved payment method associated.\n   * Pass the order ID to the List Transactions For Single Order method and search the response for a payment with `regularPaymentDetails.savedPaymentMethod: true`.\n   * If no saved payment exists, the call will fail.\n   * @format GUID\n   */\n  orderId: string;\n  /** Amount to authorize. */\n  amount: Price;\n  /**\n   * Currency code, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency: string;\n  /** Settings for scheduled action to perform automatically. */\n  delayedCaptureSettings: DelayedCaptureSettings;\n}\n\nexport interface DelayedCaptureSettings {\n  /** The action to perform on the authorized payment after the specified duration. */\n  scheduledAction?: ScheduledActionWithLiterals;\n  /**\n   * Delay duration before performing the scheduled action.\n   * > **Note:** If not set, the payment provider's default period will be used.\n   */\n  delayDuration?: Duration;\n}\n\nexport enum ScheduledAction {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** Whether payment will be auto-voided when duration passes. */\n  VOID = 'VOID',\n  /** Whether payment will be auto-captured when duration passes. */\n  CAPTURE = 'CAPTURE',\n}\n\n/** @enumType */\nexport type ScheduledActionWithLiterals =\n  | ScheduledAction\n  | 'UNSPECIFIED'\n  | 'VOID'\n  | 'CAPTURE';\n\nexport interface Duration {\n  /**\n   * Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc\n   * @min 1\n   */\n  count?: number;\n  /** Duration unit: MINUTES, HOURS and DAYS */\n  unit?: DurationUnitWithLiterals;\n}\n\nexport enum DurationUnit {\n  UNKNOWN_DURATION_UNIT = 'UNKNOWN_DURATION_UNIT',\n  MINUTES = 'MINUTES',\n  HOURS = 'HOURS',\n  DAYS = 'DAYS',\n}\n\n/** @enumType */\nexport type DurationUnitWithLiterals =\n  | DurationUnit\n  | 'UNKNOWN_DURATION_UNIT'\n  | 'MINUTES'\n  | 'HOURS'\n  | 'DAYS';\n\nexport interface AuthorizeChargeWithSavedPaymentMethodResponse {\n  /** Authorized payment. */\n  payment?: Payment;\n  /** Order transactions updated with authorized payment. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface VoidAuthorizedPaymentsRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * IDs of the authorized payments to void.\n   * @minSize 1\n   * @maxSize 100\n   * @format GUID\n   */\n  paymentIds: string[];\n}\n\nexport interface VoidAuthorizedPaymentsResponse {\n  /** Order transactions updated with voided payment. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface CaptureAuthorizedPaymentsRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * List payment IDs and amounts to capture.\n   * @minSize 1\n   * @maxSize 100\n   */\n  payments: PaymentCapture[];\n}\n\nexport interface PaymentCapture {\n  /**\n   * ID of the payment to capture.\n   * @format GUID\n   */\n  paymentId?: string;\n  /**\n   * Capture amount.\n   *\n   * > **Note:** If not provided, the full authorized amount will be captured.\n   */\n  amount?: Price;\n}\n\nexport interface CaptureAuthorizedPaymentsResponse {\n  /** Order transactions updated with captured payment. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface GenerateReceiptsRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * Payment IDs.\n   * @minSize 1\n   * @maxSize 1\n   * @format GUID\n   */\n  paymentIds: string[];\n}\n\nexport interface GenerateReceiptsResponse {\n  /** Generated receipts information. */\n  receipts?: ReceiptInfo[];\n}\n\nexport interface ReceiptInfo {\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /**\n   * Receipt ID.\n   * @format GUID\n   */\n  receiptId?: string;\n}\n\nexport interface RedeemGiftCardRequest {\n  /**\n   * ID of the order to pay for with the gift card.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * Code of the gift card to redeem.\n   * @minLength 8\n   * @maxLength 20\n   */\n  giftCardCode: string;\n  /** Amount to redeem from the gift card. */\n  amount: Price;\n  /**\n   * Currency code, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency: string;\n}\n\nexport interface RedeemGiftCardResponse {\n  /** Updated order transactions. */\n  orderTransactions?: OrderTransactions;\n  /** Gift card payment. */\n  payment?: Payment;\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface Empty {}\n\n/** @docsIgnore */\nexport type RefundPaymentsApplicationErrors =\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: PaymentRefund;\n    }\n  | {\n      code?: 'LINE_ITEM_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ADDITIONAL_FEE_NOT_FOUND';\n      description?: string;\n      data?: AdditionalFeeRefund;\n    }\n  | {\n      code?: 'SHIPPING_NOT_FOUND';\n      description?: string;\n      data?: ShippingRefund;\n    }\n  | {\n      code?: 'INVALID_PAYMENT_REFUND_AMOUNT';\n      description?: string;\n      data?: PaymentRefund;\n    }\n  | {\n      code?: 'INVALID_ADDITIONAL_FEE_REFUND_AMOUNT';\n      description?: string;\n      data?: AdditionalFeeRefund;\n    }\n  | {\n      code?: 'INVALID_SHIPPING_REFUND_AMOUNT';\n      description?: string;\n      data?: ShippingRefund;\n    }\n  | {\n      code?: 'INVALID_LINE_ITEM_REFUND_QUANTITY';\n      description?: string;\n      data?: LineItemRefund;\n    }\n  | {\n      code?: 'INVALID_LINE_ITEM_RESTOCK_QUANTITY';\n      description?: string;\n      data?: RestockItem;\n    }\n  | {\n      code?: 'PAYMENT_NOT_REFUNDABLE';\n      description?: string;\n      data?: PaymentNotRefundableDetails;\n    }\n  | {\n      code?: 'EXTERNAL_REFUND_EXPECTED';\n      description?: string;\n      data?: PaymentRefund;\n    }\n  | {\n      code?: 'PARTIAL_REFUND_FOR_MULTIPLE_LOCATIONS_NOT_ALLOWED';\n      description?: string;\n      data?: RestockItem;\n    };\n/** @docsIgnore */\nexport type AuthorizeChargeWithSavedPaymentMethodApplicationErrors =\n  | {\n      code?: 'ORDER_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_CANCELED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_PAID';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'NO_SAVED_PAYMENT_METHOD';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_AMOUNT';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_CURRENCY';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type VoidAuthorizedPaymentsApplicationErrors =\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GATEWAY_TRANSACTION_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_VOIDED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_CAPTURED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_AUTHORIZED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type CaptureAuthorizedPaymentsApplicationErrors =\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: PaymentCapture;\n    }\n  | {\n      code?: 'INVALID_AMOUNT';\n      description?: string;\n      data?: PaymentCapture;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_VOIDED';\n      description?: string;\n      data?: PaymentCapture;\n    }\n  | {\n      code?: 'PAYMENT_ALREADY_CAPTURED';\n      description?: string;\n      data?: PaymentCapture;\n    }\n  | {\n      code?: 'PAYMENT_NOT_AUTHORIZED';\n      description?: string;\n      data?: PaymentCapture;\n    }\n  | {\n      code?: 'PAYMENT_HAS_PENDING_CAPTURE';\n      description?: string;\n      data?: PaymentCapture;\n    };\n/** @docsIgnore */\nexport type GenerateReceiptsApplicationErrors =\n  | {\n      code?: 'ORDER_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'RECEIPT_ALREADY_EXIST';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'RECEIPT_GENERATION_IN_PROGRESS';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_PAYMENT_TYPE';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INVALID_PAYMENT_STATUS';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type RedeemGiftCardApplicationErrors =\n  | {\n      code?: 'GIFT_CARD_ALREADY_APPLIED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'CURRENCY_MISMATCH';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_EXPIRED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_DISABLED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INSUFFICIENT_FUNDS';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'CURRENCY_NOT_SUPPORTED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ALREADY_REDEEMED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_CANCELED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ORDER_PAID';\n      description?: string;\n      data?: Record<string, any>;\n    };\n\n/**\n * Retrieves refund information about an order's payments, line items, shipping, and additional fees.\n *\n * The following information is returned:\n * - Whether a payment is refundable; previously refunded amounts; possible refund amounts for each payment.\n * - Refundable and previously refunded quantities for each line item, as well as shipping and additional fees.\n * @param orderId - Order ID.\n * @public\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_GET_ORDER_REFUNDABILITY\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.GetOrderRefundability\n */\nexport async function getOrderRefundability(\n  orderId: string\n): Promise<\n  NonNullablePaths<\n    GetOrderRefundabilityResponse,\n    | `payments`\n    | `payments.${number}.refundable`\n    | `payments.${number}.manuallyRefundable.reason`\n    | `payments.${number}.nonRefundable.reason`\n    | `payments.${number}.payment.paymentId`\n    | `payments.${number}.payment.offlinePayment`\n    | `paymentsSummary.monetary.paid.amount`\n    | `paymentsSummary.monetary.paid.formattedAmount`\n    | `paymentsSummary.membership.paidLineItemIds`\n    | `paymentsSummary.membership.refundedLineItemIds`\n    | `paymentsSummary.membership.refundableLineItemIds`\n    | `lineItems`\n    | `lineItems.${number}.lineItemId`\n    | `lineItems.${number}.originalQuantity`\n    | `lineItems.${number}.refundedQuantity`\n    | `lineItems.${number}.availableRefundQuantity`\n    | `shipping.amount.amount`\n    | `shipping.amount.formattedAmount`\n    | `additionalFees`\n    | `additionalFees.${number}.additionalFeeId`\n    | `additionalFees.${number}.amount.amount`\n    | `additionalFees.${number}.amount.formattedAmount`,\n    5\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderBilling.getOrderRefundability(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Calculates refund amounts for a given list of an order's line items, shipping, and additional fees.\n * @param orderId - Order ID.\n * @public\n * @requiredField options.refundItems.additionalFees.additionalFeeId\n * @requiredField options.refundItems.lineItems.lineItemId\n * @requiredField options.refundItems.lineItems.quantity\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_CALCULATE_REFUND\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.CalculateRefund\n */\nexport async function calculateRefund(\n  orderId: string,\n  options?: NonNullablePaths<\n    CalculateRefundOptions,\n    | `refundItems.additionalFees.${number}.additionalFeeId`\n    | `refundItems.lineItems.${number}.lineItemId`\n    | `refundItems.lineItems.${number}.quantity`,\n    5\n  >\n): Promise<\n  NonNullablePaths<\n    CalculateRefundResponse,\n    | `available`\n    | `notAvailable.errors`\n    | `notAvailable.errors.${number}.lineItem.lineItemId`\n    | `notAvailable.errors.${number}.lineItem.quantity`\n    | `notAvailable.errors.${number}.additionalFee.additionalFeeId`\n    | `notAvailable.errors.${number}.additionalFee.amount.amount`\n    | `notAvailable.errors.${number}.additionalFee.amount.formattedAmount`\n    | `notAvailable.errors.${number}.error.applicationError.code`\n    | `notAvailable.errors.${number}.error.applicationError.description`\n    | `summary.total.amount`\n    | `summary.total.formattedAmount`\n    | `calculatedRefundItems.lineItems`\n    | `calculatedRefundItems.lineItems.${number}.item.lineItemId`\n    | `calculatedRefundItems.lineItems.${number}.item.quantity`\n    | `calculatedRefundItems.lineItems.${number}.summary.total.amount`\n    | `calculatedRefundItems.lineItems.${number}.summary.total.formattedAmount`\n    | `calculatedRefundItems.additionalFees`\n    | `calculatedRefundItems.additionalFees.${number}.additionalFee.additionalFeeId`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    refundItems: options?.refundItems,\n  });\n\n  const reqOpts = ambassadorWixEcomV1OrderBilling.calculateRefund(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          refundItems: '$[1].refundItems',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CalculateRefundOptions {\n  /** List of line items, shipping and additional fees to be calculated for refund. */\n  refundItems?: RefundItems;\n}\n\n/**\n * Calls relevant payment providers and creates refund transactions for the requested payments.\n *\n * Refunds marked with `paymentRefunds.externalRefund = true` do not call payment providers and\n * only update the order's transactions records.\n * @param orderId - Order ID.\n * @public\n * @requiredField options.paymentRefunds\n * @requiredField options.paymentRefunds.paymentId\n * @requiredField options.refundItems.additionalFees.additionalFeeId\n * @requiredField options.refundItems.lineItems.lineItemId\n * @requiredField options.refundItems.lineItems.quantity\n * @requiredField options.sideEffects.restock.lineItems.lineItemId\n * @requiredField options.sideEffects.restock.lineItems.quantity\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_REFUND_PAYMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.RefundPayments\n */\nexport async function refundPayments(\n  orderId: string,\n  options?: NonNullablePaths<\n    RefundPaymentsOptions,\n    | `paymentRefunds`\n    | `paymentRefunds.${number}.paymentId`\n    | `refundItems.additionalFees.${number}.additionalFeeId`\n    | `refundItems.lineItems.${number}.lineItemId`\n    | `refundItems.lineItems.${number}.quantity`\n    | `sideEffects.restock.lineItems.${number}.lineItemId`\n    | `sideEffects.restock.lineItems.${number}.quantity`,\n    6\n  >\n): Promise<\n  NonNullablePaths<\n    RefundPaymentsResponse,\n    | `refund._id`\n    | `refund.transactions`\n    | `refund.transactions.${number}.paymentId`\n    | `refund.transactions.${number}.amount.amount`\n    | `refund.transactions.${number}.amount.formattedAmount`\n    | `refund.transactions.${number}.refundStatus`\n    | `refund.transactions.${number}.externalRefund`\n    | `refund.details.items`\n    | `refund.details.items.${number}.lineItemId`\n    | `refund.details.items.${number}.quantity`\n    | `refund.details.shippingIncluded`\n    | `refund.details.lineItems`\n    | `refund.details.lineItems.${number}.lineItemId`\n    | `refund.details.lineItems.${number}.quantity`\n    | `refund.details.additionalFees`\n    | `refund.details.additionalFees.${number}.additionalFeeId`\n    | `refund.summary.pending`\n    | `refund.summary.breakdown.lineItems`\n    | `refund.summary.breakdown.lineItems.${number}.lineItemId`\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  > & {\n    __applicationErrorsType?: RefundPaymentsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    paymentRefunds: options?.paymentRefunds,\n    sideEffects: options?.sideEffects,\n    refundItems: options?.refundItems,\n    customerReason: options?.customerReason,\n  });\n\n  const reqOpts = ambassadorWixEcomV1OrderBilling.refundPayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          paymentRefunds: '$[1].paymentRefunds',\n          sideEffects: '$[1].sideEffects',\n          refundItems: '$[1].refundItems',\n          customerReason: '$[1].customerReason',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface RefundPaymentsOptions {\n  /**\n   * List of payments and their amounts to refund.\n   * @minSize 1\n   * @maxSize 50\n   */\n  paymentRefunds: PaymentRefund[];\n  /** Side effect actions for restocking and notifications. */\n  sideEffects?: RefundSideEffects;\n  /** List of line items, shipping and additional fees to refund. */\n  refundItems?: RefundItems;\n  /**\n   * Customer-provided reason for the refund.\n   * @maxLength 200\n   */\n  customerReason?: string | null;\n}\n\n/**\n * Authorizes a payment using an order's saved payment method.\n *\n * Use the `delayedCaptureSettings` field to specify whether the payment should also be captured/voided immediately or at a later time.\n * Alternatively, the payment can be manually captured or voided using the Capture Authorized Payments or Void Authorized Payments methods.\n * @param orderId - Order ID.\n *\n * The order must have a saved payment method associated.\n * Pass the order ID to the List Transactions For Single Order method and search the response for a payment with `regularPaymentDetails.savedPaymentMethod: true`.\n * If no saved payment exists, the call will fail.\n * @public\n * @requiredField options\n * @requiredField options.amount\n * @requiredField options.amount.amount\n * @requiredField options.currency\n * @requiredField options.delayedCaptureSettings\n * @requiredField options.delayedCaptureSettings.scheduledAction\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_AUTHORIZE_CHARGE_WITH_SAVED_PAYMENT_METHOD\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.AuthorizeChargeWithSavedPaymentMethod\n */\nexport async function authorizeChargeWithSavedPaymentMethod(\n  orderId: string,\n  options: NonNullablePaths<\n    AuthorizeChargeWithSavedPaymentMethodOptions,\n    | `amount`\n    | `amount.amount`\n    | `currency`\n    | `delayedCaptureSettings`\n    | `delayedCaptureSettings.scheduledAction`,\n    3\n  >\n): Promise<\n  NonNullablePaths<\n    AuthorizeChargeWithSavedPaymentMethodResponse,\n    | `payment.regularPaymentDetails.offlinePayment`\n    | `payment.regularPaymentDetails.status`\n    | `payment.regularPaymentDetails.savedPaymentMethod`\n    | `payment.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `payment.regularPaymentDetails.authorizationDetails.captures`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.status`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.amount.amount`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.amount.formattedAmount`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.failureDetails.failureCode`\n    | `payment.regularPaymentDetails.authorizationDetails.void.status`\n    | `payment.regularPaymentDetails.authorizationDetails.void.reason`\n    | `payment.regularPaymentDetails.authorizationDetails.scheduledAction.actionType`\n    | `payment.regularPaymentDetails.chargebacks`\n    | `payment.regularPaymentDetails.chargebacks.${number}._id`\n    | `payment.regularPaymentDetails.chargebacks.${number}.status`\n    | `payment.giftcardPaymentDetails.giftCardPaymentId`\n    | `payment.giftcardPaymentDetails.appId`\n    | `payment.giftcardPaymentDetails.voided`\n    | `payment.refundDisabled`\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    8\n  > & {\n    __applicationErrorsType?: AuthorizeChargeWithSavedPaymentMethodApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    amount: options?.amount,\n    currency: options?.currency,\n    delayedCaptureSettings: options?.delayedCaptureSettings,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderBilling.authorizeChargeWithSavedPaymentMethod(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          amount: '$[1].amount',\n          currency: '$[1].currency',\n          delayedCaptureSettings: '$[1].delayedCaptureSettings',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface AuthorizeChargeWithSavedPaymentMethodOptions {\n  /** Amount to authorize. */\n  amount: Price;\n  /**\n   * Currency code, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency: string;\n  /** Settings for scheduled action to perform automatically. */\n  delayedCaptureSettings: DelayedCaptureSettings;\n}\n\n/**\n * Voids an order's authorized payments.\n * @param orderId - Order ID.\n * @public\n * @requiredField options\n * @requiredField options.paymentIds\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_VOID_AUTHORIZED_PAYMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.VoidAuthorizedPayments\n */\nexport async function voidAuthorizedPayments(\n  orderId: string,\n  options: NonNullablePaths<VoidAuthorizedPaymentsOptions, `paymentIds`, 2>\n): Promise<\n  NonNullablePaths<\n    VoidAuthorizedPaymentsResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  > & {\n    __applicationErrorsType?: VoidAuthorizedPaymentsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    paymentIds: options?.paymentIds,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderBilling.voidAuthorizedPayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          paymentIds: '$[1].paymentIds',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface VoidAuthorizedPaymentsOptions {\n  /**\n   * IDs of the authorized payments to void.\n   * @minSize 1\n   * @maxSize 100\n   * @format GUID\n   */\n  paymentIds: string[];\n}\n\n/**\n * Captures an order's authorized payments.\n * @param orderId - Order ID.\n * @public\n * @requiredField options\n * @requiredField options.payments\n * @requiredField options.payments.paymentId\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_CAPTURE_AUTHORIZED_PAYMENTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.CaptureAuthorizedPayments\n */\nexport async function captureAuthorizedPayments(\n  orderId: string,\n  options: NonNullablePaths<\n    CaptureAuthorizedPaymentsOptions,\n    `payments` | `payments.${number}.paymentId`,\n    4\n  >\n): Promise<\n  NonNullablePaths<\n    CaptureAuthorizedPaymentsResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  > & {\n    __applicationErrorsType?: CaptureAuthorizedPaymentsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    payments: options?.payments,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderBilling.captureAuthorizedPayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          payments: '$[1].payments',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CaptureAuthorizedPaymentsOptions {\n  /**\n   * List payment IDs and amounts to capture.\n   * @minSize 1\n   * @maxSize 100\n   */\n  payments: PaymentCapture[];\n}\n\n/**\n * Generates receipts for an order's specified payments.\n * @param orderId - Order ID.\n * @internal\n * @documentationMaturity preview\n * @requiredField options\n * @requiredField options.paymentIds\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_GENERATE_RECEIPTS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.GenerateReceipts\n */\nexport async function generateReceipts(\n  orderId: string,\n  options: NonNullablePaths<GenerateReceiptsOptions, `paymentIds`, 2>\n): Promise<\n  NonNullablePaths<\n    GenerateReceiptsResponse,\n    | `receipts`\n    | `receipts.${number}.paymentId`\n    | `receipts.${number}.receiptId`,\n    4\n  > & {\n    __applicationErrorsType?: GenerateReceiptsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    paymentIds: options?.paymentIds,\n  });\n\n  const reqOpts = ambassadorWixEcomV1OrderBilling.generateReceipts(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          paymentIds: '$[1].paymentIds',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GenerateReceiptsOptions {\n  /**\n   * Payment IDs.\n   * @minSize 1\n   * @maxSize 1\n   * @format GUID\n   */\n  paymentIds: string[];\n}\n\n/**\n * Redeems a gift card as payment for an order.\n * @param orderId - ID of the order to pay for with the gift card.\n * @internal\n * @documentationMaturity preview\n * @requiredField options\n * @requiredField options.amount\n * @requiredField options.currency\n * @requiredField options.giftCardCode\n * @requiredField orderId\n * @permissionId ECOM.ORDER_BILLING_REDEEM_GIFT_CARD\n * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.RedeemGiftCard\n */\nexport async function redeemGiftCard(\n  orderId: string,\n  options: NonNullablePaths<\n    RedeemGiftCardOptions,\n    `amount` | `currency` | `giftCardCode`,\n    2\n  >\n): Promise<\n  NonNullablePaths<\n    RedeemGiftCardResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`\n    | `payment.regularPaymentDetails.offlinePayment`\n    | `payment.regularPaymentDetails.status`\n    | `payment.regularPaymentDetails.savedPaymentMethod`\n    | `payment.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `payment.regularPaymentDetails.authorizationDetails.captures`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.status`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.amount.amount`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.amount.formattedAmount`\n    | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.failureDetails.failureCode`\n    | `payment.regularPaymentDetails.authorizationDetails.void.status`\n    | `payment.regularPaymentDetails.authorizationDetails.void.reason`\n    | `payment.regularPaymentDetails.authorizationDetails.scheduledAction.actionType`\n    | `payment.regularPaymentDetails.chargebacks`\n    | `payment.regularPaymentDetails.chargebacks.${number}._id`\n    | `payment.regularPaymentDetails.chargebacks.${number}.status`\n    | `payment.giftcardPaymentDetails.giftCardPaymentId`\n    | `payment.giftcardPaymentDetails.appId`\n    | `payment.giftcardPaymentDetails.voided`\n    | `payment.refundDisabled`,\n    8\n  > & {\n    __applicationErrorsType?: RedeemGiftCardApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    giftCardCode: options?.giftCardCode,\n    amount: options?.amount,\n    currency: options?.currency,\n  });\n\n  const reqOpts = ambassadorWixEcomV1OrderBilling.redeemGiftCard(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          orderId: '$[0]',\n          giftCardCode: '$[1].giftCardCode',\n          amount: '$[1].amount',\n          currency: '$[1].currency',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface RedeemGiftCardOptions {\n  /**\n   * Code of the gift card to redeem.\n   * @minLength 8\n   * @maxLength 20\n   */\n  giftCardCode: string;\n  /** Amount to redeem from the gift card. */\n  amount: Price;\n  /**\n   * Currency code, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency: string;\n}\n","import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/order-billing/v1',\n        destPath: '/v1/order-billing',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/order-billing',\n        destPath: '/v1/order-billing',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/ecom/v1/order-billing',\n        destPath: '/v1/order-billing',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/ecom/v1/order-billing',\n        destPath: '/v1/order-billing',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_order-billing';\n\n/**\n * Retrieves refund information about an order's payments, line items, shipping, and additional fees.\n *\n * The following information is returned:\n * - Whether a payment is refundable; previously refunded amounts; possible refund amounts for each payment.\n * - Refundable and previously refunded quantities for each line item, as well as shipping and additional fees.\n */\nexport function getOrderRefundability(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __getOrderRefundability({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.GetOrderRefundability',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/get-order-refundability',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __getOrderRefundability;\n}\n\n/** Calculates refund amounts for a given list of an order's line items, shipping, and additional fees. */\nexport function calculateRefund(payload: object): RequestOptionsFactory<any> {\n  function __calculateRefund({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.CalculateRefund',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/calculate-refund',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __calculateRefund;\n}\n\n/**\n * Calls relevant payment providers and creates refund transactions for the requested payments.\n *\n * Refunds marked with `paymentRefunds.externalRefund = true` do not call payment providers and\n * only update the order's transactions records.\n */\nexport function refundPayments(payload: object): RequestOptionsFactory<any> {\n  function __refundPayments({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.RefundPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/refund-payments',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'refund.createdDate' },\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __refundPayments;\n}\n\n/**\n * Authorizes a payment using an order's saved payment method.\n *\n * Use the `delayedCaptureSettings` field to specify whether the payment should also be captured/voided immediately or at a later time.\n * Alternatively, the payment can be manually captured or voided using the Capture Authorized Payments or Void Authorized Payments methods.\n */\nexport function authorizeChargeWithSavedPaymentMethod(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __authorizeChargeWithSavedPaymentMethod({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.AuthorizeChargeWithSavedPaymentMethod',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath:\n          '/v1/order-billing/authorize-charge-with-saved-payment-method',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'payment.createdDate' },\n              { path: 'payment.updatedDate' },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              { path: 'payment.regularPaymentDetails.chargebacks.createdDate' },\n              { path: 'payment.regularPaymentDetails.chargebacks.updatedDate' },\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __authorizeChargeWithSavedPaymentMethod;\n}\n\n/** Voids an order's authorized payments. */\nexport function voidAuthorizedPayments(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __voidAuthorizedPayments({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.VoidAuthorizedPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/void-authorized-payments',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __voidAuthorizedPayments;\n}\n\n/** Captures an order's authorized payments. */\nexport function captureAuthorizedPayments(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __captureAuthorizedPayments({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.CaptureAuthorizedPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/capture-authorized-payments',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __captureAuthorizedPayments;\n}\n\n/** Generates receipts for an order's specified payments. */\nexport function generateReceipts(payload: object): RequestOptionsFactory<any> {\n  function __generateReceipts({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.GenerateReceipts',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/generate-receipts',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __generateReceipts;\n}\n\n/** Redeems a gift card as payment for an order. */\nexport function redeemGiftCard(payload: object): RequestOptionsFactory<any> {\n  function __redeemGiftCard({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_billing',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.billing.v1.OrderBillingService.RedeemGiftCard',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({\n        protoPath: '/v1/order-billing/redeem-gift-card',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n              { path: 'payment.createdDate' },\n              { path: 'payment.updatedDate' },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              { path: 'payment.regularPaymentDetails.chargebacks.createdDate' },\n              { path: 'payment.regularPaymentDetails.chargebacks.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __redeemGiftCard;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAAA;AAAA,EAAA,uBAAAC;AAAA,EAAA,iCAAAC;AAAA,EAAA,wBAAAC;AAAA,EAAA,6BAAAC;AAAA,EAAA,sBAAAC;AAAA,EAAA,sBAAAC;AAAA,EAAA,8BAAAC;AAAA;AAAA;;;ACAA,6BAAoD;AACpD,oCAGO;;;ACJP,uBAAqD;AACrD,6BAA+B;AAC/B,0BAA2B;AAI3B,SAAS,uDACP,MACA;AACA,QAAM,mBAAmB;AAAA,IACvB,wBAAwB;AAAA,MACtB;AAAA,QACE,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,MACjB;AAAA,QACE,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,sBAAsB;AAAA,MACpB;AAAA,QACE,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,GAAG;AAAA,MACD;AAAA,QACE,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAEA,aAAO,gCAAW,OAAO,OAAO,MAAM,EAAE,iBAAiB,CAAC,CAAC;AAC7D;AAEA,IAAM,eAAe;AASd,SAAS,sBACd,SAC4B;AAC5B,WAAS,wBAAwB,EAAE,KAAK,GAAQ;AAC9C,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAGO,SAAS,gBAAgB,SAA6C;AAC3E,WAAS,kBAAkB,EAAE,KAAK,GAAQ;AACxC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAQO,SAAS,eAAe,SAA6C;AAC1E,WAAS,iBAAiB,EAAE,KAAK,GAAQ;AACvC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACC,iBAClB,uCAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,qBAAqB;AAAA,YAC7B,EAAE,MAAM,yCAAyC;AAAA,YACjD,EAAE,MAAM,yCAAyC;AAAA,YACjD;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wCAAwC;AAAA,UAClD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAQO,SAAS,sCACd,SAC4B;AAC5B,WAAS,wCAAwC,EAAE,KAAK,GAAQ;AAC9D,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WACE;AAAA,QACF,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,iBAClB,uCAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,sBAAsB;AAAA,YAC9B,EAAE,MAAM,sBAAsB;AAAA,YAC9B;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wDAAwD;AAAA,YAChE,EAAE,MAAM,wDAAwD;AAAA,YAChE,EAAE,MAAM,yCAAyC;AAAA,YACjD,EAAE,MAAM,yCAAyC;AAAA,YACjD;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wCAAwC;AAAA,UAClD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAGO,SAAS,uBACd,SAC4B;AAC5B,WAAS,yBAAyB,EAAE,KAAK,GAAQ;AAC/C,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,iBAClB,uCAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,yCAAyC;AAAA,YACjD,EAAE,MAAM,yCAAyC;AAAA,YACjD;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wCAAwC;AAAA,UAClD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAGO,SAAS,0BACd,SAC4B;AAC5B,WAAS,4BAA4B,EAAE,KAAK,GAAQ;AAClD,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,iBAClB,uCAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,yCAAyC;AAAA,YACjD,EAAE,MAAM,yCAAyC;AAAA,YACjD;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wCAAwC;AAAA,UAClD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAGO,SAAS,iBAAiB,SAA6C;AAC5E,WAAS,mBAAmB,EAAE,KAAK,GAAQ;AACzC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAGO,SAAS,eAAe,SAA6C;AAC1E,WAAS,iBAAiB,EAAE,KAAK,GAAQ;AACvC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,uDAAuD;AAAA,QAC1D,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,iBAClB,uCAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,yCAAyC;AAAA,YACjD,EAAE,MAAM,yCAAyC;AAAA,YACjD;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wCAAwC;AAAA,YAChD,EAAE,MAAM,sBAAsB;AAAA,YAC9B,EAAE,MAAM,sBAAsB;AAAA,YAC9B;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA;AAAA,cACE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM,wDAAwD;AAAA,YAChE,EAAE,MAAM,wDAAwD;AAAA,UAClE;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;ADxPO,IAAK,2BAAL,kBAAKC,8BAAL;AACL,EAAAA,0BAAA,oBAAiB;AACjB,EAAAA,0BAAA,aAAU;AACV,EAAAA,0BAAA,mBAAgB;AAChB,EAAAA,0BAAA,aAAU;AACV,EAAAA,0BAAA,0BAAuB;AALb,SAAAA;AAAA,GAAA;AAsBL,IAAK,sBAAL,kBAAKC,yBAAL;AACL,EAAAA,qBAAA,oBAAiB;AACjB,EAAAA,qBAAA,sBAAmB;AACnB,EAAAA,qBAAA,sBAAmB;AACnB,EAAAA,qBAAA,cAAW;AACX,EAAAA,qBAAA,gBAAa;AACb,EAAAA,qBAAA,0BAAuB;AACvB,EAAAA,qBAAA,oBAAiB;AACjB,EAAAA,qBAAA,eAAY;AACZ,EAAAA,qBAAA,2BAAwB;AACxB,EAAAA,qBAAA,sBAAmB;AACnB,EAAAA,qBAAA,uBAAoB;AACpB,EAAAA,qBAAA,iCAA8B;AAZpB,SAAAA;AAAA,GAAA;AA2TL,IAAK,WAAL,kBAAKC,cAAL;AACL,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,SAAM;AACN,EAAAA,UAAA,SAAM;AACN,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,cAAW;AACX,EAAAA,UAAA,cAAW;AACX,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,iBAAc;AACd,EAAAA,UAAA,iBAAc;AACd,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,uBAAoB;AACpB,EAAAA,UAAA,wBAAqB;AACrB,EAAAA,UAAA,oBAAiB;AACjB,EAAAA,UAAA,uBAAoB;AACpB,EAAAA,UAAA,sBAAmB;AACnB,EAAAA,UAAA,kBAAe;AACf,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,2BAAwB;AArBd,SAAAA;AAAA,GAAA;AAsHL,IAAK,uBAAL,kBAAKC,0BAAL;AAEL,EAAAA,sBAAA,eAAY;AAEZ,EAAAA,sBAAA,aAAU;AAJA,SAAAA;AAAA,GAAA;AAkIL,IAAK,eAAL,kBAAKC,kBAAL;AAEL,EAAAA,cAAA,aAAU;AAEV,EAAAA,cAAA,eAAY;AAEZ,EAAAA,cAAA,YAAS;AAET,EAAAA,cAAA,eAAY;AAEZ,EAAAA,cAAA,aAAU;AAVA,SAAAA;AAAA,GAAA;AAwSL,IAAK,oBAAL,kBAAKC,uBAAL;AACL,EAAAA,mBAAA,eAAY;AACZ,EAAAA,mBAAA,cAAW;AACX,EAAAA,mBAAA,aAAU;AACV,EAAAA,mBAAA,sBAAmB;AACnB,EAAAA,mBAAA,cAAW;AACX,EAAAA,mBAAA,cAAW;AACX,EAAAA,mBAAA,cAAW;AACX,EAAAA,mBAAA,wBAAqB;AACrB,EAAAA,mBAAA,gBAAa;AACb,EAAAA,mBAAA,YAAS;AAVC,SAAAA;AAAA,GAAA;AAmEL,IAAK,6BAAL,kBAAKC,gCAAL;AACL,EAAAA,4BAAA,oBAAiB;AAEjB,EAAAA,4BAAA,aAAU;AAEV,EAAAA,4BAAA,eAAY;AAEZ,EAAAA,4BAAA,YAAS;AAPC,SAAAA;AAAA,GAAA;AAkCL,IAAK,0BAAL,kBAAKC,6BAAL;AACL,EAAAA,yBAAA,oBAAiB;AAEjB,EAAAA,yBAAA,aAAU;AAEV,EAAAA,yBAAA,eAAY;AAEZ,EAAAA,yBAAA,YAAS;AAPC,SAAAA;AAAA,GAAA;AAmBL,IAAK,SAAL,kBAAKC,YAAL;AACL,EAAAA,QAAA,oBAAiB;AAEjB,EAAAA,QAAA,YAAS;AAET,EAAAA,QAAA,eAAY;AALF,SAAAA;AAAA,GAAA;AAsBL,IAAK,aAAL,kBAAKC,gBAAL;AACL,EAAAA,YAAA,yBAAsB;AACtB,EAAAA,YAAA,UAAO;AACP,EAAAA,YAAA,aAAU;AAHA,SAAAA;AAAA,GAAA;AA0DL,IAAK,mBAAL,kBAAKC,sBAAL;AACL,EAAAA,kBAAA,iBAAc;AAEd,EAAAA,kBAAA,cAAW;AAEX,EAAAA,kBAAA,cAAW;AALD,SAAAA;AAAA,GAAA;AA4EL,IAAK,0BAAL,kBAAKC,6BAAL;AAEL,EAAAA,yBAAA,aAAU;AAEV,EAAAA,yBAAA,mBAAgB;AAJN,SAAAA;AAAA,GAAA;AAoGL,IAAK,kBAAL,kBAAKC,qBAAL;AACL,EAAAA,iBAAA,iBAAc;AAEd,EAAAA,iBAAA,UAAO;AAEP,EAAAA,iBAAA,aAAU;AALA,SAAAA;AAAA,GAAA;AAyBL,IAAK,eAAL,kBAAKC,kBAAL;AACL,EAAAA,cAAA,2BAAwB;AACxB,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,WAAQ;AACR,EAAAA,cAAA,UAAO;AAJG,SAAAA;AAAA,GAAA;AA+cZ,eAAsBC,uBACpB,SA4BA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC,EAAE,QAAiB,CAAC;AAE1E,QAAM,UAC4B,sBAAsB,OAAO;AAE/D,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAC;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B,EAAE,SAAS,OAAO;AAAA,QAC5C,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,SAAS;AAAA,IACZ;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AAcA,eAAsBC,iBACpB,SACA,SA8BA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,aAAa,SAAS;AAAA,EACxB,CAAC;AAED,QAAM,UAA0C,gBAAgB,OAAO;AAEvE,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAD;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,aAAa;AAAA,QACf;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AA0BA,eAAsBE,gBACpB,SACA,SAqDA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,gBAAgB,SAAS;AAAA,IACzB,aAAa,SAAS;AAAA,IACtB,aAAa,SAAS;AAAA,IACtB,gBAAgB,SAAS;AAAA,EAC3B,CAAC;AAED,QAAM,UAA0C,eAAe,OAAO;AAEtE,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAF;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,gBAAgB;AAAA,UAChB,aAAa;AAAA,UACb,aAAa;AAAA,UACb,gBAAgB;AAAA,QAClB;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AA0CA,eAAsBG,uCACpB,SACA,SAmDA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,QAAQ,SAAS;AAAA,IACjB,UAAU,SAAS;AAAA,IACnB,wBAAwB,SAAS;AAAA,EACnC,CAAC;AAED,QAAM,UAC4B;AAAA,IAC9B;AAAA,EACF;AAEF,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAH;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,wBAAwB;AAAA,QAC1B;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AAyBA,eAAsBI,wBACpB,SACA,SAwBA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,YAAY,SAAS;AAAA,EACvB,CAAC;AAED,QAAM,UAC4B,uBAAuB,OAAO;AAEhE,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAJ;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,YAAY;AAAA,QACd;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AAwBA,eAAsBK,2BACpB,SACA,SA4BA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,UAAU,SAAS;AAAA,EACrB,CAAC;AAED,QAAM,UAC4B,0BAA0B,OAAO;AAEnE,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAL;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,UAAU;AAAA,QACZ;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AAuBA,eAAsBM,kBACpB,SACA,SAWA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,YAAY,SAAS;AAAA,EACvB,CAAC;AAED,QAAM,UAA0C,iBAAiB,OAAO;AAExE,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAN;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,YAAY;AAAA,QACd;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;AAyBA,eAAsBO,gBACpB,SACA,SA+CA;AAEA,QAAM,EAAE,YAAY,YAAY,IAAI,UAAU,CAAC;AAK/C,QAAM,cAAU,qEAAsC;AAAA,IACpD;AAAA,IACA,cAAc,SAAS;AAAA,IACvB,QAAQ,SAAS;AAAA,IACjB,UAAU,SAAS;AAAA,EACrB,CAAC;AAED,QAAM,UAA0C,eAAe,OAAO;AAEtE,eAAa,aAAa;AAC1B,MAAI;AACF,UAAM,SAAS,MAAM,WAAW,QAAQ,OAAO;AAC/C,iBAAa,YAAY,MAAM;AAE/B,eAAO,uEAAwC,OAAO,IAAI;AAAA,EAC5D,SAAS,KAAU;AACjB,UAAM,uBAAmB,uBAAAP;AAAA,MACvB;AAAA,MACA;AAAA,QACE,wBAAwB,CAAC;AAAA,QACzB,0BAA0B;AAAA,UACxB,SAAS;AAAA,UACT,cAAc;AAAA,UACd,QAAQ;AAAA,UACR,UAAU;AAAA,QACZ;AAAA,QACA,yBAAyB;AAAA,MAC3B;AAAA,MACA,CAAC,WAAW,SAAS;AAAA,IACvB;AACA,iBAAa,UAAU,GAAG;AAE1B,UAAM;AAAA,EACR;AACF;","names":["authorizeChargeWithSavedPaymentMethod","calculateRefund","captureAuthorizedPayments","generateReceipts","getOrderRefundability","redeemGiftCard","refundPayments","voidAuthorizedPayments","payload","ManuallyRefundableReason","NonRefundableReason","RuleType","ExternalRefundStatus","RefundStatus","TransactionStatus","AuthorizationCaptureStatus","AuthorizationVoidStatus","Reason","ActionType","ChargebackStatus","MembershipPaymentStatus","ScheduledAction","DurationUnit","getOrderRefundability","sdkTransformError","calculateRefund","refundPayments","authorizeChargeWithSavedPaymentMethod","voidAuthorizedPayments","captureAuthorizedPayments","generateReceipts","redeemGiftCard"]}