import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { GetOrderRefundabilityResponse, CalculateRefundOptions, CalculateRefundResponse, RefundPaymentsOptions, RefundPaymentsResponse, RefundPaymentsApplicationErrors, AuthorizeChargeWithSavedPaymentMethodOptions, AuthorizeChargeWithSavedPaymentMethodResponse, AuthorizeChargeWithSavedPaymentMethodApplicationErrors, VoidAuthorizedPaymentsOptions, VoidAuthorizedPaymentsResponse, VoidAuthorizedPaymentsApplicationErrors, CaptureAuthorizedPaymentsOptions, CaptureAuthorizedPaymentsResponse, CaptureAuthorizedPaymentsApplicationErrors } from './index.typings.mjs';
export { ActionEvent, ActionType, ActionTypeWithLiterals, AdditionalFeeRefund, AdditionalFeeRefundability, AggregatedRefundSummary, ApplicationError, AuthorizationActionFailureDetails, AuthorizationCapture, AuthorizationCaptureStatus, AuthorizationCaptureStatusWithLiterals, AuthorizationDetails, AuthorizationVoid, AuthorizationVoidStatus, AuthorizationVoidStatusWithLiterals, AuthorizeChargeWithSavedPaymentMethodRequest, CalculateRefundRequest, CalculateRefundResponseStatusOneOf, CalculatedAdditionalFeeRefund, CalculatedLineItemRefund, CalculatedRefundItems, CalculatedRefundNotAvailableStatus, CalculatedRefundSummary, CalculatedShippingRefund, CalculationError, CalculationErrorItemOneOf, CaptureAuthorizedPaymentsRequest, Chargeback, ChargebackStatus, ChargebackStatusWithLiterals, CreditCardPaymentMethodDetails, DelayedCaptureSettings, Details, DetailsKindOneOf, DomainEvent, DomainEventBodyOneOf, Duration, DurationUnit, DurationUnitWithLiterals, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ExternalReceiptInfo, ExternalRefundInfo, ExternalRefundStatus, ExternalRefundStatusWithLiterals, FieldViolation, GenerateReceiptsApplicationErrors, GenerateReceiptsOptions, GenerateReceiptsRequest, GenerateReceiptsResponse, GetOrderRefundabilityRequest, GiftCardPaymentDetails, LineItemRefund, LineItemRefundSummary, LineItemRefundability, ManuallyRefundablePaymentStatus, ManuallyRefundableReason, ManuallyRefundableReasonWithLiterals, MembershipName, MembershipPaymentDetails, MembershipPaymentStatus, MembershipPaymentStatusWithLiterals, MembershipPaymentSummary, MonetaryPaymentSummary, NonRefundablePaymentStatus, NonRefundableReason, NonRefundableReasonWithLiterals, NotificationSideEffects, OrderBilling, OrderTransactions, Payment, PaymentCapture, PaymentInfo, PaymentInfoPaymentMethodDetailsOneOf, PaymentInfoSummaryOneOf, PaymentNotRefundableDetails, PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf, PaymentRefund, PaymentRefundability, PaymentRefundabilityStatusOneOf, PaymentsSummary, Price, Reason, ReasonWithLiterals, ReceiptInfo, RedeemGiftCardApplicationErrors, RedeemGiftCardOptions, RedeemGiftCardRequest, RedeemGiftCardResponse, Refund, RefundDetails, RefundItem, RefundItems, RefundItemsBreakdown, RefundPaymentsRequest, RefundSideEffects, RefundStatus, RefundStatusInfo, RefundStatusWithLiterals, RefundTransaction, RegularPaymentDetails, RegularPaymentDetailsPaymentMethodDetailsOneOf, RestockItem, RestockSideEffects, RestoreInfo, RuleType, RuleTypeWithLiterals, ScheduledAction, ScheduledActionWithLiterals, ShippingRefund, ShippingRefundability, SystemError, TransactionStatus, TransactionStatusWithLiterals, V1AdditionalFeeRefund, V1AggregatedRefundSummary, V1LineItemRefund, V1ScheduledAction, V1ShippingRefund, ValidationError, VoidAuthorizedPaymentsRequest, WixReceiptInfo } from './index.typings.mjs';

declare function getOrderRefundability$1(httpClient: HttpClient): GetOrderRefundabilitySignature;
interface GetOrderRefundabilitySignature {
    /**
     * Retrieves refund information about an order's payments, line items, shipping, and additional fees.
     *
     * The following information is returned:
     * - Whether a payment is refundable; previously refunded amounts; possible refund amounts for each payment.
     * - Refundable and previously refunded quantities for each line item, as well as shipping and additional fees.
     * @param - Order ID.
     */
    (orderId: string): Promise<NonNullablePaths<GetOrderRefundabilityResponse, `payments` | `payments.${number}.refundable` | `payments.${number}.manuallyRefundable.reason` | `payments.${number}.nonRefundable.reason` | `payments.${number}.payment.paymentId` | `payments.${number}.payment.offlinePayment` | `paymentsSummary.monetary.paid.amount` | `paymentsSummary.monetary.paid.formattedAmount` | `paymentsSummary.membership.paidLineItemIds` | `paymentsSummary.membership.refundedLineItemIds` | `paymentsSummary.membership.refundableLineItemIds` | `lineItems` | `lineItems.${number}.lineItemId` | `lineItems.${number}.originalQuantity` | `lineItems.${number}.refundedQuantity` | `lineItems.${number}.availableRefundQuantity` | `shipping.amount.amount` | `shipping.amount.formattedAmount` | `additionalFees` | `additionalFees.${number}.additionalFeeId` | `additionalFees.${number}.amount.amount` | `additionalFees.${number}.amount.formattedAmount`, 5>>;
}
declare function calculateRefund$1(httpClient: HttpClient): CalculateRefundSignature;
interface CalculateRefundSignature {
    /**
     * Calculates refund amounts for a given list of an order's line items, shipping, and additional fees.
     * @param - Order ID.
     */
    (orderId: string, options?: NonNullablePaths<CalculateRefundOptions, `refundItems.additionalFees.${number}.additionalFeeId` | `refundItems.lineItems.${number}.lineItemId` | `refundItems.lineItems.${number}.quantity`, 5>): Promise<NonNullablePaths<CalculateRefundResponse, `available` | `notAvailable.errors` | `notAvailable.errors.${number}.lineItem.lineItemId` | `notAvailable.errors.${number}.lineItem.quantity` | `notAvailable.errors.${number}.additionalFee.additionalFeeId` | `notAvailable.errors.${number}.additionalFee.amount.amount` | `notAvailable.errors.${number}.additionalFee.amount.formattedAmount` | `notAvailable.errors.${number}.error.applicationError.code` | `notAvailable.errors.${number}.error.applicationError.description` | `summary.total.amount` | `summary.total.formattedAmount` | `calculatedRefundItems.lineItems` | `calculatedRefundItems.lineItems.${number}.item.lineItemId` | `calculatedRefundItems.lineItems.${number}.item.quantity` | `calculatedRefundItems.lineItems.${number}.summary.total.amount` | `calculatedRefundItems.lineItems.${number}.summary.total.formattedAmount` | `calculatedRefundItems.additionalFees` | `calculatedRefundItems.additionalFees.${number}.additionalFee.additionalFeeId`, 7>>;
}
declare function refundPayments$1(httpClient: HttpClient): RefundPaymentsSignature;
interface RefundPaymentsSignature {
    /**
     * Calls relevant payment providers and creates refund transactions for the requested payments.
     *
     * Refunds marked with `paymentRefunds.externalRefund = true` do not call payment providers and
     * only update the order's transactions records.
     * @param - Order ID.
     */
    (orderId: string, options?: NonNullablePaths<RefundPaymentsOptions, `paymentRefunds` | `paymentRefunds.${number}.paymentId` | `refundItems.additionalFees.${number}.additionalFeeId` | `refundItems.lineItems.${number}.lineItemId` | `refundItems.lineItems.${number}.quantity` | `sideEffects.restock.lineItems.${number}.lineItemId` | `sideEffects.restock.lineItems.${number}.quantity`, 6>): Promise<NonNullablePaths<RefundPaymentsResponse, `refund._id` | `refund.transactions` | `refund.transactions.${number}.paymentId` | `refund.transactions.${number}.amount.amount` | `refund.transactions.${number}.amount.formattedAmount` | `refund.transactions.${number}.refundStatus` | `refund.transactions.${number}.externalRefund` | `refund.details.items` | `refund.details.items.${number}.lineItemId` | `refund.details.items.${number}.quantity` | `refund.details.shippingIncluded` | `refund.details.lineItems` | `refund.details.lineItems.${number}.lineItemId` | `refund.details.lineItems.${number}.quantity` | `refund.details.additionalFees` | `refund.details.additionalFees.${number}.additionalFeeId` | `refund.summary.pending` | `refund.summary.breakdown.lineItems` | `refund.summary.breakdown.lineItems.${number}.lineItemId` | `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: RefundPaymentsApplicationErrors;
    }>;
}
declare function authorizeChargeWithSavedPaymentMethod$1(httpClient: HttpClient): AuthorizeChargeWithSavedPaymentMethodSignature;
interface AuthorizeChargeWithSavedPaymentMethodSignature {
    /**
     * Authorizes a payment using an order's saved payment method.
     *
     * Use the `delayedCaptureSettings` field to specify whether the payment should also be captured/voided immediately or at a later time.
     * Alternatively, the payment can be manually captured or voided using the Capture Authorized Payments or Void Authorized Payments methods.
     * @param - Order ID.
     *
     * The order must have a saved payment method associated.
     * Pass the order ID to the List Transactions For Single Order method and search the response for a payment with `regularPaymentDetails.savedPaymentMethod: true`.
     * If no saved payment exists, the call will fail.
     */
    (orderId: string, options: NonNullablePaths<AuthorizeChargeWithSavedPaymentMethodOptions, `amount` | `amount.amount` | `currency` | `delayedCaptureSettings` | `delayedCaptureSettings.scheduledAction`, 3>): Promise<NonNullablePaths<AuthorizeChargeWithSavedPaymentMethodResponse, `payment.regularPaymentDetails.offlinePayment` | `payment.regularPaymentDetails.status` | `payment.regularPaymentDetails.savedPaymentMethod` | `payment.regularPaymentDetails.authorizationDetails.delayedCapture` | `payment.regularPaymentDetails.authorizationDetails.captures` | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.status` | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.amount.amount` | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.amount.formattedAmount` | `payment.regularPaymentDetails.authorizationDetails.captures.${number}.failureDetails.failureCode` | `payment.regularPaymentDetails.authorizationDetails.void.status` | `payment.regularPaymentDetails.authorizationDetails.void.reason` | `payment.regularPaymentDetails.authorizationDetails.scheduledAction.actionType` | `payment.regularPaymentDetails.chargebacks` | `payment.regularPaymentDetails.chargebacks.${number}._id` | `payment.regularPaymentDetails.chargebacks.${number}.status` | `payment.giftcardPaymentDetails.giftCardPaymentId` | `payment.giftcardPaymentDetails.appId` | `payment.giftcardPaymentDetails.voided` | `payment.refundDisabled` | `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 8> & {
        __applicationErrorsType?: AuthorizeChargeWithSavedPaymentMethodApplicationErrors;
    }>;
}
declare function voidAuthorizedPayments$1(httpClient: HttpClient): VoidAuthorizedPaymentsSignature;
interface VoidAuthorizedPaymentsSignature {
    /**
     * Voids an order's authorized payments.
     * @param - Order ID.
     */
    (orderId: string, options: NonNullablePaths<VoidAuthorizedPaymentsOptions, `paymentIds`, 2>): Promise<NonNullablePaths<VoidAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: VoidAuthorizedPaymentsApplicationErrors;
    }>;
}
declare function captureAuthorizedPayments$1(httpClient: HttpClient): CaptureAuthorizedPaymentsSignature;
interface CaptureAuthorizedPaymentsSignature {
    /**
     * Captures an order's authorized payments.
     * @param - Order ID.
     */
    (orderId: string, options: NonNullablePaths<CaptureAuthorizedPaymentsOptions, `payments` | `payments.${number}.paymentId`, 4>): Promise<NonNullablePaths<CaptureAuthorizedPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7> & {
        __applicationErrorsType?: CaptureAuthorizedPaymentsApplicationErrors;
    }>;
}

declare const getOrderRefundability: MaybeContext<BuildRESTFunction<typeof getOrderRefundability$1> & typeof getOrderRefundability$1>;
declare const calculateRefund: MaybeContext<BuildRESTFunction<typeof calculateRefund$1> & typeof calculateRefund$1>;
declare const refundPayments: MaybeContext<BuildRESTFunction<typeof refundPayments$1> & typeof refundPayments$1>;
declare const authorizeChargeWithSavedPaymentMethod: MaybeContext<BuildRESTFunction<typeof authorizeChargeWithSavedPaymentMethod$1> & typeof authorizeChargeWithSavedPaymentMethod$1>;
declare const voidAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof voidAuthorizedPayments$1> & typeof voidAuthorizedPayments$1>;
declare const captureAuthorizedPayments: MaybeContext<BuildRESTFunction<typeof captureAuthorizedPayments$1> & typeof captureAuthorizedPayments$1>;

export { AuthorizeChargeWithSavedPaymentMethodApplicationErrors, AuthorizeChargeWithSavedPaymentMethodOptions, AuthorizeChargeWithSavedPaymentMethodResponse, CalculateRefundOptions, CalculateRefundResponse, CaptureAuthorizedPaymentsApplicationErrors, CaptureAuthorizedPaymentsOptions, CaptureAuthorizedPaymentsResponse, GetOrderRefundabilityResponse, RefundPaymentsApplicationErrors, RefundPaymentsOptions, RefundPaymentsResponse, VoidAuthorizedPaymentsApplicationErrors, VoidAuthorizedPaymentsOptions, VoidAuthorizedPaymentsResponse, authorizeChargeWithSavedPaymentMethod, calculateRefund, captureAuthorizedPayments, getOrderRefundability, refundPayments, voidAuthorizedPayments };
