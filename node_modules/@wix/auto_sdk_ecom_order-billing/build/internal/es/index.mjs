// src/ecom-v1-order-billing-order-billing.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-order-billing-order-billing.http.ts
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/order-billing/v1",
        destPath: "/v1/order-billing"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/order-billing",
        destPath: "/v1/order-billing"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/v1/order-billing",
        destPath: "/v1/order-billing"
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/order-billing",
        destPath: "/v1/order-billing"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-billing";
function getOrderRefundability(payload) {
  function __getOrderRefundability({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.GetOrderRefundability",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/get-order-refundability",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __getOrderRefundability;
}
function calculateRefund(payload) {
  function __calculateRefund({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.CalculateRefund",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/calculate-refund",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __calculateRefund;
}
function refundPayments(payload) {
  function __refundPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.RefundPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/refund-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "refund.createdDate" },
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __refundPayments;
}
function authorizeChargeWithSavedPaymentMethod(payload) {
  function __authorizeChargeWithSavedPaymentMethod({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.AuthorizeChargeWithSavedPaymentMethod",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/authorize-charge-with-saved-payment-method",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "payment.createdDate" },
            { path: "payment.updatedDate" },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            { path: "payment.regularPaymentDetails.chargebacks.createdDate" },
            { path: "payment.regularPaymentDetails.chargebacks.updatedDate" },
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __authorizeChargeWithSavedPaymentMethod;
}
function voidAuthorizedPayments(payload) {
  function __voidAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.VoidAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/void-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __voidAuthorizedPayments;
}
function captureAuthorizedPayments(payload) {
  function __captureAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.CaptureAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/capture-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __captureAuthorizedPayments;
}
function generateReceipts(payload) {
  function __generateReceipts({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.GenerateReceipts",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/generate-receipts",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __generateReceipts;
}
function redeemGiftCard(payload) {
  function __redeemGiftCard({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.RedeemGiftCard",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/redeem-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" },
            { path: "payment.createdDate" },
            { path: "payment.updatedDate" },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            { path: "payment.regularPaymentDetails.chargebacks.createdDate" },
            { path: "payment.regularPaymentDetails.chargebacks.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __redeemGiftCard;
}

// src/ecom-v1-order-billing-order-billing.universal.ts
var ManuallyRefundableReason = /* @__PURE__ */ ((ManuallyRefundableReason2) => {
  ManuallyRefundableReason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  ManuallyRefundableReason2["EXPIRED"] = "EXPIRED";
  ManuallyRefundableReason2["NOT_SUPPORTED"] = "NOT_SUPPORTED";
  ManuallyRefundableReason2["OFFLINE"] = "OFFLINE";
  ManuallyRefundableReason2["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
  return ManuallyRefundableReason2;
})(ManuallyRefundableReason || {});
var NonRefundableReason = /* @__PURE__ */ ((NonRefundableReason2) => {
  NonRefundableReason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  NonRefundableReason2["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
  NonRefundableReason2["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
  NonRefundableReason2["NOT_PAID"] = "NOT_PAID";
  NonRefundableReason2["ZERO_PRICE"] = "ZERO_PRICE";
  NonRefundableReason2["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
  NonRefundableReason2["PENDING_REFUND"] = "PENDING_REFUND";
  NonRefundableReason2["FORBIDDEN"] = "FORBIDDEN";
  NonRefundableReason2["TRANSACTION_NOT_FOUND"] = "TRANSACTION_NOT_FOUND";
  NonRefundableReason2["ORDER_IS_PENDING"] = "ORDER_IS_PENDING";
  NonRefundableReason2["ORDER_IS_REJECTED"] = "ORDER_IS_REJECTED";
  NonRefundableReason2["AMOUNT_OFFSET_BY_CHARGEBACK"] = "AMOUNT_OFFSET_BY_CHARGEBACK";
  return NonRefundableReason2;
})(NonRefundableReason || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var ExternalRefundStatus = /* @__PURE__ */ ((ExternalRefundStatus2) => {
  ExternalRefundStatus2["SUCCEEDED"] = "SUCCEEDED";
  ExternalRefundStatus2["PENDING"] = "PENDING";
  return ExternalRefundStatus2;
})(ExternalRefundStatus || {});
var RefundStatus = /* @__PURE__ */ ((RefundStatus2) => {
  RefundStatus2["PENDING"] = "PENDING";
  RefundStatus2["SUCCEEDED"] = "SUCCEEDED";
  RefundStatus2["FAILED"] = "FAILED";
  RefundStatus2["SCHEDULED"] = "SCHEDULED";
  RefundStatus2["STARTED"] = "STARTED";
  return RefundStatus2;
})(RefundStatus || {});
var TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {
  TransactionStatus2["UNDEFINED"] = "UNDEFINED";
  TransactionStatus2["APPROVED"] = "APPROVED";
  TransactionStatus2["PENDING"] = "PENDING";
  TransactionStatus2["PENDING_MERCHANT"] = "PENDING_MERCHANT";
  TransactionStatus2["CANCELED"] = "CANCELED";
  TransactionStatus2["DECLINED"] = "DECLINED";
  TransactionStatus2["REFUNDED"] = "REFUNDED";
  TransactionStatus2["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
  TransactionStatus2["AUTHORIZED"] = "AUTHORIZED";
  TransactionStatus2["VOIDED"] = "VOIDED";
  return TransactionStatus2;
})(TransactionStatus || {});
var AuthorizationCaptureStatus = /* @__PURE__ */ ((AuthorizationCaptureStatus2) => {
  AuthorizationCaptureStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  AuthorizationCaptureStatus2["PENDING"] = "PENDING";
  AuthorizationCaptureStatus2["SUCCEEDED"] = "SUCCEEDED";
  AuthorizationCaptureStatus2["FAILED"] = "FAILED";
  return AuthorizationCaptureStatus2;
})(AuthorizationCaptureStatus || {});
var AuthorizationVoidStatus = /* @__PURE__ */ ((AuthorizationVoidStatus2) => {
  AuthorizationVoidStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  AuthorizationVoidStatus2["PENDING"] = "PENDING";
  AuthorizationVoidStatus2["SUCCEEDED"] = "SUCCEEDED";
  AuthorizationVoidStatus2["FAILED"] = "FAILED";
  return AuthorizationVoidStatus2;
})(AuthorizationVoidStatus || {});
var Reason = /* @__PURE__ */ ((Reason2) => {
  Reason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  Reason2["MANUAL"] = "MANUAL";
  Reason2["SCHEDULED"] = "SCHEDULED";
  return Reason2;
})(Reason || {});
var ActionType = /* @__PURE__ */ ((ActionType2) => {
  ActionType2["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
  ActionType2["VOID"] = "VOID";
  ActionType2["CAPTURE"] = "CAPTURE";
  return ActionType2;
})(ActionType || {});
var ChargebackStatus = /* @__PURE__ */ ((ChargebackStatus2) => {
  ChargebackStatus2["UNSPECIFIED"] = "UNSPECIFIED";
  ChargebackStatus2["APPROVED"] = "APPROVED";
  ChargebackStatus2["REVERSED"] = "REVERSED";
  return ChargebackStatus2;
})(ChargebackStatus || {});
var MembershipPaymentStatus = /* @__PURE__ */ ((MembershipPaymentStatus2) => {
  MembershipPaymentStatus2["CHARGED"] = "CHARGED";
  MembershipPaymentStatus2["CHARGE_FAILED"] = "CHARGE_FAILED";
  return MembershipPaymentStatus2;
})(MembershipPaymentStatus || {});
var ScheduledAction = /* @__PURE__ */ ((ScheduledAction2) => {
  ScheduledAction2["UNSPECIFIED"] = "UNSPECIFIED";
  ScheduledAction2["VOID"] = "VOID";
  ScheduledAction2["CAPTURE"] = "CAPTURE";
  return ScheduledAction2;
})(ScheduledAction || {});
var DurationUnit = /* @__PURE__ */ ((DurationUnit2) => {
  DurationUnit2["UNKNOWN_DURATION_UNIT"] = "UNKNOWN_DURATION_UNIT";
  DurationUnit2["MINUTES"] = "MINUTES";
  DurationUnit2["HOURS"] = "HOURS";
  DurationUnit2["DAYS"] = "DAYS";
  return DurationUnit2;
})(DurationUnit || {});
async function getOrderRefundability2(orderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId });
  const reqOpts = getOrderRefundability(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function calculateRefund2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    refundItems: options?.refundItems
  });
  const reqOpts = calculateRefund(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          refundItems: "$[1].refundItems"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function refundPayments2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    paymentRefunds: options?.paymentRefunds,
    sideEffects: options?.sideEffects,
    refundItems: options?.refundItems,
    customerReason: options?.customerReason
  });
  const reqOpts = refundPayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          paymentRefunds: "$[1].paymentRefunds",
          sideEffects: "$[1].sideEffects",
          refundItems: "$[1].refundItems",
          customerReason: "$[1].customerReason"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function authorizeChargeWithSavedPaymentMethod2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    amount: options?.amount,
    currency: options?.currency,
    delayedCaptureSettings: options?.delayedCaptureSettings
  });
  const reqOpts = authorizeChargeWithSavedPaymentMethod(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          amount: "$[1].amount",
          currency: "$[1].currency",
          delayedCaptureSettings: "$[1].delayedCaptureSettings"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function voidAuthorizedPayments2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    paymentIds: options?.paymentIds
  });
  const reqOpts = voidAuthorizedPayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          paymentIds: "$[1].paymentIds"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function captureAuthorizedPayments2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    payments: options?.payments
  });
  const reqOpts = captureAuthorizedPayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          payments: "$[1].payments"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function generateReceipts2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    paymentIds: options?.paymentIds
  });
  const reqOpts = generateReceipts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          paymentIds: "$[1].paymentIds"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function redeemGiftCard2(orderId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    orderId,
    giftCardCode: options?.giftCardCode,
    amount: options?.amount,
    currency: options?.currency
  });
  const reqOpts = redeemGiftCard(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          orderId: "$[0]",
          giftCardCode: "$[1].giftCardCode",
          amount: "$[1].amount",
          currency: "$[1].currency"
        },
        singleArgumentUnchanged: false
      },
      ["orderId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-order-billing-order-billing.public.ts
function getOrderRefundability3(httpClient) {
  return (orderId) => getOrderRefundability2(
    orderId,
    // @ts-ignore
    { httpClient }
  );
}
function calculateRefund3(httpClient) {
  return (orderId, options) => calculateRefund2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function refundPayments3(httpClient) {
  return (orderId, options) => refundPayments2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function authorizeChargeWithSavedPaymentMethod3(httpClient) {
  return (orderId, options) => authorizeChargeWithSavedPaymentMethod2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function voidAuthorizedPayments3(httpClient) {
  return (orderId, options) => voidAuthorizedPayments2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function captureAuthorizedPayments3(httpClient) {
  return (orderId, options) => captureAuthorizedPayments2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function generateReceipts3(httpClient) {
  return (orderId, options) => generateReceipts2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function redeemGiftCard3(httpClient) {
  return (orderId, options) => redeemGiftCard2(
    orderId,
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/ecom-v1-order-billing-order-billing.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var getOrderRefundability4 = /* @__PURE__ */ createRESTModule(getOrderRefundability3);
var calculateRefund4 = /* @__PURE__ */ createRESTModule(calculateRefund3);
var refundPayments4 = /* @__PURE__ */ createRESTModule(refundPayments3);
var authorizeChargeWithSavedPaymentMethod4 = /* @__PURE__ */ createRESTModule(authorizeChargeWithSavedPaymentMethod3);
var voidAuthorizedPayments4 = /* @__PURE__ */ createRESTModule(voidAuthorizedPayments3);
var captureAuthorizedPayments4 = /* @__PURE__ */ createRESTModule(captureAuthorizedPayments3);
var generateReceipts4 = /* @__PURE__ */ createRESTModule(generateReceipts3);
var redeemGiftCard4 = /* @__PURE__ */ createRESTModule(redeemGiftCard3);
export {
  ActionType,
  AuthorizationCaptureStatus,
  AuthorizationVoidStatus,
  ChargebackStatus,
  DurationUnit,
  ExternalRefundStatus,
  ManuallyRefundableReason,
  MembershipPaymentStatus,
  NonRefundableReason,
  Reason,
  RefundStatus,
  RuleType,
  ScheduledAction,
  TransactionStatus,
  authorizeChargeWithSavedPaymentMethod4 as authorizeChargeWithSavedPaymentMethod,
  calculateRefund4 as calculateRefund,
  captureAuthorizedPayments4 as captureAuthorizedPayments,
  generateReceipts4 as generateReceipts,
  getOrderRefundability4 as getOrderRefundability,
  redeemGiftCard4 as redeemGiftCard,
  refundPayments4 as refundPayments,
  voidAuthorizedPayments4 as voidAuthorizedPayments
};
//# sourceMappingURL=index.mjs.map