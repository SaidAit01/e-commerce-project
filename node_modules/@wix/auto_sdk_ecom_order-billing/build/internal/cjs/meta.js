"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// meta.ts
var meta_exports = {};
__export(meta_exports, {
  authorizeChargeWithSavedPaymentMethod: () => authorizeChargeWithSavedPaymentMethod2,
  calculateRefund: () => calculateRefund2,
  captureAuthorizedPayments: () => captureAuthorizedPayments2,
  generateReceipts: () => generateReceipts2,
  getOrderRefundability: () => getOrderRefundability2,
  redeemGiftCard: () => redeemGiftCard2,
  refundPayments: () => refundPayments2,
  voidAuthorizedPayments: () => voidAuthorizedPayments2
});
module.exports = __toCommonJS(meta_exports);

// src/ecom-v1-order-billing-order-billing.http.ts
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/order-billing/v1",
        destPath: "/v1/order-billing"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/order-billing",
        destPath: "/v1/order-billing"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/v1/order-billing",
        destPath: "/v1/order-billing"
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/order-billing",
        destPath: "/v1/order-billing"
      }
    ]
  };
  return (0, import_rest_modules.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-billing";
function getOrderRefundability(payload) {
  function __getOrderRefundability({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.GetOrderRefundability",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/get-order-refundability",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __getOrderRefundability;
}
function calculateRefund(payload) {
  function __calculateRefund({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.CalculateRefund",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/calculate-refund",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __calculateRefund;
}
function refundPayments(payload) {
  function __refundPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.RefundPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/refund-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "refund.createdDate" },
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __refundPayments;
}
function authorizeChargeWithSavedPaymentMethod(payload) {
  function __authorizeChargeWithSavedPaymentMethod({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.AuthorizeChargeWithSavedPaymentMethod",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/authorize-charge-with-saved-payment-method",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "payment.createdDate" },
            { path: "payment.updatedDate" },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            { path: "payment.regularPaymentDetails.chargebacks.createdDate" },
            { path: "payment.regularPaymentDetails.chargebacks.updatedDate" },
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __authorizeChargeWithSavedPaymentMethod;
}
function voidAuthorizedPayments(payload) {
  function __voidAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.VoidAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/void-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __voidAuthorizedPayments;
}
function captureAuthorizedPayments(payload) {
  function __captureAuthorizedPayments({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.CaptureAuthorizedPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/capture-authorized-payments",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __captureAuthorizedPayments;
}
function generateReceipts(payload) {
  function __generateReceipts({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.GenerateReceipts",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/generate-receipts",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __generateReceipts;
}
function redeemGiftCard(payload) {
  function __redeemGiftCard({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_billing",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.billing.v1.OrderBillingService.RedeemGiftCard",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
        protoPath: "/v1/order-billing/redeem-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" },
            { path: "payment.createdDate" },
            { path: "payment.updatedDate" },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            { path: "payment.regularPaymentDetails.chargebacks.createdDate" },
            { path: "payment.regularPaymentDetails.chargebacks.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __redeemGiftCard;
}

// src/ecom-v1-order-billing-order-billing.meta.ts
function getOrderRefundability2() {
  const payload = {};
  const getRequestOptions = getOrderRefundability(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/get-order-refundability",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function calculateRefund2() {
  const payload = {};
  const getRequestOptions = calculateRefund(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/calculate-refund",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function refundPayments2() {
  const payload = {};
  const getRequestOptions = refundPayments(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/refund-payments",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function authorizeChargeWithSavedPaymentMethod2() {
  const payload = {};
  const getRequestOptions = authorizeChargeWithSavedPaymentMethod(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/authorize-charge-with-saved-payment-method",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function voidAuthorizedPayments2() {
  const payload = {};
  const getRequestOptions = voidAuthorizedPayments(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/void-authorized-payments",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function captureAuthorizedPayments2() {
  const payload = {};
  const getRequestOptions = captureAuthorizedPayments(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/capture-authorized-payments",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function generateReceipts2() {
  const payload = {};
  const getRequestOptions = generateReceipts(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/generate-receipts",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function redeemGiftCard2() {
  const payload = {};
  const getRequestOptions = redeemGiftCard(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/order-billing/redeem-gift-card",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  authorizeChargeWithSavedPaymentMethod,
  calculateRefund,
  captureAuthorizedPayments,
  generateReceipts,
  getOrderRefundability,
  redeemGiftCard,
  refundPayments,
  voidAuthorizedPayments
});
//# sourceMappingURL=meta.js.map