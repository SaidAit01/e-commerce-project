import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { V as V3Product, C as CreateProductOptions, a as CreateProductApplicationErrors, b as CreateProductValidationErrors, P as ProductWithInventory, c as CreateProductWithInventoryOptions, d as CreateProductWithInventoryResponse, e as CreateProductWithInventoryApplicationErrors, f as CreateProductWithInventoryValidationErrors, U as UpdateProduct, g as UpdateProductOptions, h as UpdateProductApplicationErrors, i as UpdateProductValidationErrors, j as UpdateProductWithInventoryProduct, k as UpdateProductWithInventoryOptions, l as UpdateProductWithInventoryResponse, m as UpdateProductWithInventoryApplicationErrors, n as UpdateProductWithInventoryValidationErrors, B as BulkCreateProductsOptions, o as BulkCreateProductsResponse, p as BulkCreateProductsApplicationErrors, q as BulkCreateProductsValidationErrors, r as BulkCreateProductsWithInventoryOptions, s as BulkCreateProductsWithInventoryResponse, t as BulkCreateProductsWithInventoryApplicationErrors, u as BulkCreateProductsWithInventoryValidationErrors, v as V3MaskedProduct, w as BulkUpdateProductsOptions, x as BulkUpdateProductsResponse, y as BulkUpdateProductsApplicationErrors, z as BulkUpdateProductsValidationErrors, M as MaskedProductWithInventory, A as BulkUpdateProductsWithInventoryOptions, D as BulkUpdateProductsWithInventoryResponse, E as BulkUpdateProductsWithInventoryApplicationErrors, F as BulkUpdateProductsWithInventoryValidationErrors, G as BulkUpdateProductsByFilterOptions, H as V3BulkUpdateProductsByFilterResponse, I as BulkUpdateProductsByFilterApplicationErrors, J as BulkUpdateProductsByFilterValidationErrors, K as V3BulkDeleteProductsResponse, L as BulkDeleteProductsValidationErrors, N as BulkDeleteProductsByFilterOptions, O as V3BulkDeleteProductsByFilterResponse, Q as GetProductOptions, R as GetProductApplicationErrors, S as GetProductBySlugOptions, T as V3GetProductBySlugResponse, W as GetProductBySlugApplicationErrors, X as V3ProductSearch, Y as SearchProductsOptions, Z as V3SearchProductsResponse, _ as SearchProductsApplicationErrors, $ as QueryProductsOptions, a0 as ProductsQueryBuilder, a1 as CountProductsOptions, a2 as V3CountProductsResponse, a3 as CountProductsApplicationErrors, a4 as BulkUpdateProductVariantsByFilterOptions, a5 as BulkUpdateProductVariantsByFilterResponse, a6 as BulkUpdateProductVariantsByFilterApplicationErrors, a7 as BulkUpdateProductVariantsByFilterValidationErrors, a8 as BulkAdjustProductVariantsByFilterOptions, a9 as V3BulkAdjustProductVariantsByFilterResponse, aa as BulkAdjustProductVariantsByFilterApplicationErrors, ab as BulkAdjustProductVariantsByFilterValidationErrors, ac as BulkAddInfoSectionsToProductsByFilterOptions, ad as V3BulkAddInfoSectionsToProductsByFilterResponse, ae as BulkAddInfoSectionsToProductsByFilterApplicationErrors, af as V3ProductIdWithRevision, ag as BulkAddInfoSectionsToProductsOptions, ah as V3BulkAddInfoSectionsToProductsResponse, ai as BulkAddInfoSectionsToProductsApplicationErrors, aj as BulkRemoveInfoSectionsFromProductsByFilterOptions, ak as V3BulkRemoveInfoSectionsFromProductsByFilterResponse, al as BulkRemoveInfoSectionsFromProductsOptions, am as V3BulkRemoveInfoSectionsFromProductsResponse, an as BulkAddProductsToCategoriesByFilterOptions, ao as BulkAddProductsToCategoriesByFilterResponse, ap as BulkRemoveProductsFromCategoriesByFilterOptions, aq as BulkRemoveProductsFromCategoriesByFilterResponse, ar as GetAllProductsCategoryResponse, as as ProductCreatedEnvelope, at as ProductDeletedEnvelope, au as ProductUpdatedEnvelope } from './stores-catalog-v3-product-products-v-3.universal-ItZfpeou.js';
export { eG as ActionEvent, gO as AdjustValue, gP as AdjustValueAdjustValueOneOf, f8 as Aggregation, fp as AggregationData, ib as AggregationDataAggregationResults, ic as AggregationDataAggregationResultsResultOneOf, h$ as AggregationDataAggregationResultsScalarResult, g4 as AggregationDateHistogramAggregation, bP as AggregationDateHistogramAggregationInterval, jW as AggregationDateHistogramAggregationIntervalWithLiterals, f9 as AggregationKindOneOf, g7 as AggregationNestedAggregation, hO as AggregationNestedAggregationNestedAggregationItem, hP as AggregationNestedAggregationNestedAggregationItemKindOneOf, bO as AggregationNestedAggregationNestedAggregationType, jV as AggregationNestedAggregationNestedAggregationTypeWithLiterals, g2 as AggregationRangeAggregation, hH as AggregationRangeAggregationRangeBucket, fI as AggregationResults, i9 as AggregationResultsDateHistogramResults, i8 as AggregationResultsGroupByValueResults, hX as AggregationResultsNestedAggregationResults, hY as AggregationResultsNestedAggregationResultsResultOneOf, ia as AggregationResultsNestedResults, h_ as AggregationResultsRangeResults, fJ as AggregationResultsResultOneOf, fw as AggregationResultsScalarResult, hZ as AggregationResultsValueResults, g3 as AggregationScalarAggregation, bs as AggregationType, jz as AggregationTypeWithLiterals, g0 as AggregationValueAggregation, hI as AggregationValueAggregationIncludeMissingValuesOptions, bM as AggregationValueAggregationMissingValues, jT as AggregationValueAggregationMissingValuesWithLiterals, g1 as AggregationValueAggregationOptionsOneOf, bL as AggregationValueAggregationSortDirection, jS as AggregationValueAggregationSortDirectionWithLiterals, bK as AggregationValueAggregationSortType, jR as AggregationValueAggregationSortTypeWithLiterals, aZ as Alignment, j4 as AlignmentWithLiterals, cS as AnchorData, eO as App, cY as AppEmbedData, cZ as AppEmbedDataAppDataOneOf, a$ as AppType, j6 as AppTypeWithLiterals, gp as ApplicationError, aV as AspectRatio, j0 as AspectRatioWithLiterals, dg as AudioData, bG as AvailabilityStatus, jN as AvailabilityStatusWithLiterals, cI as Background, cJ as BackgroundBackgroundOneOf, aR as BackgroundType, iY as BackgroundTypeWithLiterals, iy as BaseEventMetadata, dj as BlockquoteData, c_ as BookingData, bY as Border, de as BorderColors, dN as Brand, e1 as BreadCrumb, e0 as BreadcrumbsInfo, gq as BulkActionMetadata, gB as BulkAddInfoSectionsToProductsByFilterRequest, gC as BulkAddInfoSectionsToProductsByFilterResponse, gE as BulkAddInfoSectionsToProductsRequest, gG as BulkAddInfoSectionsToProductsResponse, iu as BulkAddProductsToCategoriesByFilterRequest, gN as BulkAdjustProductVariantsByFilterRequest, bR as BulkAdjustProductVariantsByFilterRequestRoundingStrategy, jY as BulkAdjustProductVariantsByFilterRequestRoundingStrategyWithLiterals, gS as BulkAdjustProductVariantsByFilterResponse, hj as BulkCreateProductsRequest, hn as BulkCreateProductsWithInventoryRequest, gz as BulkDeleteProductsByFilterRequest, gA as BulkDeleteProductsByFilterResponse, gw as BulkDeleteProductsRequest, gx as BulkDeleteProductsResponse, hw as BulkDeleteProductsResponseBulkProductResult, gT as BulkInventoryItemAction, hd as BulkInventoryItemResult, hc as BulkInventoryItemResults, gy as BulkProductResult, ho as BulkProductResults, gH as BulkRemoveInfoSectionsFromProductsByFilterRequest, gI as BulkRemoveInfoSectionsFromProductsByFilterResponse, gJ as BulkRemoveInfoSectionsFromProductsRequest, gK as BulkRemoveInfoSectionsFromProductsResponse, iv as BulkRemoveProductsFromCategoriesByFilterRequest, ij as BulkUpdateProductVariantsByFilterRequest, gu as BulkUpdateProductsByFilterRequest, gv as BulkUpdateProductsByFilterResponse, hp as BulkUpdateProductsRequest, hq as BulkUpdateProductsWithInventoryRequest, gL as BulkUpdateVariantsByFilterRequest, gM as BulkUpdateVariantsByFilterResponse, di as BulletedListData, bX as ButtonData, ay as ButtonDataType, iF as ButtonDataTypeWithLiterals, d0 as ButtonStyles, gY as CalculateProductInventorPreorderStatusAsyncRequest, gZ as CalculateProductInventorPreorderStatusAsyncResponse, dk as CaptionData, d3 as CardStyles, hk as CatalogV3BulkProductResult, dd as CellStyle, b6 as ChoiceType, jd as ChoiceTypeWithLiterals, dD as ChoicesSettings, c7 as CodeBlockData, d9 as CollapsibleListData, cT as ColorData, bZ as Colors, fY as CommonAggregation, hU as CommonAggregationData, hN as CommonAggregationDateHistogramAggregation, fZ as CommonAggregationKindOneOf, hQ as CommonAggregationNestedAggregation, hL as CommonAggregationRangeAggregation, hM as CommonAggregationScalarAggregation, bC as CommonAggregationType, jJ as CommonAggregationTypeWithLiterals, hJ as CommonAggregationValueAggregation, hK as CommonAggregationValueAggregationOptionsOneOf, hf as CommonBulkActionMetadata, hR as CommonCursorPaging, hS as CommonCursorPagingMetadata, ie as CommonCursorQuery, ig as CommonCursorQueryPagingMethodOneOf, hC as CommonCursorSearch, hD as CommonCursorSearchPagingMethodOneOf, hT as CommonCursors, go as CommonItemMetadata, bz as CommonScalarType, jG as CommonScalarTypeWithLiterals, ga as CommonSearchDetails, bI as CommonSearchDetailsMode, jP as CommonSearchDetailsModeWithLiterals, j_ as CommonSearchWithEntityContext, bv as CommonSortOrder, jC as CommonSortOrderWithLiterals, fX as CommonSorting, dH as ConnectedModifier, dL as ConnectedModifierChoice, dM as ConnectedModifierChoiceValueOneOf, dI as ConnectedModifierModifierSettingsOneOf, dB as ConnectedOption, dE as ConnectedOptionChoice, dF as ConnectedOptionChoiceValueOneOf, dC as ConnectedOptionOptionSettingsOneOf, gj as CountProductsRequest, gk as CountProductsResponse, g_ as CreateProductRequest, g$ as CreateProductResponse, h2 as CreateProductWithInventoryRequest, aH as Crop, iO as CropWithLiterals, fl as CursorPaging, fn as CursorPagingMetadata, fP as CursorQuery, fQ as CursorQueryPagingMethodOneOf, f5 as CursorSearch, f6 as CursorSearchPagingMethodOneOf, fo as Cursors, eS as CustomTag, fg as DateHistogramAggregation, bB as DateHistogramAggregationInterval, jI as DateHistogramAggregationIntervalWithLiterals, fE as DateHistogramResult, fG as DateHistogramResults, i7 as DateHistogramResultsDateHistogramResult, cQ as Decoration, cR as DecorationDataOneOf, aS as DecorationType, iZ as DecorationTypeWithLiterals, ex as DeleteByFilterOperation, ew as DeleteByIdsOperation, f2 as DeleteProductRequest, f3 as DeleteProductResponse, fU as DeprecatedSearchProductsWithOffsetRequest, gc as DeprecatedSearchProductsWithOffsetResponse, cO as Design, db as Dimensions, b1 as Direction, j8 as DirectionWithLiterals, bg as DiscountType, jn as DiscountTypeWithLiterals, c9 as DividerData, aD as DividerDataAlignment, iK as DividerDataAlignmentWithLiterals, gl as DoNotCallBulkCreateProductsRequest, gm as DoNotCallBulkCreateProductsResponse, gr as DoNotCallBulkUpdateProductsRequest, gt as DoNotCallBulkUpdateProductsResponse, eT as DoNotCallCreateProductRequest, eU as DoNotCallCreateProductResponse, e_ as DoNotCallUpdateProductRequest, e$ as DoNotCallUpdateProductResponse, ev as DocumentImage, eu as DocumentPayload, dn as DocumentStyle, es as DocumentUpdateOperation, eA as DomainEvent, eB as DomainEventBodyOneOf, eV as DuplicateMediaIdAssignedToProduct, d7 as EmbedData, eH as Empty, eC as EntityCreatedEvent, eF as EntityDeletedEvent, eE as EntityUpdatedEvent, bh as Enum, jo as EnumWithLiterals, c$ as EventData, iz as EventMetadata, bH as EventType, jO as EventTypeWithLiterals, fO as EventuallyConsistentQueryProductsRequest, fR as EventuallyConsistentQueryProductsResponse, ei as ExtendedFields, eR as File, ca as FileData, cb as FileSource, cc as FileSourceDataOneOf, be as FileType, jl as FileTypeWithLiterals, dU as FixedMonetaryAmount, cW as FontSizeData, aT as FontType, i_ as FontTypeWithLiterals, dJ as FreeTextSettings, gD as FulfillerDeleted, cp as GIF, co as GIFData, aJ as GIFType, iQ as GIFTypeWithLiterals, ce as GalleryData, ck as GalleryOptions, cl as GalleryOptionsLayout, iw as GetAllProductsCategoryRequest, eY as GetProductBySlugRequest, eZ as GetProductBySlugResponse, eW as GetProductRequest, eX as GetProductResponse, cH as Gradient, g8 as GroupByAggregation, g9 as GroupByAggregationKindOneOf, fF as GroupByValueResults, i0 as GroupByValueResultsNestedValueAggregationResult, cr as HTMLData, cs as HTMLDataDataOneOf, cq as HeadingData, c2 as Height, eK as IdentificationData, eL as IdentificationDataIdOneOf, cg as Image, ct as ImageData, cv as ImageDataStyles, d1 as ImageStyles, fb as IncludeMissingValuesOptions, et as IndexDocument, dO as InfoSection, b0 as InitialExpandedItems, j7 as InitialExpandedItemsWithLiterals, br as Interval, jy as IntervalWithLiterals, hm as InvalidDigitalFileIds, eM as InvalidateCache, eN as InvalidateCacheGetByOneOf, dV as Inventory, b8 as InventoryAvailabilityStatus, jf as InventoryAvailabilityStatusWithLiterals, gU as InventoryItem, h7 as InventoryItemComposite, h8 as InventoryItemCompositeTrackingMethodOneOf, gV as InventoryItemTrackingMethodOneOf, eh as InventoryStatus, ci as Item, cj as ItemDataOneOf, he as ItemMetadata, cm as ItemStyle, dy as Keyword, a_ as Layout, dl as LayoutCellData, aF as LayoutType, iM as LayoutTypeWithLiterals, j5 as LayoutWithLiterals, aB as LineStyle, iI as LineStyleWithLiterals, c4 as Link, cU as LinkData, c5 as LinkDataOneOf, cw as LinkPreviewData, cx as LinkPreviewDataStyles, df as ListValue, cy as MapData, cz as MapSettings, aM as MapType, iT as MapTypeWithLiterals, gs as MaskedProduct, bc as MeasurementUnit, jj as MeasurementUnitWithLiterals, dq as Media, dw as MediaItemsInfo, b4 as MediaType, jb as MediaTypeWithLiterals, cV as MentionData, eJ as MessageEnvelope, dm as Metadata, ep as MinVariantPriceInfo, bo as MissingValues, jv as MissingValuesWithLiterals, bt as Mode, jA as ModeWithLiterals, dK as ModifierChoicesSettings, b7 as ModifierRenderType, je as ModifierRenderTypeWithLiterals, dG as MultipleColors, fj as NestedAggregation, fh as NestedAggregationItem, fi as NestedAggregationItemKindOneOf, g5 as NestedAggregationNestedAggregationItem, g6 as NestedAggregationNestedAggregationItemKindOneOf, bA as NestedAggregationNestedAggregationType, jH as NestedAggregationNestedAggregationTypeWithLiterals, fs as NestedAggregationResults, ft as NestedAggregationResultsResultOneOf, bq as NestedAggregationType, jx as NestedAggregationTypeWithLiterals, fB as NestedResultValue, fC as NestedResultValueResultOneOf, fH as NestedResults, i4 as NestedResultsNestedResultValue, i5 as NestedResultsNestedResultValueResultOneOf, i2 as NestedResultsRangeResult, i6 as NestedResultsResults, i3 as NestedResultsScalarResult, i1 as NestedResultsValueResult, fx as NestedValueAggregationResult, bU as Node, bV as NodeDataOneOf, bW as NodeStyle, av as NodeType, iC as NodeTypeWithLiterals, b3 as NullValue, ja as NullValueWithLiterals, d8 as Oembed, cD as Option, e5 as OptionChoice, e6 as OptionChoiceIds, e7 as OptionChoiceNames, h9 as OptionChoiceReferences, cL as OptionDesign, cG as OptionLayout, dh as OrderedListData, aG as Orientation, iN as OrientationWithLiterals, cd as PDFSettings, eP as Page, gd as PagingMetadata, cA as ParagraphData, cC as Permissions, dW as PhysicalProperties, aX as Placement, j2 as PlacementWithLiterals, fV as PlatformOffsetSearch, fW as PlatformOffsetSearchPagingMethodOneOf, gb as PlatformPaging, d6 as PlaybackOptions, b_ as PluginContainerData, ax as PluginContainerDataAlignment, iE as PluginContainerDataAlignmentWithLiterals, b$ as PluginContainerDataWidth, c0 as PluginContainerDataWidthDataOneOf, cM as Poll, cB as PollData, cN as PollDataLayout, cK as PollDesign, cF as PollLayout, aQ as PollLayoutDirection, iX as PollLayoutDirectionWithLiterals, aP as PollLayoutType, iW as PollLayoutTypeWithLiterals, cE as PollSettings, aU as Position, i$ as PositionWithLiterals, gW as PreorderInfo, b9 as PreorderStatus, jg as PreorderStatusWithLiterals, e8 as PriceInfo, eb as PricePerUnit, dZ as PricePerUnitRange, d_ as PricePerUnitRangePricePerUnit, dX as PricePerUnitSettings, dT as PriceRange, d4 as PricingData, gX as Product, dQ as ProductCategoriesInfo, dR as ProductCategory, dS as ProductCategoryIdsInfo, gF as ProductIdWithRevision, dr as ProductMedia, dt as ProductMediaMediaOneOf, ds as ProductMediaSetByOneOf, b5 as ProductOptionRenderType, jc as ProductOptionRenderTypeWithLiterals, ba as ProductPreorderAvailability, jh as ProductPreorderAvailabilityWithLiterals, bb as ProductType, ji as ProductTypeWithLiterals, gf as ProductVariantIds, gi as ProductVariants, h3 as ProductWithInventoryTypedPropertiesOneOf, iB as ProductsQueryResult, jZ as QueryProductsApplicationErrors, fS as QueryProductsRequest, fT as QueryProductsResponse, fe as RangeAggregation, f_ as RangeAggregationRangeBucket, fr as RangeAggregationResult, fa as RangeBucket, fz as RangeResult, fv as RangeResults, hW as RangeResultsRangeAggregationResult, c6 as Rel, bu as RequestedFields, jB as RequestedFieldsWithLiterals, aW as Resizing, j1 as ResizingWithLiterals, eD as RestoreInfo, fD as Results, ge as RetrieveVariantsRequest, gh as RetrieveVariantsResponse, e9 as RevenueDetails, dP as Ribbon, d2 as RibbonStyles, bT as RichContent, bF as RoundingStrategy, jM as RoundingStrategyWithLiterals, ff as ScalarAggregation, fA as ScalarResult, bp as ScalarType, jw as ScalarTypeWithLiterals, fk as SearchDetails, bD as SearchDetailsMode, jK as SearchDetailsModeWithLiterals, eI as SearchIndexingNotification, f4 as SearchProductsRequest, fm as SearchProductsResponse, fL as SearchRelated, fM as SearchRelatedDetails, fK as SearchRelatedProductsRequest, fN as SearchRelatedProductsResponse, ed as SecuredMedia, dx as SeoSchema, dA as Settings, bk as SingleEntityOpsRequestedFields, jr as SingleEntityOpsRequestedFieldsWithLiterals, bn as SortDirection, ju as SortDirectionWithLiterals, bl as SortOrder, js as SortOrderWithLiterals, bm as SortType, jt as SortTypeWithLiterals, f7 as Sorting, aK as Source, iR as SourceWithLiterals, c1 as Spoiler, cX as SpoilerData, bi as State, jp as StateWithLiterals, c3 as Styles, cu as StylesBorder, aL as StylesPosition, iS as StylesPositionWithLiterals, ek as Subscription, el as SubscriptionCyclesOneOf, ej as SubscriptionDetails, em as SubscriptionDiscount, en as SubscriptionDiscountDiscountOneOf, bf as SubscriptionFrequency, jm as SubscriptionFrequencyWithLiterals, ef as SubscriptionPrice, eg as SubscriptionPricePerUnit, ee as SubscriptionPricesInfo, dc as TableCellData, da as TableData, dz as Tag, az as Target, iG as TargetWithLiterals, aA as TextAlignment, iH as TextAlignmentWithLiterals, cP as TextData, dp as TextNodeStyle, c8 as TextStyle, dv as Thumbnail, cn as Thumbnails, aI as ThumbnailsAlignment, iP as ThumbnailsAlignmentWithLiterals, ix as TreeReference, aY as Type, j3 as TypeWithLiterals, eQ as URI, gQ as UnsignedAdjustValue, gR as UnsignedAdjustValueAdjustValueOneOf, f1 as UnsupportedFieldMasks, ey as UpdateByFilterOperation, eq as UpdateDocumentsEvent, er as UpdateDocumentsEventOperationOneOf, ez as UpdateExistingOperation, hg as UpdateProductRequest, hh as UpdateProductResponse, hi as UpdateProductWithInventoryRequest, cf as V1Media, il as V3AdjustValue, im as V3AdjustValueAdjustValueOneOf, iq as V3BulkAddInfoSectionsToProductsByFilterRequest, ir as V3BulkAddInfoSectionsToProductsRequest, ik as V3BulkAdjustProductVariantsByFilterRequest, hx as V3BulkDeleteProductsByFilterRequest, hv as V3BulkDeleteProductsRequest, gn as V3BulkProductResult, is as V3BulkRemoveInfoSectionsFromProductsByFilterRequest, it as V3BulkRemoveInfoSectionsFromProductsRequest, hr as V3BulkUpdateProductsByFilterRequest, ii as V3CountProductsRequest, ht as V3DeleteProductRequest, hu as V3DeleteProductResponse, hA as V3GetProductBySlugRequest, hy as V3GetProductRequest, hz as V3GetProductResponse, ha as V3OptionChoiceIds, hb as V3OptionChoiceNames, iA as V3ProductSearchSpec, bS as V3ProductTypedPropertiesOneOf, id as V3QueryProductsRequest, ih as V3QueryProductsResponse, hB as V3SearchProductsRequest, io as V3UnsignedAdjustValue, ip as V3UnsignedAdjustValueAdjustValueOneOf, h4 as V3VariantsInfo, fc as ValueAggregation, f$ as ValueAggregationIncludeMissingValuesOptions, by as ValueAggregationMissingValues, jF as ValueAggregationMissingValuesWithLiterals, fd as ValueAggregationOptionsOneOf, fq as ValueAggregationResult, bx as ValueAggregationSortDirection, jE as ValueAggregationSortDirectionWithLiterals, bw as ValueAggregationSortType, jD as ValueAggregationSortTypeWithLiterals, fy as ValueResult, fu as ValueResults, hV as ValueResultsValueAggregationResult, e3 as Variant, ec as VariantDigitalProperties, h1 as VariantNotAlignedWithProduct, ea as VariantPhysicalProperties, eo as VariantSummary, e4 as VariantTypedPropertiesOneOf, h5 as VariantWithInventory, h6 as VariantWithInventoryTypedPropertiesOneOf, gg as VariantsCursorPaging, e2 as VariantsInfo, h0 as VariantsNotAlignedWithProduct, bE as VariantsOpsRequestedFields, jL as VariantsOpsRequestedFieldsWithLiterals, f0 as VariantsRemoved, b2 as VerticalAlignment, j9 as VerticalAlignmentWithLiterals, ch as Video, d5 as VideoData, du as VideoResolution, aE as ViewMode, iL as ViewModeWithLiterals, aN as ViewRole, iU as ViewRoleWithLiterals, aO as VoteRole, iV as VoteRoleWithLiterals, bj as WebhookIdentityType, jq as WebhookIdentityTypeWithLiterals, d$ as WeightMeasurementUnitInfo, dY as WeightRange, bd as WeightUnit, jk as WeightUnitWithLiterals, aC as Width, aw as WidthType, iD as WidthTypeWithLiterals, iJ as WidthWithLiterals, hF as WixCommonAggregation, hG as WixCommonAggregationKindOneOf, bQ as WixCommonAggregationType, jX as WixCommonAggregationTypeWithLiterals, hl as WixCommonItemMetadata, bN as WixCommonScalarType, jU as WixCommonScalarTypeWithLiterals, hs as WixCommonSearchDetails, bJ as WixCommonSortOrder, jQ as WixCommonSortOrderWithLiterals, hE as WixCommonSorting } from './stores-catalog-v3-product-products-v-3.universal-ItZfpeou.js';

declare function createProduct$1(httpClient: HttpClient): CreateProductSignature;
interface CreateProductSignature {
    /**
     * Creates a new product.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     * @returns Created product.
     */
    (product: NonNullablePaths<V3Product, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: CreateProductOptions): Promise<NonNullablePaths<V3Product, `physicalProperties.pricePerUnit.quantity` | `physicalProperties.pricePerUnit.measurementUnit` | `physicalProperties.shippingWeightRange.minValue` | `physicalProperties.shippingWeightRange.maxValue` | `physicalProperties.pricePerUnitRange.minValue.value` | `physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `media.main._id` | `media.main.url` | `media.main.mediaType` | `media.main.thumbnail.url` | `media.main.thumbnail.height` | `media.main.thumbnail.width` | `media.main.uploadId` | `media.itemsInfo.items` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `options` | `options.${number}.optionRenderType` | `modifiers` | `modifiers.${number}.freeTextSettings.minCharCount` | `modifiers.${number}.freeTextSettings.maxCharCount` | `modifiers.${number}.freeTextSettings.title` | `modifiers.${number}.modifierRenderType` | `modifiers.${number}.mandatory` | `infoSections` | `directCategoriesInfo.categories` | `directCategoriesInfo.categories.${number}._id` | `costRange.minValue.amount` | `inventory.availabilityStatus` | `inventory.preorderStatus` | `inventory.preorderAvailability` | `productType` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `variantsInfo.variants` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `variantsInfo.variants.${number}.revenueDetails.profitMargin` | `variantsInfo.variants.${number}.inventoryStatus.inStock` | `variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.autoRenewal` | `subscriptionDetails.subscriptions.${number}.billingCycles` | `subscriptionDetails.subscriptions.${number}.title` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.discount.amountOff` | `subscriptionDetails.subscriptions.${number}.discount.percentOff` | `subscriptionDetails.subscriptions.${number}.discount.type` | `variantSummary.variantCount`, 7> & {
        __applicationErrorsType?: CreateProductApplicationErrors;
        __validationErrorsType?: CreateProductValidationErrors;
    }>;
}
declare function createProductWithInventory$1(httpClient: HttpClient): CreateProductWithInventorySignature;
interface CreateProductWithInventorySignature {
    /**
     * Creates a new product, and can create the product's inventory in the variants' default locations.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    (product: NonNullablePaths<ProductWithInventory, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: CreateProductWithInventoryOptions): Promise<NonNullablePaths<CreateProductWithInventoryResponse, `product.physicalProperties.pricePerUnit.quantity` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.physicalProperties.shippingWeightRange.minValue` | `product.physicalProperties.shippingWeightRange.maxValue` | `product.physicalProperties.pricePerUnitRange.minValue.value` | `product.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `product.media.main._id` | `product.media.main.url` | `product.media.main.mediaType` | `product.media.main.thumbnail.url` | `product.media.main.thumbnail.height` | `product.media.main.thumbnail.width` | `product.media.main.uploadId` | `product.media.itemsInfo.items` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain` | `product.options` | `product.options.${number}.optionRenderType` | `product.modifiers` | `product.modifiers.${number}.freeTextSettings.minCharCount` | `product.modifiers.${number}.freeTextSettings.maxCharCount` | `product.modifiers.${number}.freeTextSettings.title` | `product.modifiers.${number}.modifierRenderType` | `product.modifiers.${number}.mandatory` | `product.infoSections` | `product.directCategoriesInfo.categories` | `product.directCategoriesInfo.categories.${number}._id` | `product.costRange.minValue.amount` | `product.inventory.availabilityStatus` | `product.inventory.preorderStatus` | `product.inventory.preorderAvailability` | `product.productType` | `product.breadcrumbsInfo.breadcrumbs` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `product.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `product.variantsInfo.variants` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `product.variantsInfo.variants.${number}.revenueDetails.profitMargin` | `product.variantsInfo.variants.${number}.inventoryStatus.inStock` | `product.variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `product.subscriptionDetails.subscriptions` | `product.subscriptionDetails.subscriptions.${number}.autoRenewal` | `product.subscriptionDetails.subscriptions.${number}.billingCycles` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.discount.amountOff` | `product.subscriptionDetails.subscriptions.${number}.discount.percentOff` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.variantSummary.variantCount` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 8> & {
        __applicationErrorsType?: CreateProductWithInventoryApplicationErrors;
        __validationErrorsType?: CreateProductWithInventoryValidationErrors;
    }>;
}
declare function updateProduct$1(httpClient: HttpClient): UpdateProductSignature;
interface UpdateProductSignature {
    /**
     * Updates a product.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + To update array fields like `options`, `modifiers`, `variantsInfo.variants`, and any others, you must pass the entire existing array. Passing only the changed item will overwrite the entire array, not just merge the single change.
     * > + To update `variantsInfo.variants` you must also pass `options` and vise versa. This is because variants and options are mutually dependant and must be aligned.
     * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * > + Updating media per variant is not supported. Instead, assign media items to product option choices using the `linkedMedia` field. You must use preexisting product media.
     * @param - Product ID.
     * @returns Updated product.
     */
    (_id: string, product: NonNullablePaths<UpdateProduct, `modifiers.${number}.choicesSettings.choices` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `revision` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: UpdateProductOptions): Promise<NonNullablePaths<V3Product, `physicalProperties.pricePerUnit.quantity` | `physicalProperties.pricePerUnit.measurementUnit` | `physicalProperties.shippingWeightRange.minValue` | `physicalProperties.shippingWeightRange.maxValue` | `physicalProperties.pricePerUnitRange.minValue.value` | `physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `media.main._id` | `media.main.url` | `media.main.mediaType` | `media.main.thumbnail.url` | `media.main.thumbnail.height` | `media.main.thumbnail.width` | `media.main.uploadId` | `media.itemsInfo.items` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `options` | `options.${number}.optionRenderType` | `modifiers` | `modifiers.${number}.freeTextSettings.minCharCount` | `modifiers.${number}.freeTextSettings.maxCharCount` | `modifiers.${number}.freeTextSettings.title` | `modifiers.${number}.modifierRenderType` | `modifiers.${number}.mandatory` | `infoSections` | `directCategoriesInfo.categories` | `directCategoriesInfo.categories.${number}._id` | `costRange.minValue.amount` | `inventory.availabilityStatus` | `inventory.preorderStatus` | `inventory.preorderAvailability` | `productType` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `variantsInfo.variants` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `variantsInfo.variants.${number}.revenueDetails.profitMargin` | `variantsInfo.variants.${number}.inventoryStatus.inStock` | `variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.autoRenewal` | `subscriptionDetails.subscriptions.${number}.billingCycles` | `subscriptionDetails.subscriptions.${number}.title` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.discount.amountOff` | `subscriptionDetails.subscriptions.${number}.discount.percentOff` | `subscriptionDetails.subscriptions.${number}.discount.type` | `variantSummary.variantCount`, 7> & {
        __applicationErrorsType?: UpdateProductApplicationErrors;
        __validationErrorsType?: UpdateProductValidationErrors;
    }>;
}
declare function updateProductWithInventory$1(httpClient: HttpClient): UpdateProductWithInventorySignature;
interface UpdateProductWithInventorySignature {
    /**
     * Updates a product.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + To update array fields like `options`, `modifiers`, `variantsInfo.variants`, and any others, you must pass the entire existing array. Passing only the changed item will overwrite the entire array, not just merge the single change.
     * > + To update `variantsInfo.variants` you must also pass `options` and vise versa. This is because variants depend on options, and options depend on variants.
     * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     */
    (_id: string, product: NonNullablePaths<UpdateProductWithInventoryProduct, `modifiers.${number}.choicesSettings.choices` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `revision` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: UpdateProductWithInventoryOptions): Promise<NonNullablePaths<UpdateProductWithInventoryResponse, `product.physicalProperties.pricePerUnit.quantity` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.physicalProperties.shippingWeightRange.minValue` | `product.physicalProperties.shippingWeightRange.maxValue` | `product.physicalProperties.pricePerUnitRange.minValue.value` | `product.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `product.media.main._id` | `product.media.main.url` | `product.media.main.mediaType` | `product.media.main.thumbnail.url` | `product.media.main.thumbnail.height` | `product.media.main.thumbnail.width` | `product.media.main.uploadId` | `product.media.itemsInfo.items` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain` | `product.options` | `product.options.${number}.optionRenderType` | `product.modifiers` | `product.modifiers.${number}.freeTextSettings.minCharCount` | `product.modifiers.${number}.freeTextSettings.maxCharCount` | `product.modifiers.${number}.freeTextSettings.title` | `product.modifiers.${number}.modifierRenderType` | `product.modifiers.${number}.mandatory` | `product.infoSections` | `product.directCategoriesInfo.categories` | `product.directCategoriesInfo.categories.${number}._id` | `product.costRange.minValue.amount` | `product.inventory.availabilityStatus` | `product.inventory.preorderStatus` | `product.inventory.preorderAvailability` | `product.productType` | `product.breadcrumbsInfo.breadcrumbs` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `product.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `product.variantsInfo.variants` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `product.variantsInfo.variants.${number}.revenueDetails.profitMargin` | `product.variantsInfo.variants.${number}.inventoryStatus.inStock` | `product.variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `product.subscriptionDetails.subscriptions` | `product.subscriptionDetails.subscriptions.${number}.autoRenewal` | `product.subscriptionDetails.subscriptions.${number}.billingCycles` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.discount.amountOff` | `product.subscriptionDetails.subscriptions.${number}.discount.percentOff` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.variantSummary.variantCount` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 8> & {
        __applicationErrorsType?: UpdateProductWithInventoryApplicationErrors;
        __validationErrorsType?: UpdateProductWithInventoryValidationErrors;
    }>;
}
declare function bulkCreateProducts$1(httpClient: HttpClient): BulkCreateProductsSignature;
interface BulkCreateProductsSignature {
    /**
     * Creates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create.
     */
    (products: NonNullablePaths<V3Product, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>[], options?: BulkCreateProductsOptions): Promise<NonNullablePaths<BulkCreateProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkCreateProductsApplicationErrors;
        __validationErrorsType?: BulkCreateProductsValidationErrors;
    }>;
}
declare function bulkCreateProductsWithInventory$1(httpClient: HttpClient): BulkCreateProductsWithInventorySignature;
interface BulkCreateProductsWithInventorySignature {
    /**
     * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create with inventory.
     */
    (products: NonNullablePaths<ProductWithInventory, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>[], options?: BulkCreateProductsWithInventoryOptions): Promise<NonNullablePaths<BulkCreateProductsWithInventoryResponse, `productResults.results` | `productResults.results.${number}.itemMetadata.originalIndex` | `productResults.results.${number}.itemMetadata.success` | `productResults.results.${number}.itemMetadata.error.code` | `productResults.results.${number}.itemMetadata.error.description` | `productResults.results.${number}.item.inventory.availabilityStatus` | `productResults.results.${number}.item.inventory.preorderStatus` | `productResults.results.${number}.item.inventory.preorderAvailability` | `productResults.results.${number}.item.productType` | `productResults.results.${number}.item.variantSummary.variantCount` | `productResults.bulkActionMetadata.totalSuccesses` | `productResults.bulkActionMetadata.totalFailures` | `productResults.bulkActionMetadata.undetailedFailures` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 7> & {
        __applicationErrorsType?: BulkCreateProductsWithInventoryApplicationErrors;
        __validationErrorsType?: BulkCreateProductsWithInventoryValidationErrors;
    }>;
}
declare function bulkUpdateProducts$1(httpClient: HttpClient): BulkUpdateProductsSignature;
interface BulkUpdateProductsSignature {
    /**
     * Updates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: NonNullablePaths<V3MaskedProduct, `product` | `product._id` | `product.modifiers.${number}.choicesSettings.choices` | `product.options.${number}.choicesSettings.choices` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.revision` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `product.variantsInfo.variants.${number}.price` | `product.variantsInfo.variants.${number}.price.actualPrice`, 9>[], options?: BulkUpdateProductsOptions): Promise<NonNullablePaths<BulkUpdateProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkUpdateProductsApplicationErrors;
        __validationErrorsType?: BulkUpdateProductsValidationErrors;
    }>;
}
declare function bulkUpdateProductsWithInventory$1(httpClient: HttpClient): BulkUpdateProductsWithInventorySignature;
interface BulkUpdateProductsWithInventorySignature {
    /**
     * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: NonNullablePaths<MaskedProductWithInventory, `product` | `product._id` | `product.modifiers.${number}.choicesSettings.choices` | `product.options.${number}.choicesSettings.choices` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.revision` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `product.variantsInfo.variants.${number}.price` | `product.variantsInfo.variants.${number}.price.actualPrice`, 9>[], options?: BulkUpdateProductsWithInventoryOptions): Promise<NonNullablePaths<BulkUpdateProductsWithInventoryResponse, `productResults.results` | `productResults.results.${number}.itemMetadata.originalIndex` | `productResults.results.${number}.itemMetadata.success` | `productResults.results.${number}.itemMetadata.error.code` | `productResults.results.${number}.itemMetadata.error.description` | `productResults.results.${number}.item.inventory.availabilityStatus` | `productResults.results.${number}.item.inventory.preorderStatus` | `productResults.results.${number}.item.inventory.preorderAvailability` | `productResults.results.${number}.item.productType` | `productResults.results.${number}.item.variantSummary.variantCount` | `productResults.bulkActionMetadata.totalSuccesses` | `productResults.bulkActionMetadata.totalFailures` | `productResults.bulkActionMetadata.undetailedFailures` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 7> & {
        __applicationErrorsType?: BulkUpdateProductsWithInventoryApplicationErrors;
        __validationErrorsType?: BulkUpdateProductsWithInventoryValidationErrors;
    }>;
}
declare function bulkUpdateProductsByFilter$1(httpClient: HttpClient): BulkUpdateProductsByFilterSignature;
interface BulkUpdateProductsByFilterSignature {
    /**
     * Updates multiple products, given the provided filter.
     *
     * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
     *
     * > **Note:**
     * > The following fields cannot be updated with this endpoint:
     * > + `slug`
     * > + `options`
     * > + `modifiers`
     * > + `variantsInfo`
     * >
     * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
     */
    (options?: NonNullablePaths<BulkUpdateProductsByFilterOptions, `product` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.title`, 7>): Promise<NonNullablePaths<V3BulkUpdateProductsByFilterResponse, `jobId`, 2> & {
        __applicationErrorsType?: BulkUpdateProductsByFilterApplicationErrors;
        __validationErrorsType?: BulkUpdateProductsByFilterValidationErrors;
    }>;
}
declare function deleteProduct$1(httpClient: HttpClient): DeleteProductSignature;
interface DeleteProductSignature {
    /**
     * Deletes a product and all its variants.
     * @param - Product ID.
     */
    (productId: string): Promise<void>;
}
declare function bulkDeleteProducts$1(httpClient: HttpClient): BulkDeleteProductsSignature;
interface BulkDeleteProductsSignature {
    /**
     * Deletes multiple products.
     * @param - IDs of products to delete.
     */
    (productIds: string[]): Promise<NonNullablePaths<V3BulkDeleteProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __validationErrorsType?: BulkDeleteProductsValidationErrors;
    }>;
}
declare function bulkDeleteProductsByFilter$1(httpClient: HttpClient): BulkDeleteProductsByFilterSignature;
interface BulkDeleteProductsByFilterSignature {
    /**
     * Delete multiple products, given the provided filter.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkDeleteProductsByFilterOptions): Promise<NonNullablePaths<V3BulkDeleteProductsByFilterResponse, `jobId`, 2>>;
}
declare function getProduct$1(httpClient: HttpClient): GetProductSignature;
interface GetProductSignature {
    /**
     * Retrieves a product.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product ID.
     * @returns Product.
     */
    (productId: string, options?: GetProductOptions): Promise<NonNullablePaths<V3Product, `physicalProperties.pricePerUnit.quantity` | `physicalProperties.pricePerUnit.measurementUnit` | `physicalProperties.shippingWeightRange.minValue` | `physicalProperties.shippingWeightRange.maxValue` | `physicalProperties.pricePerUnitRange.minValue.value` | `physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `media.main._id` | `media.main.url` | `media.main.mediaType` | `media.main.thumbnail.url` | `media.main.thumbnail.height` | `media.main.thumbnail.width` | `media.main.uploadId` | `media.itemsInfo.items` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `options` | `options.${number}.optionRenderType` | `modifiers` | `modifiers.${number}.freeTextSettings.minCharCount` | `modifiers.${number}.freeTextSettings.maxCharCount` | `modifiers.${number}.freeTextSettings.title` | `modifiers.${number}.modifierRenderType` | `modifiers.${number}.mandatory` | `infoSections` | `directCategoriesInfo.categories` | `directCategoriesInfo.categories.${number}._id` | `costRange.minValue.amount` | `inventory.availabilityStatus` | `inventory.preorderStatus` | `inventory.preorderAvailability` | `productType` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `variantsInfo.variants` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `variantsInfo.variants.${number}.revenueDetails.profitMargin` | `variantsInfo.variants.${number}.inventoryStatus.inStock` | `variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.autoRenewal` | `subscriptionDetails.subscriptions.${number}.billingCycles` | `subscriptionDetails.subscriptions.${number}.title` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.discount.amountOff` | `subscriptionDetails.subscriptions.${number}.discount.percentOff` | `subscriptionDetails.subscriptions.${number}.discount.type` | `variantSummary.variantCount`, 7> & {
        __applicationErrorsType?: GetProductApplicationErrors;
    }>;
}
declare function getProductBySlug$1(httpClient: HttpClient): GetProductBySlugSignature;
interface GetProductBySlugSignature {
    /**
     * Retrieves a product by slug.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product slug.
     */
    (slug: string, options?: GetProductBySlugOptions): Promise<NonNullablePaths<V3GetProductBySlugResponse, `product.physicalProperties.pricePerUnit.quantity` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.physicalProperties.shippingWeightRange.minValue` | `product.physicalProperties.shippingWeightRange.maxValue` | `product.physicalProperties.pricePerUnitRange.minValue.value` | `product.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `product.media.main._id` | `product.media.main.url` | `product.media.main.mediaType` | `product.media.main.thumbnail.url` | `product.media.main.thumbnail.height` | `product.media.main.thumbnail.width` | `product.media.main.uploadId` | `product.media.itemsInfo.items` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain` | `product.options` | `product.options.${number}.optionRenderType` | `product.modifiers` | `product.modifiers.${number}.freeTextSettings.minCharCount` | `product.modifiers.${number}.freeTextSettings.maxCharCount` | `product.modifiers.${number}.freeTextSettings.title` | `product.modifiers.${number}.modifierRenderType` | `product.modifiers.${number}.mandatory` | `product.infoSections` | `product.directCategoriesInfo.categories` | `product.directCategoriesInfo.categories.${number}._id` | `product.costRange.minValue.amount` | `product.inventory.availabilityStatus` | `product.inventory.preorderStatus` | `product.inventory.preorderAvailability` | `product.productType` | `product.breadcrumbsInfo.breadcrumbs` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `product.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `product.variantsInfo.variants` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `product.variantsInfo.variants.${number}.revenueDetails.profitMargin` | `product.variantsInfo.variants.${number}.inventoryStatus.inStock` | `product.variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `product.subscriptionDetails.subscriptions` | `product.subscriptionDetails.subscriptions.${number}.autoRenewal` | `product.subscriptionDetails.subscriptions.${number}.billingCycles` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.discount.amountOff` | `product.subscriptionDetails.subscriptions.${number}.discount.percentOff` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.variantSummary.variantCount`, 8> & {
        __applicationErrorsType?: GetProductBySlugApplicationErrors;
    }>;
}
declare function searchProducts$1(httpClient: HttpClient): SearchProductsSignature;
interface SearchProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, search expression, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Notes:**
     * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
     * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Search options.
     */
    (search: V3ProductSearch, options?: SearchProductsOptions): Promise<NonNullablePaths<V3SearchProductsResponse, `products` | `products.${number}.physicalProperties.pricePerUnit.quantity` | `products.${number}.physicalProperties.pricePerUnit.measurementUnit` | `products.${number}.physicalProperties.shippingWeightRange.minValue` | `products.${number}.physicalProperties.shippingWeightRange.maxValue` | `products.${number}.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `products.${number}.media.main._id` | `products.${number}.media.main.url` | `products.${number}.media.main.mediaType` | `products.${number}.media.main.uploadId` | `products.${number}.seoData.settings.preventAutoRedirect` | `products.${number}.costRange.minValue.amount` | `products.${number}.inventory.availabilityStatus` | `products.${number}.inventory.preorderStatus` | `products.${number}.inventory.preorderAvailability` | `products.${number}.productType` | `products.${number}.variantSummary.variantCount` | `aggregationData.results` | `aggregationData.results.${number}.scalar.type` | `aggregationData.results.${number}.scalar.value` | `aggregationData.results.${number}.name` | `aggregationData.results.${number}.type` | `aggregationData.results.${number}.fieldPath`, 6> & {
        __applicationErrorsType?: SearchProductsApplicationErrors;
    }>;
}
declare function queryProducts$1(httpClient: HttpClient): QueryProductsSignature;
interface QueryProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Notes:**
     * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
     * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    (options?: QueryProductsOptions): ProductsQueryBuilder;
}
declare function countProducts$1(httpClient: HttpClient): CountProductsSignature;
interface CountProductsSignature {
    /**
     * Counts the number of products that match the provided filtering.
     */
    (options?: CountProductsOptions): Promise<NonNullablePaths<V3CountProductsResponse, `count`, 2> & {
        __applicationErrorsType?: CountProductsApplicationErrors;
    }>;
}
declare function bulkUpdateProductVariantsByFilter$1(httpClient: HttpClient): BulkUpdateProductVariantsByFilterSignature;
interface BulkUpdateProductVariantsByFilterSignature {
    /**
     * Updates a variant of multiple products, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be updated:
     * + `visible`
     * + `price`
     * + `revenueDetails.cost`
     * + `physicalOptions`
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: NonNullablePaths<BulkUpdateProductVariantsByFilterOptions, `variant`, 2>): Promise<NonNullablePaths<BulkUpdateProductVariantsByFilterResponse, `jobId`, 2> & {
        __applicationErrorsType?: BulkUpdateProductVariantsByFilterApplicationErrors;
        __validationErrorsType?: BulkUpdateProductVariantsByFilterValidationErrors;
    }>;
}
declare function bulkAdjustProductVariantsByFilter$1(httpClient: HttpClient): BulkAdjustProductVariantsByFilterSignature;
interface BulkAdjustProductVariantsByFilterSignature {
    /**
     * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be increased/decreased by amount or percentage:
     * + `compareAtPrice`
     * + `actualPrice`
     * + `cost`
     * + `compareAtPriceDiscount`
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkAdjustProductVariantsByFilterOptions): Promise<NonNullablePaths<V3BulkAdjustProductVariantsByFilterResponse, `jobId`, 2> & {
        __applicationErrorsType?: BulkAdjustProductVariantsByFilterApplicationErrors;
        __validationErrorsType?: BulkAdjustProductVariantsByFilterValidationErrors;
    }>;
}
declare function bulkAddInfoSectionsToProductsByFilter$1(httpClient: HttpClient): BulkAddInfoSectionsToProductsByFilterSignature;
interface BulkAddInfoSectionsToProductsByFilterSignature {
    /**
     * Adds info sections to multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: NonNullablePaths<BulkAddInfoSectionsToProductsByFilterOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkAddInfoSectionsToProductsByFilterResponse, `jobId`, 2> & {
        __applicationErrorsType?: BulkAddInfoSectionsToProductsByFilterApplicationErrors;
    }>;
}
declare function bulkAddInfoSectionsToProducts$1(httpClient: HttpClient): BulkAddInfoSectionsToProductsSignature;
interface BulkAddInfoSectionsToProductsSignature {
    /**
     * Adds info sections to multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: NonNullablePaths<BulkAddInfoSectionsToProductsOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkAddInfoSectionsToProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkAddInfoSectionsToProductsApplicationErrors;
    }>;
}
declare function bulkRemoveInfoSectionsFromProductsByFilter$1(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsByFilterSignature;
interface BulkRemoveInfoSectionsFromProductsByFilterSignature {
    /**
     * Removes info sections from multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: NonNullablePaths<BulkRemoveInfoSectionsFromProductsByFilterOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkRemoveInfoSectionsFromProductsByFilterResponse, `jobId`, 2>>;
}
declare function bulkRemoveInfoSectionsFromProducts$1(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsSignature;
interface BulkRemoveInfoSectionsFromProductsSignature {
    /**
     * Removes info sections from multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: NonNullablePaths<BulkRemoveInfoSectionsFromProductsOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkRemoveInfoSectionsFromProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkAddProductsToCategoriesByFilter$1(httpClient: HttpClient): BulkAddProductsToCategoriesByFilterSignature;
interface BulkAddProductsToCategoriesByFilterSignature {
    /**
     * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: NonNullablePaths<BulkAddProductsToCategoriesByFilterOptions, `categoryIds`, 2>): Promise<NonNullablePaths<BulkAddProductsToCategoriesByFilterResponse, `jobId`, 2>>;
}
declare function bulkRemoveProductsFromCategoriesByFilter$1(httpClient: HttpClient): BulkRemoveProductsFromCategoriesByFilterSignature;
interface BulkRemoveProductsFromCategoriesByFilterSignature {
    /**
     * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: NonNullablePaths<BulkRemoveProductsFromCategoriesByFilterOptions, `categoryIds`, 2>): Promise<NonNullablePaths<BulkRemoveProductsFromCategoriesByFilterResponse, `jobId`, 2>>;
}
declare function getAllProductsCategory$1(httpClient: HttpClient): GetAllProductsCategorySignature;
interface GetAllProductsCategorySignature {
    /**
     * Retrieves the id of "All Products" category which is automatically assigned to all products.
     */
    (): Promise<NonNullablePaths<GetAllProductsCategoryResponse, `categoryId` | `treeReference.appNamespace`, 3>>;
}
declare const onProductCreated$1: EventDefinition<ProductCreatedEnvelope, "wix.stores.catalog.v3.product_created">;
declare const onProductDeleted$1: EventDefinition<ProductDeletedEnvelope, "wix.stores.catalog.v3.product_deleted">;
declare const onProductUpdated$1: EventDefinition<ProductUpdatedEnvelope, "wix.stores.catalog.v3.product_updated">;

declare const createProduct: MaybeContext<BuildRESTFunction<typeof createProduct$1> & typeof createProduct$1>;
declare const createProductWithInventory: MaybeContext<BuildRESTFunction<typeof createProductWithInventory$1> & typeof createProductWithInventory$1>;
declare const updateProduct: MaybeContext<BuildRESTFunction<typeof updateProduct$1> & typeof updateProduct$1>;
declare const updateProductWithInventory: MaybeContext<BuildRESTFunction<typeof updateProductWithInventory$1> & typeof updateProductWithInventory$1>;
declare const bulkCreateProducts: MaybeContext<BuildRESTFunction<typeof bulkCreateProducts$1> & typeof bulkCreateProducts$1>;
declare const bulkCreateProductsWithInventory: MaybeContext<BuildRESTFunction<typeof bulkCreateProductsWithInventory$1> & typeof bulkCreateProductsWithInventory$1>;
declare const bulkUpdateProducts: MaybeContext<BuildRESTFunction<typeof bulkUpdateProducts$1> & typeof bulkUpdateProducts$1>;
declare const bulkUpdateProductsWithInventory: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsWithInventory$1> & typeof bulkUpdateProductsWithInventory$1>;
declare const bulkUpdateProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsByFilter$1> & typeof bulkUpdateProductsByFilter$1>;
declare const deleteProduct: MaybeContext<BuildRESTFunction<typeof deleteProduct$1> & typeof deleteProduct$1>;
declare const bulkDeleteProducts: MaybeContext<BuildRESTFunction<typeof bulkDeleteProducts$1> & typeof bulkDeleteProducts$1>;
declare const bulkDeleteProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkDeleteProductsByFilter$1> & typeof bulkDeleteProductsByFilter$1>;
declare const getProduct: MaybeContext<BuildRESTFunction<typeof getProduct$1> & typeof getProduct$1>;
declare const getProductBySlug: MaybeContext<BuildRESTFunction<typeof getProductBySlug$1> & typeof getProductBySlug$1>;
declare const searchProducts: MaybeContext<BuildRESTFunction<typeof searchProducts$1> & typeof searchProducts$1>;
declare const queryProducts: MaybeContext<BuildRESTFunction<typeof queryProducts$1> & typeof queryProducts$1>;
declare const countProducts: MaybeContext<BuildRESTFunction<typeof countProducts$1> & typeof countProducts$1>;
declare const bulkUpdateProductVariantsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductVariantsByFilter$1> & typeof bulkUpdateProductVariantsByFilter$1>;
declare const bulkAdjustProductVariantsByFilter: MaybeContext<BuildRESTFunction<typeof bulkAdjustProductVariantsByFilter$1> & typeof bulkAdjustProductVariantsByFilter$1>;
declare const bulkAddInfoSectionsToProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkAddInfoSectionsToProductsByFilter$1> & typeof bulkAddInfoSectionsToProductsByFilter$1>;
declare const bulkAddInfoSectionsToProducts: MaybeContext<BuildRESTFunction<typeof bulkAddInfoSectionsToProducts$1> & typeof bulkAddInfoSectionsToProducts$1>;
declare const bulkRemoveInfoSectionsFromProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkRemoveInfoSectionsFromProductsByFilter$1> & typeof bulkRemoveInfoSectionsFromProductsByFilter$1>;
declare const bulkRemoveInfoSectionsFromProducts: MaybeContext<BuildRESTFunction<typeof bulkRemoveInfoSectionsFromProducts$1> & typeof bulkRemoveInfoSectionsFromProducts$1>;
declare const bulkAddProductsToCategoriesByFilter: MaybeContext<BuildRESTFunction<typeof bulkAddProductsToCategoriesByFilter$1> & typeof bulkAddProductsToCategoriesByFilter$1>;
declare const bulkRemoveProductsFromCategoriesByFilter: MaybeContext<BuildRESTFunction<typeof bulkRemoveProductsFromCategoriesByFilter$1> & typeof bulkRemoveProductsFromCategoriesByFilter$1>;
declare const getAllProductsCategory: MaybeContext<BuildRESTFunction<typeof getAllProductsCategory$1> & typeof getAllProductsCategory$1>;
/** */
declare const onProductCreated: BuildEventDefinition<typeof onProductCreated$1> & typeof onProductCreated$1;
/**
 * Triggered when a product is deleted.
 */
declare const onProductDeleted: BuildEventDefinition<typeof onProductDeleted$1> & typeof onProductDeleted$1;
/**
 * Triggered when a product is updated.
 */
declare const onProductUpdated: BuildEventDefinition<typeof onProductUpdated$1> & typeof onProductUpdated$1;

export { BulkAddInfoSectionsToProductsApplicationErrors, BulkAddInfoSectionsToProductsByFilterApplicationErrors, BulkAddInfoSectionsToProductsByFilterOptions, BulkAddInfoSectionsToProductsOptions, BulkAddProductsToCategoriesByFilterOptions, BulkAddProductsToCategoriesByFilterResponse, BulkAdjustProductVariantsByFilterApplicationErrors, BulkAdjustProductVariantsByFilterOptions, BulkAdjustProductVariantsByFilterValidationErrors, BulkCreateProductsApplicationErrors, BulkCreateProductsOptions, BulkCreateProductsResponse, BulkCreateProductsValidationErrors, BulkCreateProductsWithInventoryApplicationErrors, BulkCreateProductsWithInventoryOptions, BulkCreateProductsWithInventoryResponse, BulkCreateProductsWithInventoryValidationErrors, BulkDeleteProductsByFilterOptions, BulkDeleteProductsValidationErrors, BulkRemoveInfoSectionsFromProductsByFilterOptions, BulkRemoveInfoSectionsFromProductsOptions, BulkRemoveProductsFromCategoriesByFilterOptions, BulkRemoveProductsFromCategoriesByFilterResponse, BulkUpdateProductVariantsByFilterApplicationErrors, BulkUpdateProductVariantsByFilterOptions, BulkUpdateProductVariantsByFilterResponse, BulkUpdateProductVariantsByFilterValidationErrors, BulkUpdateProductsApplicationErrors, BulkUpdateProductsByFilterApplicationErrors, BulkUpdateProductsByFilterOptions, BulkUpdateProductsByFilterValidationErrors, BulkUpdateProductsOptions, BulkUpdateProductsResponse, BulkUpdateProductsValidationErrors, BulkUpdateProductsWithInventoryApplicationErrors, BulkUpdateProductsWithInventoryOptions, BulkUpdateProductsWithInventoryResponse, BulkUpdateProductsWithInventoryValidationErrors, CountProductsApplicationErrors, CountProductsOptions, CreateProductApplicationErrors, CreateProductOptions, CreateProductValidationErrors, CreateProductWithInventoryApplicationErrors, CreateProductWithInventoryOptions, CreateProductWithInventoryResponse, CreateProductWithInventoryValidationErrors, GetAllProductsCategoryResponse, GetProductApplicationErrors, GetProductBySlugApplicationErrors, GetProductBySlugOptions, GetProductOptions, MaskedProductWithInventory, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductUpdatedEnvelope, ProductWithInventory, ProductsQueryBuilder, QueryProductsOptions, SearchProductsApplicationErrors, SearchProductsOptions, UpdateProduct, UpdateProductApplicationErrors, UpdateProductOptions, UpdateProductValidationErrors, UpdateProductWithInventoryApplicationErrors, UpdateProductWithInventoryOptions, UpdateProductWithInventoryProduct, UpdateProductWithInventoryResponse, UpdateProductWithInventoryValidationErrors, V3BulkAddInfoSectionsToProductsByFilterResponse, V3BulkAddInfoSectionsToProductsResponse, V3BulkAdjustProductVariantsByFilterResponse, V3BulkDeleteProductsByFilterResponse, V3BulkDeleteProductsResponse, V3BulkRemoveInfoSectionsFromProductsByFilterResponse, V3BulkRemoveInfoSectionsFromProductsResponse, V3BulkUpdateProductsByFilterResponse, V3CountProductsResponse, V3GetProductBySlugResponse, V3MaskedProduct, V3Product, V3ProductIdWithRevision, V3ProductSearch, V3SearchProductsResponse, bulkAddInfoSectionsToProducts, bulkAddInfoSectionsToProductsByFilter, bulkAddProductsToCategoriesByFilter, bulkAdjustProductVariantsByFilter, bulkCreateProducts, bulkCreateProductsWithInventory, bulkDeleteProducts, bulkDeleteProductsByFilter, bulkRemoveInfoSectionsFromProducts, bulkRemoveInfoSectionsFromProductsByFilter, bulkRemoveProductsFromCategoriesByFilter, bulkUpdateProductVariantsByFilter, bulkUpdateProducts, bulkUpdateProductsByFilter, bulkUpdateProductsWithInventory, countProducts, createProduct, createProductWithInventory, deleteProduct, getAllProductsCategory, getProduct, getProductBySlug, onProductCreated, onProductDeleted, onProductUpdated, queryProducts, searchProducts, updateProduct, updateProductWithInventory };
