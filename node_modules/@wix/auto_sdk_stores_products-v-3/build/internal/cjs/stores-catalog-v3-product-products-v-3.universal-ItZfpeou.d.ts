import { SearchSpec, Search, NonNullablePaths } from '@wix/sdk-types';

interface V3Product extends V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Product name. Translatable.
     * @minLength 1
     * @maxLength 80
     */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: string;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * @maxSize 6
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * @maxSize 10
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     * @maxSize 10
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /**
     * The ID of the product's primary direct category, which defines the productâ€™s breadcrumbs path. For example, if the product's main category is "T-Shirts" (which is a subcategory of "Clothing"), the breadcrumbs path will be "Clothing > T-Shirts".
     * @format GUID
     */
    mainCategoryId?: string | null;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     * @immutable
     */
    productType?: ProductTypeWithLiterals;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    handle?: string | null;
    /**
     * ID of the last import job that affected the product.
     * @internal
     * @format GUID
     */
    importId?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @format CURRENCY
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /**
     * Product actualPrice range - minimum and maximum prices of all product variants.
     * @readonly
     */
    actualPriceRange?: PriceRange;
    /**
     * Product compareAtPrice range - minimum and maximum compare at prices of all product variants.
     * @readonly
     */
    compareAtPriceRange?: PriceRange;
    /**
     * Product variants. Each variant must reference all product options via its `choices` array.
     * Each choice references an option using `optionChoiceNames` for all requests.
     */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
/** @oneof */
interface V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeTypeWithLiterals;
    /** Node ID. */
    id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
}
declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    /** @deprecated */
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION",
    LAYOUT = "LAYOUT",
    LAYOUT_CELL = "LAYOUT_CELL"
}
/** @enumType */
type NodeTypeWithLiterals = NodeType | 'PARAGRAPH' | 'TEXT' | 'HEADING' | 'BULLETED_LIST' | 'ORDERED_LIST' | 'LIST_ITEM' | 'BLOCKQUOTE' | 'CODE_BLOCK' | 'VIDEO' | 'DIVIDER' | 'FILE' | 'GALLERY' | 'GIF' | 'HTML' | 'IMAGE' | 'LINK_PREVIEW' | 'MAP' | 'POLL' | 'APP_EMBED' | 'BUTTON' | 'COLLAPSIBLE_LIST' | 'TABLE' | 'EMBED' | 'COLLAPSIBLE_ITEM' | 'COLLAPSIBLE_ITEM_TITLE' | 'COLLAPSIBLE_ITEM_BODY' | 'TABLE_CELL' | 'TABLE_ROW' | 'EXTERNAL' | 'AUDIO' | 'CAPTION' | 'LAYOUT' | 'LAYOUT_CELL';
interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: ButtonDataTypeWithLiterals;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
interface Border {
    /**
     * Deprecated: Use `borderWidth` in `styles` instead.
     * @deprecated
     */
    width?: number | null;
    /**
     * Deprecated: Use `borderRadius` in `styles` instead.
     * @deprecated
     */
    radius?: number | null;
}
interface Colors {
    /**
     * Deprecated: Use `textColor` in `styles` instead.
     * @deprecated
     */
    text?: string | null;
    /**
     * Deprecated: Use `borderColor` in `styles` instead.
     * @deprecated
     */
    border?: string | null;
    /**
     * Deprecated: Use `backgroundColor` in `styles` instead.
     * @deprecated
     */
    background?: string | null;
}
interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignmentWithLiterals;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
/** @enumType */
type WidthTypeWithLiterals = WidthType | 'CONTENT' | 'SMALL' | 'ORIGINAL' | 'FULL_WIDTH';
interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthTypeWithLiterals;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthTypeWithLiterals;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
/** @enumType */
type PluginContainerDataAlignmentWithLiterals = PluginContainerDataAlignment | 'CENTER' | 'LEFT' | 'RIGHT';
interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum ButtonDataType {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
/** @enumType */
type ButtonDataTypeWithLiterals = ButtonDataType | 'LINK' | 'ACTION';
interface Styles {
    /**
     * Deprecated: Use `borderWidth` and `borderRadius` instead.
     * @deprecated
     */
    border?: Border;
    /**
     * Deprecated: Use `textColor`, `borderColor` and `backgroundColor` instead.
     * @deprecated
     */
    colors?: Colors;
    /** Border width in pixels. */
    borderWidth?: number | null;
    /**
     * Deprecated: Use `borderWidth` for normal/hover states instead.
     * @deprecated
     */
    borderWidthHover?: number | null;
    /** Border radius in pixels. */
    borderRadius?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /**
     * Border color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    borderColorHover?: string | null;
    /**
     * Text color as a hexadecimal value.
     * @format COLOR_HEX
     */
    textColor?: string | null;
    /**
     * Text color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    textColorHover?: string | null;
    /**
     * Background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Background color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    backgroundColorHover?: string | null;
    /** Button size option, one of `SMALL`, `MEDIUM` or `LARGE`. Defaults to `MEDIUM`. */
    buttonSize?: string | null;
}
interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: TargetWithLiterals;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
/** @enumType */
type TargetWithLiterals = Target | 'SELF' | 'BLANK' | 'PARENT' | 'TOP';
interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the pageâ€™s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignmentWithLiterals;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
/** @enumType */
type TextAlignmentWithLiterals = TextAlignment | 'AUTO' | 'LEFT' | 'RIGHT' | 'CENTER' | 'JUSTIFY';
interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyleWithLiterals;
    /** Divider width. */
    width?: WidthWithLiterals;
    /** Divider alignment. */
    alignment?: DividerDataAlignmentWithLiterals;
}
declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
/** @enumType */
type LineStyleWithLiterals = LineStyle | 'SINGLE' | 'DOUBLE' | 'DASHED' | 'DOTTED';
declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
/** @enumType */
type WidthWithLiterals = Width | 'LARGE' | 'MEDIUM' | 'SMALL';
declare enum DividerDataAlignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
/** @enumType */
type DividerDataAlignmentWithLiterals = DividerDataAlignment | 'CENTER' | 'LEFT' | 'RIGHT';
interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
/** @enumType */
type ViewModeWithLiterals = ViewMode | 'NONE' | 'FULL' | 'MINI';
interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
}
interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewModeWithLiterals;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface V1Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image {
    /** Image file details. */
    media?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
}
interface Video {
    /** Video file details. */
    media?: V1Media;
    /** Video thumbnail file details. */
    thumbnail?: V1Media;
}
interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
}
interface GalleryOptions {
    /** Gallery layout. */
    layout?: GalleryOptionsLayout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
/** @enumType */
type LayoutTypeWithLiterals = LayoutType | 'COLLAGE' | 'MASONRY' | 'GRID' | 'THUMBNAIL' | 'SLIDER' | 'SLIDESHOW' | 'PANORAMA' | 'COLUMN' | 'MAGIC' | 'FULLSIZE';
declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
/** @enumType */
type OrientationWithLiterals = Orientation | 'ROWS' | 'COLUMNS';
declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
/** @enumType */
type CropWithLiterals = Crop | 'FILL' | 'FIT';
declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
/** @enumType */
type ThumbnailsAlignmentWithLiterals = ThumbnailsAlignment | 'TOP' | 'RIGHT' | 'BOTTOM' | 'LEFT' | 'NONE';
interface GalleryOptionsLayout {
    /** Gallery layout type. */
    type?: LayoutTypeWithLiterals;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: OrientationWithLiterals;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: CropWithLiterals;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignmentWithLiterals;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
    /** Type of GIF (Sticker or NORMAL). Defaults to `NORMAL`. */
    gifType?: GIFTypeWithLiterals;
}
interface GIF {
    /**
     * GIF format URL.
     * @format WEB_URL
     */
    gif?: string | null;
    /**
     * MP4 format URL.
     * @format WEB_URL
     */
    mp4?: string | null;
    /**
     * Thumbnail URL.
     * @format WEB_URL
     */
    still?: string | null;
}
declare enum GIFType {
    NORMAL = "NORMAL",
    STICKER = "STICKER"
}
/** @enumType */
type GIFTypeWithLiterals = GIFType | 'NORMAL' | 'STICKER';
interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. Height property is irrelevant for HTML embeds when autoHeight is set to `true`. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: SourceWithLiterals;
    /** If container height is aligned with its content height. Defaults to `true`. */
    autoHeight?: boolean | null;
}
/** @oneof */
interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
/** @enumType */
type SourceWithLiterals = Source | 'HTML' | 'ADSENSE';
interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the image is decorative and does not need an explanation. Defaults to `false`. */
    decorative?: boolean | null;
    /** Styling for the image. */
    styles?: ImageDataStyles;
}
interface StylesBorder {
    /** Border width in pixels. */
    width?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    color?: string | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface ImageDataStyles {
    /** Border attributes. */
    border?: StylesBorder;
}
interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
    /** Styling for the link preview. */
    styles?: LinkPreviewDataStyles;
}
declare enum StylesPosition {
    /** Thumbnail positioned at the start (left in LTR layouts, right in RTL layouts) */
    START = "START",
    /** Thumbnail positioned at the end (right in LTR layouts, left in RTL layouts) */
    END = "END",
    /** Thumbnail positioned at the top */
    TOP = "TOP",
    /** Thumbnail hidden and not displayed */
    HIDDEN = "HIDDEN"
}
/** @enumType */
type StylesPositionWithLiterals = StylesPosition | 'START' | 'END' | 'TOP' | 'HIDDEN';
interface LinkPreviewDataStyles {
    /**
     * Background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Title color as a hexadecimal value.
     * @format COLOR_HEX
     */
    titleColor?: string | null;
    /**
     * Subtitle color as a hexadecimal value.
     * @format COLOR_HEX
     */
    subtitleColor?: string | null;
    /**
     * Link color as a hexadecimal value.
     * @format COLOR_HEX
     */
    linkColor?: string | null;
    /** Border width in pixels. */
    borderWidth?: number | null;
    /** Border radius in pixels. */
    borderRadius?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /** Position of thumbnail. Defaults to `START`. */
    thumbnailPosition?: StylesPositionWithLiterals;
}
interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapTypeWithLiterals;
}
declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
/** @enumType */
type MapTypeWithLiterals = MapType | 'ROADMAP' | 'SATELITE' | 'HYBRID' | 'TERRAIN';
interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
/** @enumType */
type ViewRoleWithLiterals = ViewRole | 'CREATOR' | 'VOTERS' | 'EVERYONE';
declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
/** @enumType */
type VoteRoleWithLiterals = VoteRole | 'SITE_MEMBERS' | 'ALL';
interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRoleWithLiterals;
    /** Sets who can vote. */
    vote?: VoteRoleWithLiterals;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option {
    /** Option ID. */
    id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media;
}
interface PollSettings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
/** @enumType */
type PollLayoutTypeWithLiterals = PollLayoutType | 'LIST' | 'GRID';
declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
/** @enumType */
type PollLayoutDirectionWithLiterals = PollLayoutDirection | 'LTR' | 'RTL';
interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutTypeWithLiterals;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirectionWithLiterals;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
/** @enumType */
type BackgroundTypeWithLiterals = BackgroundType | 'COLOR' | 'IMAGE' | 'GRADIENT';
interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /**
     * The start color as a hexademical value.
     * @format COLOR_HEX
     */
    startColor?: string | null;
    /**
     * The end color as a hexademical value.
     * @format COLOR_HEX
     */
    lastColor?: string | null;
}
interface Background extends BackgroundBackgroundOneOf {
    /**
     * The background color as a hexademical value.
     * @format COLOR_HEX
     */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundTypeWithLiterals;
}
/** @oneof */
interface BackgroundBackgroundOneOf {
    /**
     * The background color as a hexademical value.
     * @format COLOR_HEX
     */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll {
    /** Poll ID. */
    id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings;
}
interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** Data for a strikethrough decoration. Defaults to `true`. */
    strikethroughData?: boolean | null;
    /** Data for a superscript decoration. Defaults to `true`. */
    superscriptData?: boolean | null;
    /** Data for a subscript decoration. Defaults to `true`. */
    subscriptData?: boolean | null;
    /** The type of decoration to apply. */
    type?: DecorationTypeWithLiterals;
}
/** @oneof */
interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** Data for a strikethrough decoration. Defaults to `true`. */
    strikethroughData?: boolean | null;
    /** Data for a superscript decoration. Defaults to `true`. */
    superscriptData?: boolean | null;
    /** Data for a subscript decoration. Defaults to `true`. */
    subscriptData?: boolean | null;
}
declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL",
    STRIKETHROUGH = "STRIKETHROUGH",
    SUPERSCRIPT = "SUPERSCRIPT",
    SUBSCRIPT = "SUBSCRIPT"
}
/** @enumType */
type DecorationTypeWithLiterals = DecorationType | 'BOLD' | 'ITALIC' | 'UNDERLINE' | 'SPOILER' | 'ANCHOR' | 'MENTION' | 'LINK' | 'COLOR' | 'FONT_SIZE' | 'EXTERNAL' | 'STRIKETHROUGH' | 'SUPERSCRIPT' | 'SUBSCRIPT';
interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData {
    /** Link details. */
    link?: Link;
}
interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    id?: string | null;
}
interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontTypeWithLiterals;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType {
    PX = "PX",
    EM = "EM"
}
/** @enumType */
type FontTypeWithLiterals = FontType | 'PX' | 'EM';
interface SpoilerData {
    /** Spoiler ID. */
    id?: string | null;
}
interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppTypeWithLiterals;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media;
    /** Whether to hide the image. */
    hideImage?: boolean | null;
    /** Whether to hide the title. */
    hideTitle?: boolean | null;
    /** Whether to hide the price. */
    hidePrice?: boolean | null;
    /** Whether to hide the description (Event and Booking). */
    hideDescription?: boolean | null;
    /** Whether to hide the date and time (Event). */
    hideDateTime?: boolean | null;
    /** Whether to hide the location (Event). */
    hideLocation?: boolean | null;
    /** Whether to hide the duration (Booking). */
    hideDuration?: boolean | null;
    /** Whether to hide the button. */
    hideButton?: boolean | null;
    /** Whether to hide the ribbon. */
    hideRibbon?: boolean | null;
    /** Button styling options. */
    buttonStyles?: ButtonStyles;
    /** Image styling options. */
    imageStyles?: ImageStyles;
    /** Ribbon styling options. */
    ribbonStyles?: RibbonStyles;
    /** Card styling options. */
    cardStyles?: CardStyles;
    /** Styling for the app embed's container. */
    containerData?: PluginContainerData;
    /** Pricing data for embedded Wix App content. */
    pricingData?: PricingData;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
declare enum Position {
    /** Image positioned at the start (left in LTR layouts, right in RTL layouts) */
    START = "START",
    /** Image positioned at the end (right in LTR layouts, left in RTL layouts) */
    END = "END",
    /** Image positioned at the top */
    TOP = "TOP"
}
/** @enumType */
type PositionWithLiterals = Position | 'START' | 'END' | 'TOP';
declare enum AspectRatio {
    /** 1:1 aspect ratio */
    SQUARE = "SQUARE",
    /** 16:9 aspect ratio */
    RECTANGLE = "RECTANGLE"
}
/** @enumType */
type AspectRatioWithLiterals = AspectRatio | 'SQUARE' | 'RECTANGLE';
declare enum Resizing {
    /** Fill the container, may crop the image */
    FILL = "FILL",
    /** Fit the image within the container */
    FIT = "FIT"
}
/** @enumType */
type ResizingWithLiterals = Resizing | 'FILL' | 'FIT';
declare enum Placement {
    /** Ribbon placed on the image */
    IMAGE = "IMAGE",
    /** Ribbon placed on the product information */
    PRODUCT_INFO = "PRODUCT_INFO"
}
/** @enumType */
type PlacementWithLiterals = Placement | 'IMAGE' | 'PRODUCT_INFO';
declare enum Type {
    /** Card with visible border and background */
    CONTAINED = "CONTAINED",
    /** Card without visible border */
    FRAMELESS = "FRAMELESS"
}
/** @enumType */
type TypeWithLiterals = Type | 'CONTAINED' | 'FRAMELESS';
declare enum Alignment {
    /** Content aligned to start (left in LTR layouts, right in RTL layouts) */
    START = "START",
    /** Content centered */
    CENTER = "CENTER",
    /** Content aligned to end (right in LTR layouts, left in RTL layouts) */
    END = "END"
}
/** @enumType */
type AlignmentWithLiterals = Alignment | 'START' | 'CENTER' | 'END';
declare enum Layout {
    /** Elements stacked vertically */
    STACKED = "STACKED",
    /** Elements arranged horizontally */
    SIDE_BY_SIDE = "SIDE_BY_SIDE"
}
/** @enumType */
type LayoutWithLiterals = Layout | 'STACKED' | 'SIDE_BY_SIDE';
declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
/** @enumType */
type AppTypeWithLiterals = AppType | 'PRODUCT' | 'EVENT' | 'BOOKING';
interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface ButtonStyles {
    /** Text to display on the button. */
    buttonText?: string | null;
    /** Border width in pixels. */
    borderWidth?: number | null;
    /** Border radius in pixels. */
    borderRadius?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /**
     * Text color as a hexadecimal value.
     * @format COLOR_HEX
     */
    textColor?: string | null;
    /**
     * Background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Border color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    borderColorHover?: string | null;
    /**
     * Text color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    textColorHover?: string | null;
    /**
     * Background color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    backgroundColorHover?: string | null;
    /** Button size option, one of `SMALL`, `MEDIUM` or `LARGE`. Defaults to `MEDIUM`. */
    buttonSize?: string | null;
}
interface ImageStyles {
    /** Whether to hide the image. */
    hideImage?: boolean | null;
    /** Position of image. Defaults to `START`. */
    imagePosition?: PositionWithLiterals;
    /** Aspect ratio for the image. Defaults to `SQUARE`. */
    aspectRatio?: AspectRatioWithLiterals;
    /** How the image should be resized. Defaults to `FILL`. */
    resizing?: ResizingWithLiterals;
    /**
     * Image border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /** Image border width in pixels. */
    borderWidth?: number | null;
    /** Image border radius in pixels. */
    borderRadius?: number | null;
}
interface RibbonStyles {
    /** Text to display on the ribbon. */
    ribbonText?: string | null;
    /**
     * Ribbon background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Ribbon text color as a hexadecimal value.
     * @format COLOR_HEX
     */
    textColor?: string | null;
    /**
     * Ribbon border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /** Ribbon border width in pixels. */
    borderWidth?: number | null;
    /** Ribbon border radius in pixels. */
    borderRadius?: number | null;
    /** Placement of the ribbon. Defaults to `IMAGE`. */
    ribbonPlacement?: PlacementWithLiterals;
}
interface CardStyles {
    /**
     * Card background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Card border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /** Card border width in pixels. */
    borderWidth?: number | null;
    /** Card border radius in pixels. */
    borderRadius?: number | null;
    /** Card type. Defaults to `CONTAINED`. */
    type?: TypeWithLiterals;
    /** Content alignment. Defaults to `START`. */
    alignment?: AlignmentWithLiterals;
    /** Layout for title and price. Defaults to `STACKED`. */
    titlePriceLayout?: LayoutWithLiterals;
    /**
     * Title text color as a hexadecimal value.
     * @format COLOR_HEX
     */
    titleColor?: string | null;
    /**
     * Text color as a hexadecimal value.
     * @format COLOR_HEX
     */
    textColor?: string | null;
}
interface PricingData {
    /**
     * Minimum numeric price value as string (e.g., "10.99").
     * @decimalValue options { maxScale:2 }
     */
    valueFrom?: string | null;
    /**
     * Maximum numeric price value as string (e.g., "19.99").
     * @decimalValue options { maxScale:2 }
     */
    valueTo?: string | null;
    /**
     * Numeric price value as string after discount application (e.g., "15.99").
     * @decimalValue options { maxScale:2 }
     */
    discountedValue?: string | null;
    /**
     * Currency of the value in ISO 4217 format (e.g., "USD", "EUR").
     * @format CURRENCY
     */
    currency?: string | null;
    /**
     * Pricing plan ID.
     * @format GUID
     */
    pricingPlanId?: string | null;
}
interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: V1Media;
    /** Video thumbnail details. */
    thumbnail?: V1Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItemsWithLiterals;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: DirectionWithLiterals;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
/** @enumType */
type InitialExpandedItemsWithLiterals = InitialExpandedItems | 'FIRST' | 'ALL' | 'NONE';
declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
/** @enumType */
type DirectionWithLiterals = Direction | 'LTR' | 'RTL';
interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
/** @enumType */
type VerticalAlignmentWithLiterals = VerticalAlignment | 'TOP' | 'MIDDLE' | 'BOTTOM';
interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignmentWithLiterals;
    /**
     * Cell background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
}
interface BorderColors {
    /**
     * Left border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    left?: string | null;
    /**
     * Right border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    right?: string | null;
    /**
     * Top border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    top?: string | null;
    /**
     * Bottom border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    bottom?: string | null;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
declare enum NullValue {
    /** Null value. */
    NULL_VALUE = "NULL_VALUE"
}
/** @enumType */
type NullValueWithLiterals = NullValue | 'NULL_VALUE';
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
interface ListValue {
    /** Repeated field of dynamically typed values. */
    values?: any[];
}
interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: V1Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData {
    textStyle?: TextStyle;
}
interface LayoutCellData {
    /** Size of the cell in 12 columns grid. */
    colSpan?: number | null;
}
interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface Media {
    /**
     * Main media (image, video, etc.) associated with this product.
     * @readonly
     */
    main?: ProductMedia;
    /**
     * All media items.
     * > **Note:** Returned only when you pass `"MEDIA_ITEMS_INFO"` to the `fields` array in Products API requests.
     */
    itemsInfo?: MediaItemsInfo;
}
interface ProductMedia extends ProductMediaSetByOneOf, ProductMediaMediaOneOf {
    /**
     * Set media by ID of an existing file in Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     */
    _id?: string;
    /**
     * Set media using an external media URL.
     * @format WEB_URL
     */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
    /**
     * Image alt text.
     * @minLength 1
     * @maxLength 1000
     */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     * @maxLength 80
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: MediaTypeWithLiterals;
    /**
     * Media thumbnail.
     * > **Note:** Returned only when you pass `"THUMBNAIL"` to the `fields` array in Products API requests.
     */
    thumbnail?: Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     * @format GUID
     */
    uploadId?: string;
}
/** @oneof */
interface ProductMediaSetByOneOf {
    /**
     * Set media by ID of an existing file in Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     */
    _id?: string;
    /**
     * Set media using an external media URL.
     * @format WEB_URL
     */
    url?: string;
}
/** @oneof */
interface ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
}
interface VideoResolution {
    /**
     * Video URL.
     * @format WEB_URL
     */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /**
     * Video format for example, mp4, hls.
     * @maxLength 200
     */
    format?: string;
}
declare enum MediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    /** Image media type. */
    IMAGE = "IMAGE",
    /** Video media type. */
    VIDEO = "VIDEO"
}
/** @enumType */
type MediaTypeWithLiterals = MediaType | 'UNKNOWN_MEDIA_TYPE' | 'IMAGE' | 'VIDEO';
interface Thumbnail {
    /**
     * Thumbnail url.
     * @format WEB_URL
     */
    url?: string;
    /** Thumbnail height. */
    height?: number;
    /** Thumbnail width. */
    width?: number;
    /**
     * Thumbnail alt text.
     * @minLength 1
     * @maxLength 1000
     */
    altText?: string | null;
}
interface MediaItemsInfo {
    /**
     * All media items (images, videos etc) associated with this product.
     * @maxSize 15
     */
    items?: ProductMedia[];
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /**
     * The source that added the keyword terms to the SEO settings.
     * @maxLength 1000
     */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag metadata. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a [custom tag](https://support.wix.com/en/article/adding-additional-meta-tags-to-your-sites-pages). */
    custom?: boolean;
    /** Whether the tag is disabled. If the tag is disabled, people can't find your page when searching for this phrase in search engines. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the [automatical redirect visits](https://support.wix.com/en/article/customizing-your-pages-seo-settings-in-the-seo-panel) from the old URL to the new one is enabled.
     *
     *
     * Default: `false` (automatical redirect is enabled).
     */
    preventAutoRedirect?: boolean;
    /**
     * User-selected keyword terms for a specific page.
     * @maxSize 5
     */
    keywords?: Keyword[];
}
interface ConnectedOption extends ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
    /**
     * ID of a customization with `customizationType: PRODUCT_OPTION`.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /**
     * Option name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /** Option render type. */
    optionRenderType?: ProductOptionRenderTypeWithLiterals;
}
/** @oneof */
interface ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
}
declare enum ProductOptionRenderType {
    /** Not implemented. */
    UNKNOWN_OPTION_RENDER_TYPE = "UNKNOWN_OPTION_RENDER_TYPE",
    /** Text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Swatch choices. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
/** @enumType */
type ProductOptionRenderTypeWithLiterals = ProductOptionRenderType | 'UNKNOWN_OPTION_RENDER_TYPE' | 'TEXT_CHOICES' | 'SWATCH_CHOICES';
interface ChoicesSettings {
    /**
     * List of available choices for the option.
     * @minSize 1
     * @maxSize 100
     * @immutable
     */
    choices?: ConnectedOptionChoice[];
}
interface ConnectedOptionChoice extends ConnectedOptionChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
    /**
     * The id of the choice.
     * @format GUID
     */
    choiceId?: string | null;
    /**
     * Product media overrides. When not empty only these images will be shown when such choices selected by customer. Otherwise all images of product.
     * When several choices from different options selected only media filter present in `media_overrides` of ALL choices will be shown.
     * For example if Color:red has images 1,2,3 and Material:Silk has images 2,3,5 then only images 2,3 will be shown when both of them selected.
     * @maxSize 100
     */
    linkedMedia?: ProductMedia[];
    /** The type of this choice. */
    choiceType?: ChoiceTypeWithLiterals;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * A flag that indicates if at least one variant with this choice is in stock in the default store's location.
     * For example, a product with 'Color' and 'Size' options with variants: [Blue, Small] which is out of stock and [Red Large] which is in stock. For choice 'Blue' ths flag will be 'false' and for 'Red' the flag will be true
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether at least one variant with this choice is visible.
     *
     * Default: `false`
     * @readonly
     */
    visible?: boolean;
}
/** @oneof */
interface ConnectedOptionChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    /** Text choice. */
    CHOICE_TEXT = "CHOICE_TEXT",
    /** Single color choice. */
    ONE_COLOR = "ONE_COLOR",
    /** Multiple colors choice. */
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    /** Image choice. */
    IMAGE = "IMAGE"
}
/** @enumType */
type ChoiceTypeWithLiterals = ChoiceType | 'UNKNOWN_CHOICE_TYPE' | 'CHOICE_TEXT' | 'ONE_COLOR' | 'MULTIPLE_COLORS' | 'IMAGE';
interface MultipleColors {
    /**
     * List of color codes.
     * @minLength 3
     * @maxLength 20
     * @minSize 2
     * @maxSize 2
     */
    colorCodes?: string[];
}
interface ConnectedModifier extends ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
    /**
     * ID of a customization with `customizationType: MODIFIER`.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /**
     * Modifier title.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /** Modifier render type. */
    modifierRenderType?: ModifierRenderTypeWithLiterals;
    /** Whether customer input is required for this modifier. */
    mandatory?: boolean;
}
/** @oneof */
interface ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
}
declare enum ModifierRenderType {
    /** Not implemented. */
    UNKNOWN_MODIFIER_RENDER_TYPE = "UNKNOWN_MODIFIER_RENDER_TYPE",
    /** Free text. */
    FREE_TEXT = "FREE_TEXT",
    /** Text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Swatch choices. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
/** @enumType */
type ModifierRenderTypeWithLiterals = ModifierRenderType | 'UNKNOWN_MODIFIER_RENDER_TYPE' | 'FREE_TEXT' | 'TEXT_CHOICES' | 'SWATCH_CHOICES';
interface FreeTextSettings {
    /** Minimum number of characters. */
    minCharCount?: number;
    /**
     * Maximum number of characters.
     * @max 500
     */
    maxCharCount?: number;
    /**
     * Default amount to be added to the product's price.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    defaultAddedPrice?: string | null;
    /**
     * Title of the text to be input by the customer.
     * @minLength 1
     * @maxLength 150
     */
    title?: string;
}
interface ModifierChoicesSettings {
    /**
     * List of modifier choices.
     * @minSize 1
     * @maxSize 100
     * @immutable
     */
    choices?: ConnectedModifierChoice[];
}
interface ConnectedModifierChoice extends ConnectedModifierChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
    /**
     * Choice ID.
     * @format GUID
     */
    choiceId?: string | null;
    /**
     * Product media.
     * @maxSize 100
     */
    linkedMedia?: ProductMedia[];
    /** Choice type. */
    choiceType?: ChoiceTypeWithLiterals;
    /**
     * Modifier key. Used for eCommerce integration.
     * @readonly
     * @minLength 1
     * @maxLength 50
     */
    key?: string;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Added price.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    addedPrice?: string | null;
}
/** @oneof */
interface ConnectedModifierChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
}
interface Brand {
    /**
     * Brand ID.
     * @format GUID
     */
    _id?: string | null;
    /**
     * Brand name.
     * @maxLength 50
     */
    name?: string | null;
}
interface InfoSection {
    /**
     * Info section ID.
     * @format GUID
     */
    _id?: string | null;
    /**
     * Info section unique name.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @maxLength 100
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @minLength 1
     * @maxLength 50
     * @readonly
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     * > **Note:** Returned only when you pass `"INFO_SECTION_DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"INFO_SECTION_PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
}
interface Ribbon {
    /**
     * Ribbon ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /**
     * Ribbon name.
     * @maxLength 30
     */
    name?: string | null;
}
interface ProductCategoriesInfo {
    /**
     * A list of categories related to product.
     * @readonly
     * @maxSize 2000
     */
    categories?: ProductCategory[];
}
interface ProductCategory {
    /**
     * Category ID.
     * @format GUID
     */
    _id?: string;
    /**
     * Index location of the product within the category, which can be utilized for sorting products in a specific category. For detailed instructions on how to set this up, refer to the [Add and arrange products in category](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/sample-use-cases-and-flows#add-and-arrange-products-in-category) sample flow.
     * @max 200
     */
    index?: number | null;
}
interface ProductCategoryIdsInfo {
    /**
     * A list of category ids related to product.
     * @readonly
     * @maxSize 2000
     * @format GUID
     */
    categoryIds?: string[];
}
interface PriceRange {
    /** Minimum value. */
    minValue?: FixedMonetaryAmount;
    /** Maximum value. */
    maxValue?: FixedMonetaryAmount;
}
interface FixedMonetaryAmount {
    /**
     * Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     * @maxLength 20
     */
    formattedAmount?: string | null;
}
interface Inventory {
    /**
     * Current availability status.
     * @readonly
     */
    availabilityStatus?: InventoryAvailabilityStatusWithLiterals;
    /**
     * Current preorder status.
     * @readonly
     */
    preorderStatus?: PreorderStatusWithLiterals;
    /**
     * Preorder availability status.
     * @readonly
     */
    preorderAvailability?: ProductPreorderAvailabilityWithLiterals;
}
declare enum InventoryAvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** All variants are in stock and available for purchase. */
    IN_STOCK = "IN_STOCK",
    /** All variants are out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Some variants are out of stock and some are in stock and available for purchase. */
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
/** @enumType */
type InventoryAvailabilityStatusWithLiterals = InventoryAvailabilityStatus | 'UNKNOWN_AVAILABILITY_STATUS' | 'IN_STOCK' | 'OUT_OF_STOCK' | 'PARTIALLY_OUT_OF_STOCK';
declare enum PreorderStatus {
    UNKNOWN_PREORDER_STATUS = "UNKNOWN_PREORDER_STATUS",
    /** All variants are enabled for preorder. */
    ENABLED = "ENABLED",
    /** All variants are disabled for preorder. */
    DISABLED = "DISABLED",
    /** Some variants are disabled and some are enabled for preorder. */
    PARTIALLY_ENABLED = "PARTIALLY_ENABLED"
}
/** @enumType */
type PreorderStatusWithLiterals = PreorderStatus | 'UNKNOWN_PREORDER_STATUS' | 'ENABLED' | 'DISABLED' | 'PARTIALLY_ENABLED';
declare enum ProductPreorderAvailability {
    UNKNOWN_PREORDER_AVAILABILITY_STATUS = "UNKNOWN_PREORDER_AVAILABILITY_STATUS",
    /** All the product variants are available for preorder. */
    ALL_VARIANTS = "ALL_VARIANTS",
    /** None of the product variants are available for preorder. */
    NO_VARIANTS = "NO_VARIANTS",
    /** Some of the product variants are available for preorder. */
    SOME_VARIANTS = "SOME_VARIANTS"
}
/** @enumType */
type ProductPreorderAvailabilityWithLiterals = ProductPreorderAvailability | 'UNKNOWN_PREORDER_AVAILABILITY_STATUS' | 'ALL_VARIANTS' | 'NO_VARIANTS' | 'SOME_VARIANTS';
declare enum ProductType {
    /** Not implemented. */
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    /** Physical product. */
    PHYSICAL = "PHYSICAL",
    /** Digital product. */
    DIGITAL = "DIGITAL"
}
/** @enumType */
type ProductTypeWithLiterals = ProductType | 'UNKNOWN_PRODUCT_TYPE' | 'PHYSICAL' | 'DIGITAL';
interface PhysicalProperties {
    /**
     * Price per unit settings.
     * > **Note:** Use this field only when relevant. For example, for products that are sold by weight, volume, or length.
     */
    pricePerUnit?: PricePerUnitSettings;
    /**
     * Fulfiller ID.
     * @format GUID
     */
    fulfillerId?: string | null;
    /**
     * Product shipping weight range - Calculated from the lightest and heaviest variant shipping weights.
     * @readonly
     */
    shippingWeightRange?: WeightRange;
    /**
     * Product price per unit range. The minimum and maximum price per unit of all the variants.
     * @readonly
     */
    pricePerUnitRange?: PricePerUnitRange;
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfo;
    /**
     * Delivery profile ID.
     * @format GUID
     */
    deliveryProfileId?: string | null;
}
interface PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     * @min 0.01
     * @max 999999999.99
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     */
    measurementUnit?: MeasurementUnitWithLiterals;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
/** @enumType */
type MeasurementUnitWithLiterals = MeasurementUnit | 'UNSPECIFIED' | 'ML' | 'CL' | 'L' | 'CBM' | 'MG' | 'G' | 'KG' | 'MM' | 'CM' | 'M' | 'SQM' | 'OZ' | 'LB' | 'FLOZ' | 'PT' | 'QT' | 'GAL' | 'IN' | 'FT' | 'YD' | 'SQFT';
interface WeightRange {
    /**
     * Minimum weight across all variants associated with this product.
     * @max 999999999.99
     */
    minValue?: number;
    /**
     * Maximum weight across all variants associated with this product.
     * @max 999999999.99
     */
    maxValue?: number;
}
interface PricePerUnitRange {
    /** Minimum price per unit across all variants. */
    minValue?: PricePerUnitRangePricePerUnit;
    /** Maximum price per unit across all variants. */
    maxValue?: PricePerUnitRangePricePerUnit;
}
interface PricePerUnitRangePricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account pricePerUnit settings of product and variants and price of variants.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit info in the format of variant specific data / product setting, for example â‚¬4.00 / 1 Kg.
     * > **Note:** This field is returned by the API only when you pass `fields: "CURRENCY"` in a request.
     * @readonly
     * @maxLength 100
     */
    description?: string | null;
}
interface WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnitWithLiterals;
}
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface BreadcrumbsInfo {
    /**
     * Breadcrumbs.
     * @readonly
     * @maxSize 5
     */
    breadcrumbs?: BreadCrumb[];
}
interface BreadCrumb {
    /**
     * Category ID.
     * @format GUID
     */
    categoryId?: string;
    /**
     * Category name.
     * @minLength 1
     * @maxLength 80
     */
    categoryName?: string;
    /**
     * Category slug.
     * @minLength 1
     * @maxLength 100
     */
    categorySlug?: string;
}
interface VariantsInfo {
    /**
     * List of related variants.
     * @minSize 1
     * @maxSize 1000
     */
    variants?: Variant[];
}
interface Variant extends VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     */
    sku?: string | null;
    /**
     * Variant barcode.
     * @minLength 1
     * @maxLength 40
     */
    barcode?: string | null;
    /**
     * List of choices that define the product's variant, which requires exactly one choice per product option.
     * Must use `optionChoiceNames` in all requests this field is required.
     * Empty only for default variants of unmanaged products.
     * @maxSize 6
     * @immutable
     */
    choices?: OptionChoice[];
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.actual_price`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: InventoryStatus;
}
/** @oneof */
interface VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface OptionChoice {
    /** Option and choice IDs. These match the IDs of the option and choice from the product's options field. */
    optionChoiceIds?: OptionChoiceIds;
    /**
     * Option and choice names.
     * This needs to be used in all requests `OptionChoice` is needed, and all `OptionChoiceNames` fields are required.
     * > **Note:** Returned only when you pass `"VARIANT_OPTION_CHOICE_NAMES"` to the `fields` array in Products API requests.
     */
    optionChoiceNames?: OptionChoiceNames;
}
interface OptionChoiceIds {
    /**
     * Option ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    optionId?: string;
    /**
     * Choice ID.
     * @format GUID
     * @immutable
     */
    choiceId?: string;
}
interface OptionChoiceNames {
    /**
     * Option name.
     * @minLength 1
     */
    optionName?: string;
    /**
     * Choice name.
     * @minLength 1
     */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderTypeWithLiterals;
}
interface PriceInfo {
    /** Variant price. Must be greater or equal to 0. */
    actualPrice?: FixedMonetaryAmount;
    /** The compare-at-price represents the original price of a product before any discount. It is optional and should only be set if a discount applies. When set, it must be higher than the current price to reflect accurate savings. */
    compareAtPrice?: FixedMonetaryAmount;
}
interface RevenueDetails {
    /** Item cost. */
    cost?: FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     * @max 1
     */
    profitMargin?: number;
}
interface VariantPhysicalProperties {
    /**
     * Variant shipping weight.
     * product.physicalProperties.shipping_weight_range values are taken from here.
     * @max 999999999.99
     */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     */
    pricePerUnit?: PricePerUnit;
}
interface PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     */
    settings?: PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     * @maxLength 100
     */
    description?: string | null;
}
interface VariantDigitalProperties {
    /** Digital file which will be downloaded by customer after successful purchase. */
    digitalFile?: SecuredMedia;
}
interface SecuredMedia {
    /**
     * Media ID in media manager.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * Original file name.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { maxScale:0 }
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: FileTypeWithLiterals;
}
declare enum FileType {
    /** Unspecified file type. */
    UNSPECIFIED = "UNSPECIFIED",
    /** Secure picture file. */
    SECURE_PICTURE = "SECURE_PICTURE",
    /** Secure video file. */
    SECURE_VIDEO = "SECURE_VIDEO",
    /** Secure document file. */
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    /** Secure music file. */
    SECURE_MUSIC = "SECURE_MUSIC",
    /** Secure archive file. */
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** @enumType */
type FileTypeWithLiterals = FileType | 'UNSPECIFIED' | 'SECURE_PICTURE' | 'SECURE_VIDEO' | 'SECURE_DOCUMENT' | 'SECURE_MUSIC' | 'SECURE_ARCHIVE';
interface SubscriptionPricesInfo {
    /**
     * Subscription prices.
     * @maxSize 6
     */
    subscriptionPrices?: SubscriptionPrice[];
}
interface SubscriptionPrice {
    /**
     * Subscription ID.
     * @format GUID
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.actual_price`
     * @readonly
     */
    price?: FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: SubscriptionPricePerUnit;
}
interface SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     * @maxLength 20
     */
    description?: string | null;
}
interface InventoryStatus {
    /** Whether the variant is in stock. */
    inStock?: boolean;
    /** Whether preorder is enabled for this variant. */
    preorderEnabled?: boolean;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface SubscriptionDetails {
    /**
     * Subscriptions.
     * @minSize 1
     * @maxSize 6
     */
    subscriptions?: Subscription[];
    /**
     * Whether to allow one-time purchases in addition to subscription-based purchases.
     *
     * Default: `false`
     */
    allowOneTimePurchases?: boolean | null;
}
interface Subscription extends SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends.
     * @min 2
     * @max 999
     */
    billingCycles?: number;
    /**
     * Subscription ID.
     * @format GUID
     * @immutable
     */
    _id?: string | null;
    /**
     * Subscription title.
     * @minLength 1
     * @maxLength 20
     */
    title?: string;
    /**
     * Subscription description.
     * @maxLength 60
     */
    description?: string | null;
    /**
     * Whether the subscription is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Frequency of recurring payment.
     * For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * Interval of recurring payment. Default: `1`. For example, if `frequency: MONTH`, `billingCycles: 3` and `interval: 2`; payment will be made every 2 months for a total of 6 months.
     * @min 1
     * @max 50
     */
    interval?: number | null;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `amount: 20`, `type: AMOUNT`.
     */
    discount?: SubscriptionDiscount;
}
/** @oneof */
interface SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends.
     * @min 2
     * @max 999
     */
    billingCycles?: number;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface SubscriptionDiscount extends SubscriptionDiscountDiscountOneOf {
    /**
     * Amount to discount from the variant discounted_price.
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    amountOff?: string;
    /**
     * Percentage to discount from variant discounted_price.
     * @min 0.1
     * @max 99.9
     */
    percentOff?: number;
    /** Discount type. */
    type?: DiscountTypeWithLiterals;
}
/** @oneof */
interface SubscriptionDiscountDiscountOneOf {
    /**
     * Amount to discount from the variant discounted_price.
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    amountOff?: string;
    /**
     * Percentage to discount from variant discounted_price.
     * @min 0.1
     * @max 99.9
     */
    percentOff?: number;
}
declare enum DiscountType {
    UNKNOWN_DISCOUNT = "UNKNOWN_DISCOUNT",
    /** Discount by a specific amount. */
    AMOUNT = "AMOUNT",
    /** Discount by a percentage. */
    PERCENT = "PERCENT"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'UNKNOWN_DISCOUNT' | 'AMOUNT' | 'PERCENT';
interface VariantSummary {
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantCount?: number;
}
interface MinVariantPriceInfo {
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.actualPrice`
     * @readonly
     */
    minSubscriptionPrice?: FixedMonetaryAmount;
    /**
     * Subscription price per unit calculated value of price per unit.
     * Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    minSubscriptionPricePerUnit?: string | null;
    /**
     * Variant price per unit.
     * @readonly
     */
    pricePerUnitData?: PricePerUnit;
    /**
     * Variant SKU (stock keeping unit).
     * @readonly
     * @minLength 1
     * @maxLength 40
     */
    sku?: string | null;
    /**
     * Variant shipping weight.
     * @readonly
     * @max 999999999.99
     */
    weight?: number | null;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    revenueDetails?: RevenueDetails;
    /** Variant price. Must be greater or equal to 0. */
    actualPrice?: FixedMonetaryAmount;
    /** The compare-at-price represents the original price of a product before any discount. It is optional and should only be set if a discount applies. When set, it must be higher than the current price to reflect accurate savings. */
    compareAtPrice?: FixedMonetaryAmount;
}
interface UpdateDocumentsEvent extends UpdateDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: DocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update documents matching filter */
    updateByFilter?: UpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: UpdateExistingOperation;
    /**
     * application which owns documents
     * @minLength 2
     */
    appDefId?: string | null;
    /**
     * type of the documents
     * @minLength 2
     */
    documentType?: string | null;
    /**
     * language of the documents
     * @minLength 2
     */
    language?: string | null;
    /**
     * site documents belong to
     * @minLength 2
     */
    msId?: string | null;
}
/** @oneof */
interface UpdateDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: DocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update documents matching filter */
    updateByFilter?: UpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: UpdateExistingOperation;
}
interface DocumentUpdateOperation {
    /** documents to index or update */
    documents?: IndexDocument[];
}
interface IndexDocument {
    /** data bag with non-searchable fields (url, image) */
    payload?: DocumentPayload;
    /** what type of users should documents be visible to */
    exposure?: EnumWithLiterals;
    /** document with mandatory fields (id, title, description) and with fields specific to the type of the document */
    document?: Record<string, any> | null;
    /** what member groups is the document exposed to. Used only with GROUP_PROTECTED exposure */
    permittedMemberGroups?: string[];
    /** if true SEO is disabled for this document */
    seoHidden?: boolean | null;
    /** if true the page is a lightbox popup */
    isPopup?: boolean | null;
}
interface DocumentPayload {
    /** url of the page representing the document */
    url?: string | null;
    /** image which represents the document */
    documentImage?: DocumentImage;
}
interface DocumentImage {
    /** the name of the image */
    name?: string;
    /** the width of the image */
    width?: number;
    /** the height of the image */
    height?: number;
}
declare enum Enum {
    /** Default value. Means that permission not set */
    UNKNOWN = "UNKNOWN",
    /** Protected exposure. Exposed to members and owners */
    PROTECTED = "PROTECTED",
    /** Private exposure. Exposed to owners */
    PRIVATE = "PRIVATE",
    /** Public exposure. Visible to everyone */
    PUBLIC = "PUBLIC",
    /** Used for partial updates, to state that exposure is not changing */
    UNCHANGED = "UNCHANGED",
    /** Protected to members of permitted groups and owners */
    GROUP_PROTECTED = "GROUP_PROTECTED"
}
/** @enumType */
type EnumWithLiterals = Enum | 'UNKNOWN' | 'PROTECTED' | 'PRIVATE' | 'PUBLIC' | 'UNCHANGED' | 'GROUP_PROTECTED';
interface DeleteByIdsOperation {
    /** ids of the documents to delete */
    documentIds?: string[];
}
interface DeleteByFilterOperation {
    /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
    filter?: Record<string, any> | null;
}
interface UpdateByFilterOperation {
    /** documents matching this filter will be updated */
    filter?: Record<string, any> | null;
    /** partial document to apply */
    document?: IndexDocument;
}
interface UpdateExistingOperation {
    /** documents to update */
    documents?: IndexDocument[];
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface SearchIndexingNotification {
    /** new state of indexing for the site specified in ms_id */
    indexState?: StateWithLiterals;
    /** type of the document the notification is targeted for. Applies to all types if not provided */
    documentType?: string | null;
    /** languaInternalDocumentUpdateByFilterOperationge the notification is targeted for. Applies to all languages if not provided */
    language?: string | null;
    /**
     * site for which notification is targeted
     * @minLength 2
     */
    msId?: string | null;
}
declare enum State {
    /** default state */
    Unknown = "Unknown",
    /** metasite does not require site search indexing */
    Off = "Off",
    /** metasite requires site search indexing */
    On = "On"
}
/** @enumType */
type StateWithLiterals = State | 'Unknown' | 'Off' | 'On';
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */
    customTag?: CustomTag;
    /**
     * tell us why you're invalidating the cache. You don't need to add your app name
     * @maxLength 256
     */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */
    customTag?: CustomTag;
}
interface App {
    /**
     * The AppDefId
     * @minLength 1
     */
    appDefId?: string;
    /**
     * The instance Id
     * @format GUID
     */
    instanceId?: string;
}
interface Page {
    /**
     * the msid the page is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Page ID
     * @minLength 1
     */
    pageId?: string;
}
interface URI {
    /**
     * the msid the URI is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes
     * @minLength 1
     */
    uriPath?: string;
}
interface File {
    /**
     * the msid the file is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by filename (for media files such as PDFs)
     * @minLength 1
     * @maxLength 256
     */
    fileName?: string;
}
interface CustomTag {
    /**
     * the msid the tag is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Tag to invalidate by
     * @minLength 1
     * @maxLength 256
     */
    tag?: string;
}
interface DoNotCallCreateProductRequest {
    /** Product to be created */
    product?: V3Product;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
declare enum SingleEntityOpsRequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    /** The product's public storefront URL, including both relative path and full URL with base domain. */
    URL = "URL",
    /** Currency information including the currency code and formatted price amounts for storefront display. */
    CURRENCY = "CURRENCY",
    /** Returns basic info section metadata including IDs, unique names, and titles. Use with `INFO_SECTION_DESCRIPTION` or `INFO_SECTION_PLAIN_DESCRIPTION` to include content. */
    INFO_SECTION = "INFO_SECTION",
    /**
     * Returns merchant-related financial data including cost ranges and variant revenue details like cost, profit, and profit margin.
     * Requires the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    MERCHANT_DATA = "MERCHANT_DATA",
    /** Provides product description as plain HTML text. */
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    /** Returns info section descriptions as HTML content. Use with `INFO_SECTION` for complete metadata. */
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    /** Details subscription pricing options, empty for non-subscription products. */
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    /** Returns the category breadcrumb navigation path from root categories down to the product's main category, including category IDs, names, and slugs. */
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    /** Returns the weight measurement unit (KG, LB) for the product. */
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    /** Enriches variant choices with human-readable option and choice names alongside render types. */
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    /** Returns all media items associated with the product, including detailed metadata (URLs, alt-text, dimensions, filenames, file sizes). */
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    /** Returns the product description as rich content with complete node structure, metadata, and styling information. */
    DESCRIPTION = "DESCRIPTION",
    /** Provides the IDs and indexes of categories the product is directly assigned to. */
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    /** Provides IDs and indexes for all categories including inherited parent categories. */
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    /** Returns info section descriptions as rich content with complete node structure, metadata, and styling information. Use with `INFO_SECTION` for complete metadata. */
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    /** Returns an optimized thumbnail image with standard dimensions, suitable for listings or previews. */
    THUMBNAIL = "THUMBNAIL"
}
/** @enumType */
type SingleEntityOpsRequestedFieldsWithLiterals = SingleEntityOpsRequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'URL' | 'CURRENCY' | 'INFO_SECTION' | 'MERCHANT_DATA' | 'PLAIN_DESCRIPTION' | 'INFO_SECTION_PLAIN_DESCRIPTION' | 'SUBSCRIPTION_PRICES_INFO' | 'BREADCRUMBS_INFO' | 'WEIGHT_MEASUREMENT_UNIT_INFO' | 'VARIANT_OPTION_CHOICE_NAMES' | 'MEDIA_ITEMS_INFO' | 'DESCRIPTION' | 'DIRECT_CATEGORIES_INFO' | 'ALL_CATEGORIES_INFO' | 'INFO_SECTION_DESCRIPTION' | 'THUMBNAIL';
interface DoNotCallCreateProductResponse {
    /** The created Product */
    product?: V3Product;
}
interface DuplicateMediaIdAssignedToProduct {
    /**
     * List of media IDs passed more than once.
     * @maxSize 15
     * @format GUID
     */
    mediaIds?: string[];
}
interface GetProductRequest {
    /**
     * Id of the Product to retrieve
     * @minLength 1
     * @maxLength 36
     */
    productId?: string;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface GetProductResponse {
    /** The retrieved Product */
    product?: V3Product;
}
interface GetProductBySlugRequest {
    /**
     * Product slug. A permanent, friendly URL name unique per store.
     * @minLength 1
     * @maxLength 100
     */
    slug?: string;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface GetProductBySlugResponse {
    /** The retrieved Product */
    product?: V3Product;
}
interface DoNotCallUpdateProductRequest {
    /** Product to be updated, may be partial */
    product?: V3Product;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface DoNotCallUpdateProductResponse {
    /** The updated Product */
    product?: V3Product;
}
interface VariantsRemoved {
    /**
     * Removed variants ids.
     * @format GUID
     * @minSize 1
     * @maxSize 1000
     */
    variantIds?: string[];
}
interface UnsupportedFieldMasks {
    /**
     * Field masks provided in request but not supported
     * @maxLength 1000
     * @maxSize 100
     */
    fieldMasks?: string[];
}
interface DeleteProductRequest {
    /**
     * Id of the Product to delete
     * @minLength 1
     * @maxLength 36
     */
    productId?: string;
}
interface DeleteProductResponse {
}
interface SearchProductsRequest {
    /**
     * WQL expression. Please pay attention that unlike other arrays when you want to filter by `inventory` or `variants` instead of standard array operators you must use `$matchItems` (for usage see examples).
     * It means that product will be returned only if one or more items satisfy all filters specified in $matchItems.
     * For example, if you have 2 variants: one visible with price 10 and another one not visible with price 20, when inside $matchItems you specify `visible:true` and `price > 15` nothing will be returned because there are no variants which satisfy both conditions.
     * You still can use `$isEmpty` and `$exists` operators for fields listed above.
     * See examples to understand supported capabilities.
     * This endpoint does not return variants-info, even though it is part of the entity, as including it would result in overly large response objects.
     * If you need variants-info, you can retrieve it for a specific product using the getProduct endpoint.
     */
    search?: CursorSearch;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition.
     * @maxSize 10
     */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum SortType {
    /** Should sort by number of matches. */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
/** @enumType */
type SortTypeWithLiterals = SortType | 'COUNT' | 'VALUE';
declare enum SortDirection {
    /** Should sort by descending order. */
    DESC = "DESC",
    /** Should sort by ascending order. */
    ASC = "ASC"
}
/** @enumType */
type SortDirectionWithLiterals = SortDirection | 'DESC' | 'ASC';
declare enum MissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values from the aggregation results. */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type MissingValuesWithLiterals = MissingValues | 'EXCLUDE' | 'INCLUDE';
interface IncludeMissingValuesOptions {
    /**
     * Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ...
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum ScalarType {
    /** Undefined scalar type. */
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
/** @enumType */
type ScalarTypeWithLiterals = ScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: SortTypeWithLiterals;
    /** Should sort in ascending or descending order */
    sortDirection?: SortDirectionWithLiterals;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: MissingValuesWithLiterals;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    /** Undefined nested aggregation type. */
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationTypeWithLiterals = NestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface RangeAggregation {
    /**
     * List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds
     * @maxSize 50
     */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: ScalarTypeWithLiterals;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: IntervalWithLiterals;
}
declare enum Interval {
    /** Undefined interval type. */
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval. */
    YEAR = "YEAR",
    /** Monthly interval. */
    MONTH = "MONTH",
    /** Weekly interval. */
    WEEK = "WEEK",
    /** Daily interval. */
    DAY = "DAY",
    /** Hourly interval. */
    HOUR = "HOUR",
    /** Minute interval. */
    MINUTE = "MINUTE",
    /** Second interval. */
    SECOND = "SECOND"
}
/** @enumType */
type IntervalWithLiterals = Interval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: NestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dont notation to specify json path
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    /** Undefined aggregation type. */
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation where a user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** A Multi-level aggregation where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** @enumType */
type AggregationTypeWithLiterals = AggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface NestedAggregation {
    /**
     * Flattened list of aggregations, where each next aggregation is nested within previous one
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationItem[];
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: ModeWithLiterals;
    /**
     * Search term or expression
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
/** @enumType */
type ModeWithLiterals = Mode | 'OR' | 'AND';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
declare enum RequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    /** The product's public storefront URL, including both relative path and full URL with base domain. */
    URL = "URL",
    /** Currency information including the currency code and formatted price amounts for storefront display. */
    CURRENCY = "CURRENCY",
    /** Returns basic info section metadata including IDs, unique names, and titles. Use with `INFO_SECTION_DESCRIPTION` or `INFO_SECTION_PLAIN_DESCRIPTION` to include content. */
    INFO_SECTION = "INFO_SECTION",
    /**
     * Returns merchant-related financial data including cost ranges and variant revenue details like cost, profit, and profit margin.
     * Requires the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    MERCHANT_DATA = "MERCHANT_DATA",
    /** Provides product description as plain HTML text. */
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    /** Returns info section descriptions as HTML content. Use with `INFO_SECTION` for complete metadata. */
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    /** Details subscription pricing options, empty for non-subscription products. */
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    /** Returns the category breadcrumb navigation path from root categories down to the product's main category, including category IDs, names, and slugs. */
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    /** Returns the weight measurement unit (KG, LB) for the product. */
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    /** Enriches variant choices with human-readable option and choice names alongside render types. */
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    /** Returns all media items associated with the product, including detailed metadata (URLs, alt-text, dimensions, filenames, file sizes). */
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    /** Returns the product description as rich content with complete node structure, metadata, and styling information. */
    DESCRIPTION = "DESCRIPTION",
    /** Provides the IDs and indexes of categories the product is directly assigned to. */
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    /** Provides IDs and indexes for all categories including inherited parent categories. */
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    /** Returns info section descriptions as rich content with complete node structure, metadata, and styling information. Use with `INFO_SECTION` for complete metadata. */
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    /** Returns an optimized thumbnail image with standard dimensions, suitable for listings or previews. */
    THUMBNAIL = "THUMBNAIL"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'URL' | 'CURRENCY' | 'INFO_SECTION' | 'MERCHANT_DATA' | 'PLAIN_DESCRIPTION' | 'INFO_SECTION_PLAIN_DESCRIPTION' | 'SUBSCRIPTION_PRICES_INFO' | 'BREADCRUMBS_INFO' | 'WEIGHT_MEASUREMENT_UNIT_INFO' | 'VARIANT_OPTION_CHOICE_NAMES' | 'MEDIA_ITEMS_INFO' | 'DESCRIPTION' | 'DIRECT_CATEGORIES_INFO' | 'ALL_CATEGORIES_INFO' | 'INFO_SECTION_DESCRIPTION' | 'THUMBNAIL';
interface SearchProductsResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface AggregationData {
    /**
     * key = aggregation name (as derived from search request)
     * @maxSize 10000
     */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /**
     * Value of the field
     * @maxLength 100
     */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /**
     * User-defined name of aggregation, matches the one provided in request
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that matches result */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, matches the one provided in request
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /**
     * List of value aggregations
     * @maxSize 250
     */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /**
     * List of ranges returned in same order as requested
     * @maxSize 50
     */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: ScalarTypeWithLiterals;
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedValueAggregationResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Nested aggregations */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /**
     * Date in ISO 8601 format
     * @maxLength 100
     */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface GroupByValueResults {
    /**
     * List of value aggregations
     * @maxSize 1000
     */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /**
     * List of date histogram aggregations
     * @maxSize 200
     */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /**
     * List of nested aggregations
     * @maxSize 1000
     */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
    /**
     * User-defined name of aggregation as derived from search request
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by as derived from search request
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
}
interface SearchRelatedProductsRequest {
    /** Search parameters. */
    searchRelated?: SearchRelated;
}
interface SearchRelated {
    /**
     * A list of entity IDs to search related entities for
     * @minSize 1
     * @maxSize 10
     * @maxLength 50
     */
    relatedToIds?: string[];
    /** Search details */
    search?: SearchRelatedDetails;
    /** A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Number of related documents to return
     * @max 100
     */
    limit?: number | null;
}
interface SearchRelatedDetails {
    /**
     * Search term or expression
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
}
interface SearchRelatedProductsResponse {
    /**
     * The IDs of related Products that satisfy the request.
     * @format GUID
     * @maxLength 100
     */
    productIds?: string[];
}
interface EventuallyConsistentQueryProductsRequest {
    /**
     * WQL expression. Please pay attention that unlike other arrays when you want to filter by `inventory`, `options` or `variants` instead of standard array operators you must use `$matchItems` (for usage see examples).
     * It means that product will be returned only if one or more items satisfy all filters specified in $matchItems.
     * For example, if you have 2 variants: one visible with price 10 and another one not visible with price 20, when inside $matchItems you specify `visible:true` and `price > 15` nothing will be returned because there are no variants which satisfy both conditions.
     * You still can use `$isEmpty` and `$exists` operators for fields listed above.
     * See examples to understand supported capabilities.
     */
    query?: CursorQuery;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface EventuallyConsistentQueryProductsResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
}
interface QueryProductsRequest {
    /** WQL expression */
    query?: CursorQuery;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface QueryProductsResponse {
    /** The retrieved Products */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface DeprecatedSearchProductsWithOffsetRequest {
    /** Filter and sort with limit/offset based paging */
    search?: PlatformOffsetSearch;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface PlatformOffsetSearch extends PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
    /** A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: CommonAggregation[];
    /** free text to match in searchable fields */
    search?: CommonSearchDetails;
}
/** @oneof */
interface PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
}
interface CommonSorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrderWithLiterals;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type CommonSortOrderWithLiterals = CommonSortOrder | 'ASC' | 'DESC';
interface CommonAggregation extends CommonAggregationKindOneOf {
    /** A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`. */
    nested?: AggregationNestedAggregation;
    /**
     * Aggregation name, returned in `aggregations.results.name`.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation to perform. Must align with the corresponding aggregation field. */
    type?: CommonAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
interface CommonAggregationKindOneOf {
    /** A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`. */
    nested?: AggregationNestedAggregation;
}
interface RangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum ValueAggregationSortType {
    /** Number of matches in the results. */
    COUNT = "COUNT",
    /** Alphabetically by the field value. */
    VALUE = "VALUE"
}
/** @enumType */
type ValueAggregationSortTypeWithLiterals = ValueAggregationSortType | 'COUNT' | 'VALUE';
declare enum ValueAggregationSortDirection {
    /** Descending order. */
    DESC = "DESC",
    /** Ascending order. */
    ASC = "ASC"
}
/** @enumType */
type ValueAggregationSortDirectionWithLiterals = ValueAggregationSortDirection | 'DESC' | 'ASC';
declare enum ValueAggregationMissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type ValueAggregationMissingValuesWithLiterals = ValueAggregationMissingValues | 'EXCLUDE' | 'INCLUDE';
interface ValueAggregationIncludeMissingValuesOptions {
    /**
     * Specify a custom name for the bucket containing the missing values. Defaults are `"N/A"` for strings, `0` for integers, and `false` for booleans.
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum CommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Total number of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
/** @enumType */
type CommonScalarTypeWithLiterals = CommonScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface AggregationValueAggregation extends AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values in results. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
    /** Sort type. */
    sortType?: ValueAggregationSortTypeWithLiterals;
    /** Sort direction. */
    sortDirection?: ValueAggregationSortDirectionWithLiterals;
    /**
     * Number of aggregation results to return.
     * Min: `1`
     * Max: `250`
     * Default: `10`
     */
    limit?: number | null;
    /**
     * Whether to include or exclude missing values in the aggregation results.
     * Default: `EXCLUDE`.
     */
    missingValues?: ValueAggregationMissingValuesWithLiterals;
}
/** @oneof */
interface AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values in results. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
}
declare enum NestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** Calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. */
    VALUE = "VALUE",
    /** Calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. */
    RANGE = "RANGE",
    /** Calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    SCALAR = "SCALAR",
    /** Calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationNestedAggregationTypeWithLiterals = NestedAggregationNestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface AggregationRangeAggregation {
    /**
     * List of range buckets. During aggregation each entity is placed in the first bucket its value falls into, based on the provided range bounds.
     * @maxSize 50
     */
    buckets?: RangeAggregationRangeBucket[];
}
interface AggregationScalarAggregation {
    /** Operator type for the scalar aggregation. */
    type?: CommonScalarTypeWithLiterals;
}
interface AggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: DateHistogramAggregationIntervalWithLiterals;
}
declare enum DateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    YEAR = "YEAR",
    MONTH = "MONTH",
    WEEK = "WEEK",
    DAY = "DAY",
    HOUR = "HOUR",
    MINUTE = "MINUTE",
    SECOND = "SECOND"
}
/** @enumType */
type DateHistogramAggregationIntervalWithLiterals = DateHistogramAggregationInterval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationNestedAggregationItem extends NestedAggregationNestedAggregationItemKindOneOf {
    /** A value aggregation calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of orders for each order status. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). For example, use a date histogram to determine how many reservations have been made at a restaurant each week. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /**
     * Unique, caller-defined aggregation name, returned in `aggregations.results`.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation to perform. The matching aggregation field must be passed. */
    type?: NestedAggregationNestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationNestedAggregationItemKindOneOf {
    /** A value aggregation calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of orders for each order status. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). For example, use a date histogram to determine how many reservations have been made at a restaurant each week. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    dateHistogram?: AggregationDateHistogramAggregation;
}
declare enum CommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** Calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. */
    VALUE = "VALUE",
    /** Calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. */
    RANGE = "RANGE",
    /** Calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    SCALAR = "SCALAR",
    /** Calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Flattened list of aggregations, where each aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** @enumType */
type CommonAggregationTypeWithLiterals = CommonAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface AggregationNestedAggregation {
    /**
     * Flattened list of aggregations, where each aggregation is nested within previous one.
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationNestedAggregationItem[];
}
interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
    /**
     * Unique, caller-defined aggregation name, returned in `aggregations.results`.
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Field to aggregate by.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
}
interface CommonSearchDetails {
    /** Search mode. Defines the search logic for combining multiple terms in the `expression`. */
    mode?: SearchDetailsModeWithLiterals;
    /**
     * Search term or expression.
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If the array is empty, all searchable fields are searched. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Whether to enable the search function to use an algorithm to automatically find results that are close to the search expression, such as typos and declensions. */
    fuzzy?: boolean;
}
declare enum SearchDetailsMode {
    /** At least one of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
/** @enumType */
type SearchDetailsModeWithLiterals = SearchDetailsMode | 'OR' | 'AND';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface DeprecatedSearchProductsWithOffsetResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface RetrieveVariantsRequest {
    /**
     * Ids of the product and variants to retrieve
     * @maxSize 100
     */
    productVariantIds?: ProductVariantIds[];
    /**
     * Pointer to the next page in the list of results.
     * Pass the relevant cursor token from the `pagingMetadata` in the previous call's response.
     * Not relevant for the first request.
     */
    cursorPaging?: VariantsCursorPaging;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: VariantsOpsRequestedFieldsWithLiterals[];
}
interface ProductVariantIds {
    /**
     * Product id of the requested variants.
     * @minLength 1
     * @maxLength 36
     */
    productId?: string;
    /**
     * A list of variant ids.
     * @maxSize 1000
     * @minLength 1
     * @maxLength 36
     */
    variantIds?: string[];
}
interface VariantsCursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 1000
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 64
     */
    cursor?: string | null;
}
declare enum VariantsOpsRequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    CURRENCY = "CURRENCY",
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    MERCHANT_DATA = "MERCHANT_DATA",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    THUMBNAIL = "THUMBNAIL"
}
/** @enumType */
type VariantsOpsRequestedFieldsWithLiterals = VariantsOpsRequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'CURRENCY' | 'MERCHANT_DATA' | 'SUBSCRIPTION_PRICES_INFO' | 'VARIANT_OPTION_CHOICE_NAMES' | 'THUMBNAIL';
interface RetrieveVariantsResponse {
    /** The retrieved Products and Variants */
    productVariants?: ProductVariants[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
}
interface ProductVariants {
    /**
     * Product id of the requested variants.
     * @minLength 1
     * @maxLength 36
     */
    productId?: string;
    /**
     * A list of variants.
     * @maxSize 1000
     */
    variants?: Variant[];
}
interface CountProductsRequest {
    /**
     * A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language).
     * To understand supported filters and limitations see `SearchProducts` method.
     */
    filter?: Record<string, any> | null;
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
interface CountProductsResponse {
    /** The amount of products which apply to the request */
    count?: number;
}
interface DoNotCallBulkCreateProductsRequest {
    /**
     * List of products to be created.
     * @minSize 1
     * @maxSize 100
     */
    products?: V3Product[];
    /** Whether to return the full product entity in the response. */
    returnEntity?: boolean;
    /**
     * A list of requested fields to be included in the response. Relevant only if `return_entity` true.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface DoNotCallBulkCreateProductsResponse {
    /**
     * Products created by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkProductResult {
    /** Bulk action metadata for product. */
    itemMetadata?: CommonItemMetadata;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
interface CommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface DoNotCallBulkUpdateProductsRequest {
    /**
     * List of products to be updated.
     * @minSize 1
     * @maxSize 100
     */
    products?: MaskedProduct[];
    /** Whether to return the full product entity in the response. */
    returnEntity?: boolean;
    /**
     * A list of requested fields to be included in the response. Relevant only if `return_entity` true.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface MaskedProduct {
    /** product to be updated, may be partial. */
    product?: V3Product;
}
interface DoNotCallBulkUpdateProductsResponse {
    /**
     * Products updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "name": "value1",
     * "categoryIds":{"$in":["categoryId1", "categoryId2"]}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Product with new field values. */
    product?: V3Product;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface BulkDeleteProductsRequest {
    /**
     * IDs of products to be deleted.
     * @minLength 1
     * @maxLength 36
     * @minSize 1
     * @maxSize 100
     */
    productIds?: string[];
}
interface BulkDeleteProductsResponse {
    /**
     * Products deleted by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: CommonItemMetadata;
}
interface BulkDeleteProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "actualPriceRange.minValue": {"$lte": 5.99}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface BulkAddInfoSectionsToProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "actualPriceRange.minValue": {"$lte": 5.99}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Info sections to be added
     * @format GUID
     * @minSize 1
     * @maxSize 10
     */
    infoSectionIds?: string[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface FulfillerDeleted {
    /** @format GUID */
    _id?: string;
}
interface BulkAddInfoSectionsToProductsRequest {
    /**
     * Products to be updated with id and revision.
     * @minSize 1
     * @maxSize 100
     */
    products?: ProductIdWithRevision[];
    /**
     * Products to be updated with id and revision.
     * Info section to be added
     * @format GUID
     * @minSize 1
     * @maxSize 10
     */
    infoSectionIds?: string[];
    /** Whether to return all updated product entities in the response. Default: false */
    returnEntity?: boolean;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface ProductIdWithRevision {
    /**
     * ID of product.
     * @minLength 1
     * @maxLength 36
     */
    productId?: string;
    /** The revision of the Product */
    revision?: string;
}
interface BulkAddInfoSectionsToProductsResponse {
    /**
     * Products updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "name": "value1",
     * "categoryIds":{"$in":["categoryId1", "categoryId2"]}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Info sections to be removed
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    infoSectionIds?: string[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface BulkRemoveInfoSectionsFromProductsRequest {
    /**
     * Products to be updated with id and revision.
     * @minSize 1
     * @maxSize 100
     */
    products?: ProductIdWithRevision[];
    /**
     * Info section to be removed.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    infoSectionIds?: string[];
    /** Whether to return all updated product entities in the response. Default: false */
    returnEntity?: boolean;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 5
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface BulkRemoveInfoSectionsFromProductsResponse {
    /**
     * Products updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateVariantsByFilterRequest {
    /** Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains` */
    filter?: Record<string, any> | null;
    /** Variant with new field values. */
    variant?: Variant;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkUpdateVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface BulkAdjustProductVariantsByFilterRequest {
    /** Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$contains` */
    filter?: Record<string, any> | null;
    /** The amount or percentage to change the variants cost by */
    cost?: AdjustValue;
    /** Defines rounding strategy of new calculated prices. Default: CURRENCY_PRECISION. */
    rounding?: RoundingStrategyWithLiterals;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
    /** Actual price adjustment. */
    actualPrice?: AdjustValue;
    /** Compare at price adjustment. */
    compareAtPrice?: AdjustValue;
    /**
     * Set variant actualPrice from compareAtPrice by applying provided discount to it.
     * if compare-at-price doesn't exist, actualPrice will be set to compareAtPrice and the discount will be calculated from it.
     * For example variant compare at price 100$, variant actual price is 95$, requested `compareAtPriceDiscount.percentage` is 10, then old actual price ignored and new actual price set to 90 (100$ - 10%).
     */
    compareAtPriceDiscount?: UnsignedAdjustValue;
}
interface AdjustValue extends AdjustValueAdjustValueOneOf {
    /**
     * A decimal value to increase or reduce from the original value, can be negative.
     * @decimalValue options { gte:-999999999, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to increase or reduce from the current value, can be negative.
     * @min -100
     * @max 1000
     */
    percentage?: number;
}
/** @oneof */
interface AdjustValueAdjustValueOneOf {
    /**
     * A decimal value to increase or reduce from the original value, can be negative.
     * @decimalValue options { gte:-999999999, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to increase or reduce from the current value, can be negative.
     * @min -100
     * @max 1000
     */
    percentage?: number;
}
declare enum RoundingStrategy {
    /** Undefined rounding strategy. */
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices are saved without rounding to keep the maximum possible precision. It's a good idea to round numbers before displaying them.
     * For example, input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices are rounded according to currency precision.
     * For example:, input $3.5555 -> saved value $3.56, input Â¥3.5555 -> saved value Â¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices are rounded to nearest whole number.
     * For example, input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
/** @enumType */
type RoundingStrategyWithLiterals = RoundingStrategy | 'UNKNOWN_ROUNDING_STRATEGY' | 'NO_ROUNDING' | 'CURRENCY_PRECISION' | 'NEAREST_WHOLE_NUMBER';
interface UnsignedAdjustValue extends UnsignedAdjustValueAdjustValueOneOf {
    /**
     * A decimal value to reduce from the original value.
     * @decimalValue options { gte:0, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to reduce from the original value.
     * @max 100
     */
    percentage?: number;
}
/** @oneof */
interface UnsignedAdjustValueAdjustValueOneOf {
    /**
     * A decimal value to reduce from the original value.
     * @decimalValue options { gte:0, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to reduce from the original value.
     * @max 100
     */
    percentage?: number;
}
interface BulkAdjustProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface BulkInventoryItemAction {
    /**
     * Inventory items.
     * @maxSize 1000
     */
    inventoryItems?: InventoryItem[];
    /** Type of bulk inventory changed event - created, updated or deleted */
    eventType?: EventTypeWithLiterals;
}
/** Inventory Item. */
interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    variantId?: string;
    /**
     * Stores location ID.
     * @format GUID
     * @immutable
     */
    locationId?: string | null;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatusWithLiterals;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** Product is out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    IN_STOCK = "IN_STOCK",
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    PREORDER = "PREORDER"
}
/** @enumType */
type AvailabilityStatusWithLiterals = AvailabilityStatus | 'UNKNOWN_AVAILABILITY_STATUS' | 'OUT_OF_STOCK' | 'IN_STOCK' | 'PREORDER';
interface PreorderInfo {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /**
     * A message the customer will see when the item is out of stock and preorder is enabled.
     * @minLength 1
     * @maxLength 250
     */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     * @max 100000
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     * @max 99999
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface Product {
    /**
     * Product name.
     * @maxLength 80
     */
    name?: string | null;
    /**
     * List of category IDs that this product is included in directly.
     * @format GUID
     * @maxSize 2000
     */
    directCategoryIds?: string[];
    /**
     * Variant name.
     * @minLength 1
     * @maxLength 250
     */
    variantName?: string | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     */
    variantSku?: string | null;
    /** Variant visible. */
    variantVisible?: boolean | null;
}
declare enum EventType {
    UNKNOWN = "UNKNOWN",
    CREATED = "CREATED",
    UPDATED = "UPDATED",
    DELETED = "DELETED"
}
/** @enumType */
type EventTypeWithLiterals = EventType | 'UNKNOWN' | 'CREATED' | 'UPDATED' | 'DELETED';
interface CalculateProductInventorPreorderStatusAsyncRequest {
    /**
     * ID of the product to calculate inventory for
     * @format GUID
     */
    productId?: string;
}
interface CalculateProductInventorPreorderStatusAsyncResponse {
}
interface CreateProductRequest {
    /**
     * Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: V3Product;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface CreateProductResponse {
    /** Created product. */
    product?: V3Product;
}
interface VariantsNotAlignedWithProduct {
    /**
     * Variants not aligned with product
     * @maxSize 1000
     */
    variants?: VariantNotAlignedWithProduct[];
}
interface VariantNotAlignedWithProduct {
    /**
     * variant id
     * @format GUID
     */
    variantId?: string;
    /**
     * what's wrong with this specific variant
     * @maxLength 200
     */
    errorDescription?: string;
}
interface CreateProductWithInventoryRequest {
    /**
     * Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: ProductWithInventory;
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface ProductWithInventory extends ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /**
     * Product name.
     * @minLength 1
     * @maxLength 80
     */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     * @maxSize 6
     */
    options?: ConnectedOption[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     * @maxSize 10
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     * @maxSize 10
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * Main category ID.
     * @format GUID
     */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     * @immutable
     */
    productType?: ProductTypeWithLiterals;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    handle?: string | null;
    /**
     * ID of the last import job that affected the product.
     * @internal
     * @format GUID
     */
    importId?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface V3VariantsInfo {
    /**
     * List of related variants.
     * Partial update of variants is not supported so on update you must pass all data for all of them.
     * If you want to update existing variant you must provide `id`, otherwise new variant with different id will be created which might break some integrations that rely on variant ids.
     * @minSize 1
     * @maxSize 1000
     */
    variants?: VariantWithInventory[];
}
interface VariantWithInventory extends VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     */
    sku?: string | null;
    /**
     * Variant barcode.
     * @minLength 1
     * @maxLength 40
     */
    barcode?: string | null;
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /** Inventory item of the variant on the default location. */
    inventoryItem?: InventoryItemComposite;
    /**
     * List of choices.
     * @maxSize 6
     * @immutable
     */
    choices?: OptionChoiceReferences[];
}
/** @oneof */
interface VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface InventoryItemComposite extends InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * If you want to update existing inventory item you must provide id,
     * otherwise new inventory item with different id will be created.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Inventory item revision.
     * @readonly
     */
    revision?: string | null;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
}
/** @oneof */
interface InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
}
interface OptionChoiceReferences {
    /** Option and choice IDs. */
    optionChoiceIds?: V3OptionChoiceIds;
    /** Option and choice names. */
    optionChoiceNames?: V3OptionChoiceNames;
}
interface V3OptionChoiceIds {
    /**
     * Option ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    optionId?: string;
    /**
     * Choice ID.
     * @format GUID
     * @immutable
     */
    choiceId?: string;
}
interface V3OptionChoiceNames {
    /**
     * Option name.
     * @minLength 1
     */
    optionName?: string;
    /**
     * Choice name.
     * @minLength 1
     */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderTypeWithLiterals;
}
interface CreateProductWithInventoryResponse {
    /** Created product. */
    product?: V3Product;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkInventoryItemResults {
    /**
     * Inventories modified by bulk action.
     * @maxSize 1000
     */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
    /** Error details in case of failed action. */
    error?: ApplicationError;
}
interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @format GUID
     */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface CommonBulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateProductRequest {
    /** Product to update. */
    product: V3Product;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface UpdateProductResponse {
    /** Updated product. */
    product?: V3Product;
}
interface UpdateProductWithInventoryRequest {
    /** Product to update. */
    product: ProductWithInventory;
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface UpdateProductWithInventoryResponse {
    /** Updated product. */
    product?: V3Product;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkCreateProductsRequest {
    /**
     * List of products to create.
     * @minSize 1
     * @maxSize 100
     */
    products: V3Product[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface BulkCreateProductsResponse {
    /**
     * Products created by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface CatalogV3BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: WixCommonItemMetadata;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
interface WixCommonItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface InvalidDigitalFileIds {
    /**
     * ids of digital files which caused errors.
     * @maxSize 1000
     * @minLength 1
     * @maxLength 100
     */
    ids?: string[];
}
interface BulkCreateProductsWithInventoryRequest {
    /**
     * List of products to create with inventory.
     * @minSize 1
     * @maxSize 100
     */
    products: ProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface BulkCreateProductsWithInventoryResponse {
    /** Products created by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkProductResults {
    /**
     * Products modified by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkUpdateProductsRequest {
    /**
     * List of products to update.
     * @minSize 1
     * @maxSize 100
     */
    products: V3MaskedProduct[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface V3MaskedProduct {
    /** Product to update. */
    product?: V3Product;
}
interface BulkUpdateProductsResponse {
    /**
     * Products updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkUpdateProductsWithInventoryRequest {
    /**
     * List of products to update.
     * @minSize 1
     * @maxSize 100
     */
    products: MaskedProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface MaskedProductWithInventory {
    /** Product to update. */
    product?: ProductWithInventory;
}
interface BulkUpdateProductsWithInventoryResponse {
    /** Products updated by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface V3BulkUpdateProductsByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface WixCommonSearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: CommonSearchDetailsModeWithLiterals;
    /**
     * Search term or expression
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If the array is empty, all searchable fields are searched. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Whether to enable the search function to use an algorithm to automatically find results that are close to the search expression, such as typos and declensions. */
    fuzzy?: boolean;
}
declare enum CommonSearchDetailsMode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
/** @enumType */
type CommonSearchDetailsModeWithLiterals = CommonSearchDetailsMode | 'OR' | 'AND';
interface V3BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface V3DeleteProductRequest {
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     */
    productId: string;
}
interface V3DeleteProductResponse {
}
interface V3BulkDeleteProductsRequest {
    /**
     * IDs of products to delete.
     * @minLength 1
     * @maxLength 36
     * @minSize 1
     * @maxSize 100
     */
    productIds: string[];
}
interface V3BulkDeleteProductsResponse {
    /**
     * Products deleted by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkDeleteProductsResponseBulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkDeleteProductsResponseBulkProductResult {
    /** Bulk action metadata for products. */
    itemMetadata?: WixCommonItemMetadata;
}
interface V3BulkDeleteProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface V3GetProductRequest {
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     */
    productId: string;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface V3GetProductResponse {
    /** Product. */
    product?: V3Product;
}
interface V3GetProductBySlugRequest {
    /**
     * Product slug.
     * @minLength 1
     * @maxLength 100
     */
    slug: string;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface V3GetProductBySlugResponse {
    /** Product. */
    product?: V3Product;
}
interface V3SearchProductsRequest {
    /** Search options. */
    search?: CommonCursorSearch;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CommonCursorSearch extends CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 10
     */
    sort?: WixCommonSorting[];
    /**
     * Logical groupings of data into facets, with summaries for each facet. For example, use aggregations to allow site visitors to narrow down their search results by selecting specific categories.
     * @maxSize 10
     */
    aggregations?: WixCommonAggregation[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Time zone to adjust date-time-based filters and aggregations, in ISO 8601 (including offsets) or IANA time zone database (including time zone IDs) format.
     * Applies to all relevant filters and aggregations, unless overridden by providing timestamps including time zone. For example, "2023-12-20T10:52:34.795Z".
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CommonCursorPaging;
}
interface WixCommonSorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: WixCommonSortOrderWithLiterals;
    /**
     * When `field_name` is a property of repeated field that is marked as `MATCH_ITEMS` and sort should be done by
     * a specific element from a collection, filter can/should be provided to ensure correct sort value is picked.
     *
     * If multiple filters are provided, they are combined with AND operator.
     *
     * Example:
     * Given we have document like {"id": "1", "nestedField": [{"price": 10, "region": "EU"}, {"price": 20, "region": "US"}]}
     * and `nestedField` is marked as `MATCH_ITEMS`, to ensure that sorting is done by correct region, filter should be
     * { fieldName: "nestedField.price", "select_items_by": [{"nestedField.region": "US"}] }
     * @maxSize 10
     */
    selectItemsBy?: Record<string, any>[] | null;
}
declare enum WixCommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type WixCommonSortOrderWithLiterals = WixCommonSortOrder | 'ASC' | 'DESC';
interface WixCommonAggregation extends WixCommonAggregationKindOneOf {
    /** A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store. */
    value?: CommonAggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. */
    range?: CommonAggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: CommonAggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week. */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`. */
    nested?: CommonAggregationNestedAggregation;
    /**
     * Aggregation name, returned in `aggregations.results.name`.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation to perform. Must align with the corresponding aggregation field. */
    type?: WixCommonAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface WixCommonAggregationKindOneOf {
    /** A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store. */
    value?: CommonAggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. */
    range?: CommonAggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: CommonAggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week. */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`. */
    nested?: CommonAggregationNestedAggregation;
}
interface AggregationRangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum AggregationValueAggregationSortType {
    /** Number of matches in the results. */
    COUNT = "COUNT",
    /** Alphabetically by the field value. */
    VALUE = "VALUE"
}
/** @enumType */
type AggregationValueAggregationSortTypeWithLiterals = AggregationValueAggregationSortType | 'COUNT' | 'VALUE';
declare enum AggregationValueAggregationSortDirection {
    /** Descending order. */
    DESC = "DESC",
    /** Ascending order. */
    ASC = "ASC"
}
/** @enumType */
type AggregationValueAggregationSortDirectionWithLiterals = AggregationValueAggregationSortDirection | 'DESC' | 'ASC';
declare enum AggregationValueAggregationMissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type AggregationValueAggregationMissingValuesWithLiterals = AggregationValueAggregationMissingValues | 'EXCLUDE' | 'INCLUDE';
interface AggregationValueAggregationIncludeMissingValuesOptions {
    /**
     * Specify a custom name for the bucket containing the missing values. Defaults are `"N/A"` for strings, `0` for integers, and `false` for booleans.
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum WixCommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Total number of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
/** @enumType */
type WixCommonScalarTypeWithLiterals = WixCommonScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface CommonAggregationValueAggregation extends CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values in results. */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
    /** Sort type. */
    sortType?: AggregationValueAggregationSortTypeWithLiterals;
    /** Sort direction. */
    sortDirection?: AggregationValueAggregationSortDirectionWithLiterals;
    /**
     * Number of aggregation results to return.
     * Min: `1`
     * Max: `250`
     * Default: `10`
     */
    limit?: number | null;
    /**
     * Whether to include or exclude missing values in the aggregation results.
     * Default: `EXCLUDE`.
     */
    missingValues?: AggregationValueAggregationMissingValuesWithLiterals;
}
/** @oneof */
interface CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values in results. */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
}
declare enum AggregationNestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** Calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. */
    VALUE = "VALUE",
    /** Calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. */
    RANGE = "RANGE",
    /** Calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    SCALAR = "SCALAR",
    /** Calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type AggregationNestedAggregationNestedAggregationTypeWithLiterals = AggregationNestedAggregationNestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface CommonAggregationRangeAggregation {
    /**
     * List of range buckets. During aggregation each entity is placed in the first bucket its value falls into, based on the provided range bounds.
     * @maxSize 50
     */
    buckets?: AggregationRangeAggregationRangeBucket[];
}
interface CommonAggregationScalarAggregation {
    /** Operator type for the scalar aggregation. */
    type?: WixCommonScalarTypeWithLiterals;
}
interface CommonAggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: AggregationDateHistogramAggregationIntervalWithLiterals;
}
declare enum AggregationDateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
/** @enumType */
type AggregationDateHistogramAggregationIntervalWithLiterals = AggregationDateHistogramAggregationInterval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface AggregationNestedAggregationNestedAggregationItem extends AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** A value aggregation calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of orders for each order status. */
    value?: CommonAggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    range?: CommonAggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: CommonAggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). For example, use a date histogram to determine how many reservations have been made at a restaurant each week. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /**
     * Unique, caller-defined aggregation name, returned in `aggregations.results`.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation to perform. The matching aggregation field must be passed. */
    type?: AggregationNestedAggregationNestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** A value aggregation calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of orders for each order status. */
    value?: CommonAggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    range?: CommonAggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: CommonAggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). For example, use a date histogram to determine how many reservations have been made at a restaurant each week. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
}
declare enum WixCommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** Calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. */
    VALUE = "VALUE",
    /** Calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. */
    RANGE = "RANGE",
    /** Calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    SCALAR = "SCALAR",
    /** Calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Flattened list of aggregations, where each aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** @enumType */
type WixCommonAggregationTypeWithLiterals = WixCommonAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface CommonAggregationNestedAggregation {
    /**
     * Flattened list of aggregations, where each next aggregation is nested within previous one.
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: AggregationNestedAggregationNestedAggregationItem[];
}
interface CommonCursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface V3SearchProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: CommonAggregationData;
}
interface CommonCursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: CommonCursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CommonCursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface CommonAggregationData {
    /**
     * List of the aggregated data results.
     * @maxSize 10000
     */
    results?: AggregationDataAggregationResults[];
}
interface ValueResultsValueAggregationResult {
    /**
     * Value of the field.
     * @maxLength 100
     */
    value?: string;
    /** Number of entities with this value. */
    count?: number;
}
interface RangeResultsRangeAggregationResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Total number of entities in this range. */
    count?: number;
}
interface AggregationResultsNestedAggregationResults extends AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: AggregationResultsValueResults;
    /** Range aggregation results. */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /**
     * Unique, caller-defined aggregation name, identifiable by the requested aggregation `name`.
     * @maxLength 100
     */
    name?: string;
    /** Aggregation type. */
    type?: WixCommonAggregationTypeWithLiterals;
    /**
     * Field which the data was aggregated by.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: AggregationResultsValueResults;
    /** Range aggregation results. */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationDataAggregationResultsScalarResult;
}
interface AggregationResultsValueResults {
    /**
     * List of value aggregations.
     * @maxSize 250
     */
    results?: ValueResultsValueAggregationResult[];
}
interface AggregationResultsRangeResults {
    /**
     * List of ranges returned in same order as requested.
     * @maxSize 50
     */
    results?: RangeResultsRangeAggregationResult[];
}
interface AggregationDataAggregationResultsScalarResult {
    /** Type of scalar aggregation. */
    type?: WixCommonScalarTypeWithLiterals;
    /** Value of the scalar aggregation. */
    value?: number;
}
interface GroupByValueResultsNestedValueAggregationResult {
    /**
     * Value of the field.
     * @maxLength 1000
     */
    value?: string;
    /** Nested aggregations. */
    nestedResults?: AggregationResultsNestedAggregationResults;
}
interface NestedResultsValueResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Number of entities with this value. */
    count?: number | null;
}
interface NestedResultsRangeResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Number of entities in this range. */
    count?: number | null;
}
interface NestedResultsScalarResult {
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedResultsNestedResultValue extends NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: NestedResultsValueResult;
    /** Range aggregation result. */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result. */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: NestedResultsValueResult;
}
/** @oneof */
interface NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: NestedResultsValueResult;
    /** Range aggregation result. */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result. */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: NestedResultsValueResult;
}
interface NestedResultsResults {
    /** List of nested aggregations. */
    results?: Record<string, NestedResultsNestedResultValue>;
}
interface DateHistogramResultsDateHistogramResult {
    /**
     * Date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @maxLength 100
     */
    value?: string;
    /** Number of entities in the bucket. */
    count?: number;
}
interface AggregationResultsGroupByValueResults {
    /**
     * List of value aggregations.
     * @maxSize 1000
     */
    results?: GroupByValueResultsNestedValueAggregationResult[];
}
interface AggregationResultsDateHistogramResults {
    /**
     * List of date histogram aggregations.
     * @maxSize 200
     */
    results?: DateHistogramResultsDateHistogramResult[];
}
/** Results of `NESTED` aggregation type in a flattened array, identifiable by the requested aggregation `name`. */
interface AggregationResultsNestedResults {
    /**
     * List of nested aggregations.
     * @maxSize 1000
     */
    results?: NestedResultsResults[];
}
interface AggregationDataAggregationResults extends AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: AggregationResultsValueResults;
    /** Range aggregation results. */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results. */
    nested?: AggregationResultsNestedResults;
    /**
     * Aggregation name, returned in `aggregations.results.name`.
     * @maxLength 100
     */
    name?: string;
    /** Aggregation type. Must align with the corresponding aggregation field. */
    type?: WixCommonAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: AggregationResultsValueResults;
    /** Range aggregation results. */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results. */
    nested?: AggregationResultsNestedResults;
}
interface V3QueryProductsRequest {
    /** Query options. */
    query?: CommonCursorQuery;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CommonCursorQuery extends CommonCursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 5
     */
    sort?: WixCommonSorting[];
}
/** @oneof */
interface CommonCursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CommonCursorPaging;
}
interface V3QueryProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
}
interface V3CountProductsRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
interface V3CountProductsResponse {
    /** Total number of products. */
    count?: number;
}
interface BulkUpdateProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Variant to update. */
    variant: Variant;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkUpdateProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface V3BulkAdjustProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Cost adjustment. */
    cost?: V3AdjustValue;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `Â¥3.5555` will be saved as `Â¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategyWithLiterals;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /** Actual price adjustment. */
    actualPrice?: V3AdjustValue;
    /** Compare at price adjustment. */
    compareAtPrice?: V3AdjustValue;
    /**
     * Set variant actualPrice from compareAtPrice by applying provided discount to it.
     * if compare-at-price doesn't exist, actualPrice will be set to compareAtPrice and the discount will be calculated from it.
     * For example variant compareAtPrice 100$, variant actualPrice is 95$, requested `compareAtPriceDiscount.percentage` is 10, then old actual price ignored and new actual price set to 90 (100$ - 10%).
     */
    compareAtPriceDiscount?: V3UnsignedAdjustValue;
}
interface V3AdjustValue extends V3AdjustValueAdjustValueOneOf {
    /**
     * A decimal value to increase or reduce from the original value, can be negative.
     * @decimalValue options { gte:-999999999, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to increase or reduce from the current value, can be negative.
     * @min -100
     * @max 1000
     */
    percentage?: number;
}
/** @oneof */
interface V3AdjustValueAdjustValueOneOf {
    /**
     * A decimal value to increase or reduce from the original value, can be negative.
     * @decimalValue options { gte:-999999999, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to increase or reduce from the current value, can be negative.
     * @min -100
     * @max 1000
     */
    percentage?: number;
}
declare enum BulkAdjustProductVariantsByFilterRequestRoundingStrategy {
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input Â¥3.5555 -> saved value Â¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
/** @enumType */
type BulkAdjustProductVariantsByFilterRequestRoundingStrategyWithLiterals = BulkAdjustProductVariantsByFilterRequestRoundingStrategy | 'UNKNOWN_ROUNDING_STRATEGY' | 'NO_ROUNDING' | 'CURRENCY_PRECISION' | 'NEAREST_WHOLE_NUMBER';
interface V3UnsignedAdjustValue extends V3UnsignedAdjustValueAdjustValueOneOf {
    /**
     * A decimal value to reduce from the original value.
     * @decimalValue options { gte:0, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to reduce from the original value.
     * @max 100
     */
    percentage?: number;
}
/** @oneof */
interface V3UnsignedAdjustValueAdjustValueOneOf {
    /**
     * A decimal value to reduce from the original value.
     * @decimalValue options { gte:0, lte:999999999, maxScale:2 }
     */
    amount?: string;
    /**
     * The percentage value to reduce from the original value.
     * @max 100
     */
    percentage?: number;
}
interface V3BulkAdjustProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /**
     * IDs of the info sections to add.
     * @format GUID
     * @minSize 1
     * @maxSize 10
     */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsRequest {
    /**
     * List of product IDs and revisions.
     * @minSize 1
     * @maxSize 100
     */
    products: V3ProductIdWithRevision[];
    /**
     * List of IDs of info sections to add.
     * @format GUID
     * @minSize 1
     * @maxSize 10
     */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface V3ProductIdWithRevision {
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     */
    productId?: string;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     */
    revision?: string;
}
interface V3BulkAddInfoSectionsToProductsResponse {
    /**
     * Products updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /**
     * IDs of info sections to remove.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface V3BulkRemoveInfoSectionsFromProductsRequest {
    /**
     * List of product IDs and revisions.
     * @minSize 1
     * @maxSize 100
     */
    products: V3ProductIdWithRevision[];
    /**
     * List of IDs of info sections to remove.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface V3BulkRemoveInfoSectionsFromProductsResponse {
    /**
     * Products updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkAddProductsToCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /**
     * IDs of the categories to which products will be added.
     * @format GUID
     * @minSize 1
     * @maxSize 5
     */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkAddProductsToCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface BulkRemoveProductsFromCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /**
     * IDs of the categories from which products will be removed.
     * @format GUID
     * @minSize 1
     * @maxSize 5
     */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkRemoveProductsFromCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     * @format GUID
     */
    jobId?: string;
}
interface GetAllProductsCategoryRequest {
}
interface GetAllProductsCategoryResponse {
    /**
     * Id of the "All Products" category automatically assigned to all products.
     * @format GUID
     */
    categoryId?: string;
    /** Category tree reference details. */
    treeReference?: TreeReference;
}
interface TreeReference {
    /**
     * Namespace of the app that manages the tree.
     *
     * For example, `"@wix/stores"`, `"@bookings/bookingslist"`, `"@achievements/quizzes"`.
     * @minLength 4
     * @maxLength 150
     */
    appNamespace?: string;
    /**
     * Tree key. You must pass this when a single app manages more than one tree.
     * @minLength 1
     * @maxLength 44
     */
    treeKey?: string | null;
}
/** @docsIgnore */
type CreateProductApplicationErrors = {
    code?: 'MISSING_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_PRODUCT_OPTIONS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_DEFAULT_VARIANT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANTS_ARE_NOT_ALIGNED_WITH_PRODUCT';
    description?: string;
    data?: VariantsNotAlignedWithProduct;
} | {
    code?: 'DUPLICATE_SLUG_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DIGITAL_FILE_NOT_FOUND_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BARCODE_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_BARCODE_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SKU_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_SKU_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANT_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_PRODUCT_TYPE_FOR_SUBSCRIPTION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ERROR_ALL_SUBSCRIPTIONS_HIDDEN_FOR_SUBSCRIPTION_ONLY_PRODUCT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_SUBSCRIPTION_DISCOUNT_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SUBSCRIPTION_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCTS_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_MEDIA_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ONLY_SPACES_STRING_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BRAND_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATIONS_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TOO_MANY_OPTIONS_IN_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CreateProductValidationErrors = {
    ruleName?: 'VARIANTS_TYPED_PROPERTIES_ARE_NOT_ALIGNED';
} | {
    ruleName?: 'SUBSCRIPTION_INVALID_AUTO_RENEWAL';
} | {
    ruleName?: 'DIGITAL_PRODUCT_CANNOT_BE_VISIBLE_IN_POS';
} | {
    ruleName?: 'DESCRIPTION_SIZE_TOO_BIG';
} | {
    ruleName?: 'DUPLICATE_MEDIA_ERROR';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type CreateProductWithInventoryApplicationErrors = {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATIONS_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CreateProductWithInventoryValidationErrors = {
    ruleName?: 'REQUESTED_QUANTITY_MUST_BE_NON_NEGATIVE';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type UpdateProductApplicationErrors = {
    code?: 'MISSING_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_PRODUCT_OPTIONS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_DEFAULT_VARIANT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_VALUE_NOT_SUPPORTED';
    description?: string;
    data?: UnsupportedFieldMasks;
} | {
    code?: 'VARIANTS_ARE_NOT_ALIGNED_WITH_PRODUCT';
    description?: string;
    data?: VariantsNotAlignedWithProduct;
} | {
    code?: 'DUPLICATE_SLUG_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DIGITAL_FILE_NOT_FOUND_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BARCODE_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_BARCODE_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SKU_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_SKU_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANT_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_PRODUCT_TYPE_FOR_SUBSCRIPTION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ERROR_ALL_SUBSCRIPTIONS_HIDDEN_FOR_SUBSCRIPTION_ONLY_PRODUCT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_SUBSCRIPTION_DISCOUNT_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SUBSCRIPTION_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PREORDER_VALIDATION_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BRAND_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_ERROR_OCCURRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_WITH_FIELD_NOT_PASSED_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type UpdateProductValidationErrors = {
    ruleName?: 'VARIANTS_TYPED_PROPERTIES_ARE_NOT_ALIGNED';
} | {
    ruleName?: 'MISSING_OPTIONS_ON_UPDATE_VARIANTS';
} | {
    ruleName?: 'SUBSCRIPTION_INVALID_AUTO_RENEWAL';
} | {
    ruleName?: 'DIGITAL_PRODUCT_CANNOT_BE_VISIBLE_IN_POS';
} | {
    ruleName?: 'DESCRIPTION_SIZE_TOO_BIG';
} | {
    ruleName?: 'DUPLICATE_MEDIA_ERROR';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type UpdateProductWithInventoryApplicationErrors = {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_ERROR_OCCURRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_RESTRICTION_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PREORDER_VALIDATION_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_WITH_FIELD_NOT_PASSED_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type UpdateProductWithInventoryValidationErrors = {
    ruleName?: 'REQUESTED_QUANTITY_MUST_BE_NON_NEGATIVE';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type BulkCreateProductsApplicationErrors = {
    code?: 'MISSING_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_PRODUCT_OPTIONS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_DEFAULT_VARIANT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANTS_ARE_NOT_ALIGNED_WITH_PRODUCT';
    description?: string;
    data?: VariantsNotAlignedWithProduct;
} | {
    code?: 'DUPLICATE_SLUG_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DIGITAL_FILE_NOT_FOUND_ERROR';
    description?: string;
    data?: InvalidDigitalFileIds;
} | {
    code?: 'BARCODE_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_BARCODE_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SKU_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_SKU_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANT_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_PRODUCT_TYPE_FOR_SUBSCRIPTION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ERROR_ALL_SUBSCRIPTIONS_HIDDEN_FOR_SUBSCRIPTION_ONLY_PRODUCT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_SUBSCRIPTION_DISCOUNT_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SUBSCRIPTION_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCTS_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_MEDIA_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ONLY_SPACES_STRING_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BRAND_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATIONS_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TOO_MANY_OPTIONS_IN_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkCreateProductsValidationErrors = {
    ruleName?: 'VARIANTS_TYPED_PROPERTIES_ARE_NOT_ALIGNED';
} | {
    ruleName?: 'SUBSCRIPTION_INVALID_AUTO_RENEWAL';
} | {
    ruleName?: 'DIGITAL_PRODUCT_CANNOT_BE_VISIBLE_IN_POS';
} | {
    ruleName?: 'DESCRIPTION_SIZE_TOO_BIG';
} | {
    ruleName?: 'DUPLICATE_MEDIA_ERROR';
} | {
    ruleName?: 'ID_NOT_ALLOWED_IN_REQUEST';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type BulkCreateProductsWithInventoryApplicationErrors = {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATIONS_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_OPTION_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIER_CHOICE_NAME_AND_TYPE_REQUIRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TOO_MANY_OPTIONS_IN_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkCreateProductsWithInventoryValidationErrors = {
    ruleName?: 'REQUESTED_QUANTITY_MUST_BE_NON_NEGATIVE';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'ID_NOT_ALLOWED_IN_REQUEST';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type BulkUpdateProductsApplicationErrors = {
    code?: 'TOO_MANY_VARIANTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MISSING_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_VARIANT_OPTION_CHOICE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_PRODUCT_OPTIONS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_DEFAULT_VARIANT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_VALUE_NOT_SUPPORTED';
    description?: string;
    data?: UnsupportedFieldMasks;
} | {
    code?: 'VARIANTS_ARE_NOT_ALIGNED_WITH_PRODUCT';
    description?: string;
    data?: VariantsNotAlignedWithProduct;
} | {
    code?: 'DUPLICATE_SLUG_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DIGITAL_FILE_NOT_FOUND_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BARCODE_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_BARCODE_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SKU_ALREADY_EXIST_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DUPLICATE_SKU_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANT_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_PRODUCT_TYPE_FOR_SUBSCRIPTION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ERROR_ALL_SUBSCRIPTIONS_HIDDEN_FOR_SUBSCRIPTION_ONLY_PRODUCT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_SUBSCRIPTION_DISCOUNT_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SUBSCRIPTION_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PREORDER_VALIDATION_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BRAND_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_ERROR_OCCURRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TOO_MANY_OPTIONS_IN_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_WITH_FIELD_NOT_PASSED_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkUpdateProductsValidationErrors = {
    ruleName?: 'VARIANTS_TYPED_PROPERTIES_ARE_NOT_ALIGNED';
} | {
    ruleName?: 'MISSING_OPTIONS_ON_UPDATE_VARIANTS';
} | {
    ruleName?: 'SUBSCRIPTION_INVALID_AUTO_RENEWAL';
} | {
    ruleName?: 'DIGITAL_PRODUCT_CANNOT_BE_VISIBLE_IN_POS';
} | {
    ruleName?: 'DESCRIPTION_SIZE_TOO_BIG';
} | {
    ruleName?: 'DUPLICATE_MEDIA_ERROR';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'DUPLICATE_PRODUCT_IDS_REQUEST';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type BulkUpdateProductsWithInventoryApplicationErrors = {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_ERROR_OCCURRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PRODUCT_RESTRICTION_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'PREORDER_VALIDATION_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'TOO_MANY_OPTIONS_IN_REQUEST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_WITH_FIELD_NOT_PASSED_ERROR';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'COMPARE_AT_PRICE_LOWER_THAN_ACTUAL_PRICE';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkUpdateProductsWithInventoryValidationErrors = {
    ruleName?: 'REQUESTED_QUANTITY_MUST_BE_NON_NEGATIVE';
} | {
    ruleName?: 'BRAND_MISSING_ID';
} | {
    ruleName?: 'DUPLICATE_PRODUCT_IDS_REQUEST';
} | {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
};
/** @docsIgnore */
type BulkUpdateProductsByFilterApplicationErrors = {
    code?: 'FIELD_MASK_VALUE_NOT_SUPPORTED';
    description?: string;
    data?: UnsupportedFieldMasks;
} | {
    code?: 'INVALID_PRODUCT_TYPE_FOR_SUBSCRIPTION';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'VARIANT_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ERROR_ALL_SUBSCRIPTIONS_HIDDEN_FOR_SUBSCRIPTION_ONLY_PRODUCT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_SUBSCRIPTION_DISCOUNT_AMOUNT';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'SUBSCRIPTION_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'BRAND_CREATION_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'RIBBON_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INFO_SECTION_ERROR_OCCURRED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CUSTOMIZATION_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADD_CUSTOMIZATION_CHOICES_FAILED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICE_NOT_EXIST';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_WITH_FIELD_NOT_PASSED_ERROR';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkUpdateProductsByFilterValidationErrors = {
    ruleName?: 'PRICE_PER_UNIT_NOT_ALIGNED';
} | {
    ruleName?: 'MISSING_OPTIONS_ON_UPDATE_VARIANTS';
} | {
    ruleName?: 'SUBSCRIPTION_INVALID_AUTO_RENEWAL';
} | {
    ruleName?: 'DESCRIPTION_SIZE_TOO_BIG';
};
/** @docsIgnore */
type BulkDeleteProductsValidationErrors = {
    ruleName?: 'DUPLICATE_PRODUCT_IDS_REQUEST';
};
/** @docsIgnore */
type GetProductApplicationErrors = {
    code?: 'NO_PERMISSION_TO_READ_MERCHANT_DATA';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NO_PERMISSION_TO_INCLUDE_NOT_VISIBLE_PRODUCTS';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type GetProductBySlugApplicationErrors = {
    code?: 'NO_PERMISSION_TO_READ_MERCHANT_DATA';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NO_PERMISSION_TO_INCLUDE_NOT_VISIBLE_PRODUCTS';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type SearchProductsApplicationErrors = {
    code?: 'NO_PERMISSION_TO_READ_MERCHANT_DATA';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NO_PERMISSION_TO_INCLUDE_NOT_VISIBLE_PRODUCTS';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type QueryProductsApplicationErrors = {
    code?: 'NO_PERMISSION_TO_READ_MERCHANT_DATA';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NO_PERMISSION_TO_INCLUDE_NOT_VISIBLE_PRODUCTS';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CountProductsApplicationErrors = {
    code?: 'NO_PERMISSION_TO_READ_MERCHANT_DATA';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'NO_PERMISSION_TO_INCLUDE_NOT_VISIBLE_PRODUCTS';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkUpdateProductVariantsByFilterApplicationErrors = {
    code?: 'FIELD_MASK_VALUE_NOT_SUPPORTED';
    description?: string;
    data?: UnsupportedFieldMasks;
} | {
    code?: 'VARIANT_ID_ALREADY_EXISTS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'FIELD_MASK_WITH_FIELD_NOT_PASSED_ERROR';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkUpdateProductVariantsByFilterValidationErrors = {
    ruleName?: 'EMPTY_FIELD_MASK';
} | {
    ruleName?: 'CANNOT_REMOVE_VARIANT_ACTUAL_PRICE';
};
/** @docsIgnore */
type BulkAdjustProductVariantsByFilterApplicationErrors = {
    code?: 'ADJUSTED_ACTUAL_PRICE_OUT_OF_RANGE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADJUSTED_COMPARE_AT_PRICE_OUT_OF_RANGE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ADJUSTED_COST_OUT_OF_RANGE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CANNOT_ADJUST_PRICE_RESTRICTED_VARIANT';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkAdjustProductVariantsByFilterValidationErrors = {
    ruleName?: 'NO_VARIANT_ADJUSTMENTS_PASSED';
} | {
    ruleName?: 'INVALID_PRICES_ADJUSTMENTS';
};
/** @docsIgnore */
type BulkAddInfoSectionsToProductsByFilterApplicationErrors = {
    code?: 'TOO_MANY_INFO_SECTIONS_ERROR';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkAddInfoSectionsToProductsApplicationErrors = {
    code?: 'TOO_MANY_INFO_SECTIONS_ERROR';
    description?: string;
    data?: Record<string, any>;
};
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
interface ProductCreatedEnvelope {
    entity: V3Product;
    metadata: EventMetadata;
}
/** @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.PRODUCT_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.product_created
 * @serviceIdentifier com.wix.stores.catalog.product.api.v3.ProductService
 * @slug created
 */
declare function onProductCreated(handler: (event: ProductCreatedEnvelope) => void | Promise<void>): void;
interface ProductDeletedEnvelope {
    entity: V3Product;
    metadata: EventMetadata;
}
/**
 * Triggered when a product is deleted.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.PRODUCT_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.product_deleted
 * @serviceIdentifier com.wix.stores.catalog.product.api.v3.ProductService
 * @slug deleted
 */
declare function onProductDeleted(handler: (event: ProductDeletedEnvelope) => void | Promise<void>): void;
interface ProductUpdatedEnvelope {
    entity: V3Product;
    metadata: EventMetadata;
}
/**
 * Triggered when a product is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.PRODUCT_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.product_updated
 * @serviceIdentifier com.wix.stores.catalog.product.api.v3.ProductService
 * @slug updated
 */
declare function onProductUpdated(handler: (event: ProductUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Creates a new product.
 *
 * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
 * @param product - Product to create.
 *
 * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
 * If `options` is empty one default variant must be provided with empty `choices` list.
 * @public
 * @requiredField product
 * @requiredField product.name
 * @requiredField product.productType
 * @requiredField product.variantsInfo
 * @requiredField product.variantsInfo.variants
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @applicableIdentity APP
 * @returns Created product.
 * @fqn wix.stores.catalog.v3.CatalogApi.CreateProduct
 */
declare function createProduct(product: NonNullablePaths<V3Product, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: CreateProductOptions): Promise<NonNullablePaths<V3Product, `physicalProperties.pricePerUnit.quantity` | `physicalProperties.pricePerUnit.measurementUnit` | `physicalProperties.shippingWeightRange.minValue` | `physicalProperties.shippingWeightRange.maxValue` | `physicalProperties.pricePerUnitRange.minValue.value` | `physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `media.main._id` | `media.main.url` | `media.main.mediaType` | `media.main.thumbnail.url` | `media.main.thumbnail.height` | `media.main.thumbnail.width` | `media.main.uploadId` | `media.itemsInfo.items` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `options` | `options.${number}.optionRenderType` | `modifiers` | `modifiers.${number}.freeTextSettings.minCharCount` | `modifiers.${number}.freeTextSettings.maxCharCount` | `modifiers.${number}.freeTextSettings.title` | `modifiers.${number}.modifierRenderType` | `modifiers.${number}.mandatory` | `infoSections` | `directCategoriesInfo.categories` | `directCategoriesInfo.categories.${number}._id` | `costRange.minValue.amount` | `inventory.availabilityStatus` | `inventory.preorderStatus` | `inventory.preorderAvailability` | `productType` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `variantsInfo.variants` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `variantsInfo.variants.${number}.revenueDetails.profitMargin` | `variantsInfo.variants.${number}.inventoryStatus.inStock` | `variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.autoRenewal` | `subscriptionDetails.subscriptions.${number}.billingCycles` | `subscriptionDetails.subscriptions.${number}.title` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.discount.amountOff` | `subscriptionDetails.subscriptions.${number}.discount.percentOff` | `subscriptionDetails.subscriptions.${number}.discount.type` | `variantSummary.variantCount`, 7> & {
    __applicationErrorsType?: CreateProductApplicationErrors;
    __validationErrorsType?: CreateProductValidationErrors;
}>;
interface CreateProductOptions {
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
/**
 * Creates a new product, and can create the product's inventory in the variants' default locations.
 *
 * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
 * @param product - Product to create with inventory.
 *
 * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
 * If `options` is empty one default variant must be provided with empty `choices` list.
 * @public
 * @requiredField product
 * @requiredField product.name
 * @requiredField product.productType
 * @requiredField product.variantsInfo
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.CreateProductWithInventory
 */
declare function createProductWithInventory(product: NonNullablePaths<ProductWithInventory, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: CreateProductWithInventoryOptions): Promise<NonNullablePaths<CreateProductWithInventoryResponse, `product.physicalProperties.pricePerUnit.quantity` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.physicalProperties.shippingWeightRange.minValue` | `product.physicalProperties.shippingWeightRange.maxValue` | `product.physicalProperties.pricePerUnitRange.minValue.value` | `product.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `product.media.main._id` | `product.media.main.url` | `product.media.main.mediaType` | `product.media.main.thumbnail.url` | `product.media.main.thumbnail.height` | `product.media.main.thumbnail.width` | `product.media.main.uploadId` | `product.media.itemsInfo.items` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain` | `product.options` | `product.options.${number}.optionRenderType` | `product.modifiers` | `product.modifiers.${number}.freeTextSettings.minCharCount` | `product.modifiers.${number}.freeTextSettings.maxCharCount` | `product.modifiers.${number}.freeTextSettings.title` | `product.modifiers.${number}.modifierRenderType` | `product.modifiers.${number}.mandatory` | `product.infoSections` | `product.directCategoriesInfo.categories` | `product.directCategoriesInfo.categories.${number}._id` | `product.costRange.minValue.amount` | `product.inventory.availabilityStatus` | `product.inventory.preorderStatus` | `product.inventory.preorderAvailability` | `product.productType` | `product.breadcrumbsInfo.breadcrumbs` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `product.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `product.variantsInfo.variants` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `product.variantsInfo.variants.${number}.revenueDetails.profitMargin` | `product.variantsInfo.variants.${number}.inventoryStatus.inStock` | `product.variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `product.subscriptionDetails.subscriptions` | `product.subscriptionDetails.subscriptions.${number}.autoRenewal` | `product.subscriptionDetails.subscriptions.${number}.billingCycles` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.discount.amountOff` | `product.subscriptionDetails.subscriptions.${number}.discount.percentOff` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.variantSummary.variantCount` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 8> & {
    __applicationErrorsType?: CreateProductWithInventoryApplicationErrors;
    __validationErrorsType?: CreateProductWithInventoryValidationErrors;
}>;
interface CreateProductWithInventoryOptions {
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
/**
 * Updates a product.
 *
 * Each time the product is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the product.
 * This ensures you're working with the latest product and prevents unintended overwrites.
 *
 * >**Notes:**
 * > + To update array fields like `options`, `modifiers`, `variantsInfo.variants`, and any others, you must pass the entire existing array. Passing only the changed item will overwrite the entire array, not just merge the single change.
 * > + To update `variantsInfo.variants` you must also pass `options` and vise versa. This is because variants and options are mutually dependant and must be aligned.
 * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
 * > + Updating media per variant is not supported. Instead, assign media items to product option choices using the `linkedMedia` field. You must use preexisting product media.
 * @param _id - Product ID.
 * @public
 * @requiredField _id
 * @requiredField product
 * @requiredField product.revision
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @returns Updated product.
 * @fqn wix.stores.catalog.v3.CatalogApi.UpdateProduct
 */
declare function updateProduct(_id: string, product: NonNullablePaths<UpdateProduct, `modifiers.${number}.choicesSettings.choices` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `revision` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: UpdateProductOptions): Promise<NonNullablePaths<V3Product, `physicalProperties.pricePerUnit.quantity` | `physicalProperties.pricePerUnit.measurementUnit` | `physicalProperties.shippingWeightRange.minValue` | `physicalProperties.shippingWeightRange.maxValue` | `physicalProperties.pricePerUnitRange.minValue.value` | `physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `media.main._id` | `media.main.url` | `media.main.mediaType` | `media.main.thumbnail.url` | `media.main.thumbnail.height` | `media.main.thumbnail.width` | `media.main.uploadId` | `media.itemsInfo.items` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `options` | `options.${number}.optionRenderType` | `modifiers` | `modifiers.${number}.freeTextSettings.minCharCount` | `modifiers.${number}.freeTextSettings.maxCharCount` | `modifiers.${number}.freeTextSettings.title` | `modifiers.${number}.modifierRenderType` | `modifiers.${number}.mandatory` | `infoSections` | `directCategoriesInfo.categories` | `directCategoriesInfo.categories.${number}._id` | `costRange.minValue.amount` | `inventory.availabilityStatus` | `inventory.preorderStatus` | `inventory.preorderAvailability` | `productType` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `variantsInfo.variants` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `variantsInfo.variants.${number}.revenueDetails.profitMargin` | `variantsInfo.variants.${number}.inventoryStatus.inStock` | `variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.autoRenewal` | `subscriptionDetails.subscriptions.${number}.billingCycles` | `subscriptionDetails.subscriptions.${number}.title` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.discount.amountOff` | `subscriptionDetails.subscriptions.${number}.discount.percentOff` | `subscriptionDetails.subscriptions.${number}.discount.type` | `variantSummary.variantCount`, 7> & {
    __applicationErrorsType?: UpdateProductApplicationErrors;
    __validationErrorsType?: UpdateProductValidationErrors;
}>;
interface UpdateProduct {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Product name. Translatable.
     * @minLength 1
     * @maxLength 80
     */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: string;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * @maxSize 6
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * @maxSize 10
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     * @maxSize 10
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /**
     * The ID of the product's primary direct category, which defines the productâ€™s breadcrumbs path. For example, if the product's main category is "T-Shirts" (which is a subcategory of "Clothing"), the breadcrumbs path will be "Clothing > T-Shirts".
     * @format GUID
     */
    mainCategoryId?: string | null;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     * @immutable
     */
    productType?: ProductTypeWithLiterals;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    handle?: string | null;
    /**
     * ID of the last import job that affected the product.
     * @internal
     * @format GUID
     */
    importId?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @format CURRENCY
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /**
     * Product actualPrice range - minimum and maximum prices of all product variants.
     * @readonly
     */
    actualPriceRange?: PriceRange;
    /**
     * Product compareAtPrice range - minimum and maximum compare at prices of all product variants.
     * @readonly
     */
    compareAtPriceRange?: PriceRange;
    /**
     * Product variants. Each variant must reference all product options via its `choices` array.
     * Each choice references an option using `optionChoiceNames` for all requests.
     */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
interface UpdateProductOptions {
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
/**
 * Updates a product.
 *
 * Each time the product is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the product.
 * This ensures you're working with the latest product and prevents unintended overwrites.
 *
 * >**Notes:**
 * > + To update array fields like `options`, `modifiers`, `variantsInfo.variants`, and any others, you must pass the entire existing array. Passing only the changed item will overwrite the entire array, not just merge the single change.
 * > + To update `variantsInfo.variants` you must also pass `options` and vise versa. This is because variants depend on options, and options depend on variants.
 * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
 * @param _id - Product ID.
 * @public
 * @requiredField _id
 * @requiredField product
 * @requiredField product.revision
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.UpdateProductWithInventory
 */
declare function updateProductWithInventory(_id: string, product: NonNullablePaths<UpdateProductWithInventoryProduct, `modifiers.${number}.choicesSettings.choices` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `revision` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>, options?: UpdateProductWithInventoryOptions): Promise<NonNullablePaths<UpdateProductWithInventoryResponse, `product.physicalProperties.pricePerUnit.quantity` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.physicalProperties.shippingWeightRange.minValue` | `product.physicalProperties.shippingWeightRange.maxValue` | `product.physicalProperties.pricePerUnitRange.minValue.value` | `product.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `product.media.main._id` | `product.media.main.url` | `product.media.main.mediaType` | `product.media.main.thumbnail.url` | `product.media.main.thumbnail.height` | `product.media.main.thumbnail.width` | `product.media.main.uploadId` | `product.media.itemsInfo.items` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain` | `product.options` | `product.options.${number}.optionRenderType` | `product.modifiers` | `product.modifiers.${number}.freeTextSettings.minCharCount` | `product.modifiers.${number}.freeTextSettings.maxCharCount` | `product.modifiers.${number}.freeTextSettings.title` | `product.modifiers.${number}.modifierRenderType` | `product.modifiers.${number}.mandatory` | `product.infoSections` | `product.directCategoriesInfo.categories` | `product.directCategoriesInfo.categories.${number}._id` | `product.costRange.minValue.amount` | `product.inventory.availabilityStatus` | `product.inventory.preorderStatus` | `product.inventory.preorderAvailability` | `product.productType` | `product.breadcrumbsInfo.breadcrumbs` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `product.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `product.variantsInfo.variants` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `product.variantsInfo.variants.${number}.revenueDetails.profitMargin` | `product.variantsInfo.variants.${number}.inventoryStatus.inStock` | `product.variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `product.subscriptionDetails.subscriptions` | `product.subscriptionDetails.subscriptions.${number}.autoRenewal` | `product.subscriptionDetails.subscriptions.${number}.billingCycles` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.discount.amountOff` | `product.subscriptionDetails.subscriptions.${number}.discount.percentOff` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.variantSummary.variantCount` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 8> & {
    __applicationErrorsType?: UpdateProductWithInventoryApplicationErrors;
    __validationErrorsType?: UpdateProductWithInventoryValidationErrors;
}>;
interface UpdateProductWithInventoryProduct {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /**
     * Product name.
     * @minLength 1
     * @maxLength 80
     */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     * @maxSize 6
     */
    options?: ConnectedOption[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     * @maxSize 10
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     * @maxSize 10
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * Main category ID.
     * @format GUID
     */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     * @immutable
     */
    productType?: ProductTypeWithLiterals;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    handle?: string | null;
    /**
     * ID of the last import job that affected the product.
     * @internal
     * @format GUID
     */
    importId?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
interface UpdateProductWithInventoryOptions {
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
/**
 * Creates up to 100 products.
 *
 * >**Note:**
 * > The following limits apply to the total number of creatable entities in a single request.
 * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to create.
 * @public
 * @requiredField products
 * @requiredField products.name
 * @requiredField products.productType
 * @requiredField products.variantsInfo
 * @requiredField products.variantsInfo.variants
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.variantsInfo.variants.price
 * @requiredField products.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkCreateProducts
 */
declare function bulkCreateProducts(products: NonNullablePaths<V3Product, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>[], options?: BulkCreateProductsOptions): Promise<NonNullablePaths<BulkCreateProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
    __applicationErrorsType?: BulkCreateProductsApplicationErrors;
    __validationErrorsType?: BulkCreateProductsValidationErrors;
}>;
interface BulkCreateProductsOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
 *
 * >**Note:**
 * > The following limits apply to the total number of creatable entities in a single request.
 * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to create with inventory.
 * @public
 * @requiredField products
 * @requiredField products.name
 * @requiredField products.productType
 * @requiredField products.variantsInfo
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.variantsInfo.variants.price
 * @requiredField products.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @permissionId WIX_STORES.INVENTORY_CREATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkCreateProductsWithInventory
 */
declare function bulkCreateProductsWithInventory(products: NonNullablePaths<ProductWithInventory, `modifiers.${number}.choicesSettings.choices` | `name` | `options.${number}.choicesSettings.choices` | `physicalProperties.pricePerUnit.measurementUnit` | `productType` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.discount.type` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.title` | `variantsInfo` | `variantsInfo.variants.${number}.digitalProperties.digitalFile` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `variantsInfo.variants.${number}.price` | `variantsInfo.variants.${number}.price.actualPrice`, 8>[], options?: BulkCreateProductsWithInventoryOptions): Promise<NonNullablePaths<BulkCreateProductsWithInventoryResponse, `productResults.results` | `productResults.results.${number}.itemMetadata.originalIndex` | `productResults.results.${number}.itemMetadata.success` | `productResults.results.${number}.itemMetadata.error.code` | `productResults.results.${number}.itemMetadata.error.description` | `productResults.results.${number}.item.inventory.availabilityStatus` | `productResults.results.${number}.item.inventory.preorderStatus` | `productResults.results.${number}.item.inventory.preorderAvailability` | `productResults.results.${number}.item.productType` | `productResults.results.${number}.item.variantSummary.variantCount` | `productResults.bulkActionMetadata.totalSuccesses` | `productResults.bulkActionMetadata.totalFailures` | `productResults.bulkActionMetadata.undetailedFailures` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 7> & {
    __applicationErrorsType?: BulkCreateProductsWithInventoryApplicationErrors;
    __validationErrorsType?: BulkCreateProductsWithInventoryValidationErrors;
}>;
interface BulkCreateProductsWithInventoryOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Updates up to 100 products.
 *
 * >**Note:**
 * > The following limits apply to the total number of updatable entities in a single request.
 * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to update.
 * @public
 * @requiredField products
 * @requiredField products.product
 * @requiredField products.product._id
 * @requiredField products.product.revision
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.product.variantsInfo.variants.price
 * @requiredField products.product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProducts
 */
declare function bulkUpdateProducts(products: NonNullablePaths<V3MaskedProduct, `product` | `product._id` | `product.modifiers.${number}.choicesSettings.choices` | `product.options.${number}.choicesSettings.choices` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.revision` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `product.variantsInfo.variants.${number}.price` | `product.variantsInfo.variants.${number}.price.actualPrice`, 9>[], options?: BulkUpdateProductsOptions): Promise<NonNullablePaths<BulkUpdateProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
    __applicationErrorsType?: BulkUpdateProductsApplicationErrors;
    __validationErrorsType?: BulkUpdateProductsValidationErrors;
}>;
interface BulkUpdateProductsOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
 *
 * >**Note:**
 * > The following limits apply to the total number of updatable entities in a single request.
 * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to update.
 * @public
 * @requiredField products
 * @requiredField products.product
 * @requiredField products.product._id
 * @requiredField products.product.revision
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.product.variantsInfo.variants.price
 * @requiredField products.product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProductsWithInventory
 */
declare function bulkUpdateProductsWithInventory(products: NonNullablePaths<MaskedProductWithInventory, `product` | `product._id` | `product.modifiers.${number}.choicesSettings.choices` | `product.options.${number}.choicesSettings.choices` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.revision` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.settings.measurementUnit` | `product.variantsInfo.variants.${number}.price` | `product.variantsInfo.variants.${number}.price.actualPrice`, 9>[], options?: BulkUpdateProductsWithInventoryOptions): Promise<NonNullablePaths<BulkUpdateProductsWithInventoryResponse, `productResults.results` | `productResults.results.${number}.itemMetadata.originalIndex` | `productResults.results.${number}.itemMetadata.success` | `productResults.results.${number}.itemMetadata.error.code` | `productResults.results.${number}.itemMetadata.error.description` | `productResults.results.${number}.item.inventory.availabilityStatus` | `productResults.results.${number}.item.inventory.preorderStatus` | `productResults.results.${number}.item.inventory.preorderAvailability` | `productResults.results.${number}.item.productType` | `productResults.results.${number}.item.variantSummary.variantCount` | `productResults.bulkActionMetadata.totalSuccesses` | `productResults.bulkActionMetadata.totalFailures` | `productResults.bulkActionMetadata.undetailedFailures` | `inventoryResults.results` | `inventoryResults.results.${number}.itemMetadata.originalIndex` | `inventoryResults.results.${number}.itemMetadata.success` | `inventoryResults.results.${number}.itemMetadata.error.code` | `inventoryResults.results.${number}.itemMetadata.error.description` | `inventoryResults.results.${number}.item.inStock` | `inventoryResults.results.${number}.item.quantity` | `inventoryResults.results.${number}.item.variantId` | `inventoryResults.results.${number}.item.productId` | `inventoryResults.results.${number}.item.trackQuantity` | `inventoryResults.results.${number}.item.availabilityStatus` | `inventoryResults.bulkActionMetadata.totalSuccesses` | `inventoryResults.bulkActionMetadata.totalFailures` | `inventoryResults.bulkActionMetadata.undetailedFailures`, 7> & {
    __applicationErrorsType?: BulkUpdateProductsWithInventoryApplicationErrors;
    __validationErrorsType?: BulkUpdateProductsWithInventoryValidationErrors;
}>;
interface BulkUpdateProductsWithInventoryOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Updates multiple products, given the provided filter.
 *
 * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
 *
 * > **Note:**
 * > The following fields cannot be updated with this endpoint:
 * > + `slug`
 * > + `options`
 * > + `modifiers`
 * > + `variantsInfo`
 * >
 * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
 * @public
 * @requiredField options.product
 * @requiredField options.product.subscriptionDetails.subscriptions.cycles
 * @requiredField options.product.subscriptionDetails.subscriptions.discount.discount
 * @requiredField options.product.subscriptionDetails.subscriptions.frequency
 * @requiredField options.product.subscriptionDetails.subscriptions.title
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProductsByFilter
 */
declare function bulkUpdateProductsByFilter(options?: NonNullablePaths<BulkUpdateProductsByFilterOptions, `product` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.title`, 7>): Promise<NonNullablePaths<V3BulkUpdateProductsByFilterResponse, `jobId`, 2> & {
    __applicationErrorsType?: BulkUpdateProductsByFilterApplicationErrors;
    __validationErrorsType?: BulkUpdateProductsByFilterValidationErrors;
}>;
interface BulkUpdateProductsByFilterOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Deletes a product and all its variants.
 * @param productId - Product ID.
 * @public
 * @requiredField productId
 * @permissionId WIX_STORES.PRODUCT_DELETE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.DeleteProduct
 */
declare function deleteProduct(productId: string): Promise<void>;
/**
 * Deletes multiple products.
 * @param productIds - IDs of products to delete.
 * @public
 * @requiredField productIds
 * @permissionId WIX_STORES.PRODUCT_DELETE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkDeleteProducts
 */
declare function bulkDeleteProducts(productIds: string[]): Promise<NonNullablePaths<V3BulkDeleteProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
    __validationErrorsType?: BulkDeleteProductsValidationErrors;
}>;
/**
 * Delete multiple products, given the provided filter.
 * @param filter - Filter object.
 * @public
 * @requiredField filter
 * @permissionId WIX_STORES.PRODUCT_DELETE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkDeleteProductsByFilter
 */
declare function bulkDeleteProductsByFilter(filter: Record<string, any>, options?: BulkDeleteProductsByFilterOptions): Promise<NonNullablePaths<V3BulkDeleteProductsByFilterResponse, `jobId`, 2>>;
interface BulkDeleteProductsByFilterOptions {
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Retrieves a product.
 *
 * > **Note:**
 * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @param productId - Product ID.
 * @public
 * @requiredField productId
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @applicableIdentity APP
 * @returns Product.
 * @fqn wix.stores.catalog.v3.CatalogApi.GetProduct
 */
declare function getProduct(productId: string, options?: GetProductOptions): Promise<NonNullablePaths<V3Product, `physicalProperties.pricePerUnit.quantity` | `physicalProperties.pricePerUnit.measurementUnit` | `physicalProperties.shippingWeightRange.minValue` | `physicalProperties.shippingWeightRange.maxValue` | `physicalProperties.pricePerUnitRange.minValue.value` | `physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `media.main._id` | `media.main.url` | `media.main.mediaType` | `media.main.thumbnail.url` | `media.main.thumbnail.height` | `media.main.thumbnail.width` | `media.main.uploadId` | `media.itemsInfo.items` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `options` | `options.${number}.optionRenderType` | `modifiers` | `modifiers.${number}.freeTextSettings.minCharCount` | `modifiers.${number}.freeTextSettings.maxCharCount` | `modifiers.${number}.freeTextSettings.title` | `modifiers.${number}.modifierRenderType` | `modifiers.${number}.mandatory` | `infoSections` | `directCategoriesInfo.categories` | `directCategoriesInfo.categories.${number}._id` | `costRange.minValue.amount` | `inventory.availabilityStatus` | `inventory.preorderStatus` | `inventory.preorderAvailability` | `productType` | `breadcrumbsInfo.breadcrumbs` | `breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `variantsInfo.variants` | `variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `variantsInfo.variants.${number}.revenueDetails.profitMargin` | `variantsInfo.variants.${number}.inventoryStatus.inStock` | `variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `subscriptionDetails.subscriptions` | `subscriptionDetails.subscriptions.${number}.autoRenewal` | `subscriptionDetails.subscriptions.${number}.billingCycles` | `subscriptionDetails.subscriptions.${number}.title` | `subscriptionDetails.subscriptions.${number}.frequency` | `subscriptionDetails.subscriptions.${number}.discount.amountOff` | `subscriptionDetails.subscriptions.${number}.discount.percentOff` | `subscriptionDetails.subscriptions.${number}.discount.type` | `variantSummary.variantCount`, 7> & {
    __applicationErrorsType?: GetProductApplicationErrors;
}>;
interface GetProductOptions {
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
/**
 * Retrieves a product by slug.
 *
 * > **Note:**
 * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @param slug - Product slug.
 * @public
 * @requiredField slug
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.GetProductBySlug
 */
declare function getProductBySlug(slug: string, options?: GetProductBySlugOptions): Promise<NonNullablePaths<V3GetProductBySlugResponse, `product.physicalProperties.pricePerUnit.quantity` | `product.physicalProperties.pricePerUnit.measurementUnit` | `product.physicalProperties.shippingWeightRange.minValue` | `product.physicalProperties.shippingWeightRange.maxValue` | `product.physicalProperties.pricePerUnitRange.minValue.value` | `product.physicalProperties.weightMeasurementUnitInfo.weightMeasurementUnit` | `product.media.main._id` | `product.media.main.url` | `product.media.main.mediaType` | `product.media.main.thumbnail.url` | `product.media.main.thumbnail.height` | `product.media.main.thumbnail.width` | `product.media.main.uploadId` | `product.media.itemsInfo.items` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain` | `product.options` | `product.options.${number}.optionRenderType` | `product.modifiers` | `product.modifiers.${number}.freeTextSettings.minCharCount` | `product.modifiers.${number}.freeTextSettings.maxCharCount` | `product.modifiers.${number}.freeTextSettings.title` | `product.modifiers.${number}.modifierRenderType` | `product.modifiers.${number}.mandatory` | `product.infoSections` | `product.directCategoriesInfo.categories` | `product.directCategoriesInfo.categories.${number}._id` | `product.costRange.minValue.amount` | `product.inventory.availabilityStatus` | `product.inventory.preorderStatus` | `product.inventory.preorderAvailability` | `product.productType` | `product.breadcrumbsInfo.breadcrumbs` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryId` | `product.breadcrumbsInfo.breadcrumbs.${number}.categoryName` | `product.breadcrumbsInfo.breadcrumbs.${number}.categorySlug` | `product.variantsInfo.variants` | `product.variantsInfo.variants.${number}.physicalProperties.pricePerUnit.value` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile._id` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileName` | `product.variantsInfo.variants.${number}.digitalProperties.digitalFile.fileType` | `product.variantsInfo.variants.${number}.revenueDetails.profitMargin` | `product.variantsInfo.variants.${number}.inventoryStatus.inStock` | `product.variantsInfo.variants.${number}.inventoryStatus.preorderEnabled` | `product.subscriptionDetails.subscriptions` | `product.subscriptionDetails.subscriptions.${number}.autoRenewal` | `product.subscriptionDetails.subscriptions.${number}.billingCycles` | `product.subscriptionDetails.subscriptions.${number}.title` | `product.subscriptionDetails.subscriptions.${number}.frequency` | `product.subscriptionDetails.subscriptions.${number}.discount.amountOff` | `product.subscriptionDetails.subscriptions.${number}.discount.percentOff` | `product.subscriptionDetails.subscriptions.${number}.discount.type` | `product.variantSummary.variantCount`, 8> & {
    __applicationErrorsType?: GetProductBySlugApplicationErrors;
}>;
interface GetProductBySlugOptions {
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: SingleEntityOpsRequestedFieldsWithLiterals[];
}
interface SearchProductsOptions {
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface V3ProductSearchSpec extends SearchSpec {
    searchable: [
        'description',
        'directCategoryIdsInfo.categoryIds',
        'minVariantPriceInfo.sku',
        'name',
        'physicalProperties.deliveryProfileId',
        'physicalProperties.shippingGroupId',
        'variantsInfo.variants.sku'
    ];
    aggregatable: [
        '_createdDate',
        '_id',
        '_updatedDate',
        'actualPriceRange.maxValue.amount',
        'actualPriceRange.minValue.amount',
        'allCategoriesInfo.categories',
        'allCategoriesInfo.categories._id',
        'allCategoriesInfo.categories.index',
        'brand._id',
        'brand.name',
        'compareAtPriceRange.maxValue.amount',
        'compareAtPriceRange.minValue.amount',
        'directCategoriesInfo.categories',
        'directCategoriesInfo.categories._id',
        'directCategoriesInfo.categories.index',
        'flattenModifiers',
        'flattenOptions',
        'handle',
        'importId',
        'infoSections._id',
        'infoSections.uniqueName',
        'inventory.availabilityStatus',
        'inventory.preorderAvailability',
        'inventory.preorderStatus',
        'minVariantPriceInfo.sku',
        'modifiers._id',
        'modifiers.choicesSettings.choices.choiceId',
        'modifiers.choicesSettings.choices.name',
        'modifiers.name',
        'name',
        'numericId',
        'options._id',
        'options.choicesSettings.choices.choiceId',
        'options.choicesSettings.choices.name',
        'options.name',
        'physicalProperties.deliveryProfileId',
        'physicalProperties.fulfillerId',
        'physicalProperties.shippingGroupId',
        'physicalProperties.shippingWeightRange.maxValue',
        'physicalProperties.shippingWeightRange.minValue',
        'productType',
        'ribbon._id',
        'ribbon.name',
        'slug',
        'subscriptionDetails.allowOneTimePurchases',
        'taxGroupId',
        'variantsInfo.variants',
        'variantsInfo.variants.barcode',
        'variantsInfo.variants.choices.optionChoiceIds.choiceId',
        'variantsInfo.variants.choices.optionChoiceIds.optionId',
        'variantsInfo.variants.physicalProperties.weight',
        'variantsInfo.variants.price.actualPrice.amount',
        'variantsInfo.variants.price.compareAtPrice.amount',
        'variantsInfo.variants.sku',
        'variantsInfo.variants.visible',
        'visible',
        'visibleInPos'
    ];
    paging: 'cursor';
    wql: [
        {
            operators: ['$matchItems'];
            fields: [
                'allCategoriesInfo.categories',
                'directCategoriesInfo.categories',
                'variantsInfo.variants'
            ];
            sort: 'NONE';
        },
        {
            operators: ['$hasAll', '$hasSome'];
            fields: [
                'infoSections._id',
                'infoSections.uniqueName',
                'modifiers._id',
                'modifiers.choicesSettings.choices.choiceId',
                'modifiers.choicesSettings.choices.name',
                'modifiers.name',
                'options._id',
                'options.choicesSettings.choices.choiceId',
                'options.choicesSettings.choices.name',
                'options.name'
            ];
            sort: 'NONE';
        },
        {
            operators: '*';
            fields: [
                '_id',
                'brand._id',
                'brand.name',
                'flattenModifiers',
                'flattenOptions',
                'handle',
                'importId',
                'inventory.availabilityStatus',
                'inventory.preorderAvailability',
                'inventory.preorderStatus',
                'physicalProperties.deliveryProfileId',
                'physicalProperties.fulfillerId',
                'physicalProperties.shippingGroupId',
                'productType',
                'ribbon._id',
                'ribbon.name',
                'slug',
                'subscriptionDetails.allowOneTimePurchases',
                'taxGroupId',
                'visible',
                'visibleInPos'
            ];
            sort: 'NONE';
        },
        {
            operators: '*';
            fields: [
                '_createdDate',
                '_updatedDate',
                'actualPriceRange.maxValue.amount',
                'actualPriceRange.minValue.amount',
                'compareAtPriceRange.maxValue.amount',
                'compareAtPriceRange.minValue.amount',
                'minVariantPriceInfo.sku',
                'name',
                'numericId',
                'physicalProperties.shippingWeightRange.maxValue',
                'physicalProperties.shippingWeightRange.minValue'
            ];
            sort: 'BOTH';
        }
    ];
}
type CommonSearchWithEntityContext = Search<V3Product, V3ProductSearchSpec>;
type V3ProductSearch = {
    /**
    Cursor paging options.
  
    Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
    */
    cursorPaging?: {
        /**
      Maximum number of items to return in the results.
      @max: 100
      */
        limit?: NonNullable<CommonSearchWithEntityContext['cursorPaging']>['limit'] | null;
        /**
      Pointer to the next or previous page in the list of results.
    
      Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
      Not relevant for the first request.
      @maxLength: 16000
      */
        cursor?: NonNullable<CommonSearchWithEntityContext['cursorPaging']>['cursor'] | null;
    };
    /**
    Filter object.
  
    Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
    */
    filter?: CommonSearchWithEntityContext['filter'] | null;
    /**
    Sort object.
  
    Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
    @maxSize: 10
    */
    sort?: {
        /**
      Name of the field to sort by.
      @maxLength: 512
      */
        fieldName?: NonNullable<CommonSearchWithEntityContext['sort']>[number]['fieldName'];
        /**
      Sort order.
      */
        order?: NonNullable<CommonSearchWithEntityContext['sort']>[number]['order'];
        /**
      When `field_name` is a property of repeated field that is marked as `MATCH_ITEMS` and sort should be done by
      a specific element from a collection, filter can/should be provided to ensure correct sort value is picked.
    
      If multiple filters are provided, they are combined with AND operator.
    
      Example:
      Given we have document like {"id": "1", "nestedField": [{"price": 10, "region": "EU"}, {"price": 20, "region": "US"}]}
      and `nestedField` is marked as `MATCH_ITEMS`, to ensure that sorting is done by correct region, filter should be
      { fieldName: "nestedField.price", "select_items_by": [{"nestedField.region": "US"}] }
      @maxSize: 10
      */
        selectItemsBy?: NonNullable<CommonSearchWithEntityContext['sort']>[number]['selectItemsBy'] | null;
    }[];
    /**
    Logical groupings of data into facets, with summaries for each facet. For example, use aggregations to allow site visitors to narrow down their search results by selecting specific categories.
    @maxSize: 10
    */
    aggregations?: {
        /**
      A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store.
      */
        value?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['value'];
        /**
      A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more.
      */
        range?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['range'];
        /**
      A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`.
      */
        scalar?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['scalar'];
        /**
      A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week.
      */
        dateHistogram?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['dateHistogram'];
        /**
      A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`.
      */
        nested?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['nested'];
        /**
      Aggregation name, returned in `aggregations.results.name`.
      @maxLength: 100
      */
        name?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['name'] | null;
        /**
      Type of aggregation to perform. Must align with the corresponding aggregation field.
      */
        type?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['type'];
        /**
      Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
      @maxLength: 200
      */
        fieldPath?: NonNullable<CommonSearchWithEntityContext['aggregations']>[number]['fieldPath'];
    }[];
    /**
    Free text to match in searchable fields.
    */
    search?: {
        /**
      Defines how separate search terms in `expression` are combined
      */
        mode?: NonNullable<CommonSearchWithEntityContext['search']>['mode'];
        /**
      Search term or expression
      @maxLength: 100
      */
        expression?: NonNullable<CommonSearchWithEntityContext['search']>['expression'] | null;
        /**
      Fields to search in. If the array is empty, all searchable fields are searched. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
      @maxLength: 200,
      @maxSize: 20
      */
        fields?: NonNullable<CommonSearchWithEntityContext['search']>['fields'];
        /**
      Whether to enable the search function to use an algorithm to automatically find results that are close to the search expression, such as typos and declensions.
      */
        fuzzy?: NonNullable<CommonSearchWithEntityContext['search']>['fuzzy'];
    };
    /**
    Time zone to adjust date-time-based filters and aggregations, in ISO 8601 (including offsets) or IANA time zone database (including time zone IDs) format.
    Applies to all relevant filters and aggregations, unless overridden by providing timestamps including time zone. For example, "2023-12-20T10:52:34.795Z".
    @maxLength: 50
    */
    timeZone?: CommonSearchWithEntityContext['timeZone'] | null;
};
/**
 * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 *
 * > **Notes:**
 * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
 * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @public
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.QueryProducts
 */
declare function queryProducts(options?: QueryProductsOptions): ProductsQueryBuilder;
interface QueryProductsOptions {
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[] | undefined;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface ProductsQueryResult extends QueryCursorResult {
    items: V3Product[];
    query: ProductsQueryBuilder;
    next: () => Promise<ProductsQueryResult>;
    prev: () => Promise<ProductsQueryResult>;
}
interface ProductsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'slug' | 'options.id' | 'handle', value: string) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any[]) => ProductsQueryBuilder;
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: boolean) => ProductsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'slug' | 'visible'>) => ProductsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'slug' | 'visible'>) => ProductsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => ProductsQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => ProductsQueryBuilder;
    find: () => Promise<ProductsQueryResult>;
}
/**
 * Counts the number of products that match the provided filtering.
 * @public
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.CountProducts
 */
declare function countProducts(options?: CountProductsOptions): Promise<NonNullablePaths<V3CountProductsResponse, `count`, 2> & {
    __applicationErrorsType?: CountProductsApplicationErrors;
}>;
interface CountProductsOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
/**
 * Updates a variant of multiple products, given the provided filter and search expression.
 *
 *
 * Only the following variant fields can be updated:
 * + `visible`
 * + `price`
 * + `revenueDetails.cost`
 * + `physicalOptions`
 * @param filter - Filter object.
 * @public
 * @requiredField filter
 * @requiredField options.variant
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProductVariantsByFilter
 */
declare function bulkUpdateProductVariantsByFilter(filter: Record<string, any>, options?: NonNullablePaths<BulkUpdateProductVariantsByFilterOptions, `variant`, 2>): Promise<NonNullablePaths<BulkUpdateProductVariantsByFilterResponse, `jobId`, 2> & {
    __applicationErrorsType?: BulkUpdateProductVariantsByFilterApplicationErrors;
    __validationErrorsType?: BulkUpdateProductVariantsByFilterValidationErrors;
}>;
interface BulkUpdateProductVariantsByFilterOptions {
    /** Variant to update. */
    variant: Variant;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
 *
 *
 * Only the following variant fields can be increased/decreased by amount or percentage:
 * + `compareAtPrice`
 * + `actualPrice`
 * + `cost`
 * + `compareAtPriceDiscount`
 * @param filter - Filter object.
 * @public
 * @requiredField filter
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAdjustProductVariantsByFilter
 */
declare function bulkAdjustProductVariantsByFilter(filter: Record<string, any>, options?: BulkAdjustProductVariantsByFilterOptions): Promise<NonNullablePaths<V3BulkAdjustProductVariantsByFilterResponse, `jobId`, 2> & {
    __applicationErrorsType?: BulkAdjustProductVariantsByFilterApplicationErrors;
    __validationErrorsType?: BulkAdjustProductVariantsByFilterValidationErrors;
}>;
interface BulkAdjustProductVariantsByFilterOptions {
    /** Cost adjustment. */
    cost?: V3AdjustValue;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `Â¥3.5555` will be saved as `Â¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategyWithLiterals;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /** Actual price adjustment. */
    actualPrice?: V3AdjustValue;
    /** Compare at price adjustment. */
    compareAtPrice?: V3AdjustValue;
    /**
     * Set variant actualPrice from compareAtPrice by applying provided discount to it.
     * if compare-at-price doesn't exist, actualPrice will be set to compareAtPrice and the discount will be calculated from it.
     * For example variant compareAtPrice 100$, variant actualPrice is 95$, requested `compareAtPriceDiscount.percentage` is 10, then old actual price ignored and new actual price set to 90 (100$ - 10%).
     */
    compareAtPriceDiscount?: V3UnsignedAdjustValue;
}
/**
 * Adds info sections to multiple products, given the provided filter and search expression.
 * @param filter - Filter object.
 * @public
 * @requiredField filter
 * @requiredField options.infoSectionIds
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAddInfoSectionsToProductsByFilter
 */
declare function bulkAddInfoSectionsToProductsByFilter(filter: Record<string, any>, options?: NonNullablePaths<BulkAddInfoSectionsToProductsByFilterOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkAddInfoSectionsToProductsByFilterResponse, `jobId`, 2> & {
    __applicationErrorsType?: BulkAddInfoSectionsToProductsByFilterApplicationErrors;
}>;
interface BulkAddInfoSectionsToProductsByFilterOptions {
    /**
     * IDs of the info sections to add.
     * @format GUID
     * @minSize 1
     * @maxSize 10
     */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Adds info sections to multiple products.
 * @param products - List of product IDs and revisions.
 * @public
 * @requiredField options.infoSectionIds
 * @requiredField products
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAddInfoSectionsToProducts
 */
declare function bulkAddInfoSectionsToProducts(products: V3ProductIdWithRevision[], options?: NonNullablePaths<BulkAddInfoSectionsToProductsOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkAddInfoSectionsToProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
    __applicationErrorsType?: BulkAddInfoSectionsToProductsApplicationErrors;
}>;
interface BulkAddInfoSectionsToProductsOptions {
    /**
     * List of IDs of info sections to add.
     * @format GUID
     * @minSize 1
     * @maxSize 10
     */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Removes info sections from multiple products, given the provided filter and search expression.
 * @param filter - Filter object.
 * @public
 * @requiredField filter
 * @requiredField options.infoSectionIds
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkRemoveInfoSectionsFromProductsByFilter
 */
declare function bulkRemoveInfoSectionsFromProductsByFilter(filter: Record<string, any>, options?: NonNullablePaths<BulkRemoveInfoSectionsFromProductsByFilterOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkRemoveInfoSectionsFromProductsByFilterResponse, `jobId`, 2>>;
interface BulkRemoveInfoSectionsFromProductsByFilterOptions {
    /**
     * IDs of info sections to remove.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Removes info sections from multiple products.
 * @param products - List of product IDs and revisions.
 * @public
 * @requiredField options.infoSectionIds
 * @requiredField products
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkRemoveInfoSectionsFromProducts
 */
declare function bulkRemoveInfoSectionsFromProducts(products: V3ProductIdWithRevision[], options?: NonNullablePaths<BulkRemoveInfoSectionsFromProductsOptions, `infoSectionIds`, 2>): Promise<NonNullablePaths<V3BulkRemoveInfoSectionsFromProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.inventory.availabilityStatus` | `results.${number}.item.inventory.preorderStatus` | `results.${number}.item.inventory.preorderAvailability` | `results.${number}.item.productType` | `results.${number}.item.variantSummary.variantCount` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
interface BulkRemoveInfoSectionsFromProductsOptions {
    /**
     * List of IDs of info sections to remove.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
 *
 * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
 * @public
 * @requiredField options.categoryIds
 * @permissionId CATEGORIES.CATEGORY_ADD_ITEM
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAddProductsToCategoriesByFilter
 */
declare function bulkAddProductsToCategoriesByFilter(options?: NonNullablePaths<BulkAddProductsToCategoriesByFilterOptions, `categoryIds`, 2>): Promise<NonNullablePaths<BulkAddProductsToCategoriesByFilterResponse, `jobId`, 2>>;
interface BulkAddProductsToCategoriesByFilterOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /**
     * IDs of the categories to which products will be added.
     * @format GUID
     * @minSize 1
     * @maxSize 5
     */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
 *
 * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
 * @public
 * @requiredField options.categoryIds
 * @permissionId CATEGORIES.CATEGORY_REMOVE_ITEM
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkRemoveProductsFromCategoriesByFilter
 */
declare function bulkRemoveProductsFromCategoriesByFilter(options?: NonNullablePaths<BulkRemoveProductsFromCategoriesByFilterOptions, `categoryIds`, 2>): Promise<NonNullablePaths<BulkRemoveProductsFromCategoriesByFilterResponse, `jobId`, 2>>;
interface BulkRemoveProductsFromCategoriesByFilterOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /**
     * IDs of the categories from which products will be removed.
     * @format GUID
     * @minSize 1
     * @maxSize 5
     */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
/**
 * Retrieves the id of "All Products" category which is automatically assigned to all products.
 * @public
 * @permissionId WIX_STORES.ALL_PRODUCTS_CATEGORY_READ
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.GetAllProductsCategory
 */
declare function getAllProductsCategory(): Promise<NonNullablePaths<GetAllProductsCategoryResponse, `categoryId` | `treeReference.appNamespace`, 3>>;

export { type QueryProductsOptions as $, type BulkUpdateProductsWithInventoryOptions as A, type BulkCreateProductsOptions as B, type CreateProductOptions as C, type BulkUpdateProductsWithInventoryResponse as D, type BulkUpdateProductsWithInventoryApplicationErrors as E, type BulkUpdateProductsWithInventoryValidationErrors as F, type BulkUpdateProductsByFilterOptions as G, type V3BulkUpdateProductsByFilterResponse as H, type BulkUpdateProductsByFilterApplicationErrors as I, type BulkUpdateProductsByFilterValidationErrors as J, type V3BulkDeleteProductsResponse as K, type BulkDeleteProductsValidationErrors as L, type MaskedProductWithInventory as M, type BulkDeleteProductsByFilterOptions as N, type V3BulkDeleteProductsByFilterResponse as O, type ProductWithInventory as P, type GetProductOptions as Q, type GetProductApplicationErrors as R, type GetProductBySlugOptions as S, type V3GetProductBySlugResponse as T, type UpdateProduct as U, type V3Product as V, type GetProductBySlugApplicationErrors as W, type V3ProductSearch as X, type SearchProductsOptions as Y, type V3SearchProductsResponse as Z, type SearchProductsApplicationErrors as _, type CreateProductApplicationErrors as a, AppType as a$, type ProductsQueryBuilder as a0, type CountProductsOptions as a1, type V3CountProductsResponse as a2, type CountProductsApplicationErrors as a3, type BulkUpdateProductVariantsByFilterOptions as a4, type BulkUpdateProductVariantsByFilterResponse as a5, type BulkUpdateProductVariantsByFilterApplicationErrors as a6, type BulkUpdateProductVariantsByFilterValidationErrors as a7, type BulkAdjustProductVariantsByFilterOptions as a8, type V3BulkAdjustProductVariantsByFilterResponse as a9, TextAlignment as aA, LineStyle as aB, Width as aC, DividerDataAlignment as aD, ViewMode as aE, LayoutType as aF, Orientation as aG, Crop as aH, ThumbnailsAlignment as aI, GIFType as aJ, Source as aK, StylesPosition as aL, MapType as aM, ViewRole as aN, VoteRole as aO, PollLayoutType as aP, PollLayoutDirection as aQ, BackgroundType as aR, DecorationType as aS, FontType as aT, Position as aU, AspectRatio as aV, Resizing as aW, Placement as aX, Type as aY, Alignment as aZ, Layout as a_, type BulkAdjustProductVariantsByFilterApplicationErrors as aa, type BulkAdjustProductVariantsByFilterValidationErrors as ab, type BulkAddInfoSectionsToProductsByFilterOptions as ac, type V3BulkAddInfoSectionsToProductsByFilterResponse as ad, type BulkAddInfoSectionsToProductsByFilterApplicationErrors as ae, type V3ProductIdWithRevision as af, type BulkAddInfoSectionsToProductsOptions as ag, type V3BulkAddInfoSectionsToProductsResponse as ah, type BulkAddInfoSectionsToProductsApplicationErrors as ai, type BulkRemoveInfoSectionsFromProductsByFilterOptions as aj, type V3BulkRemoveInfoSectionsFromProductsByFilterResponse as ak, type BulkRemoveInfoSectionsFromProductsOptions as al, type V3BulkRemoveInfoSectionsFromProductsResponse as am, type BulkAddProductsToCategoriesByFilterOptions as an, type BulkAddProductsToCategoriesByFilterResponse as ao, type BulkRemoveProductsFromCategoriesByFilterOptions as ap, type BulkRemoveProductsFromCategoriesByFilterResponse as aq, type GetAllProductsCategoryResponse as ar, type ProductCreatedEnvelope as as, type ProductDeletedEnvelope as at, type ProductUpdatedEnvelope as au, NodeType as av, WidthType as aw, PluginContainerDataAlignment as ax, ButtonDataType as ay, Target as az, type CreateProductValidationErrors as b, type PluginContainerDataWidth as b$, InitialExpandedItems as b0, Direction as b1, VerticalAlignment as b2, NullValue as b3, MediaType as b4, ProductOptionRenderType as b5, ChoiceType as b6, ModifierRenderType as b7, InventoryAvailabilityStatus as b8, PreorderStatus as b9, NestedAggregationNestedAggregationType as bA, DateHistogramAggregationInterval as bB, CommonAggregationType as bC, SearchDetailsMode as bD, VariantsOpsRequestedFields as bE, RoundingStrategy as bF, AvailabilityStatus as bG, EventType as bH, CommonSearchDetailsMode as bI, WixCommonSortOrder as bJ, AggregationValueAggregationSortType as bK, AggregationValueAggregationSortDirection as bL, AggregationValueAggregationMissingValues as bM, WixCommonScalarType as bN, AggregationNestedAggregationNestedAggregationType as bO, AggregationDateHistogramAggregationInterval as bP, WixCommonAggregationType as bQ, BulkAdjustProductVariantsByFilterRequestRoundingStrategy as bR, type V3ProductTypedPropertiesOneOf as bS, type RichContent as bT, type Node as bU, type NodeDataOneOf as bV, type NodeStyle as bW, type ButtonData as bX, type Border as bY, type Colors as bZ, type PluginContainerData as b_, ProductPreorderAvailability as ba, ProductType as bb, MeasurementUnit as bc, WeightUnit as bd, FileType as be, SubscriptionFrequency as bf, DiscountType as bg, Enum as bh, State as bi, WebhookIdentityType as bj, SingleEntityOpsRequestedFields as bk, SortOrder as bl, SortType as bm, SortDirection as bn, MissingValues as bo, ScalarType as bp, NestedAggregationType as bq, Interval as br, AggregationType as bs, Mode as bt, RequestedFields as bu, CommonSortOrder as bv, ValueAggregationSortType as bw, ValueAggregationSortDirection as bx, ValueAggregationMissingValues as by, CommonScalarType as bz, type CreateProductWithInventoryOptions as c, type EventData as c$, type PluginContainerDataWidthDataOneOf as c0, type Spoiler as c1, type Height as c2, type Styles as c3, type Link as c4, type LinkDataOneOf as c5, type Rel as c6, type CodeBlockData as c7, type TextStyle as c8, type DividerData as c9, type ParagraphData as cA, type PollData as cB, type Permissions as cC, type Option as cD, type PollSettings as cE, type PollLayout as cF, type OptionLayout as cG, type Gradient as cH, type Background as cI, type BackgroundBackgroundOneOf as cJ, type PollDesign as cK, type OptionDesign as cL, type Poll as cM, type PollDataLayout as cN, type Design as cO, type TextData as cP, type Decoration as cQ, type DecorationDataOneOf as cR, type AnchorData as cS, type ColorData as cT, type LinkData as cU, type MentionData as cV, type FontSizeData as cW, type SpoilerData as cX, type AppEmbedData as cY, type AppEmbedDataAppDataOneOf as cZ, type BookingData as c_, type FileData as ca, type FileSource as cb, type FileSourceDataOneOf as cc, type PDFSettings as cd, type GalleryData as ce, type V1Media as cf, type Image as cg, type Video as ch, type Item as ci, type ItemDataOneOf as cj, type GalleryOptions as ck, type GalleryOptionsLayout as cl, type ItemStyle as cm, type Thumbnails as cn, type GIFData as co, type GIF as cp, type HeadingData as cq, type HTMLData as cr, type HTMLDataDataOneOf as cs, type ImageData as ct, type StylesBorder as cu, type ImageDataStyles as cv, type LinkPreviewData as cw, type LinkPreviewDataStyles as cx, type MapData as cy, type MapSettings as cz, type CreateProductWithInventoryResponse as d, type WeightMeasurementUnitInfo as d$, type ButtonStyles as d0, type ImageStyles as d1, type RibbonStyles as d2, type CardStyles as d3, type PricingData as d4, type VideoData as d5, type PlaybackOptions as d6, type EmbedData as d7, type Oembed as d8, type CollapsibleListData as d9, type Settings as dA, type ConnectedOption as dB, type ConnectedOptionOptionSettingsOneOf as dC, type ChoicesSettings as dD, type ConnectedOptionChoice as dE, type ConnectedOptionChoiceValueOneOf as dF, type MultipleColors as dG, type ConnectedModifier as dH, type ConnectedModifierModifierSettingsOneOf as dI, type FreeTextSettings as dJ, type ModifierChoicesSettings as dK, type ConnectedModifierChoice as dL, type ConnectedModifierChoiceValueOneOf as dM, type Brand as dN, type InfoSection as dO, type Ribbon as dP, type ProductCategoriesInfo as dQ, type ProductCategory as dR, type ProductCategoryIdsInfo as dS, type PriceRange as dT, type FixedMonetaryAmount as dU, type Inventory as dV, type PhysicalProperties as dW, type PricePerUnitSettings as dX, type WeightRange as dY, type PricePerUnitRange as dZ, type PricePerUnitRangePricePerUnit as d_, type TableData as da, type Dimensions as db, type TableCellData as dc, type CellStyle as dd, type BorderColors as de, type ListValue as df, type AudioData as dg, type OrderedListData as dh, type BulletedListData as di, type BlockquoteData as dj, type CaptionData as dk, type LayoutCellData as dl, type Metadata as dm, type DocumentStyle as dn, type TextNodeStyle as dp, type Media as dq, type ProductMedia as dr, type ProductMediaSetByOneOf as ds, type ProductMediaMediaOneOf as dt, type VideoResolution as du, type Thumbnail as dv, type MediaItemsInfo as dw, type SeoSchema as dx, type Keyword as dy, type Tag as dz, type CreateProductWithInventoryApplicationErrors as e, type DoNotCallUpdateProductResponse as e$, type BreadcrumbsInfo as e0, type BreadCrumb as e1, type VariantsInfo as e2, type Variant as e3, type VariantTypedPropertiesOneOf as e4, type OptionChoice as e5, type OptionChoiceIds as e6, type OptionChoiceNames as e7, type PriceInfo as e8, type RevenueDetails as e9, type DomainEvent as eA, type DomainEventBodyOneOf as eB, type EntityCreatedEvent as eC, type RestoreInfo as eD, type EntityUpdatedEvent as eE, type EntityDeletedEvent as eF, type ActionEvent as eG, type Empty as eH, type SearchIndexingNotification as eI, type MessageEnvelope as eJ, type IdentificationData as eK, type IdentificationDataIdOneOf as eL, type InvalidateCache as eM, type InvalidateCacheGetByOneOf as eN, type App as eO, type Page as eP, type URI as eQ, type File as eR, type CustomTag as eS, type DoNotCallCreateProductRequest as eT, type DoNotCallCreateProductResponse as eU, type DuplicateMediaIdAssignedToProduct as eV, type GetProductRequest as eW, type GetProductResponse as eX, type GetProductBySlugRequest as eY, type GetProductBySlugResponse as eZ, type DoNotCallUpdateProductRequest as e_, type VariantPhysicalProperties as ea, type PricePerUnit as eb, type VariantDigitalProperties as ec, type SecuredMedia as ed, type SubscriptionPricesInfo as ee, type SubscriptionPrice as ef, type SubscriptionPricePerUnit as eg, type InventoryStatus as eh, type ExtendedFields as ei, type SubscriptionDetails as ej, type Subscription as ek, type SubscriptionCyclesOneOf as el, type SubscriptionDiscount as em, type SubscriptionDiscountDiscountOneOf as en, type VariantSummary as eo, type MinVariantPriceInfo as ep, type UpdateDocumentsEvent as eq, type UpdateDocumentsEventOperationOneOf as er, type DocumentUpdateOperation as es, type IndexDocument as et, type DocumentPayload as eu, type DocumentImage as ev, type DeleteByIdsOperation as ew, type DeleteByFilterOperation as ex, type UpdateByFilterOperation as ey, type UpdateExistingOperation as ez, type CreateProductWithInventoryValidationErrors as f, type ValueAggregationIncludeMissingValuesOptions as f$, type VariantsRemoved as f0, type UnsupportedFieldMasks as f1, type DeleteProductRequest as f2, type DeleteProductResponse as f3, type SearchProductsRequest as f4, type CursorSearch as f5, type CursorSearchPagingMethodOneOf as f6, type Sorting as f7, type Aggregation as f8, type AggregationKindOneOf as f9, type ScalarResult as fA, type NestedResultValue as fB, type NestedResultValueResultOneOf as fC, type Results as fD, type DateHistogramResult as fE, type GroupByValueResults as fF, type DateHistogramResults as fG, type NestedResults as fH, type AggregationResults as fI, type AggregationResultsResultOneOf as fJ, type SearchRelatedProductsRequest as fK, type SearchRelated as fL, type SearchRelatedDetails as fM, type SearchRelatedProductsResponse as fN, type EventuallyConsistentQueryProductsRequest as fO, type CursorQuery as fP, type CursorQueryPagingMethodOneOf as fQ, type EventuallyConsistentQueryProductsResponse as fR, type QueryProductsRequest as fS, type QueryProductsResponse as fT, type DeprecatedSearchProductsWithOffsetRequest as fU, type PlatformOffsetSearch as fV, type PlatformOffsetSearchPagingMethodOneOf as fW, type CommonSorting as fX, type CommonAggregation as fY, type CommonAggregationKindOneOf as fZ, type RangeAggregationRangeBucket as f_, type RangeBucket as fa, type IncludeMissingValuesOptions as fb, type ValueAggregation as fc, type ValueAggregationOptionsOneOf as fd, type RangeAggregation as fe, type ScalarAggregation as ff, type DateHistogramAggregation as fg, type NestedAggregationItem as fh, type NestedAggregationItemKindOneOf as fi, type NestedAggregation as fj, type SearchDetails as fk, type CursorPaging as fl, type SearchProductsResponse as fm, type CursorPagingMetadata as fn, type Cursors as fo, type AggregationData as fp, type ValueAggregationResult as fq, type RangeAggregationResult as fr, type NestedAggregationResults as fs, type NestedAggregationResultsResultOneOf as ft, type ValueResults as fu, type RangeResults as fv, type AggregationResultsScalarResult as fw, type NestedValueAggregationResult as fx, type ValueResult as fy, type RangeResult as fz, type UpdateProductOptions as g, type CreateProductResponse as g$, type AggregationValueAggregation as g0, type AggregationValueAggregationOptionsOneOf as g1, type AggregationRangeAggregation as g2, type AggregationScalarAggregation as g3, type AggregationDateHistogramAggregation as g4, type NestedAggregationNestedAggregationItem as g5, type NestedAggregationNestedAggregationItemKindOneOf as g6, type AggregationNestedAggregation as g7, type GroupByAggregation as g8, type GroupByAggregationKindOneOf as g9, type BulkDeleteProductsByFilterResponse as gA, type BulkAddInfoSectionsToProductsByFilterRequest as gB, type BulkAddInfoSectionsToProductsByFilterResponse as gC, type FulfillerDeleted as gD, type BulkAddInfoSectionsToProductsRequest as gE, type ProductIdWithRevision as gF, type BulkAddInfoSectionsToProductsResponse as gG, type BulkRemoveInfoSectionsFromProductsByFilterRequest as gH, type BulkRemoveInfoSectionsFromProductsByFilterResponse as gI, type BulkRemoveInfoSectionsFromProductsRequest as gJ, type BulkRemoveInfoSectionsFromProductsResponse as gK, type BulkUpdateVariantsByFilterRequest as gL, type BulkUpdateVariantsByFilterResponse as gM, type BulkAdjustProductVariantsByFilterRequest as gN, type AdjustValue as gO, type AdjustValueAdjustValueOneOf as gP, type UnsignedAdjustValue as gQ, type UnsignedAdjustValueAdjustValueOneOf as gR, type BulkAdjustProductVariantsByFilterResponse as gS, type BulkInventoryItemAction as gT, type InventoryItem as gU, type InventoryItemTrackingMethodOneOf as gV, type PreorderInfo as gW, type Product as gX, type CalculateProductInventorPreorderStatusAsyncRequest as gY, type CalculateProductInventorPreorderStatusAsyncResponse as gZ, type CreateProductRequest as g_, type CommonSearchDetails as ga, type PlatformPaging as gb, type DeprecatedSearchProductsWithOffsetResponse as gc, type PagingMetadata as gd, type RetrieveVariantsRequest as ge, type ProductVariantIds as gf, type VariantsCursorPaging as gg, type RetrieveVariantsResponse as gh, type ProductVariants as gi, type CountProductsRequest as gj, type CountProductsResponse as gk, type DoNotCallBulkCreateProductsRequest as gl, type DoNotCallBulkCreateProductsResponse as gm, type V3BulkProductResult as gn, type CommonItemMetadata as go, type ApplicationError as gp, type BulkActionMetadata as gq, type DoNotCallBulkUpdateProductsRequest as gr, type MaskedProduct as gs, type DoNotCallBulkUpdateProductsResponse as gt, type BulkUpdateProductsByFilterRequest as gu, type BulkUpdateProductsByFilterResponse as gv, type BulkDeleteProductsRequest as gw, type BulkDeleteProductsResponse as gx, type BulkProductResult as gy, type BulkDeleteProductsByFilterRequest as gz, type UpdateProductApplicationErrors as h, type AggregationDataAggregationResultsScalarResult as h$, type VariantsNotAlignedWithProduct as h0, type VariantNotAlignedWithProduct as h1, type CreateProductWithInventoryRequest as h2, type ProductWithInventoryTypedPropertiesOneOf as h3, type V3VariantsInfo as h4, type VariantWithInventory as h5, type VariantWithInventoryTypedPropertiesOneOf as h6, type InventoryItemComposite as h7, type InventoryItemCompositeTrackingMethodOneOf as h8, type OptionChoiceReferences as h9, type V3GetProductBySlugRequest as hA, type V3SearchProductsRequest as hB, type CommonCursorSearch as hC, type CommonCursorSearchPagingMethodOneOf as hD, type WixCommonSorting as hE, type WixCommonAggregation as hF, type WixCommonAggregationKindOneOf as hG, type AggregationRangeAggregationRangeBucket as hH, type AggregationValueAggregationIncludeMissingValuesOptions as hI, type CommonAggregationValueAggregation as hJ, type CommonAggregationValueAggregationOptionsOneOf as hK, type CommonAggregationRangeAggregation as hL, type CommonAggregationScalarAggregation as hM, type CommonAggregationDateHistogramAggregation as hN, type AggregationNestedAggregationNestedAggregationItem as hO, type AggregationNestedAggregationNestedAggregationItemKindOneOf as hP, type CommonAggregationNestedAggregation as hQ, type CommonCursorPaging as hR, type CommonCursorPagingMetadata as hS, type CommonCursors as hT, type CommonAggregationData as hU, type ValueResultsValueAggregationResult as hV, type RangeResultsRangeAggregationResult as hW, type AggregationResultsNestedAggregationResults as hX, type AggregationResultsNestedAggregationResultsResultOneOf as hY, type AggregationResultsValueResults as hZ, type AggregationResultsRangeResults as h_, type V3OptionChoiceIds as ha, type V3OptionChoiceNames as hb, type BulkInventoryItemResults as hc, type BulkInventoryItemResult as hd, type ItemMetadata as he, type CommonBulkActionMetadata as hf, type UpdateProductRequest as hg, type UpdateProductResponse as hh, type UpdateProductWithInventoryRequest as hi, type BulkCreateProductsRequest as hj, type CatalogV3BulkProductResult as hk, type WixCommonItemMetadata as hl, type InvalidDigitalFileIds as hm, type BulkCreateProductsWithInventoryRequest as hn, type BulkProductResults as ho, type BulkUpdateProductsRequest as hp, type BulkUpdateProductsWithInventoryRequest as hq, type V3BulkUpdateProductsByFilterRequest as hr, type WixCommonSearchDetails as hs, type V3DeleteProductRequest as ht, type V3DeleteProductResponse as hu, type V3BulkDeleteProductsRequest as hv, type BulkDeleteProductsResponseBulkProductResult as hw, type V3BulkDeleteProductsByFilterRequest as hx, type V3GetProductRequest as hy, type V3GetProductResponse as hz, type UpdateProductValidationErrors as i, type PositionWithLiterals as i$, type GroupByValueResultsNestedValueAggregationResult as i0, type NestedResultsValueResult as i1, type NestedResultsRangeResult as i2, type NestedResultsScalarResult as i3, type NestedResultsNestedResultValue as i4, type NestedResultsNestedResultValueResultOneOf as i5, type NestedResultsResults as i6, type DateHistogramResultsDateHistogramResult as i7, type AggregationResultsGroupByValueResults as i8, type AggregationResultsDateHistogramResults as i9, type V3ProductSearchSpec as iA, type ProductsQueryResult as iB, type NodeTypeWithLiterals as iC, type WidthTypeWithLiterals as iD, type PluginContainerDataAlignmentWithLiterals as iE, type ButtonDataTypeWithLiterals as iF, type TargetWithLiterals as iG, type TextAlignmentWithLiterals as iH, type LineStyleWithLiterals as iI, type WidthWithLiterals as iJ, type DividerDataAlignmentWithLiterals as iK, type ViewModeWithLiterals as iL, type LayoutTypeWithLiterals as iM, type OrientationWithLiterals as iN, type CropWithLiterals as iO, type ThumbnailsAlignmentWithLiterals as iP, type GIFTypeWithLiterals as iQ, type SourceWithLiterals as iR, type StylesPositionWithLiterals as iS, type MapTypeWithLiterals as iT, type ViewRoleWithLiterals as iU, type VoteRoleWithLiterals as iV, type PollLayoutTypeWithLiterals as iW, type PollLayoutDirectionWithLiterals as iX, type BackgroundTypeWithLiterals as iY, type DecorationTypeWithLiterals as iZ, type FontTypeWithLiterals as i_, type AggregationResultsNestedResults as ia, type AggregationDataAggregationResults as ib, type AggregationDataAggregationResultsResultOneOf as ic, type V3QueryProductsRequest as id, type CommonCursorQuery as ie, type CommonCursorQueryPagingMethodOneOf as ig, type V3QueryProductsResponse as ih, type V3CountProductsRequest as ii, type BulkUpdateProductVariantsByFilterRequest as ij, type V3BulkAdjustProductVariantsByFilterRequest as ik, type V3AdjustValue as il, type V3AdjustValueAdjustValueOneOf as im, type V3UnsignedAdjustValue as io, type V3UnsignedAdjustValueAdjustValueOneOf as ip, type V3BulkAddInfoSectionsToProductsByFilterRequest as iq, type V3BulkAddInfoSectionsToProductsRequest as ir, type V3BulkRemoveInfoSectionsFromProductsByFilterRequest as is, type V3BulkRemoveInfoSectionsFromProductsRequest as it, type BulkAddProductsToCategoriesByFilterRequest as iu, type BulkRemoveProductsFromCategoriesByFilterRequest as iv, type GetAllProductsCategoryRequest as iw, type TreeReference as ix, type BaseEventMetadata as iy, type EventMetadata as iz, type UpdateProductWithInventoryProduct as j, onProductCreated as j$, type AspectRatioWithLiterals as j0, type ResizingWithLiterals as j1, type PlacementWithLiterals as j2, type TypeWithLiterals as j3, type AlignmentWithLiterals as j4, type LayoutWithLiterals as j5, type AppTypeWithLiterals as j6, type InitialExpandedItemsWithLiterals as j7, type DirectionWithLiterals as j8, type VerticalAlignmentWithLiterals as j9, type ModeWithLiterals as jA, type RequestedFieldsWithLiterals as jB, type CommonSortOrderWithLiterals as jC, type ValueAggregationSortTypeWithLiterals as jD, type ValueAggregationSortDirectionWithLiterals as jE, type ValueAggregationMissingValuesWithLiterals as jF, type CommonScalarTypeWithLiterals as jG, type NestedAggregationNestedAggregationTypeWithLiterals as jH, type DateHistogramAggregationIntervalWithLiterals as jI, type CommonAggregationTypeWithLiterals as jJ, type SearchDetailsModeWithLiterals as jK, type VariantsOpsRequestedFieldsWithLiterals as jL, type RoundingStrategyWithLiterals as jM, type AvailabilityStatusWithLiterals as jN, type EventTypeWithLiterals as jO, type CommonSearchDetailsModeWithLiterals as jP, type WixCommonSortOrderWithLiterals as jQ, type AggregationValueAggregationSortTypeWithLiterals as jR, type AggregationValueAggregationSortDirectionWithLiterals as jS, type AggregationValueAggregationMissingValuesWithLiterals as jT, type WixCommonScalarTypeWithLiterals as jU, type AggregationNestedAggregationNestedAggregationTypeWithLiterals as jV, type AggregationDateHistogramAggregationIntervalWithLiterals as jW, type WixCommonAggregationTypeWithLiterals as jX, type BulkAdjustProductVariantsByFilterRequestRoundingStrategyWithLiterals as jY, type QueryProductsApplicationErrors as jZ, type CommonSearchWithEntityContext as j_, type NullValueWithLiterals as ja, type MediaTypeWithLiterals as jb, type ProductOptionRenderTypeWithLiterals as jc, type ChoiceTypeWithLiterals as jd, type ModifierRenderTypeWithLiterals as je, type InventoryAvailabilityStatusWithLiterals as jf, type PreorderStatusWithLiterals as jg, type ProductPreorderAvailabilityWithLiterals as jh, type ProductTypeWithLiterals as ji, type MeasurementUnitWithLiterals as jj, type WeightUnitWithLiterals as jk, type FileTypeWithLiterals as jl, type SubscriptionFrequencyWithLiterals as jm, type DiscountTypeWithLiterals as jn, type EnumWithLiterals as jo, type StateWithLiterals as jp, type WebhookIdentityTypeWithLiterals as jq, type SingleEntityOpsRequestedFieldsWithLiterals as jr, type SortOrderWithLiterals as js, type SortTypeWithLiterals as jt, type SortDirectionWithLiterals as ju, type MissingValuesWithLiterals as jv, type ScalarTypeWithLiterals as jw, type NestedAggregationTypeWithLiterals as jx, type IntervalWithLiterals as jy, type AggregationTypeWithLiterals as jz, type UpdateProductWithInventoryOptions as k, onProductDeleted as k0, onProductUpdated as k1, createProduct as k2, createProductWithInventory as k3, updateProduct as k4, updateProductWithInventory as k5, bulkCreateProducts as k6, bulkCreateProductsWithInventory as k7, bulkUpdateProducts as k8, bulkUpdateProductsWithInventory as k9, bulkUpdateProductsByFilter as ka, deleteProduct as kb, bulkDeleteProducts as kc, bulkDeleteProductsByFilter as kd, getProduct as ke, getProductBySlug as kf, queryProducts as kg, countProducts as kh, bulkUpdateProductVariantsByFilter as ki, bulkAdjustProductVariantsByFilter as kj, bulkAddInfoSectionsToProductsByFilter as kk, bulkAddInfoSectionsToProducts as kl, bulkRemoveInfoSectionsFromProductsByFilter as km, bulkRemoveInfoSectionsFromProducts as kn, bulkAddProductsToCategoriesByFilter as ko, bulkRemoveProductsFromCategoriesByFilter as kp, getAllProductsCategory as kq, type UpdateProductWithInventoryResponse as l, type UpdateProductWithInventoryApplicationErrors as m, type UpdateProductWithInventoryValidationErrors as n, type BulkCreateProductsResponse as o, type BulkCreateProductsApplicationErrors as p, type BulkCreateProductsValidationErrors as q, type BulkCreateProductsWithInventoryOptions as r, type BulkCreateProductsWithInventoryResponse as s, type BulkCreateProductsWithInventoryApplicationErrors as t, type BulkCreateProductsWithInventoryValidationErrors as u, type V3MaskedProduct as v, type BulkUpdateProductsOptions as w, type BulkUpdateProductsResponse as x, type BulkUpdateProductsApplicationErrors as y, type BulkUpdateProductsValidationErrors as z };
