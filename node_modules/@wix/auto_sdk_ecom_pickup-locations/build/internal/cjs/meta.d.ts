import { CreatePickupLocationRequest as CreatePickupLocationRequest$1, CreatePickupLocationResponse as CreatePickupLocationResponse$1, GetPickupLocationRequest as GetPickupLocationRequest$1, GetPickupLocationResponse as GetPickupLocationResponse$1, UpdatePickupLocationRequest as UpdatePickupLocationRequest$1, UpdatePickupLocationResponse as UpdatePickupLocationResponse$1, DeletePickupLocationRequest as DeletePickupLocationRequest$1, DeletePickupLocationResponse as DeletePickupLocationResponse$1, QueryPickupLocationRequest as QueryPickupLocationRequest$1, QueryPickupLocationResponse as QueryPickupLocationResponse$1, AddDeliveryRegionRequest as AddDeliveryRegionRequest$1, AddDeliveryRegionResponse as AddDeliveryRegionResponse$1, RemoveDeliveryRegionRequest as RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionResponse as RemoveDeliveryRegionResponse$1, BulkCreatePickupLocationRequest as BulkCreatePickupLocationRequest$1, BulkCreatePickupLocationResponse as BulkCreatePickupLocationResponse$1, BulkUpdatePickupLocationRequest as BulkUpdatePickupLocationRequest$1, BulkUpdatePickupLocationResponse as BulkUpdatePickupLocationResponse$1, BulkDeletePickupLocationRequest as BulkDeletePickupLocationRequest$1, BulkDeletePickupLocationResponse as BulkDeletePickupLocationResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation {
    /**
     * PickupLocation ID
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Pickup Location Name
     * @minLength 1
     * @maxLength 100
     */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address;
    /**
     * Expected delivery time in free text. For example, `"3-5 business days"`.
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`.
     * @maxLength 1000
     */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /**
     * at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one.
     * @maxSize 50
     */
    rates?: ConditionalRates[];
    /**
     * This pickup location is active for the following delivery regions.
     * @maxSize 50
     * @format GUID
     */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** @maxLength 150 */
    addressLine?: string | null;
    /**
     * Country code.
     * @format COUNTRY
     */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** @maxLength 100 */
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** @maxLength 150 */
    addressLine?: string | null;
}
interface StreetAddress {
    number?: string;
    name?: string;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * The amount of the rate that will be returned if all conditions are met.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    amount?: string;
    /**
     * For example: weight > 0 and weight <= 10
     * @maxSize 10
     */
    conditions?: Condition[];
    /** When this flag is set to true, multiply the amount by the number of line items passed on the request. */
    multiplyByQuantity?: boolean;
}
interface Condition {
    type?: ConditionTypeWithLiterals;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     * @decimalValue options { gte:0, lte:999999999, maxScale:6 }
     */
    value?: string;
    /** Logical operator. */
    operator?: LogicalOperatorWithLiterals;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
/** @enumType */
type ConditionTypeWithLiterals = ConditionType | 'UNKNOWN_TYPE' | 'BY_TOTAL_WEIGHT' | 'BY_TOTAL_PRICE' | 'BY_TOTAL_QUANTITY';
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
/** @enumType */
type LogicalOperatorWithLiterals = LogicalOperator | 'UNKNOWN_LOGICAL_OPERATOR_TYPE' | 'EQ' | 'GT' | 'GTE' | 'LT' | 'LTE';
interface CreatePickupLocationRequest {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation;
}
interface CreatePickupLocationResponse {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation;
}
interface GetPickupLocationRequest {
    /**
     * Id of the PickupLocation to retrieve
     * @format GUID
     */
    pickupLocationId: string;
}
interface GetPickupLocationResponse {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation;
}
interface UpdatePickupLocationRequest {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation;
}
interface UpdatePickupLocationResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface DeletePickupLocationRequest {
    /**
     * Id of the PickupLocation to delete
     * @format GUID
     */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse {
}
interface QueryPickupLocationRequest {
    /** WQL expression */
    query?: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface AddDeliveryRegionRequest {
    /**
     * Id of the PickupLocation to add to the delivery region
     * @format GUID
     */
    pickupLocationId: string;
    /**
     * Id of the DeliveryRegion to add the PickupLocation to
     * @format GUID
     */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface RemoveDeliveryRegionRequest {
    /**
     * Id of the PickupLocation to add to the delivery region
     * @format GUID
     */
    pickupLocationId: string;
    /**
     * Id of the DeliveryRegion to add the PickupLocation to
     * @format GUID
     */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface BulkCreatePickupLocationRequest {
    /**
     * @minSize 1
     * @maxSize 100
     */
    pickupLocations: PickupLocation[];
}
interface BulkCreatePickupLocationResponse {
    /** @maxSize 100 */
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface PickupLocationError {
    id?: string;
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest {
    /**
     * @minSize 1
     * @maxSize 100
     */
    pickupLocations: PickupLocation[];
}
interface BulkUpdatePickupLocationResponse {
    /** @maxSize 100 */
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface BulkDeletePickupLocationRequest {
    /**
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse {
    errors?: PickupLocationError[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createPickupLocation(): __PublicMethodMetaInfo<'POST', {}, CreatePickupLocationRequest$1, CreatePickupLocationRequest, CreatePickupLocationResponse$1, CreatePickupLocationResponse>;
declare function getPickupLocation(): __PublicMethodMetaInfo<'GET', {
    pickupLocationId: string;
}, GetPickupLocationRequest$1, GetPickupLocationRequest, GetPickupLocationResponse$1, GetPickupLocationResponse>;
declare function updatePickupLocation(): __PublicMethodMetaInfo<'PATCH', {
    pickupLocationId: string;
}, UpdatePickupLocationRequest$1, UpdatePickupLocationRequest, UpdatePickupLocationResponse$1, UpdatePickupLocationResponse>;
declare function deletePickupLocation(): __PublicMethodMetaInfo<'DELETE', {
    pickupLocationId: string;
}, DeletePickupLocationRequest$1, DeletePickupLocationRequest, DeletePickupLocationResponse$1, DeletePickupLocationResponse>;
declare function queryPickupLocation(): __PublicMethodMetaInfo<'POST', {}, QueryPickupLocationRequest$1, QueryPickupLocationRequest, QueryPickupLocationResponse$1, QueryPickupLocationResponse>;
declare function addDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    pickupLocationId: string;
}, AddDeliveryRegionRequest$1, AddDeliveryRegionRequest, AddDeliveryRegionResponse$1, AddDeliveryRegionResponse>;
declare function removeDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    pickupLocationId: string;
}, RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionRequest, RemoveDeliveryRegionResponse$1, RemoveDeliveryRegionResponse>;
declare function bulkCreatePickupLocation(): __PublicMethodMetaInfo<'POST', {}, BulkCreatePickupLocationRequest$1, BulkCreatePickupLocationRequest, BulkCreatePickupLocationResponse$1, BulkCreatePickupLocationResponse>;
declare function bulkUpdatePickupLocation(): __PublicMethodMetaInfo<'PATCH', {}, BulkUpdatePickupLocationRequest$1, BulkUpdatePickupLocationRequest, BulkUpdatePickupLocationResponse$1, BulkUpdatePickupLocationResponse>;
declare function bulkDeletePickupLocation(): __PublicMethodMetaInfo<'DELETE', {}, BulkDeletePickupLocationRequest$1, BulkDeletePickupLocationRequest, BulkDeletePickupLocationResponse$1, BulkDeletePickupLocationResponse>;

export { type __PublicMethodMetaInfo, addDeliveryRegion, bulkCreatePickupLocation, bulkDeletePickupLocation, bulkUpdatePickupLocation, createPickupLocation, deletePickupLocation, getPickupLocation, queryPickupLocation, removeDeliveryRegion, updatePickupLocation };
