"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  ConditionType: () => ConditionType,
  LogicalOperator: () => LogicalOperator,
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  addDeliveryRegion: () => addDeliveryRegion4,
  bulkCreatePickupLocation: () => bulkCreatePickupLocation4,
  bulkDeletePickupLocation: () => bulkDeletePickupLocation4,
  bulkUpdatePickupLocation: () => bulkUpdatePickupLocation4,
  createPickupLocation: () => createPickupLocation4,
  deletePickupLocation: () => deletePickupLocation4,
  getPickupLocation: () => getPickupLocation4,
  queryPickupLocation: () => queryPickupLocation4,
  removeDeliveryRegion: () => removeDeliveryRegion4,
  updatePickupLocation: () => updatePickupLocation4
});
module.exports = __toCommonJS(index_exports);

// src/ecom-v1-pickup-location-pickup-locations.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-pickup-location-pickup-locations.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcomV1PickupLocationsUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/pickup-locations",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/pickup-locations",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_pickup-locations";
function createPickupLocation(payload) {
  function __createPickupLocation({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "pickupLocation.createdDate" },
          { path: "pickupLocation.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "POST",
      methodFqn: "wix.ecom.v1.PickupLocations.CreatePickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocation.createdDate" },
            { path: "pickupLocation.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createPickupLocation;
}
function getPickupLocation(payload) {
  function __getPickupLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "GET",
      methodFqn: "wix.ecom.v1.PickupLocations.GetPickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations/{pickupLocationId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocation.createdDate" },
            { path: "pickupLocation.updatedDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "GET",
          url: resolveWixEcomV1PickupLocationsUrl({
            protoPath: "/v1/pickup-locations/{pickupLocationId}",
            data: payload,
            host
          }),
          params: (0, import_rest_modules.toURLSearchParams)(payload)
        }
      ]
    };
    return metadata;
  }
  return __getPickupLocation;
}
function updatePickupLocation(payload) {
  function __updatePickupLocation({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "pickupLocation.createdDate" },
          { path: "pickupLocation.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "PATCH",
      methodFqn: "wix.ecom.v1.PickupLocations.UpdatePickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations/{pickupLocation.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocation.createdDate" },
            { path: "pickupLocation.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updatePickupLocation;
}
function deletePickupLocation(payload) {
  function __deletePickupLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "DELETE",
      methodFqn: "wix.ecom.v1.PickupLocations.DeletePickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations/{pickupLocationId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deletePickupLocation;
}
function queryPickupLocation(payload) {
  function __queryPickupLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "POST",
      methodFqn: "wix.ecom.v1.PickupLocations.QueryPickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocations.createdDate" },
            { path: "pickupLocations.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryPickupLocation;
}
function addDeliveryRegion(payload) {
  function __addDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "POST",
      methodFqn: "wix.ecom.v1.PickupLocations.AddDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations/{pickupLocationId}/add-delivery-region",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocation.createdDate" },
            { path: "pickupLocation.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDeliveryRegion;
}
function removeDeliveryRegion(payload) {
  function __removeDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "POST",
      methodFqn: "wix.ecom.v1.PickupLocations.RemoveDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/pickup-locations/{pickupLocationId}/remove-delivery-region",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocation.createdDate" },
            { path: "pickupLocation.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDeliveryRegion;
}
function bulkCreatePickupLocation(payload) {
  function __bulkCreatePickupLocation({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "pickupLocations.createdDate" },
          { path: "pickupLocations.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "POST",
      methodFqn: "wix.ecom.v1.PickupLocations.BulkCreatePickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/bulk/pickup-locations/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocations.createdDate" },
            { path: "pickupLocations.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreatePickupLocation;
}
function bulkUpdatePickupLocation(payload) {
  function __bulkUpdatePickupLocation({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "pickupLocations.createdDate" },
          { path: "pickupLocations.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "PATCH",
      methodFqn: "wix.ecom.v1.PickupLocations.BulkUpdatePickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/bulk/pickup-locations/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "pickupLocations.createdDate" },
            { path: "pickupLocations.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdatePickupLocation;
}
function bulkDeletePickupLocation(payload) {
  function __bulkDeletePickupLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.pickup_location",
      method: "DELETE",
      methodFqn: "wix.ecom.v1.PickupLocations.BulkDeletePickupLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomV1PickupLocationsUrl({
        protoPath: "/v1/bulk/pickup-locations/delete",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __bulkDeletePickupLocation;
}

// src/ecom-v1-pickup-location-pickup-locations.universal.ts
var import_address = require("@wix/sdk-runtime/transformations/address");
var import_address2 = require("@wix/sdk-runtime/transformations/address");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var ConditionType = /* @__PURE__ */ ((ConditionType2) => {
  ConditionType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ConditionType2["BY_TOTAL_WEIGHT"] = "BY_TOTAL_WEIGHT";
  ConditionType2["BY_TOTAL_PRICE"] = "BY_TOTAL_PRICE";
  ConditionType2["BY_TOTAL_QUANTITY"] = "BY_TOTAL_QUANTITY";
  return ConditionType2;
})(ConditionType || {});
var LogicalOperator = /* @__PURE__ */ ((LogicalOperator2) => {
  LogicalOperator2["UNKNOWN_LOGICAL_OPERATOR_TYPE"] = "UNKNOWN_LOGICAL_OPERATOR_TYPE";
  LogicalOperator2["EQ"] = "EQ";
  LogicalOperator2["GT"] = "GT";
  LogicalOperator2["GTE"] = "GTE";
  LogicalOperator2["LT"] = "LT";
  LogicalOperator2["LTE"] = "LTE";
  return LogicalOperator2;
})(LogicalOperator || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createPickupLocation2(pickupLocation) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ pickupLocation }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "pickupLocation.address" }]
      }
    ]
  );
  const reqOpts = createPickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocation.address" }]
        }
      ])
    )?.pickupLocation;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { pickupLocation: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["pickupLocation"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getPickupLocation2(pickupLocationId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    pickupLocationId
  });
  const reqOpts = getPickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocation.address" }]
        }
      ])
    )?.pickupLocation;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { pickupLocationId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["pickupLocationId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updatePickupLocation2(_id, pickupLocation) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      pickupLocation: { ...pickupLocation, id: _id }
    }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "pickupLocation.address" }]
      }
    ]
  );
  const reqOpts = updatePickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocation.address" }]
        }
      ])
    )?.pickupLocation;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { pickupLocation: "$[1]" },
        explicitPathsToArguments: { "pickupLocation.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "pickupLocation"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deletePickupLocation2(pickupLocationId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    pickupLocationId
  });
  const reqOpts = deletePickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { pickupLocationId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["pickupLocationId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryPickupLocation2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryPickupLocation(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [
          {
            transformFn: import_address2.transformRESTAddressToSDKAddress,
            paths: [{ path: "pickupLocations.address" }]
          }
        ])
      );
      return {
        items: transformedData?.pickupLocations,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function addDeliveryRegion2(pickupLocationId, deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    pickupLocationId,
    deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = addDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocation.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          pickupLocationId: "$[0]",
          deliveryRegionId: "$[1]",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["pickupLocationId", "deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDeliveryRegion2(pickupLocationId, deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    pickupLocationId,
    deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = removeDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocation.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          pickupLocationId: "$[0]",
          deliveryRegionId: "$[1]",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["pickupLocationId", "deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkCreatePickupLocation2(pickupLocations) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ pickupLocations }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "pickupLocations.address" }]
      }
    ]
  );
  const reqOpts = bulkCreatePickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocations.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { pickupLocations: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["pickupLocations"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdatePickupLocation2(pickupLocations) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ pickupLocations }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "pickupLocations.address" }]
      }
    ]
  );
  const reqOpts = bulkUpdatePickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "pickupLocations.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { pickupLocations: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["pickupLocations"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeletePickupLocation2(pickupLocationIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    pickupLocationIds
  });
  const reqOpts = bulkDeletePickupLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { pickupLocationIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["pickupLocationIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-pickup-location-pickup-locations.public.ts
function createPickupLocation3(httpClient) {
  return (pickupLocation) => createPickupLocation2(
    pickupLocation,
    // @ts-ignore
    { httpClient }
  );
}
function getPickupLocation3(httpClient) {
  return (pickupLocationId) => getPickupLocation2(
    pickupLocationId,
    // @ts-ignore
    { httpClient }
  );
}
function updatePickupLocation3(httpClient) {
  return (_id, pickupLocation) => updatePickupLocation2(
    _id,
    pickupLocation,
    // @ts-ignore
    { httpClient }
  );
}
function deletePickupLocation3(httpClient) {
  return (pickupLocationId) => deletePickupLocation2(
    pickupLocationId,
    // @ts-ignore
    { httpClient }
  );
}
function queryPickupLocation3(httpClient) {
  return () => queryPickupLocation2(
    // @ts-ignore
    { httpClient }
  );
}
function addDeliveryRegion3(httpClient) {
  return (pickupLocationId, deliveryRegionId, options) => addDeliveryRegion2(
    pickupLocationId,
    deliveryRegionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeDeliveryRegion3(httpClient) {
  return (pickupLocationId, deliveryRegionId, options) => removeDeliveryRegion2(
    pickupLocationId,
    deliveryRegionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreatePickupLocation3(httpClient) {
  return (pickupLocations) => bulkCreatePickupLocation2(
    pickupLocations,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdatePickupLocation3(httpClient) {
  return (pickupLocations) => bulkUpdatePickupLocation2(
    pickupLocations,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeletePickupLocation3(httpClient) {
  return (pickupLocationIds) => bulkDeletePickupLocation2(
    pickupLocationIds,
    // @ts-ignore
    { httpClient }
  );
}

// src/ecom-v1-pickup-location-pickup-locations.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var createPickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createPickupLocation3);
var getPickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getPickupLocation3);
var updatePickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updatePickupLocation3);
var deletePickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deletePickupLocation3);
var queryPickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryPickupLocation3);
var addDeliveryRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addDeliveryRegion3);
var removeDeliveryRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeDeliveryRegion3);
var bulkCreatePickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkCreatePickupLocation3);
var bulkUpdatePickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkUpdatePickupLocation3);
var bulkDeletePickupLocation4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkDeletePickupLocation3);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConditionType,
  LogicalOperator,
  SortOrder,
  WebhookIdentityType,
  addDeliveryRegion,
  bulkCreatePickupLocation,
  bulkDeletePickupLocation,
  bulkUpdatePickupLocation,
  createPickupLocation,
  deletePickupLocation,
  getPickupLocation,
  queryPickupLocation,
  removeDeliveryRegion,
  updatePickupLocation
});
//# sourceMappingURL=index.js.map