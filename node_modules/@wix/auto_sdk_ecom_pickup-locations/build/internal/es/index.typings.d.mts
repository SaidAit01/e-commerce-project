import { NonNullablePaths } from '@wix/sdk-types';

/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
interface PickupLocation {
    /**
     * PickupLocation ID
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Pickup Location Name
     * @minLength 1
     * @maxLength 100
     */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address;
    /**
     * Expected delivery time in free text. For example, `"3-5 business days"`.
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`.
     * @maxLength 1000
     */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /**
     * at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one.
     * @maxSize 50
     */
    rates?: ConditionalRates[];
    /**
     * This pickup location is active for the following delivery regions.
     * @maxSize 50
     * @format GUID
     */
    deliveryRegionIds?: string[];
}
/** Physical address */
interface Address extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** @maxLength 150 */
    addressLine1?: string | null;
    /**
     * Country code.
     * @format COUNTRY
     */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** @maxLength 100 */
    addressLine2?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** @maxLength 150 */
    addressLine?: string | null;
}
interface StreetAddress {
    number?: string;
    name?: string;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * The amount of the rate that will be returned if all conditions are met.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    amount?: string;
    /**
     * For example: weight > 0 and weight <= 10
     * @maxSize 10
     */
    conditions?: Condition[];
    /** When this flag is set to true, multiply the amount by the number of line items passed on the request. */
    multiplyByQuantity?: boolean;
}
interface Condition {
    type?: ConditionTypeWithLiterals;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     * @decimalValue options { gte:0, lte:999999999, maxScale:6 }
     */
    value?: string;
    /** Logical operator. */
    operator?: LogicalOperatorWithLiterals;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
/** @enumType */
type ConditionTypeWithLiterals = ConditionType | 'UNKNOWN_TYPE' | 'BY_TOTAL_WEIGHT' | 'BY_TOTAL_PRICE' | 'BY_TOTAL_QUANTITY';
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
/** @enumType */
type LogicalOperatorWithLiterals = LogicalOperator | 'UNKNOWN_LOGICAL_OPERATOR_TYPE' | 'EQ' | 'GT' | 'GTE' | 'LT' | 'LTE';
interface DiffmatokyPayload {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation;
    tags?: string[];
}
interface ErrorInformation {
    stackTrace?: string;
}
interface CreatePickupLocationRequest {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation;
}
interface CreatePickupLocationResponse {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation;
}
interface GetPickupLocationRequest {
    /**
     * Id of the PickupLocation to retrieve
     * @format GUID
     */
    pickupLocationId: string;
}
interface GetPickupLocationResponse {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation;
}
interface UpdatePickupLocationRequest {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation;
}
interface UpdatePickupLocationResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface DeletePickupLocationRequest {
    /**
     * Id of the PickupLocation to delete
     * @format GUID
     */
    pickupLocationId: string;
}
interface DeletePickupLocationResponse {
}
interface QueryPickupLocationRequest {
    /** WQL expression */
    query?: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryPickupLocationResponse {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface AddDeliveryRegionRequest {
    /**
     * Id of the PickupLocation to add to the delivery region
     * @format GUID
     */
    pickupLocationId: string;
    /**
     * Id of the DeliveryRegion to add the PickupLocation to
     * @format GUID
     */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface AddDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface RemoveDeliveryRegionRequest {
    /**
     * Id of the PickupLocation to add to the delivery region
     * @format GUID
     */
    pickupLocationId: string;
    /**
     * Id of the DeliveryRegion to add the PickupLocation to
     * @format GUID
     */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
interface BulkCreatePickupLocationRequest {
    /**
     * @minSize 1
     * @maxSize 100
     */
    pickupLocations: PickupLocation[];
}
interface BulkCreatePickupLocationResponse {
    /** @maxSize 100 */
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface PickupLocationError {
    _id?: string;
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkUpdatePickupLocationRequest {
    /**
     * @minSize 1
     * @maxSize 100
     */
    pickupLocations: PickupLocation[];
}
interface BulkUpdatePickupLocationResponse {
    /** @maxSize 100 */
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
interface BulkDeletePickupLocationRequest {
    /**
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    pickupLocationIds: string[];
}
interface BulkDeletePickupLocationResponse {
    errors?: PickupLocationError[];
}
interface Empty {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
/** @docsIgnore */
type CreatePickupLocationApplicationErrors = {
    code?: 'LOCATIONS_IN_SHIPPING_RULE_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'LIMIT_OF_OPTIONS_PER_DELIVERY_REGION_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkCreatePickupLocationApplicationErrors = {
    code?: 'LOCATIONS_IN_SHIPPING_RULE_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'LIMIT_OF_OPTIONS_PER_DELIVERY_REGION_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
};
/**
 * Creates a new PickupLocation
 * @param pickupLocation - PickupLocation to be created
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocation
 * @requiredField pickupLocation.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @applicableIdentity APP
 * @returns The created PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.CreatePickupLocation
 */
declare function createPickupLocation(pickupLocation: NonNullablePaths<PickupLocation, `address`, 2>): Promise<NonNullablePaths<PickupLocation, `address.streetAddress.number` | `address.streetAddress.name` | `rates` | `rates.${number}.amount` | `rates.${number}.multiplyByQuantity` | `deliveryRegionIds`, 4> & {
    __applicationErrorsType?: CreatePickupLocationApplicationErrors;
}>;
/**
 * Get a PickupLocation by id
 * @param pickupLocationId - Id of the PickupLocation to retrieve
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @applicableIdentity APP
 * @returns The retrieved PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.GetPickupLocation
 */
declare function getPickupLocation(pickupLocationId: string): Promise<NonNullablePaths<PickupLocation, `address.streetAddress.number` | `address.streetAddress.name` | `rates` | `rates.${number}.amount` | `rates.${number}.multiplyByQuantity` | `deliveryRegionIds`, 4>>;
/**
 * Update a PickupLocation
 * Delivery regions cannot be updated using this method, use AddDeliveryRegion and RemoveDeliveryRegion instead.
 * @param _id - PickupLocation ID
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField pickupLocation
 * @requiredField pickupLocation.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @applicableIdentity APP
 * @returns The updated PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.UpdatePickupLocation
 */
declare function updatePickupLocation(_id: string, pickupLocation: NonNullablePaths<UpdatePickupLocation, `revision`, 2>): Promise<NonNullablePaths<PickupLocation, `address.streetAddress.number` | `address.streetAddress.name` | `rates` | `rates.${number}.amount` | `rates.${number}.multiplyByQuantity` | `deliveryRegionIds`, 4>>;
interface UpdatePickupLocation {
    /**
     * PickupLocation ID
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Pickup Location Name
     * @minLength 1
     * @maxLength 100
     */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address;
    /**
     * Expected delivery time in free text. For example, `"3-5 business days"`.
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`.
     * @maxLength 1000
     */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /**
     * at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one.
     * @maxSize 50
     */
    rates?: ConditionalRates[];
    /**
     * This pickup location is active for the following delivery regions.
     * @maxSize 50
     * @format GUID
     */
    deliveryRegionIds?: string[];
}
/**
 * Delete a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to delete
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.DeletePickupLocation
 */
declare function deletePickupLocation(pickupLocationId: string): Promise<void>;
/**
 * Query PickupLocations using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.QueryPickupLocation
 */
declare function queryPickupLocation(): PickupLocationsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface PickupLocationsQueryResult extends QueryCursorResult {
    items: PickupLocation[];
    query: PickupLocationsQueryBuilder;
    next: () => Promise<PickupLocationsQueryResult>;
    prev: () => Promise<PickupLocationsQueryResult>;
}
interface PickupLocationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: string) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any[]) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'deliveryRegionIds', value: any[]) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: boolean) => PickupLocationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => PickupLocationsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<PickupLocationsQueryResult>;
}
/**
 * Add a DeliveryRegion to a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.AddDeliveryRegion
 */
declare function addDeliveryRegion(pickupLocationId: string, deliveryRegionId: string, options: NonNullablePaths<AddDeliveryRegionOptions, `revision`, 2>): Promise<NonNullablePaths<AddDeliveryRegionResponse, `pickupLocation.address.streetAddress.number` | `pickupLocation.address.streetAddress.name` | `pickupLocation.rates` | `pickupLocation.rates.${number}.amount` | `pickupLocation.rates.${number}.multiplyByQuantity` | `pickupLocation.deliveryRegionIds`, 5>>;
interface AddDeliveryRegionOptions {
    /** Revision of the PickupLocation */
    revision: string | null;
}
/**
 * Remove a DeliveryRegion from a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.RemoveDeliveryRegion
 */
declare function removeDeliveryRegion(pickupLocationId: string, deliveryRegionId: string, options: NonNullablePaths<RemoveDeliveryRegionOptions, `revision`, 2>): Promise<NonNullablePaths<RemoveDeliveryRegionResponse, `pickupLocation.address.streetAddress.number` | `pickupLocation.address.streetAddress.name` | `pickupLocation.rates` | `pickupLocation.rates.${number}.amount` | `pickupLocation.rates.${number}.multiplyByQuantity` | `pickupLocation.deliveryRegionIds`, 5>>;
interface RemoveDeliveryRegionOptions {
    /** Revision of the PickupLocation */
    revision: string | null;
}
/**
 * Bulk Create for new PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.BulkCreatePickupLocation
 */
declare function bulkCreatePickupLocation(pickupLocations: NonNullablePaths<PickupLocation, `address`, 2>[]): Promise<NonNullablePaths<BulkCreatePickupLocationResponse, `pickupLocations` | `pickupLocations.${number}.address.streetAddress.number` | `pickupLocations.${number}.address.streetAddress.name` | `errors` | `errors.${number}._id` | `errors.${number}.error.code` | `errors.${number}.error.description`, 6> & {
    __applicationErrorsType?: BulkCreatePickupLocationApplicationErrors;
}>;
/**
 * Update a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations._id
 * @requiredField pickupLocations.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.BulkUpdatePickupLocation
 */
declare function bulkUpdatePickupLocation(pickupLocations: NonNullablePaths<PickupLocation, `_id` | `revision`, 2>[]): Promise<NonNullablePaths<BulkUpdatePickupLocationResponse, `pickupLocations` | `pickupLocations.${number}.address.streetAddress.number` | `pickupLocations.${number}.address.streetAddress.name` | `errors` | `errors.${number}._id` | `errors.${number}.error.code` | `errors.${number}.error.description`, 6>>;
/**
 * Delete a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationIds
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @applicableIdentity APP
 * @fqn wix.ecom.v1.PickupLocations.BulkDeletePickupLocation
 */
declare function bulkDeletePickupLocation(pickupLocationIds: string[]): Promise<NonNullablePaths<BulkDeletePickupLocationResponse, `errors` | `errors.${number}._id` | `errors.${number}.error.code` | `errors.${number}.error.description`, 5>>;

export { type ActionEvent, type AddDeliveryRegionOptions, type AddDeliveryRegionRequest, type AddDeliveryRegionResponse, type Address, type AddressStreetOneOf, type ApplicationError, type BulkCreatePickupLocationApplicationErrors, type BulkCreatePickupLocationRequest, type BulkCreatePickupLocationResponse, type BulkDeletePickupLocationRequest, type BulkDeletePickupLocationResponse, type BulkUpdatePickupLocationRequest, type BulkUpdatePickupLocationResponse, type Condition, ConditionType, type ConditionTypeWithLiterals, type ConditionalRates, type CreatePickupLocationApplicationErrors, type CreatePickupLocationRequest, type CreatePickupLocationResponse, type CursorPaging, type CursorPagingMetadata, type Cursors, type DeletePickupLocationRequest, type DeletePickupLocationResponse, type DiffmatokyPayload, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type ErrorInformation, type GetPickupLocationRequest, type GetPickupLocationResponse, type IdentificationData, type IdentificationDataIdOneOf, LogicalOperator, type LogicalOperatorWithLiterals, type MessageEnvelope, type Paging, type PickupLocation, type PickupLocationError, type PickupLocationsQueryBuilder, type PickupLocationsQueryResult, type QueryPickupLocationRequest, type QueryPickupLocationResponse, type QueryV2, type QueryV2PagingMethodOneOf, type RemoveDeliveryRegionOptions, type RemoveDeliveryRegionRequest, type RemoveDeliveryRegionResponse, type RestoreInfo, SortOrder, type SortOrderWithLiterals, type Sorting, type StreetAddress, type UpdatePickupLocation, type UpdatePickupLocationRequest, type UpdatePickupLocationResponse, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, addDeliveryRegion, bulkCreatePickupLocation, bulkDeletePickupLocation, bulkUpdatePickupLocation, createPickupLocation, deletePickupLocation, getPickupLocation, queryPickupLocation, removeDeliveryRegion, updatePickupLocation };
