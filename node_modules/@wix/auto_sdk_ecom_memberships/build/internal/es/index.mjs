// src/service-plugins-types.ts
var MembershipErrorType = /* @__PURE__ */ ((MembershipErrorType2) => {
  MembershipErrorType2["UNKNOWN"] = "UNKNOWN";
  MembershipErrorType2["MEMBERSHIP_NOT_FOUND"] = "MEMBERSHIP_NOT_FOUND";
  MembershipErrorType2["LINE_ITEM_NOT_FOUND"] = "LINE_ITEM_NOT_FOUND";
  MembershipErrorType2["MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS"] = "MEMBERSHIP_CANNOT_BE_USED_FOR_LINE_ITEMS";
  MembershipErrorType2["MEMBERSHIP_SELECTION_INVALID"] = "MEMBERSHIP_SELECTION_INVALID";
  return MembershipErrorType2;
})(MembershipErrorType || {});
var MembershipCannotBeChargedType = /* @__PURE__ */ ((MembershipCannotBeChargedType2) => {
  MembershipCannotBeChargedType2["OUT_OF_CREDITS"] = "OUT_OF_CREDITS";
  MembershipCannotBeChargedType2["NOT_STARTED_YET"] = "NOT_STARTED_YET";
  MembershipCannotBeChargedType2["ENDED"] = "ENDED";
  MembershipCannotBeChargedType2["NOT_APPLICABLE_FOR_MULTIPLE_PARTICIPANTS"] = "NOT_APPLICABLE_FOR_MULTIPLE_PARTICIPANTS";
  return MembershipCannotBeChargedType2;
})(MembershipCannotBeChargedType || {});
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNKNOWN"] = "UNKNOWN";
  IdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["WIX_USER"] = "WIX_USER";
  IdentityType2["APP"] = "APP";
  return IdentityType2;
})(IdentityType || {});

// src/interfaces-ecom-v1-memberships-provider.public.ts
import { ServicePluginDefinition } from "@wix/sdk-types";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";
var provideHandlers = ServicePluginDefinition("ECOM_MEMBERSHIPS", [
  {
    name: "listEligibleMemberships",
    primaryHttpMappingPath: "/v1/list-eligible-memberships",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = transformPaths(payload, [
          {
            transformFn: transformSDKTimestampToRESTTimestamp,
            paths: [
              { path: "eligibleMemberships.expirationDate" },
              { path: "invalidMemberships.membership.expirationDate" }
            ]
          }
        ]);
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = transformPaths(payload, [
          {
            transformFn: transformRESTTimestampToSDKTimestamp,
            paths: [
              { path: "request.lineItems.serviceProperties.scheduledDate" }
            ]
          }
        ]);
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "chargeMembership",
    primaryHttpMappingPath: "/v1/charge-membership",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = transformPaths(payload, [
          {
            transformFn: transformRESTTimestampToSDKTimestamp,
            paths: [{ path: "request.serviceProperties.scheduledDate" }]
          }
        ]);
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "getMembershipVoidability",
    primaryHttpMappingPath: "/v1/get-voidability",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "voidMembershipCharge",
    primaryHttpMappingPath: "/v1/void-membership-charge",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  }
]);

// src/interfaces-ecom-v1-memberships-provider.context.ts
import { createServicePluginModule } from "@wix/sdk-runtime/service-plugin-modules";
var provideHandlers2 = createServicePluginModule(
  provideHandlers
);

// src/service-plugins-error-classes.ts
var InvalidSelectionWixError = class extends Error {
  constructor(data = {}) {
    super("InvalidSelection");
    this.httpCode = 400;
    this.statusCode = "INVALID_ARGUMENT";
    this.applicationCode = "INVALID_SELECTION";
    this.name = "InvalidSelection";
    this.errorSchemaName = "com.wix.ecom.memberships_spi.v1.MembershipInvalidSelectionErrors";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "InvalidSelection",
      applicationCode: "INVALID_SELECTION"
    };
    this.data = data;
  }
};
/** @hidden */
InvalidSelectionWixError.__type = "wix_spi_error";
var MembershipDoesNotApplyToItemWixError = class extends Error {
  constructor() {
    super("MembershipDoesNotApplyToItem");
    this.httpCode = 400;
    this.statusCode = "INVALID_ARGUMENT";
    this.applicationCode = "MEMBERSHIP_DOES_NOT_APPLY_TO_ITEM";
    this.name = "MembershipDoesNotApplyToItem";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "MembershipDoesNotApplyToItem",
      applicationCode: "MEMBERSHIP_DOES_NOT_APPLY_TO_ITEM"
    };
  }
};
/** @hidden */
MembershipDoesNotApplyToItemWixError.__type = "wix_spi_error";
var MembershipCannotBeUsedWixError = class extends Error {
  constructor(data = {}) {
    super("MembershipCannotBeUsed");
    this.httpCode = 428;
    this.statusCode = "FAILED_PRECONDITION";
    this.applicationCode = "MEMBERSHIP_CANNOT_BE_CHARGED";
    this.name = "MembershipCannotBeUsed";
    this.errorSchemaName = "com.wix.ecom.memberships_spi.v1.MembershipCannotBeChargedError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "MembershipCannotBeUsed",
      applicationCode: "MEMBERSHIP_CANNOT_BE_CHARGED"
    };
    this.data = data;
  }
};
/** @hidden */
MembershipCannotBeUsedWixError.__type = "wix_spi_error";
var MembershipAlreadyChargedWixError = class extends Error {
  constructor(data = {}) {
    super("MembershipAlreadyCharged");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "MEMBERSHIP_ALREADY_CHARGED";
    this.name = "MembershipAlreadyCharged";
    this.errorSchemaName = "com.wix.ecom.memberships_spi.v1.MembershipAlreadyChargedError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "MembershipAlreadyCharged",
      applicationCode: "MEMBERSHIP_ALREADY_CHARGED"
    };
    this.data = data;
  }
};
/** @hidden */
MembershipAlreadyChargedWixError.__type = "wix_spi_error";
var TransactionNotFoundWixError = class extends Error {
  constructor() {
    super("TransactionNotFound");
    this.httpCode = 404;
    this.statusCode = "NOT_FOUND";
    this.applicationCode = "TRANSACTION_NOT_FOUND";
    this.name = "TransactionNotFound";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "TransactionNotFound",
      applicationCode: "TRANSACTION_NOT_FOUND"
    };
  }
};
/** @hidden */
TransactionNotFoundWixError.__type = "wix_spi_error";
var TransactionCannotBeVoidedWixError = class extends Error {
  constructor() {
    super("TransactionCannotBeVoided");
    this.httpCode = 428;
    this.statusCode = "FAILED_PRECONDITION";
    this.applicationCode = "TRANSACTION_CANNOT_BE_VOIDED";
    this.name = "TransactionCannotBeVoided";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "TransactionCannotBeVoided",
      applicationCode: "TRANSACTION_CANNOT_BE_VOIDED"
    };
  }
};
/** @hidden */
TransactionCannotBeVoidedWixError.__type = "wix_spi_error";
var TransactionAlreadyVoidedWixError = class extends Error {
  constructor() {
    super("TransactionAlreadyVoided");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "TRANSACTION_ALREADY_VOIDED";
    this.name = "TransactionAlreadyVoided";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "TransactionAlreadyVoided",
      applicationCode: "TRANSACTION_ALREADY_VOIDED"
    };
  }
};
/** @hidden */
TransactionAlreadyVoidedWixError.__type = "wix_spi_error";
export {
  IdentityType,
  InvalidSelectionWixError,
  MembershipAlreadyChargedWixError,
  MembershipCannotBeChargedType,
  MembershipCannotBeUsedWixError,
  MembershipDoesNotApplyToItemWixError,
  MembershipErrorType,
  TransactionAlreadyVoidedWixError,
  TransactionCannotBeVoidedWixError,
  TransactionNotFoundWixError,
  provideHandlers2 as provideHandlers,
  provideHandlers as publicProvideHandlers
};
//# sourceMappingURL=index.mjs.map