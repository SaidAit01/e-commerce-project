import { ServicePluginDefinition } from '@wix/sdk-types';

interface CalculateAdditionalFeesRequest {
    /**
     * Line items to calculate additional fees for.
     *
     * Max: 300 items
     * @maxSize 300
     */
    lineItems?: LineItem[];
    /** Shipping address. */
    shippingAddress?: Address;
    /** Information about the buyer, such as contact details. */
    buyerDetails?: BuyerDetails;
    /**
     * Applied discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscount[];
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * The business location ID associated with the items.
     * Learn more about the [Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     * @format GUID
     */
    businessLocationId?: string | null;
    /**
     * Subtotal. Calculated as `lineItems[i].price` multiplied by `lineItems[i].quantity`, summed across all line items.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    subtotal?: string | null;
}
interface LineItem {
    /**
     * Line item ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * Quantity of item.
     *
     * Min: `1`
     * Max: `100000`
     * @max 100000
     */
    quantity?: number | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * @maxLength 100
     */
    productName?: string | null;
    /**
     * Price for a single item, after discounts and modifiers.
     * @decimalValue options { gte:0 }
     */
    price?: string;
    /** Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability. */
    physicalProperties?: PhysicalProperties;
    /**
     * Partial payment to be paid upfront during the checkout.
     * Only eligible for catalog items with `lineItem.paymentOption` type of `DEPOSIT_ONLINE`.
     * @format DECIMAL_VALUE
     */
    depositAmount?: string | null;
    /**
     * Modifier groups that were added to the item.
     * @maxSize 25
     */
    modifierGroups?: ModifierGroup[];
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 25
     */
    modifiers?: ItemModifier[];
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /**
     * The price of the modifier.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    price?: string | null;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine1?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
interface BuyerDetails {
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /**
     * Contact's phone number.
     * @format PHONE
     */
    phone?: string | null;
    /** Contact's company name. */
    company?: string | null;
    /**
     * Email associated with the address.
     * @format EMAIL
     */
    email?: string | null;
    /** Tax info. Currently usable only in Brazil. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of line items the discount applies to.
     * @format GUID
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
declare enum DiscountType {
    /** Global discount. */
    GLOBAL = "GLOBAL",
    /** Discount on specific items. */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    /** Discount on shipping. */
    SHIPPING = "SHIPPING"
}
/** Coupon */
interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** @decimalValue options { gte:0, lte:1000000000000000 } */
    amount?: string;
}
interface MerchantDiscount {
    /** @decimalValue options { gte:0, lte:1000000000000000 } */
    amount?: string;
}
interface DiscountRule {
    /**
     * Discount rule ID
     * @format GUID
     */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** @decimalValue options { gte:0, lte:1000000000000000 } */
    amount?: string;
}
interface DiscountRuleName {
    /**
     * Original discount rule name (in site's default language).
     * @minLength 1
     * @maxLength 256
     */
    original?: string;
    /**
     * Translated discount rule name according to buyer language. Defaults to `original` when not provided.
     * @minLength 1
     * @maxLength 500
     */
    translated?: string | null;
}
interface ShippingInformation {
    /** Selected carrier shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
}
interface SelectedCarrierServiceOption {
    /**
     * Unique identifier of selected option. For example, `"usps_std_overnight"`.
     * @maxLength 100
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @maxLength 250
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Other charges.
     * @maxSize 100
     */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
}
interface DeliveryLogistics {
    /**
     * Expected delivery time. For example, "3-5 business days".
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for deliver. For example, "Please deliver during open hours and please don't park in disabled parking spot".
     * @maxLength 1000
     */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Whether the pickup address is a business. This may affect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method. */
    pickupMethod?: PickupMethod;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
interface SelectedCarrierServiceOptionPrices {
    /**
     * Price.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    price?: string;
    /**
     * Total shipping discount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    totalDiscount?: string | null;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of charge. */
    type?: ChargeType;
    /**
     * Details of the charge.
     *
     * Max: 200 characters
     * @maxLength 200
     */
    details?: string | null;
    /**
     * Cost.
     *
     * `cost` is `price` minus `totalDiscount`.
     */
    cost?: SelectedCarrierServiceOptionPrices;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
interface CalculateAdditionalFeesResponse {
    /**
     * Additional fees calculated.
     * @maxSize 100
     */
    additionalFees?: AdditionalFee[];
    /**
     * Currency of additional fees calculated. In three-letter currency code
     * [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     *
     * The currency returned in the response object must match the wix site's currency or those fees will
     * be filtered out and not returned. Extract the `currency` from the
     * [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions-with-rest#request-envelope)
     * to ensure the correct currency is used in your calculation.
     * @maxLength 3
     */
    currency?: string;
}
/** Additional fees calculated. */
interface AdditionalFee {
    /**
     * Additional fee's unique code or ID.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Additional fee's name.
     *
     * Max: 50 characters
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Total additional fees. This `price` does not include any taxes that may apply to these additional fees.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    price?: string;
    /**
     * Tax details.
     *
     * > **Note:** Tax is not calculated in the returned `price` even when `taxDetails.taxable` is `true`.
     */
    taxDetails?: TaxDetails;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
    /**
     * The translated name of the additional fee. The translation language is determined by the `languages` field in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 50
     */
    translatedName?: string | null;
}
/** Tax details. */
interface TaxDetails {
    /** Whether additional fee is taxable. */
    taxable?: boolean;
    /**
     * Reserved for internal use.
     * @format GUID
     */
    taxGroupId?: string | null;
}
interface AdditionalFeesSPIConfig {
    /**
     * Base URI where the endpoints are called.
     * Wix eCommerce appends the endpoint path to the base URI.
     * For example, to call the Calculate Additional Fees endpoint at `https://my-additional-fees.com/v1/calculateAdditionalFees`,
     * the base URI you provide here is `https://my-additional-fees.com/`.
     */
    deploymentUri?: string;
}
/**
 * this message is not directly used by any service,
 * it exists to describe the expected parameters that SHOULD be provided to invoked Velo methods as part of open-platform.
 * e.g. SPIs, event-handlers, etc..
 * NOTE: this context object MUST be provided as the last argument in each Velo method signature.
 *
 * Example:
 * ```typescript
 * export function wixStores_onOrderCanceled({ event, metadata }: OrderCanceledEvent) {
 * ...
 * }
 * ```
 */
interface Context {
    /** A unique identifier of the request. You may print this ID to your logs to help with future debugging and easier correlation with Wix's logs. */
    requestId?: string | null;
    /**
     * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) 3-letter currency code.
     * @format CURRENCY
     */
    currency?: string | null;
    /** An object that describes the identity that triggered this request. */
    identity?: IdentificationData;
    /** A string representing a language and region in the format of `"xx-XX"`. First 2 letters represent the language code according to ISO 639-1. This is followed by a dash "-", and then a by 2 capital letters representing the region according to ISO 3166-2. For example, `"en-US"`. */
    languages?: string[];
    /**
     * The service provider app's instance ID.
     * @format GUID
     */
    instanceId?: string | null;
}
declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: IdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}

interface CalculateAdditionalFeesEnvelope {
    request: CalculateAdditionalFeesRequest;
    metadata: Context;
}
declare const provideHandlers: ServicePluginDefinition<{
    /**
     *
     * This method retrieves additional fees calculated by your app.
     *
     * Wix calls this method when certain actions are performed on the cart or checkout.
     * For example, when an item is added to the cart or the amount of an item is updated in the checkout.
     *
     * > __Notes:__
     * > + Do not call the Estimate Cart Totals, Estimate Current Cart Totals or Get Checkout methods from your implementation code for Calculate Additional Fees. Doing so will result in an error.
     * > + The currency returned in the response object must match the site's currency or those fees will be filtered out and not returned. */
    calculateAdditionalFees(payload: CalculateAdditionalFeesEnvelope): CalculateAdditionalFeesResponse | Promise<CalculateAdditionalFeesResponse>;
}>;

export { type Address as A, type BuyerDetails as B, type CalculateAdditionalFeesRequest as C, DiscountType as D, type CalculateAdditionalFeesEnvelope as E, type FullAddressContactDetails as F, type ItemModifier as I, type LineItem as L, type ModifierGroup as M, type PhysicalProperties as P, type StreetAddress as S, type TranslatableString as T, type VatId as V, type CatalogReference as a, type AddressLocation as b, VatType as c, type AppliedDiscount as d, type AppliedDiscountDiscountSourceOneOf as e, type Coupon as f, type MerchantDiscount as g, type DiscountRule as h, type DiscountRuleName as i, type ShippingInformation as j, type SelectedCarrierServiceOption as k, type DeliveryLogistics as l, type PickupDetails as m, PickupMethod as n, type SelectedCarrierServiceOptionPrices as o, provideHandlers as p, type SelectedCarrierServiceOptionOtherCharge as q, ChargeType as r, type CalculateAdditionalFeesResponse as s, type AdditionalFee as t, type TaxDetails as u, type AdditionalFeesSPIConfig as v, type Context as w, IdentityType as x, type IdentificationData as y, type IdentificationDataIdOneOf as z };
