import { CreateBackInStockNotificationRequestRequest as CreateBackInStockNotificationRequestRequest$1, CreateBackInStockNotificationRequestResponse as CreateBackInStockNotificationRequestResponse$1, GetBackInStockNotificationRequestRequest as GetBackInStockNotificationRequestRequest$1, GetBackInStockNotificationRequestResponse as GetBackInStockNotificationRequestResponse$1, DeleteBackInStockNotificationRequestRequest as DeleteBackInStockNotificationRequestRequest$1, DeleteBackInStockNotificationRequestResponse as DeleteBackInStockNotificationRequestResponse$1, MarkAsNotificationSentRequest as MarkAsNotificationSentRequest$1, MarkAsNotificationSentResponse as MarkAsNotificationSentResponse$1, QueryBackInStockNotificationRequestsRequest as QueryBackInStockNotificationRequestsRequest$1, QueryBackInStockNotificationRequestsResponse as QueryBackInStockNotificationRequestsResponse$1, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest as GetBackInStockNotificationRequestsCountByCatalogReferencesRequest$1, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse as GetBackInStockNotificationRequestsCountByCatalogReferencesResponse$1, ReportItemsBackInStockRequest as ReportItemsBackInStockRequest$1, ReportItemsBackInStockResponse as ReportItemsBackInStockResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

/**
 * The back in stock notification request allows a customer to receive a notification when a specific item
 * is available again. The request includes information about the person making the request, the item
 * they want to receive a notification for, and the status of the notification.
 */
interface BackInStockNotificationRequest {
    /**
     * Notification request ID.
     * @readonly
     * @format GUID
     */
    id?: string | null;
    /**
     * Catalog and item reference that the notification request is for.
     *
     * Includes IDs for the catalog and item it came from, as well as additional, optional information.
     *
     * Back in stock notifications only work for [Wix Stores](https://support.wix.com/en/article/wix-stores-about-wix-stores).
     * The `appId` for Wix Stores is `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`.
     */
    catalogReference?: CatalogReference;
    /**
     * Email address to send notification to about item being back in stock.
     * @format EMAIL
     */
    email?: string;
    /**
     * Contact ID for the contact with this `email`.
     *
     * If a contact does not already exist with the email address submitted when creating this notification request, then a new contact is created.
     * For more information about contacts, see the Contacts API.
     * @readonly
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Status of the notification.
     *
     * `status` is set to `RECEIVED` when the notification request is created.
     * The `status` changes once a notification email is sent for this request object:
     * + When a notification email is sent through the site, either automatically or with the Report Items Back In Stock method, then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successful, and `FAILED` if it fails.
     * + When a notification email is sent offline, use the Mark As Notification Sent method to set `status` to `NOTIFICATION_SENT`.
     * @readonly
     */
    status?: StatusWithLiterals;
    /**
     * Whether a notification was sent automatically.
     *
     * `autoNotified` is empty when the notification request is created and is not returned until
     * the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.
     *
     * `autoNotified` sets to `TRUE` if the notification is sent through the site, either automatically or with the Report Items Back In Stock method.
     * If the notification email is sent offline but the `status` is updated with the Mark As Notification Sent method,
     * then `autoNotified` sets to `FALSE`.
     * @readonly
     */
    autoNotified?: boolean | null;
    /**
     * Date and time the notification request was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Item URL for this notification request.
     * @format WEB_URL
     */
    itemUrl?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
declare enum Status {
    UNSPECIFIED = "UNSPECIFIED",
    RECEIVED = "RECEIVED",
    PROCESSING = "PROCESSING",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    FAILED = "FAILED"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNSPECIFIED' | 'RECEIVED' | 'PROCESSING' | 'NOTIFICATION_SENT' | 'FAILED';
interface CreateBackInStockNotificationRequestRequest {
    /**
     * Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     */
    request: BackInStockNotificationRequest;
    /** Item details to include in the notification when the item is back in stock. */
    itemDetails: BackInStockItemDetails;
}
interface BackInStockItemDetails {
    /** Item name. */
    name?: string;
    /**
     * Item price.
     * @decimalValue options { gte:0 }
     */
    price?: string;
    /** Item image. */
    image?: Image;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface CreateBackInStockNotificationRequestResponse {
    /** Created back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface GetBackInStockNotificationRequestRequest {
    /**
     * ID of the notification request to retrieve.
     * @format GUID
     */
    id: string;
}
interface GetBackInStockNotificationRequestResponse {
    /** Retrieved back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface DeleteBackInStockNotificationRequestRequest {
    /**
     * ID of the notification request to delete.
     * @format GUID
     */
    id: string;
}
interface DeleteBackInStockNotificationRequestResponse {
}
interface MarkAsNotificationSentRequest {
    /**
     * ID of the notification request to mark.
     * @format GUID
     */
    id: string;
}
interface MarkAsNotificationSentResponse {
    /** Marked back in stock notification request. */
    request?: BackInStockNotificationRequest;
}
interface QueryBackInStockNotificationRequestsRequest {
    /** Query options. */
    query: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryBackInStockNotificationRequestsResponse {
    /** Retrieved back in stock requests. */
    requests?: BackInStockNotificationRequest[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesRequest {
    /**
     * `catalogReference` items to retrieve the notification request for.
     * @minSize 1
     * @maxSize 100
     */
    catalogReferences: CatalogReference[];
}
interface GetBackInStockNotificationRequestsCountByCatalogReferencesResponse {
    /** Amount of back in stock notifications for each of the retrieved `catalogReference` items. */
    countsPerCatalogReference?: BackInStockNotificationRequestsCount[];
}
/** Maps each back in stock CatalogReference to the results (the number of unique occurrences). */
interface BackInStockNotificationRequestsCount {
    /**
     * Catalog and item reference.
     *
     * Includes IDs and additional, optional information related to the item.
     */
    catalogReference?: CatalogReference;
    /** The number of unique back in stock requests for given `catalogReference`. */
    count?: number;
}
interface ReportItemsBackInStockRequest {
    /**
     * `catalogReference` item to send notifications for.
     *
     * Cannot be used with `requestIds`.
     */
    catalogReference?: CatalogReference;
    /**
     * IDs of requests to send notifications for.
     *
     * Cannot be used with `catalogReference`.
     */
    requestIds?: string[];
    /**
     * Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic values in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     */
    itemDetails: BackInStockItemDetails;
    /** Additional key-value pairs to pass to the back in stock notification template. */
    extraAutomationTemplateParameters?: Record<string, string>;
}
interface ReportItemsBackInStockResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createBackInStockNotificationRequest(): __PublicMethodMetaInfo<'POST', {}, CreateBackInStockNotificationRequestRequest$1, CreateBackInStockNotificationRequestRequest, CreateBackInStockNotificationRequestResponse$1, CreateBackInStockNotificationRequestResponse>;
declare function getBackInStockNotificationRequest(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetBackInStockNotificationRequestRequest$1, GetBackInStockNotificationRequestRequest, GetBackInStockNotificationRequestResponse$1, GetBackInStockNotificationRequestResponse>;
declare function deleteBackInStockNotificationRequest(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteBackInStockNotificationRequestRequest$1, DeleteBackInStockNotificationRequestRequest, DeleteBackInStockNotificationRequestResponse$1, DeleteBackInStockNotificationRequestResponse>;
declare function markAsNotificationSent(): __PublicMethodMetaInfo<'PUT', {
    id: string;
}, MarkAsNotificationSentRequest$1, MarkAsNotificationSentRequest, MarkAsNotificationSentResponse$1, MarkAsNotificationSentResponse>;
declare function queryBackInStockNotificationRequests(): __PublicMethodMetaInfo<'GET', {}, QueryBackInStockNotificationRequestsRequest$1, QueryBackInStockNotificationRequestsRequest, QueryBackInStockNotificationRequestsResponse$1, QueryBackInStockNotificationRequestsResponse>;
declare function getBackInStockNotificationRequestsCountByCatalogReferences(): __PublicMethodMetaInfo<'GET', {}, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest$1, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse$1, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse>;
declare function reportItemsBackInStock(): __PublicMethodMetaInfo<'POST', {}, ReportItemsBackInStockRequest$1, ReportItemsBackInStockRequest, ReportItemsBackInStockResponse$1, ReportItemsBackInStockResponse>;

export { type __PublicMethodMetaInfo, createBackInStockNotificationRequest, deleteBackInStockNotificationRequest, getBackInStockNotificationRequest, getBackInStockNotificationRequestsCountByCatalogReferences, markAsNotificationSent, queryBackInStockNotificationRequests, reportItemsBackInStock };
