"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// meta.ts
var meta_exports = {};
__export(meta_exports, {
  createBackInStockNotificationRequest: () => createBackInStockNotificationRequest2,
  deleteBackInStockNotificationRequest: () => deleteBackInStockNotificationRequest2,
  getBackInStockNotificationRequest: () => getBackInStockNotificationRequest2,
  getBackInStockNotificationRequestsCountByCatalogReferences: () => getBackInStockNotificationRequestsCountByCatalogReferences2,
  markAsNotificationSent: () => markAsNotificationSent2,
  queryBackInStockNotificationRequests: () => queryBackInStockNotificationRequests2,
  reportItemsBackInStock: () => reportItemsBackInStock2
});
module.exports = __toCommonJS(meta_exports);

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(opts) {
  const domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_back-in-stock-notifications";
function createBackInStockNotificationRequest(payload) {
  function __createBackInStockNotificationRequest({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "request.createdDate" },
          { path: "itemDetails.image.urlExpirationDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.CreateBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createBackInStockNotificationRequest;
}
function getBackInStockNotificationRequest(payload) {
  function __getBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getBackInStockNotificationRequest;
}
function deleteBackInStockNotificationRequest(payload) {
  function __deleteBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "DELETE",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.DeleteBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteBackInStockNotificationRequest;
}
function markAsNotificationSent(payload) {
  function __markAsNotificationSent({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "PUT",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.MarkAsNotificationSent",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
          data: payload,
          host
        }
      ),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __markAsNotificationSent;
}
function queryBackInStockNotificationRequests(payload) {
  function __queryBackInStockNotificationRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.QueryBackInStockNotificationRequests",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "requests.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryBackInStockNotificationRequests;
}
function getBackInStockNotificationRequestsCountByCatalogReferences(payload) {
  function __getBackInStockNotificationRequestsCountByCatalogReferences({
    host
  }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequestsCountByCatalogReferences",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/count-by-catalog-reference",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true)
    };
    return metadata;
  }
  return __getBackInStockNotificationRequestsCountByCatalogReferences;
}
function reportItemsBackInStock(payload) {
  function __reportItemsBackInStock({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "itemDetails.image.urlExpirationDate" }]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.ReportItemsBackInStock",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/report-items-back-in-stock",
          data: serializedData,
          host
        }
      ),
      data: serializedData
    };
    return metadata;
  }
  return __reportItemsBackInStock;
}

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.meta.ts
function createBackInStockNotificationRequest2() {
  const payload = {};
  const getRequestOptions = createBackInStockNotificationRequest(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/back-in-stock-notification-requests",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getBackInStockNotificationRequest2() {
  const payload = { id: ":id" };
  const getRequestOptions = getBackInStockNotificationRequest(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/back-in-stock-notification-requests/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteBackInStockNotificationRequest2() {
  const payload = { id: ":id" };
  const getRequestOptions = deleteBackInStockNotificationRequest(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/back-in-stock-notification-requests/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function markAsNotificationSent2() {
  const payload = { id: ":id" };
  const getRequestOptions = markAsNotificationSent(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PUT",
    path: "/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function queryBackInStockNotificationRequests2() {
  const payload = {};
  const getRequestOptions = queryBackInStockNotificationRequests(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/back-in-stock-notification-requests",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getBackInStockNotificationRequestsCountByCatalogReferences2() {
  const payload = {};
  const getRequestOptions = getBackInStockNotificationRequestsCountByCatalogReferences(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/back-in-stock-notification-requests/count-by-catalog-reference",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function reportItemsBackInStock2() {
  const payload = {};
  const getRequestOptions = reportItemsBackInStock(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/back-in-stock-notification-requests/report-items-back-in-stock",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createBackInStockNotificationRequest,
  deleteBackInStockNotificationRequest,
  getBackInStockNotificationRequest,
  getBackInStockNotificationRequestsCountByCatalogReferences,
  markAsNotificationSent,
  queryBackInStockNotificationRequests,
  reportItemsBackInStock
});
//# sourceMappingURL=meta.js.map