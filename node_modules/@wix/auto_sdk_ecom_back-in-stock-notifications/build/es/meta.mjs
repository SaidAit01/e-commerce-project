// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(opts) {
  const domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_back-in-stock-notifications";
function createBackInStockNotificationRequest(payload) {
  function __createBackInStockNotificationRequest({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "request.createdDate" },
          { path: "itemDetails.image.urlExpirationDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.CreateBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createBackInStockNotificationRequest;
}
function getBackInStockNotificationRequest(payload) {
  function __getBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getBackInStockNotificationRequest;
}
function deleteBackInStockNotificationRequest(payload) {
  function __deleteBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "DELETE",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.DeleteBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteBackInStockNotificationRequest;
}
function markAsNotificationSent(payload) {
  function __markAsNotificationSent({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "PUT",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.MarkAsNotificationSent",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
          data: payload,
          host
        }
      ),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __markAsNotificationSent;
}
function queryBackInStockNotificationRequests(payload) {
  function __queryBackInStockNotificationRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.QueryBackInStockNotificationRequests",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload, true),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "requests.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryBackInStockNotificationRequests;
}
function getBackInStockNotificationRequestsCountByCatalogReferences(payload) {
  function __getBackInStockNotificationRequestsCountByCatalogReferences({
    host
  }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequestsCountByCatalogReferences",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/count-by-catalog-reference",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload, true)
    };
    return metadata;
  }
  return __getBackInStockNotificationRequestsCountByCatalogReferences;
}
function reportItemsBackInStock(payload) {
  function __reportItemsBackInStock({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "itemDetails.image.urlExpirationDate" }]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.ReportItemsBackInStock",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/report-items-back-in-stock",
          data: serializedData,
          host
        }
      ),
      data: serializedData
    };
    return metadata;
  }
  return __reportItemsBackInStock;
}

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.meta.ts
function createBackInStockNotificationRequest2() {
  const payload = {};
  const getRequestOptions = createBackInStockNotificationRequest(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/back-in-stock-notification-requests",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getBackInStockNotificationRequest2() {
  const payload = { id: ":id" };
  const getRequestOptions = getBackInStockNotificationRequest(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/back-in-stock-notification-requests/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteBackInStockNotificationRequest2() {
  const payload = { id: ":id" };
  const getRequestOptions = deleteBackInStockNotificationRequest(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/back-in-stock-notification-requests/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function markAsNotificationSent2() {
  const payload = { id: ":id" };
  const getRequestOptions = markAsNotificationSent(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PUT",
    path: "/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function queryBackInStockNotificationRequests2() {
  const payload = {};
  const getRequestOptions = queryBackInStockNotificationRequests(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/back-in-stock-notification-requests",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getBackInStockNotificationRequestsCountByCatalogReferences2() {
  const payload = {};
  const getRequestOptions = getBackInStockNotificationRequestsCountByCatalogReferences(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/back-in-stock-notification-requests/count-by-catalog-reference",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function reportItemsBackInStock2() {
  const payload = {};
  const getRequestOptions = reportItemsBackInStock(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/back-in-stock-notification-requests/report-items-back-in-stock",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
export {
  createBackInStockNotificationRequest2 as createBackInStockNotificationRequest,
  deleteBackInStockNotificationRequest2 as deleteBackInStockNotificationRequest,
  getBackInStockNotificationRequest2 as getBackInStockNotificationRequest,
  getBackInStockNotificationRequestsCountByCatalogReferences2 as getBackInStockNotificationRequestsCountByCatalogReferences,
  markAsNotificationSent2 as markAsNotificationSent,
  queryBackInStockNotificationRequests2 as queryBackInStockNotificationRequests,
  reportItemsBackInStock2 as reportItemsBackInStock
};
//# sourceMappingURL=meta.mjs.map