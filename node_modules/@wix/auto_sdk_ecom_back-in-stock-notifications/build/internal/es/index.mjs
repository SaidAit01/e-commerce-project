// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(opts) {
  const domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_back-in-stock-notifications";
function createBackInStockNotificationRequest(payload) {
  function __createBackInStockNotificationRequest({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "request.createdDate" },
          { path: "itemDetails.image.urlExpirationDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.CreateBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createBackInStockNotificationRequest;
}
function getBackInStockNotificationRequest(payload) {
  function __getBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getBackInStockNotificationRequest;
}
function deleteBackInStockNotificationRequest(payload) {
  function __deleteBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "DELETE",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.DeleteBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteBackInStockNotificationRequest;
}
function markAsNotificationSent(payload) {
  function __markAsNotificationSent({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "PUT",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.MarkAsNotificationSent",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
          data: payload,
          host
        }
      ),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __markAsNotificationSent;
}
function queryBackInStockNotificationRequests(payload) {
  function __queryBackInStockNotificationRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.QueryBackInStockNotificationRequests",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload, true),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "requests.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryBackInStockNotificationRequests;
}
function getBackInStockNotificationRequestsCountByCatalogReferences(payload) {
  function __getBackInStockNotificationRequestsCountByCatalogReferences({
    host
  }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequestsCountByCatalogReferences",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/count-by-catalog-reference",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload, true)
    };
    return metadata;
  }
  return __getBackInStockNotificationRequestsCountByCatalogReferences;
}
function reportItemsBackInStock(payload) {
  function __reportItemsBackInStock({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "itemDetails.image.urlExpirationDate" }]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.ReportItemsBackInStock",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/report-items-back-in-stock",
          data: serializedData,
          host
        }
      ),
      data: serializedData
    };
    return metadata;
  }
  return __reportItemsBackInStock;
}

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.ts
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNSPECIFIED"] = "UNSPECIFIED";
  Status2["RECEIVED"] = "RECEIVED";
  Status2["PROCESSING"] = "PROCESSING";
  Status2["NOTIFICATION_SENT"] = "NOTIFICATION_SENT";
  Status2["FAILED"] = "FAILED";
  return Status2;
})(Status || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createBackInStockNotificationRequest2(request, itemDetails) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      request,
      itemDetails
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "itemDetails.image" }]
      }
    ]
  );
  const reqOpts = createBackInStockNotificationRequest(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.request;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { request: "$[0]", itemDetails: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["request", "itemDetails"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getBackInStockNotificationRequest2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getBackInStockNotificationRequest(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.request;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteBackInStockNotificationRequest2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteBackInStockNotificationRequest(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function markAsNotificationSent2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = markAsNotificationSent(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryBackInStockNotificationRequests2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryBackInStockNotificationRequests(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.requests,
        pagingMetadata: transformedData?.metadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function getBackInStockNotificationRequestsCountByCatalogReferences2(catalogReferences) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    catalogReferences
  });
  const reqOpts = getBackInStockNotificationRequestsCountByCatalogReferences(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { catalogReferences: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["catalogReferences"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function reportItemsBackInStock2(itemDetails, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      itemDetails,
      catalogReference: options?.catalogReference,
      requestIds: options?.requestIds,
      extraAutomationTemplateParameters: options?.extraAutomationTemplateParameters
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "itemDetails.image" }]
      }
    ]
  );
  const reqOpts = reportItemsBackInStock(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          itemDetails: "$[0]",
          catalogReference: "$[1].catalogReference",
          requestIds: "$[1].requestIds",
          extraAutomationTemplateParameters: "$[1].extraAutomationTemplateParameters"
        },
        singleArgumentUnchanged: false
      },
      ["itemDetails", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.public.ts
function createBackInStockNotificationRequest3(httpClient) {
  return (request, itemDetails) => createBackInStockNotificationRequest2(
    request,
    itemDetails,
    // @ts-ignore
    { httpClient }
  );
}
function getBackInStockNotificationRequest3(httpClient) {
  return (_id) => getBackInStockNotificationRequest2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteBackInStockNotificationRequest3(httpClient) {
  return (_id) => deleteBackInStockNotificationRequest2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function markAsNotificationSent3(httpClient) {
  return (_id) => markAsNotificationSent2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function queryBackInStockNotificationRequests3(httpClient) {
  return () => queryBackInStockNotificationRequests2(
    // @ts-ignore
    { httpClient }
  );
}
function getBackInStockNotificationRequestsCountByCatalogReferences3(httpClient) {
  return (catalogReferences) => getBackInStockNotificationRequestsCountByCatalogReferences2(
    catalogReferences,
    // @ts-ignore
    { httpClient }
  );
}
function reportItemsBackInStock3(httpClient) {
  return (itemDetails, options) => reportItemsBackInStock2(
    itemDetails,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onBackInStockNotificationRequestCreated = EventDefinition(
  "wix.ecom.v1.back_in_stock_notification_request_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBackInStockNotificationRequestDeleted = EventDefinition(
  "wix.ecom.v1.back_in_stock_notification_request_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBackInStockNotificationRequestUpdated = EventDefinition(
  "wix.ecom.v1.back_in_stock_notification_request_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createBackInStockNotificationRequest4 = /* @__PURE__ */ createRESTModule(createBackInStockNotificationRequest3);
var getBackInStockNotificationRequest4 = /* @__PURE__ */ createRESTModule(getBackInStockNotificationRequest3);
var deleteBackInStockNotificationRequest4 = /* @__PURE__ */ createRESTModule(deleteBackInStockNotificationRequest3);
var markAsNotificationSent4 = /* @__PURE__ */ createRESTModule(markAsNotificationSent3);
var queryBackInStockNotificationRequests4 = /* @__PURE__ */ createRESTModule(queryBackInStockNotificationRequests3);
var getBackInStockNotificationRequestsCountByCatalogReferences4 = /* @__PURE__ */ createRESTModule(
  getBackInStockNotificationRequestsCountByCatalogReferences3
);
var reportItemsBackInStock4 = /* @__PURE__ */ createRESTModule(reportItemsBackInStock3);
var onBackInStockNotificationRequestCreated2 = createEventModule(
  onBackInStockNotificationRequestCreated
);
var onBackInStockNotificationRequestDeleted2 = createEventModule(
  onBackInStockNotificationRequestDeleted
);
var onBackInStockNotificationRequestUpdated2 = createEventModule(
  onBackInStockNotificationRequestUpdated
);
export {
  SortOrder,
  Status,
  WebhookIdentityType,
  createBackInStockNotificationRequest4 as createBackInStockNotificationRequest,
  deleteBackInStockNotificationRequest4 as deleteBackInStockNotificationRequest,
  getBackInStockNotificationRequest4 as getBackInStockNotificationRequest,
  getBackInStockNotificationRequestsCountByCatalogReferences4 as getBackInStockNotificationRequestsCountByCatalogReferences,
  markAsNotificationSent4 as markAsNotificationSent,
  onBackInStockNotificationRequestCreated2 as onBackInStockNotificationRequestCreated,
  onBackInStockNotificationRequestDeleted2 as onBackInStockNotificationRequestDeleted,
  onBackInStockNotificationRequestUpdated2 as onBackInStockNotificationRequestUpdated,
  queryBackInStockNotificationRequests4 as queryBackInStockNotificationRequests,
  reportItemsBackInStock4 as reportItemsBackInStock
};
//# sourceMappingURL=index.mjs.map