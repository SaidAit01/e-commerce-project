import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { BackInStockNotificationRequest, BackInStockItemDetails, CreateBackInStockNotificationRequestApplicationErrors, MarkAsNotificationSentResponse, MarkAsNotificationSentApplicationErrors, RequestsQueryBuilder, CatalogReference, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse, ReportItemsBackInStockOptions, ReportItemsBackInStockApplicationErrors, BackInStockNotificationRequestCreatedEnvelope, BackInStockNotificationRequestDeletedEnvelope, BackInStockNotificationRequestUpdatedEnvelope } from './index.typings.mjs';
export { ActionEvent, App, BackInStockNotificationRequestsCount, BaseEventMetadata, CreateBackInStockNotificationRequestRequest, CreateBackInStockNotificationRequestResponse, CursorPaging, Cursors, CustomTag, DeleteBackInStockNotificationRequestRequest, DeleteBackInStockNotificationRequestResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, FocalPoint, GetBackInStockNotificationRequestRequest, GetBackInStockNotificationRequestResponse, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, MarkAsNotificationSentRequest, MessageEnvelope, Page, PlatformPaging, PlatformPagingMetadata, PlatformQuery, PlatformQueryPagingMethodOneOf, QueryBackInStockNotificationRequestsRequest, QueryBackInStockNotificationRequestsResponse, ReportItemsBackInStockRequest, ReportItemsBackInStockResponse, RequestsQueryResult, RestoreInfo, SortOrder, SortOrderWithLiterals, Sorting, Status, StatusWithLiterals, URI, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function createBackInStockNotificationRequest$1(httpClient: HttpClient): CreateBackInStockNotificationRequestSignature;
interface CreateBackInStockNotificationRequestSignature {
    /**
     * Creates a back in stock notification request.
     *
     * If a notification request already exists for the same `catalogReference` and `email`,
     * then a new one isn't created and the existing request is returned.
     *
     * Back in stock notifications only work for [Wix Stores](https://support.wix.com/en/article/wix-stores-about-wix-stores).
     * The `appId` for Wix Stores is `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`.
     * @param - Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     * @param - Item details to include in the notification when the item is back in stock.
     * @returns Created back in stock notification request.
     */
    (request: NonNullablePaths<BackInStockNotificationRequest, `catalogReference` | `catalogReference.appId` | `catalogReference.catalogItemId` | `email`, 3>, itemDetails: NonNullablePaths<BackInStockItemDetails, `name` | `price`, 2>): Promise<NonNullablePaths<BackInStockNotificationRequest, `catalogReference.catalogItemId` | `catalogReference.appId` | `email` | `status`, 3> & {
        __applicationErrorsType?: CreateBackInStockNotificationRequestApplicationErrors;
    }>;
}
declare function getBackInStockNotificationRequest$1(httpClient: HttpClient): GetBackInStockNotificationRequestSignature;
interface GetBackInStockNotificationRequestSignature {
    /**
     * Retrieves a back in stock notification request.
     * @param - ID of the notification request to retrieve.
     * @returns Retrieved back in stock notification request.
     */
    (_id: string): Promise<NonNullablePaths<BackInStockNotificationRequest, `catalogReference.catalogItemId` | `catalogReference.appId` | `email` | `status`, 3>>;
}
declare function deleteBackInStockNotificationRequest$1(httpClient: HttpClient): DeleteBackInStockNotificationRequestSignature;
interface DeleteBackInStockNotificationRequestSignature {
    /**
     * Deletes a back in stock notification request.
     * @param - ID of the notification request to delete.
     */
    (_id: string): Promise<void>;
}
declare function markAsNotificationSent$1(httpClient: HttpClient): MarkAsNotificationSentSignature;
interface MarkAsNotificationSentSignature {
    /**
     * Sets `status` of a back in stock request to `NOTIFICATION_SENT`.
     *
     * Use this endpoint if the notification is sent manually offline. If the notification is sent
     * automatically or with the Report Items Back In Stock method, then `status` updates on its own.
     * @param - ID of the notification request to mark.
     */
    (_id: string): Promise<NonNullablePaths<MarkAsNotificationSentResponse, `request.catalogReference.catalogItemId` | `request.catalogReference.appId` | `request.email` | `request.status`, 4> & {
        __applicationErrorsType?: MarkAsNotificationSentApplicationErrors;
    }>;
}
declare function queryBackInStockNotificationRequests$1(httpClient: HttpClient): QueryBackInStockNotificationRequestsSignature;
interface QueryBackInStockNotificationRequestsSignature {
    /**
     * Creates a query to retrieve a list of back in stock notification requests.
     *
     * The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` method.
     *
     * You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.
     *
     * The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`."
     */
    (): RequestsQueryBuilder;
}
declare function getBackInStockNotificationRequestsCountByCatalogReferences$1(httpClient: HttpClient): GetBackInStockNotificationRequestsCountByCatalogReferencesSignature;
interface GetBackInStockNotificationRequestsCountByCatalogReferencesSignature {
    /**
     * Retrieves the amount of back in stock requests for a given `catalogReference` item.
     * @param - `catalogReference` items to retrieve the notification request for.
     */
    (catalogReferences: CatalogReference[]): Promise<NonNullablePaths<GetBackInStockNotificationRequestsCountByCatalogReferencesResponse, `countsPerCatalogReference` | `countsPerCatalogReference.${number}.catalogReference.catalogItemId` | `countsPerCatalogReference.${number}.catalogReference.appId` | `countsPerCatalogReference.${number}.count`, 5>>;
}
declare function reportItemsBackInStock$1(httpClient: HttpClient): ReportItemsBackInStockSignature;
interface ReportItemsBackInStockSignature {
    /**
     * Sends notifications for back in stock requests.
     *
     * > **Important:**
     * > Automations must be turned on in a [Wix user's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.
     *
     * This endpoint triggers notifications for requests in 1 of 2 ways:
     * 1. For a specific item, with the `catalogReference` information.
     * 2. For specific requests, with `requestIds`.
     *
     * `itemDetails` are required and may populate dynamic values in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * If the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should
     * be passed in `extraAutomationTemplateParameters`.
     *
     * After this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends
     * successfully, or to `FAILED` if it fails to send.
     * @param - Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic values in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     * @param - Report options.
     */
    (itemDetails: NonNullablePaths<BackInStockItemDetails, `name` | `price`, 2>, options?: ReportItemsBackInStockOptions): Promise<void & {
        __applicationErrorsType?: ReportItemsBackInStockApplicationErrors;
    }>;
}
declare const onBackInStockNotificationRequestCreated$1: EventDefinition<BackInStockNotificationRequestCreatedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_created">;
declare const onBackInStockNotificationRequestDeleted$1: EventDefinition<BackInStockNotificationRequestDeletedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_deleted">;
declare const onBackInStockNotificationRequestUpdated$1: EventDefinition<BackInStockNotificationRequestUpdatedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_updated">;

declare const createBackInStockNotificationRequest: MaybeContext<BuildRESTFunction<typeof createBackInStockNotificationRequest$1> & typeof createBackInStockNotificationRequest$1>;
declare const getBackInStockNotificationRequest: MaybeContext<BuildRESTFunction<typeof getBackInStockNotificationRequest$1> & typeof getBackInStockNotificationRequest$1>;
declare const deleteBackInStockNotificationRequest: MaybeContext<BuildRESTFunction<typeof deleteBackInStockNotificationRequest$1> & typeof deleteBackInStockNotificationRequest$1>;
declare const markAsNotificationSent: MaybeContext<BuildRESTFunction<typeof markAsNotificationSent$1> & typeof markAsNotificationSent$1>;
declare const queryBackInStockNotificationRequests: MaybeContext<BuildRESTFunction<typeof queryBackInStockNotificationRequests$1> & typeof queryBackInStockNotificationRequests$1>;
declare const getBackInStockNotificationRequestsCountByCatalogReferences: MaybeContext<BuildRESTFunction<typeof getBackInStockNotificationRequestsCountByCatalogReferences$1> & typeof getBackInStockNotificationRequestsCountByCatalogReferences$1>;
declare const reportItemsBackInStock: MaybeContext<BuildRESTFunction<typeof reportItemsBackInStock$1> & typeof reportItemsBackInStock$1>;
/** */
declare const onBackInStockNotificationRequestCreated: BuildEventDefinition<typeof onBackInStockNotificationRequestCreated$1> & typeof onBackInStockNotificationRequestCreated$1;
/** */
declare const onBackInStockNotificationRequestDeleted: BuildEventDefinition<typeof onBackInStockNotificationRequestDeleted$1> & typeof onBackInStockNotificationRequestDeleted$1;
/** */
declare const onBackInStockNotificationRequestUpdated: BuildEventDefinition<typeof onBackInStockNotificationRequestUpdated$1> & typeof onBackInStockNotificationRequestUpdated$1;

export { BackInStockItemDetails, BackInStockNotificationRequest, BackInStockNotificationRequestCreatedEnvelope, BackInStockNotificationRequestDeletedEnvelope, BackInStockNotificationRequestUpdatedEnvelope, CatalogReference, CreateBackInStockNotificationRequestApplicationErrors, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse, MarkAsNotificationSentApplicationErrors, MarkAsNotificationSentResponse, ReportItemsBackInStockApplicationErrors, ReportItemsBackInStockOptions, RequestsQueryBuilder, createBackInStockNotificationRequest, deleteBackInStockNotificationRequest, getBackInStockNotificationRequest, getBackInStockNotificationRequestsCountByCatalogReferences, markAsNotificationSent, onBackInStockNotificationRequestCreated, onBackInStockNotificationRequestDeleted, onBackInStockNotificationRequestUpdated, queryBackInStockNotificationRequests, reportItemsBackInStock };
