"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  SortOrder: () => SortOrder,
  Status: () => Status,
  WebhookIdentityType: () => WebhookIdentityType,
  createBackInStockNotificationRequest: () => createBackInStockNotificationRequest4,
  deleteBackInStockNotificationRequest: () => deleteBackInStockNotificationRequest4,
  getBackInStockNotificationRequest: () => getBackInStockNotificationRequest4,
  getBackInStockNotificationRequestsCountByCatalogReferences: () => getBackInStockNotificationRequestsCountByCatalogReferences4,
  markAsNotificationSent: () => markAsNotificationSent4,
  onBackInStockNotificationRequestCreated: () => onBackInStockNotificationRequestCreated2,
  onBackInStockNotificationRequestDeleted: () => onBackInStockNotificationRequestDeleted2,
  onBackInStockNotificationRequestUpdated: () => onBackInStockNotificationRequestUpdated2,
  queryBackInStockNotificationRequests: () => queryBackInStockNotificationRequests4,
  reportItemsBackInStock: () => reportItemsBackInStock4
});
module.exports = __toCommonJS(index_exports);

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(opts) {
  const domainToMappings = {
    "bo._base_domain_": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/back-in-stock-service",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/v1/back-in-stock-notification-requests",
        destPath: "/v1/back-in-stock-notification-requests"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_back-in-stock-notifications";
function createBackInStockNotificationRequest(payload) {
  function __createBackInStockNotificationRequest({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "request.createdDate" },
          { path: "itemDetails.image.urlExpirationDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.CreateBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createBackInStockNotificationRequest;
}
function getBackInStockNotificationRequest(payload) {
  function __getBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getBackInStockNotificationRequest;
}
function deleteBackInStockNotificationRequest(payload) {
  function __deleteBackInStockNotificationRequest({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "DELETE",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.DeleteBackInStockNotificationRequest",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteBackInStockNotificationRequest;
}
function markAsNotificationSent(payload) {
  function __markAsNotificationSent({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "PUT",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.MarkAsNotificationSent",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
          data: payload,
          host
        }
      ),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "request.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __markAsNotificationSent;
}
function queryBackInStockNotificationRequests(payload) {
  function __queryBackInStockNotificationRequests({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.QueryBackInStockNotificationRequests",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "requests.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryBackInStockNotificationRequests;
}
function getBackInStockNotificationRequestsCountByCatalogReferences(payload) {
  function __getBackInStockNotificationRequestsCountByCatalogReferences({
    host
  }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "GET",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequestsCountByCatalogReferences",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/count-by-catalog-reference",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true)
    };
    return metadata;
  }
  return __getBackInStockNotificationRequestsCountByCatalogReferences;
}
function reportItemsBackInStock(payload) {
  function __reportItemsBackInStock({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "itemDetails.image.urlExpirationDate" }]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "itemDetails.image.focalPoint.x" },
          { path: "itemDetails.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.back_in_stock_notification_request",
      method: "POST",
      methodFqn: "com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.ReportItemsBackInStock",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(
        {
          protoPath: "/v1/back-in-stock-notification-requests/report-items-back-in-stock",
          data: serializedData,
          host
        }
      ),
      data: serializedData
    };
    return metadata;
  }
  return __reportItemsBackInStock;
}

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.ts
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNSPECIFIED"] = "UNSPECIFIED";
  Status2["RECEIVED"] = "RECEIVED";
  Status2["PROCESSING"] = "PROCESSING";
  Status2["NOTIFICATION_SENT"] = "NOTIFICATION_SENT";
  Status2["FAILED"] = "FAILED";
  return Status2;
})(Status || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createBackInStockNotificationRequest2(request, itemDetails) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      request,
      itemDetails
    }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "itemDetails.image" }]
      }
    ]
  );
  const reqOpts = createBackInStockNotificationRequest(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.request;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { request: "$[0]", itemDetails: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["request", "itemDetails"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getBackInStockNotificationRequest2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getBackInStockNotificationRequest(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.request;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteBackInStockNotificationRequest2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteBackInStockNotificationRequest(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function markAsNotificationSent2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = markAsNotificationSent(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryBackInStockNotificationRequests2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryBackInStockNotificationRequests(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.requests,
        pagingMetadata: transformedData?.metadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function getBackInStockNotificationRequestsCountByCatalogReferences2(catalogReferences) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    catalogReferences
  });
  const reqOpts = getBackInStockNotificationRequestsCountByCatalogReferences(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { catalogReferences: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["catalogReferences"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function reportItemsBackInStock2(itemDetails, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      itemDetails,
      catalogReference: options?.catalogReference,
      requestIds: options?.requestIds,
      extraAutomationTemplateParameters: options?.extraAutomationTemplateParameters
    }),
    [
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "itemDetails.image" }]
      }
    ]
  );
  const reqOpts = reportItemsBackInStock(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          itemDetails: "$[0]",
          catalogReference: "$[1].catalogReference",
          requestIds: "$[1].requestIds",
          extraAutomationTemplateParameters: "$[1].extraAutomationTemplateParameters"
        },
        singleArgumentUnchanged: false
      },
      ["itemDetails", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.public.ts
function createBackInStockNotificationRequest3(httpClient) {
  return (request, itemDetails) => createBackInStockNotificationRequest2(
    request,
    itemDetails,
    // @ts-ignore
    { httpClient }
  );
}
function getBackInStockNotificationRequest3(httpClient) {
  return (_id) => getBackInStockNotificationRequest2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteBackInStockNotificationRequest3(httpClient) {
  return (_id) => deleteBackInStockNotificationRequest2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function markAsNotificationSent3(httpClient) {
  return (_id) => markAsNotificationSent2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function queryBackInStockNotificationRequests3(httpClient) {
  return () => queryBackInStockNotificationRequests2(
    // @ts-ignore
    { httpClient }
  );
}
function getBackInStockNotificationRequestsCountByCatalogReferences3(httpClient) {
  return (catalogReferences) => getBackInStockNotificationRequestsCountByCatalogReferences2(
    catalogReferences,
    // @ts-ignore
    { httpClient }
  );
}
function reportItemsBackInStock3(httpClient) {
  return (itemDetails, options) => reportItemsBackInStock2(
    itemDetails,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onBackInStockNotificationRequestCreated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.back_in_stock_notification_request_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBackInStockNotificationRequestDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.back_in_stock_notification_request_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBackInStockNotificationRequestUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.back_in_stock_notification_request_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createBackInStockNotificationRequest4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createBackInStockNotificationRequest3);
var getBackInStockNotificationRequest4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getBackInStockNotificationRequest3);
var deleteBackInStockNotificationRequest4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteBackInStockNotificationRequest3);
var markAsNotificationSent4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(markAsNotificationSent3);
var queryBackInStockNotificationRequests4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryBackInStockNotificationRequests3);
var getBackInStockNotificationRequestsCountByCatalogReferences4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(
  getBackInStockNotificationRequestsCountByCatalogReferences3
);
var reportItemsBackInStock4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(reportItemsBackInStock3);
var onBackInStockNotificationRequestCreated2 = (0, import_event_definition_modules.createEventModule)(
  onBackInStockNotificationRequestCreated
);
var onBackInStockNotificationRequestDeleted2 = (0, import_event_definition_modules.createEventModule)(
  onBackInStockNotificationRequestDeleted
);
var onBackInStockNotificationRequestUpdated2 = (0, import_event_definition_modules.createEventModule)(
  onBackInStockNotificationRequestUpdated
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SortOrder,
  Status,
  WebhookIdentityType,
  createBackInStockNotificationRequest,
  deleteBackInStockNotificationRequest,
  getBackInStockNotificationRequest,
  getBackInStockNotificationRequestsCountByCatalogReferences,
  markAsNotificationSent,
  onBackInStockNotificationRequestCreated,
  onBackInStockNotificationRequestDeleted,
  onBackInStockNotificationRequestUpdated,
  queryBackInStockNotificationRequests,
  reportItemsBackInStock
});
//# sourceMappingURL=index.js.map