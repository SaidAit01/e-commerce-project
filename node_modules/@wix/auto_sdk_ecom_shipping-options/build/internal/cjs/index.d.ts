import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { ShippingOption, CreateShippingOptionApplicationErrors, UpdateShippingOption, UpdateShippingOptionApplicationErrors, ShippingOptionsQueryBuilder, UpdateExtendedFieldsOptions, UpdateExtendedFieldsResponse, AddDeliveryRegionOptions, AddDeliveryRegionResponse, RemoveDeliveryRegionOptions, RemoveDeliveryRegionResponse, ShippingOptionCreatedEnvelope, ShippingOptionDeletedEnvelope, ShippingOptionUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, AddDeliveryRegionRequest, BaseEventMetadata, Condition, ConditionType, ConditionTypeWithLiterals, ConditionalRates, CreateShippingOptionRequest, CreateShippingOptionResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteShippingOptionRequest, DeleteShippingOptionResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, GetShippingOptionRequest, GetShippingOptionResponse, IdentificationData, IdentificationDataIdOneOf, LogicalOperator, LogicalOperatorWithLiterals, MessageEnvelope, QueryShippingOptionsRequest, QueryShippingOptionsResponse, RemoveDeliveryRegionRequest, RestoreInfo, ShippingOptionsQueryResult, SortOrder, SortOrderWithLiterals, Sorting, UpdateExtendedFieldsRequest, UpdateShippingOptionRequest, UpdateShippingOptionResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function createShippingOption$1(httpClient: HttpClient): CreateShippingOptionSignature;
interface CreateShippingOptionSignature {
    /**
     * Creates a ShippingOption.
     *
     * The request body must include shipping option and delivery region associated to.
     * @param - ShippingOption to be created.
     * @returns The created ShippingOption.
     */
    (shippingOption: ShippingOption): Promise<NonNullablePaths<ShippingOption, `deliveryRegionId` | `deliveryRegionIds` | `rates` | `rates.${number}.amount` | `rates.${number}.multiplyByQuantity`, 4> & {
        __applicationErrorsType?: CreateShippingOptionApplicationErrors;
    }>;
}
declare function getShippingOption$1(httpClient: HttpClient): GetShippingOptionSignature;
interface GetShippingOptionSignature {
    /**
     * Retrieves a ShippingOption.
     * @param - ID of the ShippingOption to retrieve.
     * @returns The requested ShippingOption.
     */
    (shippingOptionId: string): Promise<NonNullablePaths<ShippingOption, `deliveryRegionId` | `deliveryRegionIds` | `rates` | `rates.${number}.amount` | `rates.${number}.multiplyByQuantity`, 4>>;
}
declare function updateShippingOption$1(httpClient: HttpClient): UpdateShippingOptionSignature;
interface UpdateShippingOptionSignature {
    /**
     * Updates a ShippingOption.
     *
     *
     * Each time the ShippingOption is updated,
     * `revision` increments by 1.
     * The current `revision` must be passed when updating the ShippingOption.
     * This ensures you're working with the latest ShippingOption
     * and prevents unintended overwrites.
     * @param - ShippingOption ID.
     * @returns Updated ShippingOption.
     */
    (_id: string, shippingOption: NonNullablePaths<UpdateShippingOption, `revision`, 2>): Promise<NonNullablePaths<ShippingOption, `deliveryRegionId` | `deliveryRegionIds` | `rates` | `rates.${number}.amount` | `rates.${number}.multiplyByQuantity`, 4> & {
        __applicationErrorsType?: UpdateShippingOptionApplicationErrors;
    }>;
}
declare function deleteShippingOption$1(httpClient: HttpClient): DeleteShippingOptionSignature;
interface DeleteShippingOptionSignature {
    /**
     * Deletes a ShippingOption.
     * Deleting a ShippingOption permanently removes them from the ShippingOption List.
     * @param - Id of the ShippingOption to delete.
     */
    (shippingOptionId: string): Promise<void>;
}
declare function queryShippingOptions$1(httpClient: HttpClient): QueryShippingOptionsSignature;
interface QueryShippingOptionsSignature {
    /**
     * Retrieves a list of ShippingOptions, given the provided [paging, filtering, and sorting][1].
     *
     * Up to 1,000 ShippingOptions can be returned per request.
     *
     * To learn how to query ShippingOptions, see [API Query Language][2].
     *
     * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
     * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
     */
    (): ShippingOptionsQueryBuilder;
}
declare function updateExtendedFields$1(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates extended fields of a ShippingOption without incrementing revision
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: NonNullablePaths<UpdateExtendedFieldsOptions, `namespaceData`, 2>): Promise<NonNullablePaths<UpdateExtendedFieldsResponse, `shippingOption.deliveryRegionId` | `shippingOption.deliveryRegionIds` | `shippingOption.rates` | `shippingOption.rates.${number}.amount` | `shippingOption.rates.${number}.multiplyByQuantity`, 5>>;
}
declare function addDeliveryRegion$1(httpClient: HttpClient): AddDeliveryRegionSignature;
interface AddDeliveryRegionSignature {
    /**
     * Adds a delivery region to a shipping option.
     * @param - ID of the ShippingOption to be updated.
     * @param - ID of the delivery region that should use this ShippingOption.
     */
    (shippingOptionId: string, deliveryRegionId: string, options: NonNullablePaths<AddDeliveryRegionOptions, `revision`, 2>): Promise<NonNullablePaths<AddDeliveryRegionResponse, `shippingOption.deliveryRegionId` | `shippingOption.deliveryRegionIds` | `shippingOption.rates` | `shippingOption.rates.${number}.amount` | `shippingOption.rates.${number}.multiplyByQuantity`, 5>>;
}
declare function removeDeliveryRegion$1(httpClient: HttpClient): RemoveDeliveryRegionSignature;
interface RemoveDeliveryRegionSignature {
    /**
     * Removes a delivery region from a shipping option.
     * @param - ID of the ShippingOption to be updated.
     * @param - ID of the delivery region that should not use this ShippingOption anymore.
     */
    (shippingOptionId: string, deliveryRegionId: string, options: NonNullablePaths<RemoveDeliveryRegionOptions, `revision`, 2>): Promise<NonNullablePaths<RemoveDeliveryRegionResponse, `shippingOption.deliveryRegionId` | `shippingOption.deliveryRegionIds` | `shippingOption.rates` | `shippingOption.rates.${number}.amount` | `shippingOption.rates.${number}.multiplyByQuantity`, 5>>;
}
declare const onShippingOptionCreated$1: EventDefinition<ShippingOptionCreatedEnvelope, "wix.ecom.v1.shipping_option_created">;
declare const onShippingOptionDeleted$1: EventDefinition<ShippingOptionDeletedEnvelope, "wix.ecom.v1.shipping_option_deleted">;
declare const onShippingOptionUpdated$1: EventDefinition<ShippingOptionUpdatedEnvelope, "wix.ecom.v1.shipping_option_updated">;

declare const createShippingOption: MaybeContext<BuildRESTFunction<typeof createShippingOption$1> & typeof createShippingOption$1>;
declare const getShippingOption: MaybeContext<BuildRESTFunction<typeof getShippingOption$1> & typeof getShippingOption$1>;
declare const updateShippingOption: MaybeContext<BuildRESTFunction<typeof updateShippingOption$1> & typeof updateShippingOption$1>;
declare const deleteShippingOption: MaybeContext<BuildRESTFunction<typeof deleteShippingOption$1> & typeof deleteShippingOption$1>;
declare const queryShippingOptions: MaybeContext<BuildRESTFunction<typeof queryShippingOptions$1> & typeof queryShippingOptions$1>;
declare const updateExtendedFields: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$1> & typeof updateExtendedFields$1>;
declare const addDeliveryRegion: MaybeContext<BuildRESTFunction<typeof addDeliveryRegion$1> & typeof addDeliveryRegion$1>;
declare const removeDeliveryRegion: MaybeContext<BuildRESTFunction<typeof removeDeliveryRegion$1> & typeof removeDeliveryRegion$1>;
/**
 * Triggered when a shipping option is created.
 */
declare const onShippingOptionCreated: BuildEventDefinition<typeof onShippingOptionCreated$1> & typeof onShippingOptionCreated$1;
/**
 * Triggered when a shipping option is deleted.
 */
declare const onShippingOptionDeleted: BuildEventDefinition<typeof onShippingOptionDeleted$1> & typeof onShippingOptionDeleted$1;
/**
 * Triggered when a shipping option is updated.
 */
declare const onShippingOptionUpdated: BuildEventDefinition<typeof onShippingOptionUpdated$1> & typeof onShippingOptionUpdated$1;

export { AddDeliveryRegionOptions, AddDeliveryRegionResponse, CreateShippingOptionApplicationErrors, RemoveDeliveryRegionOptions, RemoveDeliveryRegionResponse, ShippingOption, ShippingOptionCreatedEnvelope, ShippingOptionDeletedEnvelope, ShippingOptionUpdatedEnvelope, ShippingOptionsQueryBuilder, UpdateExtendedFieldsOptions, UpdateExtendedFieldsResponse, UpdateShippingOption, UpdateShippingOptionApplicationErrors, addDeliveryRegion, createShippingOption, deleteShippingOption, getShippingOption, onShippingOptionCreated, onShippingOptionDeleted, onShippingOptionUpdated, queryShippingOptions, removeDeliveryRegion, updateExtendedFields, updateShippingOption };
