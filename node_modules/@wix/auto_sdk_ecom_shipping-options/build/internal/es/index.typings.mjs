// src/ecom-v1-shipping-option-shipping-options.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-shipping-option-shipping-options.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixEcomDeliveryV1ShippingOptionServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/shipping-option-service",
        destPath: ""
      },
      {
        srcPath: "/_api/shipping-option-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/shipping-options",
        destPath: "/v1/shipping-options"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/v1/shipping-options",
        destPath: "/v1/shipping-options"
      }
    ],
    _: [
      {
        srcPath: "/ecom/v1/shipping-options",
        destPath: "/v1/shipping-options"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_shipping-options";
function createShippingOption(payload) {
  function __createShippingOption({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "shippingOption.createdDate" },
          { path: "shippingOption.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.CreateShippingOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOption.createdDate" },
            { path: "shippingOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createShippingOption;
}
function getShippingOption(payload) {
  function __getShippingOption({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "GET",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.GetShippingOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/{shippingOptionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOption.createdDate" },
            { path: "shippingOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getShippingOption;
}
function updateShippingOption(payload) {
  function __updateShippingOption({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "shippingOption.createdDate" },
          { path: "shippingOption.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "PATCH",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.UpdateShippingOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/{shippingOption.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOption.createdDate" },
            { path: "shippingOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateShippingOption;
}
function deleteShippingOption(payload) {
  function __deleteShippingOption({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "DELETE",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.DeleteShippingOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/{shippingOptionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteShippingOption;
}
function queryShippingOptions(payload) {
  function __queryShippingOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "GET",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.QueryShippingOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/query",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload, true),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOptions.createdDate" },
            { path: "shippingOptions.updatedDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
            protoPath: "/v1/shipping-options/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryShippingOptions;
}
function updateExtendedFields(payload) {
  function __updateExtendedFields({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.UpdateExtendedFields",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/{id}/update-extended-fields",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOption.createdDate" },
            { path: "shippingOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateExtendedFields;
}
function addDeliveryRegion(payload) {
  function __addDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.AddDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/{shippingOptionId}/add-delivery-region",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOption.createdDate" },
            { path: "shippingOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDeliveryRegion;
}
function removeDeliveryRegion(payload) {
  function __removeDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shipping_option",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippingOptionService.RemoveDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippingOptionServiceUrl({
        protoPath: "/v1/shipping-options/{shippingOptionId}/remove-delivery-region",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippingOption.createdDate" },
            { path: "shippingOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDeliveryRegion;
}

// src/ecom-v1-shipping-option-shipping-options.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var ConditionType = /* @__PURE__ */ ((ConditionType2) => {
  ConditionType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ConditionType2["BY_TOTAL_WEIGHT"] = "BY_TOTAL_WEIGHT";
  ConditionType2["BY_TOTAL_PRICE"] = "BY_TOTAL_PRICE";
  ConditionType2["BY_TOTAL_QUANTITY"] = "BY_TOTAL_QUANTITY";
  return ConditionType2;
})(ConditionType || {});
var LogicalOperator = /* @__PURE__ */ ((LogicalOperator2) => {
  LogicalOperator2["UNKNOWN_LOGICAL_OPERATOR_TYPE"] = "UNKNOWN_LOGICAL_OPERATOR_TYPE";
  LogicalOperator2["EQ"] = "EQ";
  LogicalOperator2["GT"] = "GT";
  LogicalOperator2["GTE"] = "GTE";
  LogicalOperator2["LT"] = "LT";
  LogicalOperator2["LTE"] = "LTE";
  return LogicalOperator2;
})(LogicalOperator || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createShippingOption2(shippingOption) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shippingOption
  });
  const reqOpts = createShippingOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.shippingOption;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shippingOption: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["shippingOption"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getShippingOption2(shippingOptionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shippingOptionId
  });
  const reqOpts = getShippingOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.shippingOption;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shippingOptionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["shippingOptionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateShippingOption2(_id, shippingOption) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shippingOption: { ...shippingOption, id: _id }
  });
  const reqOpts = updateShippingOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.shippingOption;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { shippingOption: "$[1]" },
        explicitPathsToArguments: { "shippingOption.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "shippingOption"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteShippingOption2(shippingOptionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shippingOptionId
  });
  const reqOpts = deleteShippingOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shippingOptionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["shippingOptionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryShippingOptions2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryShippingOptions(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.shippingOptions,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function updateExtendedFields2(_id, namespace, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    namespace,
    namespaceData: options?.namespaceData
  });
  const reqOpts = updateExtendedFields(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          namespace: "$[1]",
          namespaceData: "$[2].namespaceData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "namespace", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addDeliveryRegion2(shippingOptionId, deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shippingOptionId,
    deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = addDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          shippingOptionId: "$[0]",
          deliveryRegionId: "$[1]",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["shippingOptionId", "deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDeliveryRegion2(shippingOptionId, deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shippingOptionId,
    deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = removeDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          shippingOptionId: "$[0]",
          deliveryRegionId: "$[1]",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["shippingOptionId", "deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  ConditionType,
  LogicalOperator,
  SortOrder,
  WebhookIdentityType,
  addDeliveryRegion2 as addDeliveryRegion,
  createShippingOption2 as createShippingOption,
  deleteShippingOption2 as deleteShippingOption,
  getShippingOption2 as getShippingOption,
  queryShippingOptions2 as queryShippingOptions,
  removeDeliveryRegion2 as removeDeliveryRegion,
  updateExtendedFields2 as updateExtendedFields,
  updateShippingOption2 as updateShippingOption
};
//# sourceMappingURL=index.typings.mjs.map