import { CreateShippingOptionRequest as CreateShippingOptionRequest$1, CreateShippingOptionResponse as CreateShippingOptionResponse$1, GetShippingOptionRequest as GetShippingOptionRequest$1, GetShippingOptionResponse as GetShippingOptionResponse$1, UpdateShippingOptionRequest as UpdateShippingOptionRequest$1, UpdateShippingOptionResponse as UpdateShippingOptionResponse$1, DeleteShippingOptionRequest as DeleteShippingOptionRequest$1, DeleteShippingOptionResponse as DeleteShippingOptionResponse$1, QueryShippingOptionsRequest as QueryShippingOptionsRequest$1, QueryShippingOptionsResponse as QueryShippingOptionsResponse$1, UpdateExtendedFieldsRequest as UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse as UpdateExtendedFieldsResponse$1, AddDeliveryRegionRequest as AddDeliveryRegionRequest$1, AddDeliveryRegionResponse as AddDeliveryRegionResponse$1, RemoveDeliveryRegionRequest as RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionResponse as RemoveDeliveryRegionResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

interface ShippingOption {
    /**
     * ShippingOption ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Associated delivery region id.
     * @format GUID
     * @immutable
     * @deprecated Associated delivery region id.
     * @replacedBy delivery_region_ids
     * @targetRemovalDate 2025-06-01
     */
    deliveryRegionId?: string;
    /**
     * This shipping option is active for the following delivery regions.
     * @maxSize 50
     * @format GUID
     * @immutable
     */
    deliveryRegionIds?: string[];
    /**
     * Delivery option configured for the ShippingOption
     * @maxLength 1000
     */
    title?: string | null;
    /**
     * Estimated delivery time. For example, "2-3 business days".
     * @maxLength 500
     * @deprecated Estimated delivery time. For example, "2-3 business days".
     * @replacedBy estimated_delivery_time
     * @targetRemovalDate 2025-07-01
     */
    estimateDeliveryTime?: string | null;
    /**
     * Estimated delivery time. For example, "2-3 business days".
     * @maxLength 500
     */
    estimatedDeliveryTime?: string | null;
    /**
     * at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one.
     * @minSize 1
     * @maxSize 50
     */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields;
}
interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * The amount of the rate that will be returned if all conditions are met.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    amount?: string;
    /**
     * For example: weight > 0 and weight <= 10
     * @maxSize 10
     */
    conditions?: Condition[];
    /** When this flag is set to true, multiply the amount by the number of line items passed on the request. */
    multiplyByQuantity?: boolean;
}
interface Condition {
    type?: ConditionTypeWithLiterals;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     * @decimalValue options { gte:0, lte:999999999, maxScale:6 }
     */
    value?: string;
    /** Logical operator. */
    operator?: LogicalOperatorWithLiterals;
}
declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
/** @enumType */
type ConditionTypeWithLiterals = ConditionType | 'UNKNOWN_TYPE' | 'BY_TOTAL_WEIGHT' | 'BY_TOTAL_PRICE' | 'BY_TOTAL_QUANTITY';
declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
/** @enumType */
type LogicalOperatorWithLiterals = LogicalOperator | 'UNKNOWN_LOGICAL_OPERATOR_TYPE' | 'EQ' | 'GT' | 'GTE' | 'LT' | 'LTE';
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippingOptionRequest {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption;
}
interface CreateShippingOptionResponse {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption;
}
interface GetShippingOptionRequest {
    /**
     * ID of the ShippingOption to retrieve.
     * @format GUID
     */
    shippingOptionId: string;
}
interface GetShippingOptionResponse {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption;
}
interface UpdateShippingOptionRequest {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption;
}
interface UpdateShippingOptionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
interface DeleteShippingOptionRequest {
    /**
     * Id of the ShippingOption to delete.
     * @format GUID
     */
    shippingOptionId: string;
}
interface DeleteShippingOptionResponse {
}
interface QueryShippingOptionsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryShippingOptionsResponse {
    /**
     * List of ShippingOptions.
     * @maxSize 100
     */
    shippingOptions?: ShippingOption[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
interface AddDeliveryRegionRequest {
    /**
     * ID of the delivery region that should use this ShippingOption.
     * @format GUID
     */
    deliveryRegionId: string;
    /**
     * ID of the ShippingOption to be updated.
     * @format GUID
     */
    shippingOptionId: string;
    /** Revision of the ShippingOption. */
    revision: string | null;
}
interface AddDeliveryRegionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
interface RemoveDeliveryRegionRequest {
    /**
     * ID of the delivery region that should not use this ShippingOption anymore.
     * @format GUID
     */
    deliveryRegionId: string;
    /**
     * ID of the ShippingOption to be updated.
     * @format GUID
     */
    shippingOptionId: string;
    /** Revision of the ShippingOption. */
    revision: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createShippingOption(): __PublicMethodMetaInfo<'POST', {}, CreateShippingOptionRequest$1, CreateShippingOptionRequest, CreateShippingOptionResponse$1, CreateShippingOptionResponse>;
declare function getShippingOption(): __PublicMethodMetaInfo<'GET', {
    shippingOptionId: string;
}, GetShippingOptionRequest$1, GetShippingOptionRequest, GetShippingOptionResponse$1, GetShippingOptionResponse>;
declare function updateShippingOption(): __PublicMethodMetaInfo<'PATCH', {
    shippingOptionId: string;
}, UpdateShippingOptionRequest$1, UpdateShippingOptionRequest, UpdateShippingOptionResponse$1, UpdateShippingOptionResponse>;
declare function deleteShippingOption(): __PublicMethodMetaInfo<'DELETE', {
    shippingOptionId: string;
}, DeleteShippingOptionRequest$1, DeleteShippingOptionRequest, DeleteShippingOptionResponse$1, DeleteShippingOptionResponse>;
declare function queryShippingOptions(): __PublicMethodMetaInfo<'GET', {}, QueryShippingOptionsRequest$1, QueryShippingOptionsRequest, QueryShippingOptionsResponse$1, QueryShippingOptionsResponse>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsRequest, UpdateExtendedFieldsResponse$1, UpdateExtendedFieldsResponse>;
declare function addDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    shippingOptionId: string;
}, AddDeliveryRegionRequest$1, AddDeliveryRegionRequest, AddDeliveryRegionResponse$1, AddDeliveryRegionResponse>;
declare function removeDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    shippingOptionId: string;
}, RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionRequest, RemoveDeliveryRegionResponse$1, RemoveDeliveryRegionResponse>;

export { type __PublicMethodMetaInfo, addDeliveryRegion, createShippingOption, deleteShippingOption, getShippingOption, queryShippingOptions, removeDeliveryRegion, updateExtendedFields, updateShippingOption };
