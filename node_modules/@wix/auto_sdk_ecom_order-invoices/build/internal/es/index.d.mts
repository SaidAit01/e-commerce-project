import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { ListInvoicesForMultipleOrdersResponse, GenerateInvoiceResponse, GenerateInvoiceApplicationErrors, BulkGenerateInvoicesResponse, Invoice, AddInvoiceToOrderResponse } from './index.typings.mjs';
export { ActionEvent, AddInvoiceToOrderRequest, ApplicationError, BulkActionMetadata, BulkGenerateInvoicesRequest, BulkInvoiceResult, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, GenerateInvoiceRequest, GenerateInvoiceWithNumberRequest, GenerateInvoiceWithNumberResponse, GetOrderInvoiceRequest, GetOrderInvoiceResponse, IdentificationData, IdentificationDataIdOneOf, InvoiceForOrder, InvoicesForOrder, ItemMetadata, ListInvoicesForMultipleOrdersRequest, ListInvoicesForSingleOrderRequest, ListInvoicesForSingleOrderResponse, MessageEnvelope, RestoreInfo, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function listInvoicesForMultipleOrders$1(httpClient: HttpClient): ListInvoicesForMultipleOrdersSignature;
interface ListInvoicesForMultipleOrdersSignature {
    /**
     * Retrieves the IDs of invoices associated with all specified orders.
     *
     *
     * The `listInvoicesForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
     * @param - Order IDs for which to retrieve invoices.
     */
    (orderIds: string[]): Promise<NonNullablePaths<ListInvoicesForMultipleOrdersResponse, `invoicesForOrder` | `invoicesForOrder.${number}.orderId`, 4>>;
}
/** @internal */
declare function generateInvoice$1(httpClient: HttpClient): GenerateInvoiceSignature;
interface GenerateInvoiceSignature {
    /**
     * Generates and adds an invoice to a specified order.
     * @param - Order ID.
     */
    (orderId: string): Promise<NonNullablePaths<GenerateInvoiceResponse, `invoiceId`, 2> & {
        __applicationErrorsType?: GenerateInvoiceApplicationErrors;
    }>;
}
/** @internal */
declare function bulkGenerateInvoices$1(httpClient: HttpClient): BulkGenerateInvoicesSignature;
interface BulkGenerateInvoicesSignature {
    /**
     * Generates and adds invoices to all specified orders.
     * @param - Order IDs.
     */
    (orderIds: string[]): Promise<NonNullablePaths<BulkGenerateInvoicesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.orderId` | `results.${number}.item.invoiceId` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
/** @internal */
declare function addInvoiceToOrder$1(httpClient: HttpClient): AddInvoiceToOrderSignature;
interface AddInvoiceToOrderSignature {
    /**
     * Adds an invoice to a specified order.
     * @param - Order ID.
     * @param - Invoice info.
     */
    (orderId: string, invoiceInfo: NonNullablePaths<Invoice, `_id` | `appId`, 2>): Promise<NonNullablePaths<AddInvoiceToOrderResponse, `orderInvoices` | `orderInvoices.${number}._id` | `orderInvoices.${number}.appId`, 4>>;
}

declare const listInvoicesForMultipleOrders: MaybeContext<BuildRESTFunction<typeof listInvoicesForMultipleOrders$1> & typeof listInvoicesForMultipleOrders$1>;
/** @internal */
declare const generateInvoice: MaybeContext<BuildRESTFunction<typeof generateInvoice$1> & typeof generateInvoice$1>;
/** @internal */
declare const bulkGenerateInvoices: MaybeContext<BuildRESTFunction<typeof bulkGenerateInvoices$1> & typeof bulkGenerateInvoices$1>;
/** @internal */
declare const addInvoiceToOrder: MaybeContext<BuildRESTFunction<typeof addInvoiceToOrder$1> & typeof addInvoiceToOrder$1>;

export { AddInvoiceToOrderResponse, BulkGenerateInvoicesResponse, GenerateInvoiceApplicationErrors, GenerateInvoiceResponse, Invoice, ListInvoicesForMultipleOrdersResponse, addInvoiceToOrder, bulkGenerateInvoices, generateInvoice, listInvoicesForMultipleOrders };
