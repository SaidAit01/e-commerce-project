import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { CheckoutTemplate, CreateCheckoutTemplateApplicationErrors, UpdateCheckoutTemplate, UpdateCheckoutTemplateApplicationErrors, CheckoutTemplatesQueryBuilder, CreateCheckoutFromTemplateResponse, CreateCheckoutFromTemplateApplicationErrors, RawHttpResponse, CreateAndRedirectToCheckoutApplicationErrors, CheckoutTemplateCreatedEnvelope, CheckoutTemplateDeletedEnvelope, CheckoutTemplateUpdatedEnvelope, CheckoutTemplateUsedEnvelope } from './index.typings.js';
export { ActionEvent, AdditionalFee, AdditionalFeeSource, AdditionalFeeSourceWithLiterals, Address, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApplicableLineItems, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BuyerInfo, BuyerInfoIdOneOf, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, CatalogOverrideFields, CatalogReference, ChannelType, ChannelTypeWithLiterals, Charge, ChargeType, ChargeTypeWithLiterals, Checkout, CheckoutCustomization, CheckoutTemplateUsed, CheckoutTemplatesQueryResult, Color, ConversionInfo, Coupon, CreateAndRedirectToCheckoutRequest, CreateCheckoutFromTemplateRequest, CreateCheckoutTemplateRequest, CreateCheckoutTemplateResponse, CreatedBy, CreatedByIdOneOf, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomContentReference, CustomField, CustomLineItem, CustomSettings, DeleteCheckoutTemplateRequest, DeleteCheckoutTemplateResponse, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineTypeWithLiterals, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DiscountRule, DiscountRuleName, DiscountType, DiscountTypeWithLiterals, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, ExternalReference, FallbackReason, FallbackReasonWithLiterals, FieldViolation, FileType, FileTypeWithLiterals, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, GetCheckoutTemplateRequest, GetCheckoutTemplateResponse, GiftCard, Group, HeadersEntry, IdentificationData, IdentificationDataIdOneOf, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemAvailabilityStatusWithLiterals, ItemModifier, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, ItemTypeItemTypeWithLiterals, JurisdictionType, JurisdictionTypeWithLiterals, LineItem, LineItemDiscount, ManualCalculationReason, ManualCalculationReasonWithLiterals, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MessageEnvelope, ModifierGroup, MultiCurrencyPrice, NameInLineItem, NameInLineItemWithLiterals, NameInOther, NameInOtherWithLiterals, Other, OtherCharge, PaymentOption, PaymentOptionType, PaymentOptionTypeWithLiterals, PhysicalProperties, PickupDetails, PickupMethod, PickupMethodWithLiterals, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductName, QueryCheckoutTemplatesRequest, QueryCheckoutTemplatesResponse, RateType, RateTypeWithLiterals, Region, RestoreInfo, RuleType, RuleTypeWithLiterals, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, ServiceProperties, Severity, SeverityWithLiterals, ShippingInfo, ShippingOption, ShippingPrice, ShippingRegion, SortOrder, SortOrderWithLiterals, Sorting, Status, StatusWithLiterals, StreetAddress, SubscriptionCharges, SubscriptionFrequency, SubscriptionFrequencyWithLiterals, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SuggestedFixWithLiterals, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, TaxableAddressTypeWithLiterals, Title, TranslatableString, UpdateCheckoutTemplateRequest, UpdateCheckoutTemplateResponse, V1ItemModifier, V1LineItem, V1ModifierGroup, ValidationError, VatId, VatType, VatTypeWithLiterals, Violation, WebClientCustomization, WebhookIdentityType, WebhookIdentityTypeWithLiterals, WeightUnit, WeightUnitWithLiterals } from './index.typings.js';

declare function createCheckoutTemplate$1(httpClient: HttpClient): CreateCheckoutTemplateSignature;
interface CreateCheckoutTemplateSignature {
    /**
     * Creates a checkout template.
     *
     * A checkout template is used to create a new checkout that will include predefined information. For example, a single link with
     * a `checkoutTemplateId` can be shared with customers and each time the link is clicked, a new checkout page will be created
     * for that customer with certain checkout information already populated.
     *
     * The customizable features include the option to allow or to lock coupon codes or gift cards. For example, if a store owner is
     * using the checkout template to offer a flash sale to their social media followers, they may want to lock the option to apply an
     * additional coupon on top of the sale being offered. If so, they can set `customization.lockedCoupon` to `true`.
     *
     * A checkout can be created with a checkout template by calling Create Checkout From Template.
     * The site may add further customizations to the new checkout and then redirect the customer using the new checkout's `checkoutUrl`.
     * @param - Checkout template to create.
     * @returns Created checkout template.
     */
    (checkoutTemplate: NonNullablePaths<CheckoutTemplate, `customLineItems.${number}.descriptionLines.${number}.name` | `customLineItems.${number}.itemType` | `customLineItems.${number}.productName` | `customLineItems.${number}.quantity` | `lineItems.${number}.catalogReference` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.quantity`, 6>): Promise<NonNullablePaths<CheckoutTemplate, `status` | `customization.webClient.disabledContinueShoppingButton` | `customization.webClient.disabledPolicyAgreementCheckbox` | `customization.lockedGiftCard` | `customization.lockedCoupon` | `customization.disabledManualPayment` | `lineItems` | `lineItems.${number}.quantity` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogOverrideFields.productName.original` | `lineItems.${number}.catalogOverrideFields.physicalProperties.shippable` | `lineItems.${number}.catalogOverrideFields.paymentOption.value` | `customLineItems` | `customLineItems.${number}.quantity` | `customLineItems.${number}.price` | `customLineItems.${number}.priceDescription.original` | `customLineItems.${number}.itemType.preset` | `customLineItems.${number}.itemType.custom` | `customLineItems.${number}.paymentOption` | `customLineItems.${number}.savePaymentMethod` | `customLineItems.${number}.membersOnly` | `customLineItems.${number}.taxableAddress.addressType` | `customContentReference.appId` | `customContentReference.componentId` | `externalReference.appId`, 6> & {
        __applicationErrorsType?: CreateCheckoutTemplateApplicationErrors;
    }>;
}
declare function getCheckoutTemplate$1(httpClient: HttpClient): GetCheckoutTemplateSignature;
interface GetCheckoutTemplateSignature {
    /**
     * Retrieves a checkout template.
     * @param - ID of the checkout template to retrieve.
     * @returns Retrieved checkout template.
     */
    (checkoutTemplateId: string): Promise<NonNullablePaths<CheckoutTemplate, `status` | `customization.webClient.disabledContinueShoppingButton` | `customization.webClient.disabledPolicyAgreementCheckbox` | `customization.lockedGiftCard` | `customization.lockedCoupon` | `customization.disabledManualPayment` | `lineItems` | `lineItems.${number}.quantity` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogOverrideFields.productName.original` | `lineItems.${number}.catalogOverrideFields.physicalProperties.shippable` | `lineItems.${number}.catalogOverrideFields.paymentOption.value` | `customLineItems` | `customLineItems.${number}.quantity` | `customLineItems.${number}.price` | `customLineItems.${number}.priceDescription.original` | `customLineItems.${number}.itemType.preset` | `customLineItems.${number}.itemType.custom` | `customLineItems.${number}.paymentOption` | `customLineItems.${number}.savePaymentMethod` | `customLineItems.${number}.membersOnly` | `customLineItems.${number}.taxableAddress.addressType` | `customContentReference.appId` | `customContentReference.componentId` | `externalReference.appId`, 6>>;
}
declare function updateCheckoutTemplate$1(httpClient: HttpClient): UpdateCheckoutTemplateSignature;
interface UpdateCheckoutTemplateSignature {
    /**
     * Updates a checkout template.
     *
     * If the info in a checkout template is updated, only new checkouts created from this template will include the updated items. Checkouts previously
     * created from this template before the update will not be affected.
     * @param - Checkout template ID.
     * @param - Checkout template info to update.
     * @returns Updated checkout template.
     */
    (_id: string, checkoutTemplate: UpdateCheckoutTemplate): Promise<NonNullablePaths<CheckoutTemplate, `status` | `customization.webClient.disabledContinueShoppingButton` | `customization.webClient.disabledPolicyAgreementCheckbox` | `customization.lockedGiftCard` | `customization.lockedCoupon` | `customization.disabledManualPayment` | `lineItems` | `lineItems.${number}.quantity` | `lineItems.${number}.catalogReference.catalogItemId` | `lineItems.${number}.catalogReference.appId` | `lineItems.${number}.catalogOverrideFields.productName.original` | `lineItems.${number}.catalogOverrideFields.physicalProperties.shippable` | `lineItems.${number}.catalogOverrideFields.paymentOption.value` | `customLineItems` | `customLineItems.${number}.quantity` | `customLineItems.${number}.price` | `customLineItems.${number}.priceDescription.original` | `customLineItems.${number}.itemType.preset` | `customLineItems.${number}.itemType.custom` | `customLineItems.${number}.paymentOption` | `customLineItems.${number}.savePaymentMethod` | `customLineItems.${number}.membersOnly` | `customLineItems.${number}.taxableAddress.addressType` | `customContentReference.appId` | `customContentReference.componentId` | `externalReference.appId`, 6> & {
        __applicationErrorsType?: UpdateCheckoutTemplateApplicationErrors;
    }>;
}
declare function deleteCheckoutTemplate$1(httpClient: HttpClient): DeleteCheckoutTemplateSignature;
interface DeleteCheckoutTemplateSignature {
    /**
     * Deletes a checkout template.
     *
     * If a checkout template is deleted and a customer attempts to create a checkout with that `checkoutTemplateId` then
     * the customer will be redirected to the domain site.
     * @param - ID of the checkout template to delete.
     */
    (checkoutTemplateId: string): Promise<void>;
}
declare function queryCheckoutTemplates$1(httpClient: HttpClient): QueryCheckoutTemplatesSignature;
interface QueryCheckoutTemplatesSignature {
    /**
     * Creates a query to retrieve a list of checkout templates.
     *
     * The `queryCheckoutTemplates()` function builds a query to retrieve a list of checkout templates and returns a `CheckoutTemplatesQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `CheckoutTemplatesQueryBuilder` functions onto the query. `CheckoutTemplatesQueryBuilder` functions enable you to sort, filter, and control the results that `queryCheckoutTemplates()` returns.
     *
     * `queryCheckoutTemplates()` runs with the following `CheckoutTemplatesQueryBuilder` default that you can override:
     * + `ascending("_id")`
     *
     * The functions that are chained to `queryCheckoutTemplates()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("_id")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"_id"`.
     *
     * The following `CheckoutTemplatesQueryBuilder` functions are supported for the `queryCheckoutTemplates()` function. For a full description of the checkout template object, see the object returned for the `items` property in `CheckoutTemplatesQueryResult`.
     */
    (): CheckoutTemplatesQueryBuilder;
}
declare function createCheckoutFromTemplate$1(httpClient: HttpClient): CreateCheckoutFromTemplateSignature;
interface CreateCheckoutFromTemplateSignature {
    /**
     * Creates a new checkout based on the checkout template.
     *
     * Before using this method, you must have a checkout template available. Create a checkout template with Create Checkout Template.
     *
     * The customer can be directed to the new checkout using the checkout's `checkoutUrl`.
     * @param - ID of the checkout template to use to create a checkout from.
     * @param - ID of the site associated with the checkout template.
     */
    (checkoutTemplateId: string, siteId: string): Promise<NonNullablePaths<CreateCheckoutFromTemplateResponse, `checkoutId` | `checkoutUrl`, 2> & {
        __applicationErrorsType?: CreateCheckoutFromTemplateApplicationErrors;
    }>;
}
declare function createAndRedirectToCheckout$1(httpClient: HttpClient): CreateAndRedirectToCheckoutSignature;
interface CreateAndRedirectToCheckoutSignature {
    /**
     * Creates a new checkout based on the checkout template and redirects to the new checkout page.
     *
     * Before using this method, you must have a checkout template available. Create a checkout template with Create Checkout Template.
     *
     * To build a URL that uses this method, follow this format:
     * `https://www.wixapis.com/ecom/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout?siteId={siteId}`
     *
     * To create a checkout but not automatically redirect to the checkout page, use Create Checkout From Template.
     * @param - ID of the checkout template to use to create a checkout.
     * @param - ID of the site associated with the checkout template.
     */
    (checkoutTemplateId: string, siteId: string): Promise<NonNullablePaths<RawHttpResponse, `body` | `headers` | `headers.${number}.key` | `headers.${number}.value`, 4> & {
        __applicationErrorsType?: CreateAndRedirectToCheckoutApplicationErrors;
    }>;
}
declare const onCheckoutTemplateCreated$1: EventDefinition<CheckoutTemplateCreatedEnvelope, "wix.ecom.v1.checkout_template_created">;
declare const onCheckoutTemplateDeleted$1: EventDefinition<CheckoutTemplateDeletedEnvelope, "wix.ecom.v1.checkout_template_deleted">;
declare const onCheckoutTemplateUpdated$1: EventDefinition<CheckoutTemplateUpdatedEnvelope, "wix.ecom.v1.checkout_template_updated">;
declare const onCheckoutTemplateUsed$1: EventDefinition<CheckoutTemplateUsedEnvelope, "wix.ecom.v1.checkout_template_used">;

declare const createCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof createCheckoutTemplate$1> & typeof createCheckoutTemplate$1>;
declare const getCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof getCheckoutTemplate$1> & typeof getCheckoutTemplate$1>;
declare const updateCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof updateCheckoutTemplate$1> & typeof updateCheckoutTemplate$1>;
declare const deleteCheckoutTemplate: MaybeContext<BuildRESTFunction<typeof deleteCheckoutTemplate$1> & typeof deleteCheckoutTemplate$1>;
declare const queryCheckoutTemplates: MaybeContext<BuildRESTFunction<typeof queryCheckoutTemplates$1> & typeof queryCheckoutTemplates$1>;
declare const createCheckoutFromTemplate: MaybeContext<BuildRESTFunction<typeof createCheckoutFromTemplate$1> & typeof createCheckoutFromTemplate$1>;
declare const createAndRedirectToCheckout: MaybeContext<BuildRESTFunction<typeof createAndRedirectToCheckout$1> & typeof createAndRedirectToCheckout$1>;
/**
 * Triggered when a checkout template is created.
 */
declare const onCheckoutTemplateCreated: BuildEventDefinition<typeof onCheckoutTemplateCreated$1> & typeof onCheckoutTemplateCreated$1;
/**
 * Triggered when a checkout template is deleted.
 */
declare const onCheckoutTemplateDeleted: BuildEventDefinition<typeof onCheckoutTemplateDeleted$1> & typeof onCheckoutTemplateDeleted$1;
/**
 * Triggered when a checkout template is updated.
 */
declare const onCheckoutTemplateUpdated: BuildEventDefinition<typeof onCheckoutTemplateUpdated$1> & typeof onCheckoutTemplateUpdated$1;
/**
 * Triggered when a checkout is created from a checkout template.
 */
declare const onCheckoutTemplateUsed: BuildEventDefinition<typeof onCheckoutTemplateUsed$1> & typeof onCheckoutTemplateUsed$1;

export { CheckoutTemplate, CheckoutTemplateCreatedEnvelope, CheckoutTemplateDeletedEnvelope, CheckoutTemplateUpdatedEnvelope, CheckoutTemplateUsedEnvelope, CheckoutTemplatesQueryBuilder, CreateAndRedirectToCheckoutApplicationErrors, CreateCheckoutFromTemplateApplicationErrors, CreateCheckoutFromTemplateResponse, CreateCheckoutTemplateApplicationErrors, RawHttpResponse, UpdateCheckoutTemplate, UpdateCheckoutTemplateApplicationErrors, createAndRedirectToCheckout, createCheckoutFromTemplate, createCheckoutTemplate, deleteCheckoutTemplate, getCheckoutTemplate, onCheckoutTemplateCreated, onCheckoutTemplateDeleted, onCheckoutTemplateUpdated, onCheckoutTemplateUsed, queryCheckoutTemplates, updateCheckoutTemplate };
