import { CreateCheckoutTemplateRequest as CreateCheckoutTemplateRequest$1, CreateCheckoutTemplateResponse as CreateCheckoutTemplateResponse$1, GetCheckoutTemplateRequest as GetCheckoutTemplateRequest$1, GetCheckoutTemplateResponse as GetCheckoutTemplateResponse$1, UpdateCheckoutTemplateRequest as UpdateCheckoutTemplateRequest$1, UpdateCheckoutTemplateResponse as UpdateCheckoutTemplateResponse$1, DeleteCheckoutTemplateRequest as DeleteCheckoutTemplateRequest$1, DeleteCheckoutTemplateResponse as DeleteCheckoutTemplateResponse$1, QueryCheckoutTemplatesRequest as QueryCheckoutTemplatesRequest$1, QueryCheckoutTemplatesResponse as QueryCheckoutTemplatesResponse$1, CreateCheckoutFromTemplateRequest as CreateCheckoutFromTemplateRequest$1, CreateCheckoutFromTemplateResponse as CreateCheckoutFromTemplateResponse$1, CreateAndRedirectToCheckoutRequest as CreateAndRedirectToCheckoutRequest$1, RawHttpResponse as RawHttpResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

interface CheckoutTemplate {
    /**
     * Checkout template ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `id`. Instead, the endpoint will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: StatusWithLiterals;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     * @maxSize 300
     */
    lineItems?: V1LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     * @maxSize 300
     */
    customLineItems?: CustomLineItem[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the Coupons API.
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
    /**
     * References to an external app and resource associated with the checkout.
     * Used for integration and tracking across different platforms.
     * @immutable
     */
    externalReference?: ExternalReference;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN_STATUS' | 'ACTIVE' | 'INACTIVE';
interface CheckoutCustomization {
    /** Web client customizations. These customizations only apply to the standard Wix checkout page. */
    webClient?: WebClientCustomization;
    /**
     * Whether to lock the ability to add or remove a gift card.
     *
     * Default: `false`
     */
    lockedGiftCard?: boolean;
    /**
     * Whether to lock the ability to apply or remove a coupon code.
     *
     * Default: `false`
     */
    lockedCoupon?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
interface WebClientCustomization {
    /**
     * Whether to disable the "Continue shopping" button.
     *
     * Default: `false`
     */
    disabledContinueShoppingButton?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
}
interface V1LineItem {
    /**
     * Item quantity.
     *
     * Min: `1` <br />
     * Max: `100000`
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /** Overriding values for catalog item properties. */
    catalogOverrideFields?: CatalogOverrideFields;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /**
     * Item price **after** discounts.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    price?: string | null;
    /**
     * Item price **before** discounts.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    fullPrice?: string | null;
    /**
     * Item description lines. Used when displaying the line item to customers.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: Image;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /**
     * Only eligible for catalog items with `lineItem.paymentOption.value` type of `DEPOSIT_ONLINE`.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /**
     * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 100
     */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 200
     */
    translated?: string | null;
}
interface PlainTextValue {
    /**
     * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 600
     */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 600
     */
    translated?: string | null;
}
interface Color {
    /**
     * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 500
     */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 500
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption {
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    value?: PaymentOptionTypeWithLiterals;
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE",
    /**
     * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.
     * @documentationMaturity preview
     */
    MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"
}
/** @enumType */
type PaymentOptionTypeWithLiterals = PaymentOptionType | 'FULL_PAYMENT_ONLINE' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP' | 'DEPOSIT_ONLINE' | 'MEMBERSHIP_OFFLINE' | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';
interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Custom line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 10
     */
    descriptionLines?: DescriptionLine[];
    /** Custom line item's media. */
    media?: Image;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     * @format GUID
     */
    id?: string | null;
    /**
     * Tax group ID for this custom line item.
     * @format GUID
     */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @format DECIMAL_VALUE
     */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     * @max 100000
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     * @format DECIMAL_VALUE
     */
    depositAmount?: string | null;
    /**
     * Delivery profile ID.
     * @format GUID
     */
    deliveryProfileId?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
    /**
     * Policies to be displayed to the customer on the checkout page.
     * @maxSize 5
     */
    policies?: Policy[];
    /**
     * Whether the item can only be purchased by site members.
     *
     * Default: `false`
     */
    membersOnly?: boolean;
    /** Address to use for tax calculation purposes. */
    taxableAddress?: TaxableAddress;
    /**
     * Modifier groups that were added to the item.
     * @maxSize 25
     */
    modifierGroups?: V1ModifierGroup[];
}
interface PriceDescription {
    /**
     * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 100
     */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 100
     */
    translated?: string | null;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** @enumType */
type ItemTypeItemTypeWithLiterals = ItemTypeItemType | 'UNRECOGNISED' | 'PHYSICAL' | 'DIGITAL' | 'GIFT_CARD' | 'SERVICE';
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /**
     * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.
     * @min 1
     * @max 10000
     */
    numberOfParticipants?: number | null;
}
interface Policy {
    /**
     * Policy title - should be translated
     * @minLength 1
     * @maxLength 29
     */
    title?: string | null;
    /**
     * Policy content - should be translated
     * @minLength 1
     * @maxLength 3000
     */
    content?: string;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type TaxableAddressTypeWithLiterals = TaxableAddressType | 'UNKNOWN_TAXABLE_ADDRESS' | 'BUSINESS' | 'BILLING' | 'SHIPPING';
interface V1ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 25
     */
    modifiers?: V1ItemModifier[];
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface V1ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /**
     * The price of the modifier.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    price?: string | null;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     * @format GUID
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     * @format GUID
     */
    componentId?: string;
}
interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     * @format GUID
     * @immutable
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    resourceId?: string | null;
}
interface CreateCheckoutTemplateRequest {
    /** Checkout template to create. */
    checkoutTemplate: CheckoutTemplate;
}
interface CreateCheckoutTemplateResponse {
    /** Created checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface GetCheckoutTemplateRequest {
    /**
     * ID of the checkout template to retrieve.
     * @format GUID
     */
    checkoutTemplateId: string;
}
interface GetCheckoutTemplateResponse {
    /** Retrieved checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface UpdateCheckoutTemplateRequest {
    /** Checkout template info to update. */
    checkoutTemplate: CheckoutTemplate;
}
interface UpdateCheckoutTemplateResponse {
    /** Updated checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
interface DeleteCheckoutTemplateRequest {
    /**
     * ID of the checkout template to delete.
     * @format GUID
     */
    checkoutTemplateId: string;
}
interface DeleteCheckoutTemplateResponse {
}
interface QueryCheckoutTemplatesRequest {
    /** Query options. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     *
     * Example of operators: `$eq`, `$ne`, `$in`, `$startsWith`, `$exists`, `$hasSome`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results. </ br>
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCheckoutTemplatesResponse {
    /** Retrieved checkout templates. */
    checkoutTemplates?: CheckoutTemplate[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface CreateCheckoutFromTemplateRequest {
    /**
     * ID of the checkout template to use to create a checkout from.
     * @format GUID
     */
    checkoutTemplateId: string;
    /**
     * ID of the site associated with the checkout template.
     * @format GUID
     */
    siteId: string;
}
interface CreateCheckoutFromTemplateResponse {
    /**
     * ID of the created checkout.
     * @format GUID
     */
    checkoutId?: string;
    /** URL of the created checkout page. */
    checkoutUrl?: string;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
}
interface CreateAndRedirectToCheckoutRequest {
    /**
     * ID of the checkout template to use to create a checkout.
     * @format GUID
     */
    checkoutTemplateId: string;
    /**
     * ID of the site associated with the checkout template.
     * @format GUID
     */
    siteId: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCheckoutTemplate(): __PublicMethodMetaInfo<'POST', {}, CreateCheckoutTemplateRequest$1, CreateCheckoutTemplateRequest, CreateCheckoutTemplateResponse$1, CreateCheckoutTemplateResponse>;
declare function getCheckoutTemplate(): __PublicMethodMetaInfo<'GET', {
    checkoutTemplateId: string;
}, GetCheckoutTemplateRequest$1, GetCheckoutTemplateRequest, GetCheckoutTemplateResponse$1, GetCheckoutTemplateResponse>;
declare function updateCheckoutTemplate(): __PublicMethodMetaInfo<'PATCH', {
    checkoutTemplateId: string;
}, UpdateCheckoutTemplateRequest$1, UpdateCheckoutTemplateRequest, UpdateCheckoutTemplateResponse$1, UpdateCheckoutTemplateResponse>;
declare function deleteCheckoutTemplate(): __PublicMethodMetaInfo<'DELETE', {
    checkoutTemplateId: string;
}, DeleteCheckoutTemplateRequest$1, DeleteCheckoutTemplateRequest, DeleteCheckoutTemplateResponse$1, DeleteCheckoutTemplateResponse>;
declare function queryCheckoutTemplates(): __PublicMethodMetaInfo<'POST', {}, QueryCheckoutTemplatesRequest$1, QueryCheckoutTemplatesRequest, QueryCheckoutTemplatesResponse$1, QueryCheckoutTemplatesResponse>;
declare function createCheckoutFromTemplate(): __PublicMethodMetaInfo<'POST', {
    checkoutTemplateId: string;
}, CreateCheckoutFromTemplateRequest$1, CreateCheckoutFromTemplateRequest, CreateCheckoutFromTemplateResponse$1, CreateCheckoutFromTemplateResponse>;
declare function createAndRedirectToCheckout(): __PublicMethodMetaInfo<'GET', {
    checkoutTemplateId: string;
}, CreateAndRedirectToCheckoutRequest$1, CreateAndRedirectToCheckoutRequest, RawHttpResponse$1, RawHttpResponse>;

export { type __PublicMethodMetaInfo, createAndRedirectToCheckout, createCheckoutFromTemplate, createCheckoutTemplate, deleteCheckoutTemplate, getCheckoutTemplate, queryCheckoutTemplates, updateCheckoutTemplate };
