import { NonNullablePaths } from '@wix/sdk-types';

interface GiftCard {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     * @maxLength 30
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money;
    /** Current gift card status. */
    status?: StatusWithLiterals;
    /**
     * App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order.
     * @format GUID
     */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     * @minLength 1
     * @maxLength 50
     */
    externalId?: string | null;
}
interface Money {
    /**
     * Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:999999999.99, maxScale:5 }
     */
    value?: string;
    /**
     * Currency code. Must be valid ISO 4217 currency code (e.g., USD).
     * @format CURRENCY
     */
    currency?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Gift card is active and can be used for purchases. */
    VALID = "VALID",
    /** Gift card expiration date has passed and can no longer be used. */
    EXPIRED = "EXPIRED",
    /** Gift card has been disabled by the merchant and can no longer be used. */
    DISABLED = "DISABLED"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN_STATUS' | 'VALID' | 'EXPIRED' | 'DISABLED';
interface GetGiftCardRequest {
    /**
     * Gift card code.
     * @minLength 8
     * @maxLength 20
     */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId?: string | null;
    /**
     * Gift card PIN.
     * Required for some providers, like 'Moneris'.
     * @maxLength 50
     */
    pin?: string | null;
}
interface Context {
    /**
     * Physical location ID. Can be based on the Locations API or an external provider.
     * @maxLength 50
     */
    locationId?: string | null;
}
interface GetGiftCardResponse {
    /** Retrieved gift card. */
    giftCard?: GiftCard;
}
interface RedeemGiftCardRequest {
    /**
     * Gift card code.
     * @minLength 8
     * @maxLength 20
     */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money;
    /**
     * Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders.
     * @format GUID
     */
    orderId?: string;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
    /**
     * Gift card PIN.
     * Required for some providers, like 'Moneris'.
     * @maxLength 50
     */
    pin?: string | null;
}
interface RedeemGiftCardResponse {
    /**
     * Gift card transaction ID.
     * @minLength 1
     * @maxLength 100
     */
    transactionId?: string;
}
interface VoidTransactionRequest {
    /**
     * Gift card transaction ID, as returned from Redeem Gift Card.
     * @minLength 1
     * @maxLength 100
     */
    transactionId: string;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface VoidTransactionResponse {
}
/** @docsIgnore */
type GetGiftCardApplicationErrors = {
    code?: 'GIFT_CARD_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type RedeemGiftCardApplicationErrors = {
    code?: 'GIFT_CARD_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ALREADY_REDEEMED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CURRENCY_NOT_SUPPORTED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INSUFFICIENT_FUNDS';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'GIFT_CARD_DISABLED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'GIFT_CARD_EXPIRED';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type VoidTransactionApplicationErrors = {
    code?: 'TRANSACTION_NOT_FOUND';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'ALREADY_VOIDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'GIFT_CARD_DISABLED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'GIFT_CARD_EXPIRED';
    description?: string;
    data?: Record<string, any>;
};
/**
 * Retrieves a gift card.
 * @param code - Gift card code.
 * @public
 * @requiredField code
 * @param options - Field options.
 * @permissionId ECOM.GIFT_CARD_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.GetGiftCard
 */
declare function getGiftCard(code: string, options?: GetGiftCardOptions): Promise<NonNullablePaths<GetGiftCardResponse, `giftCard.obfuscatedCode` | `giftCard.balance.value` | `giftCard.balance.currency` | `giftCard.status` | `giftCard.appId`, 4> & {
    __applicationErrorsType?: GetGiftCardApplicationErrors;
}>;
interface GetGiftCardOptions {
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId?: string | null;
    /**
     * Gift card PIN.
     * Required for some providers, like 'Moneris'.
     * @maxLength 50
     */
    pin?: string | null;
}
/**
 * Redeems a gift card.
 * Creates a transaction and lowers the card balance by the transaction amount.
 * @param code - Gift card code.
 * @public
 * @requiredField code
 * @requiredField options.amount
 * @requiredField options.amount.value
 * @requiredField options.appId
 * @param options - Field options. `amount` and `appId` **must** be passed.
 * @permissionId ECOM.GIFT_CARD_REDEEM
 * @applicableIdentity APP
 * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.RedeemGiftCard
 */
declare function redeemGiftCard(code: string, options?: NonNullablePaths<RedeemGiftCardOptions, `amount` | `amount.value` | `appId`, 3>): Promise<NonNullablePaths<RedeemGiftCardResponse, `transactionId`, 2> & {
    __applicationErrorsType?: RedeemGiftCardApplicationErrors;
}>;
interface RedeemGiftCardOptions {
    /** Amount to redeem from the gift card. */
    amount: Money;
    /**
     * Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders.
     * @format GUID
     */
    orderId?: string;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
    /**
     * Gift card PIN.
     * Required for some providers, like 'Moneris'.
     * @maxLength 50
     */
    pin?: string | null;
}
/**
 * Voids a gift card transaction.
 * Transaction IDs are returned in Redeem Gift Card.
 * @param transactionId - Gift card transaction ID, as returned from Redeem Gift Card.
 * @public
 * @requiredField options.appId
 * @requiredField transactionId
 * @param options - Field options. `appId` **must** be passed.
 * @permissionId ECOM.GIFT_CARD_TRANSACTION_VOID
 * @applicableIdentity APP
 * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.VoidTransaction
 */
declare function voidTransaction(transactionId: string, options?: NonNullablePaths<VoidTransactionOptions, `appId`, 2>): Promise<void & {
    __applicationErrorsType?: VoidTransactionApplicationErrors;
}>;
interface VoidTransactionOptions {
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}

export { type Context, type GetGiftCardApplicationErrors, type GetGiftCardOptions, type GetGiftCardRequest, type GetGiftCardResponse, type GiftCard, type Money, type RedeemGiftCardApplicationErrors, type RedeemGiftCardOptions, type RedeemGiftCardRequest, type RedeemGiftCardResponse, Status, type StatusWithLiterals, type VoidTransactionApplicationErrors, type VoidTransactionOptions, type VoidTransactionRequest, type VoidTransactionResponse, getGiftCard, redeemGiftCard, voidTransaction };
