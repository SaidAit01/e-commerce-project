import { GetGiftCardRequest as GetGiftCardRequest$1, GetGiftCardResponse as GetGiftCardResponse$1, RedeemGiftCardRequest as RedeemGiftCardRequest$1, RedeemGiftCardResponse as RedeemGiftCardResponse$1, VoidTransactionRequest as VoidTransactionRequest$1, VoidTransactionResponse as VoidTransactionResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

interface GiftCard {
    /**
     * Gift card obfuscated code.
     *
     * For example: "****-****-****-1234".
     * @maxLength 30
     */
    obfuscatedCode?: string;
    /** Gift card balance. */
    balance?: Money;
    /** Current gift card status. */
    status?: StatusWithLiterals;
    /**
     * App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order.
     * @format GUID
     */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     * @minLength 1
     * @maxLength 50
     */
    externalId?: string | null;
}
interface Money {
    /**
     * Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:999999999.99, maxScale:5 }
     */
    value?: string;
    /**
     * Currency code. Must be valid ISO 4217 currency code (e.g., USD).
     * @format CURRENCY
     */
    currency?: string;
}
declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Gift card is active and can be used for purchases. */
    VALID = "VALID",
    /** Gift card expiration date has passed and can no longer be used. */
    EXPIRED = "EXPIRED",
    /** Gift card has been disabled by the merchant and can no longer be used. */
    DISABLED = "DISABLED"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN_STATUS' | 'VALID' | 'EXPIRED' | 'DISABLED';
interface GetGiftCardRequest {
    /**
     * Gift card code.
     * @minLength 8
     * @maxLength 20
     */
    code: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId?: string | null;
    /**
     * Gift card PIN.
     * Required for some providers, like 'Moneris'.
     * @maxLength 50
     */
    pin?: string | null;
}
interface Context {
    /**
     * Physical location ID. Can be based on the Locations API or an external provider.
     * @maxLength 50
     */
    locationId?: string | null;
}
interface GetGiftCardResponse {
    /** Retrieved gift card. */
    giftCard?: GiftCard;
}
interface RedeemGiftCardRequest {
    /**
     * Gift card code.
     * @minLength 8
     * @maxLength 20
     */
    code: string;
    /** Amount to redeem from the gift card. */
    amount: Money;
    /**
     * Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders.
     * @format GUID
     */
    orderId?: string;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
    /**
     * Gift card PIN.
     * Required for some providers, like 'Moneris'.
     * @maxLength 50
     */
    pin?: string | null;
}
interface RedeemGiftCardResponse {
    /**
     * Gift card transaction ID.
     * @minLength 1
     * @maxLength 100
     */
    transactionId?: string;
}
interface VoidTransactionRequest {
    /**
     * Gift card transaction ID, as returned from Redeem Gift Card.
     * @minLength 1
     * @maxLength 100
     */
    transactionId: string;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId: string;
    /** Contextual information for the request, including the physical location ID if applicable. */
    context?: Context;
}
interface VoidTransactionResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getGiftCard(): __PublicMethodMetaInfo<'POST', {
    code: string;
}, GetGiftCardRequest$1, GetGiftCardRequest, GetGiftCardResponse$1, GetGiftCardResponse>;
declare function redeemGiftCard(): __PublicMethodMetaInfo<'POST', {}, RedeemGiftCardRequest$1, RedeemGiftCardRequest, RedeemGiftCardResponse$1, RedeemGiftCardResponse>;
declare function voidTransaction(): __PublicMethodMetaInfo<'POST', {}, VoidTransactionRequest$1, VoidTransactionRequest, VoidTransactionResponse$1, VoidTransactionResponse>;

export { type __PublicMethodMetaInfo, getGiftCard, redeemGiftCard, voidTransaction };
