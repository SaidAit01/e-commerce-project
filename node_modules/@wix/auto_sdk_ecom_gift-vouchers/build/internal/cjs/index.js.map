{"version":3,"sources":["../../../index.ts","../../../src/ecom-v1-gift-card-gift-vouchers.universal.ts","../../../src/ecom-v1-gift-card-gift-vouchers.http.ts","../../../src/ecom-v1-gift-card-gift-vouchers.public.ts","../../../src/ecom-v1-gift-card-gift-vouchers.context.ts"],"sourcesContent":["export * from './src/ecom-v1-gift-card-gift-vouchers.context.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixEcomV1GiftCard from './ecom-v1-gift-card-gift-vouchers.http.js';\n\nexport interface GiftCard {\n  /**\n   * Gift card obfuscated code.\n   *\n   * For example: \"****-****-****-1234\".\n   * @maxLength 30\n   */\n  obfuscatedCode?: string;\n  /** Gift card balance. */\n  balance?: Money;\n  /** Current gift card status. */\n  status?: StatusWithLiterals;\n  /**\n   * App ID of the gift card provider, as returned in eCommerce Get Checkout or List Transactions for Single Order.\n   * @format GUID\n   */\n  appId?: string;\n  /**\n   * External ID in the gift card provider's system.\n   * Used for integration and tracking across different platforms.\n   * @minLength 1\n   * @maxLength 50\n   */\n  externalId?: string | null;\n}\n\nexport interface Money {\n  /**\n   * Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). Optionally, a single (-), to indicate that the amount is negative.\n   * @format DECIMAL_VALUE\n   * @decimalValue options { gte:0, lte:999999999.99, maxScale:5 }\n   */\n  value?: string;\n  /**\n   * Currency code. Must be valid ISO 4217 currency code (e.g., USD).\n   * @format CURRENCY\n   */\n  currency?: string;\n}\n\nexport enum Status {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Gift card is active and can be used for purchases. */\n  VALID = 'VALID',\n  /** Gift card expiration date has passed and can no longer be used. */\n  EXPIRED = 'EXPIRED',\n  /** Gift card has been disabled by the merchant and can no longer be used. */\n  DISABLED = 'DISABLED',\n}\n\n/** @enumType */\nexport type StatusWithLiterals =\n  | Status\n  | 'UNKNOWN_STATUS'\n  | 'VALID'\n  | 'EXPIRED'\n  | 'DISABLED';\n\nexport interface GetGiftCardRequest {\n  /**\n   * Gift card code.\n   * @minLength 8\n   * @maxLength 20\n   */\n  code: string;\n  /** Contextual information for the request, including the physical location ID if applicable. */\n  context?: Context;\n  /**\n   * App ID of the gift card provider.\n   * @format GUID\n   */\n  appId?: string | null;\n  /**\n   * Gift card PIN.\n   * Required for some providers, like 'Moneris'.\n   * @maxLength 50\n   */\n  pin?: string | null;\n}\n\nexport interface Context {\n  /**\n   * Physical location ID. Can be based on the Locations API or an external provider.\n   * @maxLength 50\n   */\n  locationId?: string | null;\n}\n\nexport interface GetGiftCardResponse {\n  /** Retrieved gift card. */\n  giftCard?: GiftCard;\n}\n\nexport interface RedeemGiftCardRequest {\n  /**\n   * Gift card code.\n   * @minLength 8\n   * @maxLength 20\n   */\n  code: string;\n  /** Amount to redeem from the gift card. */\n  amount: Money;\n  /**\n   * Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * App ID of the gift card provider.\n   * @format GUID\n   */\n  appId: string;\n  /** Contextual information for the request, including the physical location ID if applicable. */\n  context?: Context;\n  /**\n   * Gift card PIN.\n   * Required for some providers, like 'Moneris'.\n   * @maxLength 50\n   */\n  pin?: string | null;\n}\n\nexport interface RedeemGiftCardResponse {\n  /**\n   * Gift card transaction ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  transactionId?: string;\n}\n\nexport interface VoidTransactionRequest {\n  /**\n   * Gift card transaction ID, as returned from Redeem Gift Card.\n   * @minLength 1\n   * @maxLength 100\n   */\n  transactionId: string;\n  /**\n   * App ID of the gift card provider.\n   * @format GUID\n   */\n  appId: string;\n  /** Contextual information for the request, including the physical location ID if applicable. */\n  context?: Context;\n}\n\nexport interface VoidTransactionResponse {}\n\n/** @docsIgnore */\nexport type GetGiftCardApplicationErrors = {\n  code?: 'GIFT_CARD_NOT_FOUND';\n  description?: string;\n  data?: Record<string, any>;\n};\n/** @docsIgnore */\nexport type RedeemGiftCardApplicationErrors =\n  | {\n      code?: 'GIFT_CARD_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ALREADY_REDEEMED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'CURRENCY_NOT_SUPPORTED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'INSUFFICIENT_FUNDS';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_DISABLED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_EXPIRED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type VoidTransactionApplicationErrors =\n  | {\n      code?: 'TRANSACTION_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'ALREADY_VOIDED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_DISABLED';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'GIFT_CARD_EXPIRED';\n      description?: string;\n      data?: Record<string, any>;\n    };\n\n/**\n * Retrieves a gift card.\n * @param code - Gift card code.\n * @public\n * @requiredField code\n * @param options - Field options.\n * @permissionId ECOM.GIFT_CARD_READ\n * @applicableIdentity APP\n * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.GetGiftCard\n */\nexport async function getGiftCard(\n  code: string,\n  options?: GetGiftCardOptions\n): Promise<\n  NonNullablePaths<\n    GetGiftCardResponse,\n    | `giftCard.obfuscatedCode`\n    | `giftCard.balance.value`\n    | `giftCard.balance.currency`\n    | `giftCard.status`\n    | `giftCard.appId`,\n    4\n  > & {\n    __applicationErrorsType?: GetGiftCardApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    code: code,\n    context: options?.context,\n    appId: options?.appId,\n    pin: options?.pin,\n  });\n\n  const reqOpts = ambassadorWixEcomV1GiftCard.getGiftCard(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          code: '$[0]',\n          context: '$[1].context',\n          appId: '$[1].appId',\n          pin: '$[1].pin',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['code', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetGiftCardOptions {\n  /** Contextual information for the request, including the physical location ID if applicable. */\n  context?: Context;\n  /**\n   * App ID of the gift card provider.\n   * @format GUID\n   */\n  appId?: string | null;\n  /**\n   * Gift card PIN.\n   * Required for some providers, like 'Moneris'.\n   * @maxLength 50\n   */\n  pin?: string | null;\n}\n\n/**\n * Redeems a gift card.\n * Creates a transaction and lowers the card balance by the transaction amount.\n * @param code - Gift card code.\n * @public\n * @requiredField code\n * @requiredField options.amount\n * @requiredField options.amount.value\n * @requiredField options.appId\n * @param options - Field options. `amount` and `appId` **must** be passed.\n * @permissionId ECOM.GIFT_CARD_REDEEM\n * @applicableIdentity APP\n * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.RedeemGiftCard\n */\nexport async function redeemGiftCard(\n  code: string,\n  options?: NonNullablePaths<\n    RedeemGiftCardOptions,\n    `amount` | `amount.value` | `appId`,\n    3\n  >\n): Promise<\n  NonNullablePaths<RedeemGiftCardResponse, `transactionId`, 2> & {\n    __applicationErrorsType?: RedeemGiftCardApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    code: code,\n    amount: options?.amount,\n    orderId: options?.orderId,\n    appId: options?.appId,\n    context: options?.context,\n    pin: options?.pin,\n  });\n\n  const reqOpts = ambassadorWixEcomV1GiftCard.redeemGiftCard(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          code: '$[0]',\n          amount: '$[1].amount',\n          orderId: '$[1].orderId',\n          appId: '$[1].appId',\n          context: '$[1].context',\n          pin: '$[1].pin',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['code', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface RedeemGiftCardOptions {\n  /** Amount to redeem from the gift card. */\n  amount: Money;\n  /**\n   * Order ID to apply the gift card transaction, when applying a gift card after order creation. Order ID can be collected from the eCommerce Order Created webhook or by calling eCommerce Search Orders.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * App ID of the gift card provider.\n   * @format GUID\n   */\n  appId: string;\n  /** Contextual information for the request, including the physical location ID if applicable. */\n  context?: Context;\n  /**\n   * Gift card PIN.\n   * Required for some providers, like 'Moneris'.\n   * @maxLength 50\n   */\n  pin?: string | null;\n}\n\n/**\n * Voids a gift card transaction.\n * Transaction IDs are returned in Redeem Gift Card.\n * @param transactionId - Gift card transaction ID, as returned from Redeem Gift Card.\n * @public\n * @requiredField options.appId\n * @requiredField transactionId\n * @param options - Field options. `appId` **must** be passed.\n * @permissionId ECOM.GIFT_CARD_TRANSACTION_VOID\n * @applicableIdentity APP\n * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.VoidTransaction\n */\nexport async function voidTransaction(\n  transactionId: string,\n  options?: NonNullablePaths<VoidTransactionOptions, `appId`, 2>\n): Promise<\n  void & {\n    __applicationErrorsType?: VoidTransactionApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    transactionId: transactionId,\n    appId: options?.appId,\n    context: options?.context,\n  });\n\n  const reqOpts = ambassadorWixEcomV1GiftCard.voidTransaction(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          transactionId: '$[0]',\n          appId: '$[1].appId',\n          context: '$[1].context',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['transactionId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface VoidTransactionOptions {\n  /**\n   * App ID of the gift card provider.\n   * @format GUID\n   */\n  appId: string;\n  /** Contextual information for the request, including the physical location ID if applicable. */\n  context?: Context;\n}\n","import { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixEcomGiftCardsSpiHostV1GiftCardsSpiHostServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'api._api_base_domain_': [\n      {\n        srcPath: '/gift-cards-spi-host',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/gift-cards',\n        destPath: '/v1/gift-cards',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/ecom/v1/gift-cards',\n        destPath: '/v1/gift-cards',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_gift-vouchers';\n\n/** Retrieves a gift card. */\nexport function getGiftCard(payload: object): RequestOptionsFactory<any> {\n  function __getGiftCard({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.gift_card',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.GetGiftCard',\n      packageName: PACKAGE_NAME,\n      url: resolveWixEcomGiftCardsSpiHostV1GiftCardsSpiHostServiceUrl({\n        protoPath: '/v1/gift-cards/{code}',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __getGiftCard;\n}\n\n/**\n * Redeems a gift card.\n * Creates a transaction and lowers the card balance by the transaction amount.\n */\nexport function redeemGiftCard(payload: object): RequestOptionsFactory<any> {\n  function __redeemGiftCard({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.gift_card',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.RedeemGiftCard',\n      packageName: PACKAGE_NAME,\n      url: resolveWixEcomGiftCardsSpiHostV1GiftCardsSpiHostServiceUrl({\n        protoPath: '/v1/gift-cards/redeem',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __redeemGiftCard;\n}\n\n/**\n * Voids a gift card transaction.\n * Transaction IDs are returned in Redeem Gift Card.\n */\nexport function voidTransaction(payload: object): RequestOptionsFactory<any> {\n  function __voidTransaction({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.gift_card',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.VoidTransaction',\n      packageName: PACKAGE_NAME,\n      url: resolveWixEcomGiftCardsSpiHostV1GiftCardsSpiHostServiceUrl({\n        protoPath: '/v1/gift-cards/void',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __voidTransaction;\n}\n","import { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  GetGiftCardApplicationErrors,\n  GetGiftCardOptions,\n  GetGiftCardResponse,\n  RedeemGiftCardApplicationErrors,\n  RedeemGiftCardOptions,\n  RedeemGiftCardResponse,\n  VoidTransactionApplicationErrors,\n  VoidTransactionOptions,\n  getGiftCard as universalGetGiftCard,\n  redeemGiftCard as universalRedeemGiftCard,\n  voidTransaction as universalVoidTransaction,\n} from './ecom-v1-gift-card-gift-vouchers.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/ecom' };\n\nexport function getGiftCard(httpClient: HttpClient): GetGiftCardSignature {\n  return (code: string, options?: GetGiftCardOptions) =>\n    universalGetGiftCard(\n      code,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetGiftCardSignature {\n  /**\n   * Retrieves a gift card.\n   * @param - Gift card code.\n   * @param - Field options.\n   */\n  (code: string, options?: GetGiftCardOptions): Promise<\n    NonNullablePaths<\n      GetGiftCardResponse,\n      | `giftCard.obfuscatedCode`\n      | `giftCard.balance.value`\n      | `giftCard.balance.currency`\n      | `giftCard.status`\n      | `giftCard.appId`,\n      4\n    > & {\n      __applicationErrorsType?: GetGiftCardApplicationErrors;\n    }\n  >;\n}\n\nexport function redeemGiftCard(\n  httpClient: HttpClient\n): RedeemGiftCardSignature {\n  return (\n    code: string,\n    options?: NonNullablePaths<\n      RedeemGiftCardOptions,\n      `amount` | `amount.value` | `appId`,\n      3\n    >\n  ) =>\n    universalRedeemGiftCard(\n      code,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface RedeemGiftCardSignature {\n  /**\n   * Redeems a gift card.\n   * Creates a transaction and lowers the card balance by the transaction amount.\n   * @param - Gift card code.\n   * @param - Field options. `amount` and `appId` **must** be passed.\n   */\n  (\n    code: string,\n    options?: NonNullablePaths<\n      RedeemGiftCardOptions,\n      `amount` | `amount.value` | `appId`,\n      3\n    >\n  ): Promise<\n    NonNullablePaths<RedeemGiftCardResponse, `transactionId`, 2> & {\n      __applicationErrorsType?: RedeemGiftCardApplicationErrors;\n    }\n  >;\n}\n\nexport function voidTransaction(\n  httpClient: HttpClient\n): VoidTransactionSignature {\n  return (\n    transactionId: string,\n    options?: NonNullablePaths<VoidTransactionOptions, `appId`, 2>\n  ) =>\n    universalVoidTransaction(\n      transactionId,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface VoidTransactionSignature {\n  /**\n   * Voids a gift card transaction.\n   * Transaction IDs are returned in Redeem Gift Card.\n   * @param - Gift card transaction ID, as returned from Redeem Gift Card.\n   * @param - Field options. `appId` **must** be passed.\n   */\n  (\n    transactionId: string,\n    options?: NonNullablePaths<VoidTransactionOptions, `appId`, 2>\n  ): Promise<\n    void & {\n      __applicationErrorsType?: VoidTransactionApplicationErrors;\n    }\n  >;\n}\n\nexport {\n  Context,\n  GetGiftCardOptions,\n  GetGiftCardRequest,\n  GetGiftCardResponse,\n  GiftCard,\n  Money,\n  RedeemGiftCardOptions,\n  RedeemGiftCardRequest,\n  RedeemGiftCardResponse,\n  Status,\n  VoidTransactionOptions,\n  VoidTransactionRequest,\n  VoidTransactionResponse,\n} from './ecom-v1-gift-card-gift-vouchers.universal.js';\n","import {\n  getGiftCard as publicGetGiftCard,\n  redeemGiftCard as publicRedeemGiftCard,\n  voidTransaction as publicVoidTransaction,\n} from './ecom-v1-gift-card-gift-vouchers.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const getGiftCard: MaybeContext<\n  BuildRESTFunction<typeof publicGetGiftCard> & typeof publicGetGiftCard\n> = /*#__PURE__*/ createRESTModule(publicGetGiftCard);\nexport const redeemGiftCard: MaybeContext<\n  BuildRESTFunction<typeof publicRedeemGiftCard> & typeof publicRedeemGiftCard\n> = /*#__PURE__*/ createRESTModule(publicRedeemGiftCard);\nexport const voidTransaction: MaybeContext<\n  BuildRESTFunction<typeof publicVoidTransaction> & typeof publicVoidTransaction\n> = /*#__PURE__*/ createRESTModule(publicVoidTransaction);\n\nexport { Status } from './ecom-v1-gift-card-gift-vouchers.universal.js';\nexport {\n  GiftCard,\n  Money,\n  GetGiftCardRequest,\n  Context,\n  GetGiftCardResponse,\n  RedeemGiftCardRequest,\n  RedeemGiftCardResponse,\n  VoidTransactionRequest,\n  VoidTransactionResponse,\n  GetGiftCardOptions,\n  RedeemGiftCardOptions,\n  VoidTransactionOptions,\n} from './ecom-v1-gift-card-gift-vouchers.universal.js';\nexport {\n  StatusWithLiterals,\n  GetGiftCardApplicationErrors,\n  RedeemGiftCardApplicationErrors,\n  VoidTransactionApplicationErrors,\n} from './ecom-v1-gift-card-gift-vouchers.universal.js';\n"],"mappings":"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","names":["getGiftCard","redeemGiftCard","voidTransaction","Status","getGiftCard","sdkTransformError","redeemGiftCard","voidTransaction","getGiftCard","redeemGiftCard","voidTransaction","import_rest_modules","getGiftCard","redeemGiftCard","voidTransaction"]}