// src/ecom-v1-local-delivery-option-local-delivery-options.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-local-delivery-option-local-delivery-options.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-shipments-local-delivery-web",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/localDeliveryOptions",
        destPath: "/v1/localDeliveryOptions"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/local-delivery-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/local-delivery-server",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_local-delivery-options";
function createLocalDeliveryOption(payload) {
  function __createLocalDeliveryOption({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
          { path: "localDeliveryOption.radiusConfig.address.geocode.latitude" },
          {
            path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
          },
          { path: "localDeliveryOption.customAreaConfig.geocodes.latitude" },
          { path: "localDeliveryOption.customAreaConfig.geocodes.longitude" },
          { path: "localDeliveryOption.radiusConfig.radius" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "localDeliveryOption.createdDate" },
          { path: "localDeliveryOption.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "POST",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.CreateLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOption.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOption.createdDate" },
            { path: "localDeliveryOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createLocalDeliveryOption;
}
function getLocalDeliveryOption(payload) {
  function __getLocalDeliveryOption({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "GET",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.GetLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options/{localDeliveryOptionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOption.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOption.createdDate" },
            { path: "localDeliveryOption.updatedDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "GET",
          url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
            protoPath: "/v1/local-delivery-options/{localDeliveryOptionId}",
            data: payload,
            host
          }),
          params: toURLSearchParams(payload)
        }
      ]
    };
    return metadata;
  }
  return __getLocalDeliveryOption;
}
function listLocalDeliveryOptions(payload) {
  function __listLocalDeliveryOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "GET",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.ListLocalDeliveryOptions",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/localDeliveryOptions",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOptions.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOptions.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOptions.createdDate" },
            { path: "localDeliveryOptions.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listLocalDeliveryOptions;
}
function queryLocalDeliveryOptions(payload) {
  function __queryLocalDeliveryOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "POST",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.QueryLocalDeliveryOptions",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOptions.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOptions.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOptions.createdDate" },
            { path: "localDeliveryOptions.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryLocalDeliveryOptions;
}
function updateLocalDeliveryOption(payload) {
  function __updateLocalDeliveryOption({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
          { path: "localDeliveryOption.radiusConfig.address.geocode.latitude" },
          {
            path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
          },
          { path: "localDeliveryOption.customAreaConfig.geocodes.latitude" },
          { path: "localDeliveryOption.customAreaConfig.geocodes.longitude" },
          { path: "localDeliveryOption.radiusConfig.radius" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "localDeliveryOption.createdDate" },
          { path: "localDeliveryOption.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "PATCH",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.UpdateLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options/{localDeliveryOption.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOption.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOption.createdDate" },
            { path: "localDeliveryOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLocalDeliveryOption;
}
function deleteLocalDeliveryOption(payload) {
  function __deleteLocalDeliveryOption({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "DELETE",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.DeleteLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options/{localDeliveryOptionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteLocalDeliveryOption;
}
function bulkCreateLocalDeliveryOption(payload) {
  function __bulkCreateLocalDeliveryOption({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "localDeliveryOptions.minimumFreeDeliveryOrderAmount" },
          {
            path: "localDeliveryOptions.radiusConfig.address.geocode.latitude"
          },
          {
            path: "localDeliveryOptions.radiusConfig.address.geocode.longitude"
          },
          { path: "localDeliveryOptions.customAreaConfig.geocodes.latitude" },
          { path: "localDeliveryOptions.customAreaConfig.geocodes.longitude" },
          { path: "localDeliveryOptions.radiusConfig.radius" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "localDeliveryOptions.createdDate" },
          { path: "localDeliveryOptions.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "POST",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.BulkCreateLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/bulk/local-delivery-options/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOptions.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOptions.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOptions.createdDate" },
            { path: "localDeliveryOptions.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateLocalDeliveryOption;
}
function bulkUpdateLocalDeliveryOption(payload) {
  function __bulkUpdateLocalDeliveryOption({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "localDeliveryOptions.minimumFreeDeliveryOrderAmount" },
          {
            path: "localDeliveryOptions.radiusConfig.address.geocode.latitude"
          },
          {
            path: "localDeliveryOptions.radiusConfig.address.geocode.longitude"
          },
          { path: "localDeliveryOptions.customAreaConfig.geocodes.latitude" },
          { path: "localDeliveryOptions.customAreaConfig.geocodes.longitude" },
          { path: "localDeliveryOptions.radiusConfig.radius" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "localDeliveryOptions.createdDate" },
          { path: "localDeliveryOptions.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "PATCH",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.BulkUpdateLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/bulk/local-delivery-options/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOptions.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOptions.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOptions.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOptions.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOptions.createdDate" },
            { path: "localDeliveryOptions.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateLocalDeliveryOption;
}
function bulkDeleteLocalDeliveryOption(payload) {
  function __bulkDeleteLocalDeliveryOption({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "DELETE",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.BulkDeleteLocalDeliveryOption",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/bulk/local-delivery-options/delete",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __bulkDeleteLocalDeliveryOption;
}
function addDeliveryRegion(payload) {
  function __addDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "POST",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.AddDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options/add-delivery-region",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOption.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOption.createdDate" },
            { path: "localDeliveryOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDeliveryRegion;
}
function removeDeliveryRegion(payload) {
  function __removeDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.local_delivery_option",
      method: "POST",
      methodFqn: "com.wix.ecom.shipments.localdelivery.LocalDelivery.RemoveDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomShipmentsLocaldeliveryLocalDeliveryUrl({
        protoPath: "/v1/local-delivery-options/remove-delivery-region",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "localDeliveryOption.minimumFreeDeliveryOrderAmount" },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.latitude"
            },
            {
              path: "localDeliveryOption.radiusConfig.address.geocode.longitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.latitude"
            },
            {
              path: "localDeliveryOption.customAreaConfig.geocodes.longitude"
            },
            { path: "localDeliveryOption.radiusConfig.radius" }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "localDeliveryOption.createdDate" },
            { path: "localDeliveryOption.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDeliveryRegion;
}

// src/ecom-v1-local-delivery-option-local-delivery-options.universal.ts
import { transformSDKAddressToRESTAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var LengthUnit = /* @__PURE__ */ ((LengthUnit2) => {
  LengthUnit2["UNSPECIFIED_LENGTH_UNIT"] = "UNSPECIFIED_LENGTH_UNIT";
  LengthUnit2["KM"] = "KM";
  LengthUnit2["MI"] = "MI";
  return LengthUnit2;
})(LengthUnit || {});
var DayOfWeek = /* @__PURE__ */ ((DayOfWeek2) => {
  DayOfWeek2["MON"] = "MON";
  DayOfWeek2["TUE"] = "TUE";
  DayOfWeek2["WED"] = "WED";
  DayOfWeek2["THU"] = "THU";
  DayOfWeek2["FRI"] = "FRI";
  DayOfWeek2["SAT"] = "SAT";
  DayOfWeek2["SUN"] = "SUN";
  return DayOfWeek2;
})(DayOfWeek || {});
var ConditionType = /* @__PURE__ */ ((ConditionType2) => {
  ConditionType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  ConditionType2["BY_TOTAL_WEIGHT"] = "BY_TOTAL_WEIGHT";
  ConditionType2["BY_TOTAL_PRICE"] = "BY_TOTAL_PRICE";
  ConditionType2["BY_TOTAL_QUANTITY"] = "BY_TOTAL_QUANTITY";
  return ConditionType2;
})(ConditionType || {});
var LogicalOperator = /* @__PURE__ */ ((LogicalOperator2) => {
  LogicalOperator2["UNKNOWN_LOGICAL_OPERATOR_TYPE"] = "UNKNOWN_LOGICAL_OPERATOR_TYPE";
  LogicalOperator2["EQ"] = "EQ";
  LogicalOperator2["GT"] = "GT";
  LogicalOperator2["GTE"] = "GTE";
  LogicalOperator2["LT"] = "LT";
  LogicalOperator2["LTE"] = "LTE";
  return LogicalOperator2;
})(LogicalOperator || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createLocalDeliveryOption2(localDeliveryOption) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      localDeliveryOption
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
      }
    ]
  );
  const reqOpts = createLocalDeliveryOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
        }
      ])
    )?.localDeliveryOption;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { localDeliveryOption: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["localDeliveryOption"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getLocalDeliveryOption2(localDeliveryOptionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    localDeliveryOptionId,
    id: options?._id
  });
  const reqOpts = getLocalDeliveryOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
        }
      ])
    )?.localDeliveryOption;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          localDeliveryOptionId: "$[0]",
          id: "$[1]._id"
        },
        singleArgumentUnchanged: false
      },
      ["localDeliveryOptionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listLocalDeliveryOptions2(externalId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    externalId
  });
  const reqOpts = listLocalDeliveryOptions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOptions.radiusConfig.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { externalId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["externalId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryLocalDeliveryOptions2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryLocalDeliveryOptions(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [
          {
            transformFn: transformRESTAddressToSDKAddress,
            paths: [{ path: "localDeliveryOptions.radiusConfig.address" }]
          }
        ])
      );
      return {
        items: transformedData?.localDeliveryOptions,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function updateLocalDeliveryOption2(_id, localDeliveryOption) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      localDeliveryOption: { ...localDeliveryOption, id: _id }
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
      }
    ]
  );
  const reqOpts = updateLocalDeliveryOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
        }
      ])
    )?.localDeliveryOption;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { localDeliveryOption: "$[1]" },
        explicitPathsToArguments: { "localDeliveryOption.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "localDeliveryOption"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteLocalDeliveryOption2(localDeliveryOptionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    localDeliveryOptionId,
    id: options?._id
  });
  const reqOpts = deleteLocalDeliveryOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          localDeliveryOptionId: "$[0]",
          id: "$[1]._id"
        },
        singleArgumentUnchanged: false
      },
      ["localDeliveryOptionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkCreateLocalDeliveryOption2(localDeliveryOptions) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      localDeliveryOptions
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "localDeliveryOptions.radiusConfig.address" }]
      }
    ]
  );
  const reqOpts = bulkCreateLocalDeliveryOption(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOptions.radiusConfig.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { localDeliveryOptions: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["localDeliveryOptions"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateLocalDeliveryOption2(localDeliveryOptions) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      localDeliveryOptions
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "localDeliveryOptions.radiusConfig.address" }]
      }
    ]
  );
  const reqOpts = bulkUpdateLocalDeliveryOption(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOptions.radiusConfig.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { localDeliveryOptions: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["localDeliveryOptions"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteLocalDeliveryOption2(ids) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ ids });
  const reqOpts = bulkDeleteLocalDeliveryOption(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ids: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ids"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addDeliveryRegion2(deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    deliveryRegionId,
    localDeliveryOptionId: options?.localDeliveryOptionId,
    revision: options?.revision
  });
  const reqOpts = addDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryRegionId: "$[0]",
          localDeliveryOptionId: "$[1].localDeliveryOptionId",
          revision: "$[1].revision"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDeliveryRegion2(deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    deliveryRegionId,
    localDeliveryOptionId: options?.localDeliveryOptionId,
    revision: options?.revision
  });
  const reqOpts = removeDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "localDeliveryOption.radiusConfig.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          deliveryRegionId: "$[0]",
          localDeliveryOptionId: "$[1].localDeliveryOptionId",
          revision: "$[1].revision"
        },
        singleArgumentUnchanged: false
      },
      ["deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-local-delivery-option-local-delivery-options.public.ts
function createLocalDeliveryOption3(httpClient) {
  return (localDeliveryOption) => createLocalDeliveryOption2(
    localDeliveryOption,
    // @ts-ignore
    { httpClient }
  );
}
function getLocalDeliveryOption3(httpClient) {
  return (localDeliveryOptionId, options) => getLocalDeliveryOption2(
    localDeliveryOptionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function listLocalDeliveryOptions3(httpClient) {
  return (externalId) => listLocalDeliveryOptions2(
    externalId,
    // @ts-ignore
    { httpClient }
  );
}
function queryLocalDeliveryOptions3(httpClient) {
  return () => queryLocalDeliveryOptions2(
    // @ts-ignore
    { httpClient }
  );
}
function updateLocalDeliveryOption3(httpClient) {
  return (_id, localDeliveryOption) => updateLocalDeliveryOption2(
    _id,
    localDeliveryOption,
    // @ts-ignore
    { httpClient }
  );
}
function deleteLocalDeliveryOption3(httpClient) {
  return (localDeliveryOptionId, options) => deleteLocalDeliveryOption2(
    localDeliveryOptionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreateLocalDeliveryOption3(httpClient) {
  return (localDeliveryOptions) => bulkCreateLocalDeliveryOption2(
    localDeliveryOptions,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateLocalDeliveryOption3(httpClient) {
  return (localDeliveryOptions) => bulkUpdateLocalDeliveryOption2(
    localDeliveryOptions,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteLocalDeliveryOption3(httpClient) {
  return (ids) => bulkDeleteLocalDeliveryOption2(
    ids,
    // @ts-ignore
    { httpClient }
  );
}
function addDeliveryRegion3(httpClient) {
  return (deliveryRegionId, options) => addDeliveryRegion2(
    deliveryRegionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeDeliveryRegion3(httpClient) {
  return (deliveryRegionId, options) => removeDeliveryRegion2(
    deliveryRegionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/ecom-v1-local-delivery-option-local-delivery-options.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var createLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(createLocalDeliveryOption3);
var getLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(getLocalDeliveryOption3);
var listLocalDeliveryOptions4 = /* @__PURE__ */ createRESTModule(listLocalDeliveryOptions3);
var queryLocalDeliveryOptions4 = /* @__PURE__ */ createRESTModule(queryLocalDeliveryOptions3);
var updateLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(updateLocalDeliveryOption3);
var deleteLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(deleteLocalDeliveryOption3);
var bulkCreateLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(bulkCreateLocalDeliveryOption3);
var bulkUpdateLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(bulkUpdateLocalDeliveryOption3);
var bulkDeleteLocalDeliveryOption4 = /* @__PURE__ */ createRESTModule(bulkDeleteLocalDeliveryOption3);
var addDeliveryRegion4 = /* @__PURE__ */ createRESTModule(addDeliveryRegion3);
var removeDeliveryRegion4 = /* @__PURE__ */ createRESTModule(removeDeliveryRegion3);
export {
  ConditionType,
  DayOfWeek,
  LengthUnit,
  LogicalOperator,
  SortOrder,
  WebhookIdentityType,
  addDeliveryRegion4 as addDeliveryRegion,
  bulkCreateLocalDeliveryOption4 as bulkCreateLocalDeliveryOption,
  bulkDeleteLocalDeliveryOption4 as bulkDeleteLocalDeliveryOption,
  bulkUpdateLocalDeliveryOption4 as bulkUpdateLocalDeliveryOption,
  createLocalDeliveryOption4 as createLocalDeliveryOption,
  deleteLocalDeliveryOption4 as deleteLocalDeliveryOption,
  getLocalDeliveryOption4 as getLocalDeliveryOption,
  listLocalDeliveryOptions4 as listLocalDeliveryOptions,
  queryLocalDeliveryOptions4 as queryLocalDeliveryOptions,
  removeDeliveryRegion4 as removeDeliveryRegion,
  updateLocalDeliveryOption4 as updateLocalDeliveryOption
};
//# sourceMappingURL=index.mjs.map