"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEssentialsMockFactory = createEssentialsMockFactory;
function createEssentialsMockFactory(mockFn) {
    return {
        i18n: {
            getLanguage: mockFn(() => 'en'),
            getLocale: mockFn(() => 'en-US'),
        },
        bi: {
            getLogger: mockFn(() => ({
                log: mockFn(),
                report: mockFn(),
                flush: mockFn(),
                updateDefaults: mockFn((params) => ({
                    log: mockFn(),
                    report: mockFn(),
                    flush: mockFn(),
                    updateDefaults: mockFn(),
                })),
            })),
        },
        monitoring: {
            getMonitoringClient: mockFn(() => ({
                captureException: mockFn(),
                captureMessage: mockFn(),
                setContext: mockFn(),
                setTag: mockFn(),
                setUser: mockFn(),
                addBreadcrumb: mockFn(),
            })),
        },
        experiments: {
            enabled: mockFn(() => false),
            get: mockFn(() => null),
        },
        settings: {
            getTimezone: mockFn(() => 'UTC'),
        },
        auth: {
            elevate: mockFn((restModule) => restModule),
            getContextualAuth: mockFn(() => ({
                headers: {},
            })),
            getTokenInfo: mockFn(() => Promise.resolve({
                active: true,
                subjectType: 'USER',
                subjectId: 'mock-user-id',
                exp: Date.now() + 3600000,
                iat: Date.now(),
                clientId: 'mock-client-id',
                siteId: 'mock-site-id',
                instanceId: 'mock-instance-id',
            })),
        },
        httpClient: {
            fetchWithAuth: mockFn(() => global.fetch || mockFn()),
            graphql: mockFn(() => Promise.resolve({
                data: {},
                errors: [],
            })),
        },
        errorHandler: {
            withErrorHandler: mockFn((fn) => fn),
            getResolvedError: mockFn(() => ({
                code: 'UNKNOWN_ERROR',
                message: 'Mock error',
                details: {},
            })),
            showError: mockFn(),
            reportRetryAttempt: mockFn(),
        },
    };
}
