// src/stores-v1-abandoned-cart-abandoned-carts.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-v1-abandoned-cart-abandoned-carts.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixCartAbandonmentApiV1AbandonedCartsUrl(opts) {
  const domainToMappings = {};
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_abandoned-carts";
function getAbandonedCart(payload) {
  function __getAbandonedCart({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.abandoned_cart",
      method: "GET",
      methodFqn: "wix.cart.abandonment.api.v1.AbandonedCarts.GetAbandonedCart",
      packageName: PACKAGE_NAME,
      url: resolveWixCartAbandonmentApiV1AbandonedCartsUrl({
        protoPath: "/v1/abandonedCarts/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "abandonedCart.abandonTime" },
            { path: "abandonedCart.activities.timestamp" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getAbandonedCart;
}
function queryAbandonedCarts(payload) {
  function __queryAbandonedCarts({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.abandoned_cart",
      method: "POST",
      methodFqn: "wix.cart.abandonment.api.v1.AbandonedCarts.QueryAbandonedCarts",
      packageName: PACKAGE_NAME,
      url: resolveWixCartAbandonmentApiV1AbandonedCartsUrl({
        protoPath: "/v1/abandonedCarts/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "abandonedCarts.abandonTime" },
            { path: "abandonedCarts.activities.timestamp" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryAbandonedCarts;
}

// src/stores-v1-abandoned-cart-abandoned-carts.universal.ts
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["ABANDONED"] = "ABANDONED";
  Status2["RECOVERED"] = "RECOVERED";
  return Status2;
})(Status || {});
var Identity = /* @__PURE__ */ ((Identity2) => {
  Identity2["ADMIN"] = "ADMIN";
  Identity2["MEMBER"] = "MEMBER";
  Identity2["VISITOR"] = "VISITOR";
  Identity2["CONTACT"] = "CONTACT";
  return Identity2;
})(Identity || {});
var ActivityType = /* @__PURE__ */ ((ActivityType2) => {
  ActivityType2["UNRECOGNIZED_TYPE"] = "UNRECOGNIZED_TYPE";
  ActivityType2["SCHEDULED"] = "SCHEDULED";
  ActivityType2["EMAIL_SENT"] = "EMAIL_SENT";
  ActivityType2["EMAIL_NOT_SENT"] = "EMAIL_NOT_SENT";
  ActivityType2["NOTIFICATION_SENT"] = "NOTIFICATION_SENT";
  ActivityType2["TASK_CREATED"] = "TASK_CREATED";
  ActivityType2["CUSTOM_ACTIVITY"] = "CUSTOM_ACTIVITY";
  return ActivityType2;
})(ActivityType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getAbandonedCart2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getAbandonedCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.abandonedCart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryAbandonedCarts2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    query: options?.query
  });
  const reqOpts = queryAbandonedCarts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0].query" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  ActivityType,
  Identity,
  Status,
  WebhookIdentityType,
  getAbandonedCart2 as getAbandonedCart,
  queryAbandonedCarts2 as queryAbandonedCarts
};
//# sourceMappingURL=index.typings.mjs.map