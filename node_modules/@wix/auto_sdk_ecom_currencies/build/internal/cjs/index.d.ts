import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { ListCurrenciesResponse, ConvertCurrencyIdentifiers, DecimalValue, ConvertCurrencyResponse, GetConversionRateIdentifiers, ConversionRateResponse } from './index.typings.js';
export { ConversionRateRequest, ConvertCurrencyRequest, Currency, CurrencyRate, ListCurrenciesRequest } from './index.typings.js';

declare function listCurrencies$1(httpClient: HttpClient): ListCurrenciesSignature;
interface ListCurrenciesSignature {
    /**
     * Returns an array of currencies. The array lists all currencies for which Wix supports conversion and their symbols.
     */
    (): Promise<NonNullablePaths<ListCurrenciesResponse, `currencies` | `currencies.${number}.code` | `currencies.${number}.symbol`, 4>>;
}
declare function convertCurrency$1(httpClient: HttpClient): ConvertCurrencySignature;
interface ConvertCurrencySignature {
    /**
     * Returns an array of amounts converted from the original (`from`) currency to the target (`to`) currency and the timestamp for the conversion rate used.
     *
     *
     * Use the `convertCurrency()` function to convert an array of one or more amounts between two currencies. The `convertCurrency()` function returns an array of converted amounts and the timestamp for the conversion rate used.
     *
     * > **Note**:  The currency codes used must exist in the array of supported currencies returned by the [`listCurrencies()`](#listcurrencies) function.
     *
     * @param - Amounts to convert.
     * @param - Identifying details needed to determine which currency rate to convert. The combination of the `from` and `to` properties together comprise the unique ID.
     * @param - Options to use when converting currency.
     */
    (identifiers: NonNullablePaths<ConvertCurrencyIdentifiers, `from` | `to`, 2>, amounts: DecimalValue[]): Promise<NonNullablePaths<ConvertCurrencyResponse, `amounts` | `amounts.${number}.value` | `amounts.${number}.decimalPlaces`, 4>>;
}
declare function getConversionRate$1(httpClient: HttpClient): GetConversionRateSignature;
interface GetConversionRateSignature {
    /**
     * Returns the conversion rate between 2 currencies.
     * @param - Identifying details needed to get the conversion rate. The combination of the `from` and `to` properties together comprise the unique ID.
     */
    (identifiers: NonNullablePaths<GetConversionRateIdentifiers, `from` | `to`, 2>): Promise<NonNullablePaths<ConversionRateResponse, `rate.value` | `rate.decimalPlaces`, 3>>;
}

declare const listCurrencies: MaybeContext<BuildRESTFunction<typeof listCurrencies$1> & typeof listCurrencies$1>;
declare const convertCurrency: MaybeContext<BuildRESTFunction<typeof convertCurrency$1> & typeof convertCurrency$1>;
declare const getConversionRate: MaybeContext<BuildRESTFunction<typeof getConversionRate$1> & typeof getConversionRate$1>;

export { ConversionRateResponse, ConvertCurrencyIdentifiers, ConvertCurrencyResponse, DecimalValue, GetConversionRateIdentifiers, ListCurrenciesResponse, convertCurrency, getConversionRate, listCurrencies };
