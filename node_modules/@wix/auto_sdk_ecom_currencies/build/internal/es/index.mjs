// src/ecommerce-currency-converter-v1-currency-rate-currencies.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecommerce-currency-converter-v1-currency-rate-currencies.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/currency-converter",
        destPath: ""
      }
    ],
    "cronulla-jobs._base_domain_": [
      {
        srcPath: "/currency-converter-bo",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    "currency-converter.wixapps.net": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/currency_converter",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/currency-converter",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_currencies";
function listCurrencies(payload) {
  function __listCurrencies({ host }) {
    const metadata = {
      entityFqdn: "wix.ecommerce.currency_converter.v1.currency_rate",
      method: "GET",
      methodFqn: "com.wixpress.currency.converter.api.v1.CurrencyConverter.ListCurrencies",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl({
        protoPath: "/v1/currencies",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __listCurrencies;
}
function convertCurrency(payload) {
  function __convertCurrency({ host }) {
    const metadata = {
      entityFqdn: "wix.ecommerce.currency_converter.v1.currency_rate",
      method: "POST",
      methodFqn: "com.wixpress.currency.converter.api.v1.CurrencyConverter.ConvertCurrency",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl({
        protoPath: "/v1/currencies/amounts/{from}/convert/{to}",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "rateTimestamp" }]
        }
      ])
    };
    return metadata;
  }
  return __convertCurrency;
}
function conversionRate(payload) {
  function __conversionRate({ host }) {
    const metadata = {
      entityFqdn: "wix.ecommerce.currency_converter.v1.currency_rate",
      method: "GET",
      methodFqn: "com.wixpress.currency.converter.api.v1.CurrencyConverter.ConversionRate",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl({
        protoPath: "/v1/currencies/rate/{from}/convert/{to}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "rateTimestamp" }]
        }
      ])
    };
    return metadata;
  }
  return __conversionRate;
}

// src/ecommerce-currency-converter-v1-currency-rate-currencies.universal.ts
async function listCurrencies2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = listCurrencies(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function convertCurrency2(identifiers, amounts) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    from: identifiers?.from,
    to: identifiers?.to,
    amounts
  });
  const reqOpts = convertCurrency(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          from: "$[0].from",
          to: "$[0].to",
          amounts: "$[1]"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "amounts"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getConversionRate(identifiers) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    from: identifiers?.from,
    to: identifiers?.to
  });
  const reqOpts = conversionRate(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { from: "$[0].from", to: "$[0].to" },
        singleArgumentUnchanged: false
      },
      ["identifiers"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecommerce-currency-converter-v1-currency-rate-currencies.public.ts
function listCurrencies3(httpClient) {
  return () => listCurrencies2(
    // @ts-ignore
    { httpClient }
  );
}
function convertCurrency3(httpClient) {
  return (identifiers, amounts) => convertCurrency2(
    identifiers,
    amounts,
    // @ts-ignore
    { httpClient }
  );
}
function getConversionRate2(httpClient) {
  return (identifiers) => getConversionRate(
    identifiers,
    // @ts-ignore
    { httpClient }
  );
}

// src/ecommerce-currency-converter-v1-currency-rate-currencies.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var listCurrencies4 = /* @__PURE__ */ createRESTModule(listCurrencies3);
var convertCurrency4 = /* @__PURE__ */ createRESTModule(convertCurrency3);
var getConversionRate3 = /* @__PURE__ */ createRESTModule(getConversionRate2);
export {
  convertCurrency4 as convertCurrency,
  getConversionRate3 as getConversionRate,
  listCurrencies4 as listCurrencies
};
//# sourceMappingURL=index.mjs.map