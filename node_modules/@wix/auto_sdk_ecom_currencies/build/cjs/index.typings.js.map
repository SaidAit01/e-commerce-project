{"version":3,"sources":["../../index.typings.ts","../../src/ecommerce-currency-converter-v1-currency-rate-currencies.universal.ts","../../src/ecommerce-currency-converter-v1-currency-rate-currencies.http.ts"],"sourcesContent":["export * from './src/ecommerce-currency-converter-v1-currency-rate-currencies.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixEcommerceCurrencyConverterV1CurrencyRate from './ecommerce-currency-converter-v1-currency-rate-currencies.http.js';\n\nexport interface CurrencyRate {}\n\nexport interface ListCurrenciesRequest {}\n\nexport interface ListCurrenciesResponse {\n  /** Supported currencies. */\n  currencies?: Currency[];\n}\n\nexport interface Currency {\n  /**\n   * A 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.\n   * @format CURRENCY\n   */\n  code?: string;\n  /**\n   * Currency symbol.\n   * @maxLength 10\n   */\n  symbol?: string;\n}\n\nexport interface ConvertCurrencyRequest {\n  /**\n   * Amounts to convert.\n   * @minSize 1\n   * @maxSize 100\n   */\n  amounts?: DecimalValue[];\n  /**\n   * Original currency to convert from as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  from: string;\n  /**\n   * Target currency to convert to as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  to: string;\n}\n\nexport interface DecimalValue {\n  /** The value without decimal points. For example, the number `10.95` becomes `1095`. */\n  value?: string;\n  /** Decimal places to apply. For example, the number of decimal places for `10.95`  is `2`. */\n  decimalPlaces?: number;\n}\n\nexport interface ConvertCurrencyResponse {\n  /** Converted amounts. */\n  amounts?: DecimalValue[];\n  /** Date and time the conversion rate was last updated. */\n  rateTimestamp?: Date | null;\n}\n\nexport interface ConversionRateRequest {\n  /**\n   * Original currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  from: string;\n  /**\n   * Target currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  to: string;\n}\n\nexport interface ConversionRateResponse {\n  /** Conversion rate between 2 currencies. */\n  rate?: DecimalValue;\n  /** Date and time the conversion rate was last updated. */\n  rateTimestamp?: Date | null;\n}\n\n/**\n * Returns an array of currencies. The array lists all currencies for which Wix supports conversion and their symbols.\n * @public\n * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES\n * @applicableIdentity APP\n * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ListCurrencies\n */\nexport async function listCurrencies(): Promise<\n  NonNullablePaths<\n    ListCurrenciesResponse,\n    `currencies` | `currencies.${number}.code` | `currencies.${number}.symbol`,\n    4\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts =\n    ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.listCurrencies(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Returns an array of amounts converted from the original (`from`) currency to the target (`to`) currency and the timestamp for the conversion rate used.\n *\n *\n * Use the `convertCurrency()` function to convert an array of one or more amounts between two currencies. The `convertCurrency()` function returns an array of converted amounts and the timestamp for the conversion rate used.\n *\n * > **Note**:  The currency codes used must exist in the array of supported currencies returned by the [`listCurrencies()`](#listcurrencies) function.\n *\n * @param amounts - Amounts to convert.\n * @public\n * @requiredField amounts\n * @requiredField identifiers\n * @requiredField identifiers.from\n * @requiredField identifiers.to\n * @param identifiers - Identifying details needed to determine which currency rate to convert. The combination of the `from` and `to` properties together comprise the unique ID.\n * @param options - Options to use when converting currency.\n * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES\n * @applicableIdentity APP\n * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ConvertCurrency\n */\nexport async function convertCurrency(\n  identifiers: NonNullablePaths<ConvertCurrencyIdentifiers, `from` | `to`, 2>,\n  amounts: DecimalValue[]\n): Promise<\n  NonNullablePaths<\n    ConvertCurrencyResponse,\n    `amounts` | `amounts.${number}.value` | `amounts.${number}.decimalPlaces`,\n    4\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    from: identifiers?.from,\n    to: identifiers?.to,\n    amounts: amounts,\n  });\n\n  const reqOpts =\n    ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.convertCurrency(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          from: '$[0].from',\n          to: '$[0].to',\n          amounts: '$[1]',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers', 'amounts']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ConvertCurrencyIdentifiers {\n  /**\n   * Original currency to convert from as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  from: string;\n  /**\n   * Target currency to convert to as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code.  The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  to: string;\n}\n\n/**\n * Returns the conversion rate between 2 currencies.\n * @public\n * @requiredField identifiers\n * @requiredField identifiers.from\n * @requiredField identifiers.to\n * @param identifiers - Identifying details needed to get the conversion rate. The combination of the `from` and `to` properties together comprise the unique ID.\n * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES\n * @applicableIdentity APP\n * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ConversionRate\n */\nexport async function getConversionRate(\n  identifiers: NonNullablePaths<GetConversionRateIdentifiers, `from` | `to`, 2>\n): Promise<\n  NonNullablePaths<\n    ConversionRateResponse,\n    `rate.value` | `rate.decimalPlaces`,\n    3\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    from: identifiers?.from,\n    to: identifiers?.to,\n  });\n\n  const reqOpts =\n    ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.conversionRate(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { from: '$[0].from', to: '$[0].to' },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetConversionRateIdentifiers {\n  /**\n   * Original currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `from` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  from: string;\n  /**\n   * Target currency to get the rate for as a 3-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) code. The `to` currency code must exist in the array returned by the [`listCurrencies()`](#listcurrencies) function.\n   * @format CURRENCY\n   */\n  to: string;\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'api._api_base_domain_': [\n      {\n        srcPath: '/currency-converter',\n        destPath: '',\n      },\n    ],\n    'cronulla-jobs._base_domain_': [\n      {\n        srcPath: '/currency-converter-bo',\n        destPath: '',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    'currency-converter.wixapps.net': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/currency_converter',\n        destPath: '',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/currency-converter',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_currencies';\n\n/** Returns an array of currencies. The array lists all currencies for which Wix supports conversion and their symbols. */\nexport function listCurrencies(payload: object): RequestOptionsFactory<any> {\n  function __listCurrencies({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecommerce.currency_converter.v1.currency_rate',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.currency.converter.api.v1.CurrencyConverter.ListCurrencies',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl({\n        protoPath: '/v1/currencies',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __listCurrencies;\n}\n\n/**\n * Returns an array of amounts converted from the original (`from`) currency to the target (`to`) currency and the timestamp for the conversion rate used.\n *\n *\n * Use the `convertCurrency()` function to convert an array of one or more amounts between two currencies. The `convertCurrency()` function returns an array of converted amounts and the timestamp for the conversion rate used.\n *\n * > **Note**:  The currency codes used must exist in the array of supported currencies returned by the [`listCurrencies()`](#listcurrencies) function.\n *\n */\nexport function convertCurrency(payload: object): RequestOptionsFactory<any> {\n  function __convertCurrency({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecommerce.currency_converter.v1.currency_rate',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.currency.converter.api.v1.CurrencyConverter.ConvertCurrency',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl({\n        protoPath: '/v1/currencies/amounts/{from}/convert/{to}',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'rateTimestamp' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __convertCurrency;\n}\n\n/** Returns the conversion rate between 2 currencies. */\nexport function conversionRate(payload: object): RequestOptionsFactory<any> {\n  function __conversionRate({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecommerce.currency_converter.v1.currency_rate',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.currency.converter.api.v1.CurrencyConverter.ConversionRate',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressCurrencyConverterApiV1CurrencyConverterUrl({\n        protoPath: '/v1/currencies/rate/{from}/convert/{to}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'rateTimestamp' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __conversionRate;\n}\n"],"mappings":"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","names":["convertCurrency","listCurrencies","import_rest_modules","payload","listCurrencies","sdkTransformError","convertCurrency"]}