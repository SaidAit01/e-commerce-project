import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { CreateCartOptions, Cart, UpdateCart, RefreshCartResponse, CalculateCartOptions, CalculateCartResponse, GetCheckoutUrlOptions, GetCheckoutURLResponse, CompleteCheckoutOptions, CompleteCheckoutResponse, AddLineItemsOptions, AddLineItemsResponse, RemoveLineItemsResponse, AddDiscountResponse, RemoveDiscountResponse, AddGiftCardResponse, RemoveGiftCardResponse, UpdateLineItemsOptions, UpdateLineItemsResponse, MarkCartAsCompletedOptions, MarkCartAsCompletedResponse, RawHttpResponse } from './index.typings.mjs';
export { ActionEvent, AddDiscountRequest, AddDiscountToCurrentCartRequest, AddDiscountToCurrentCartResponse, AddGiftCardRequest, AddGiftCardToCurrentCartRequest, AddGiftCardToCurrentCartResponse, AddLineItemsRequest, AddLineItemsToCurrentCartRequest, AddLineItemsToCurrentCartResponse, AdditionalFee, AdditionalFeeTax, Address, AddressLocation, ApplicationError, CalculateCartRequest, CalculateCurrentCartRequest, CalculateCurrentCartResponse, CalculationComponent, CalculationComponentWithLiterals, CalculationConfig, CalculationError, CartSource, CartStatus, CartStatusWithLiterals, CartSummary, CatalogItemInput, CatalogOverrideFields, CatalogReference, ChannelType, ChannelTypeWithLiterals, Color, CompleteCheckoutRequest, CreateCartRequest, CreateCartResponse, CreateCurrentCartRequest, CreateCurrentCartResponse, CreatedBy, CreatedByIdOneOf, CustomContentReference, CustomItemAttributes, CustomItemDeliveryConfig, CustomItemInput, CustomItemPaymentConfig, CustomItemPricingInfo, CustomItemQuantityInfo, CustomItemSource, CustomItemTaxConfig, CustomSettings, CustomerInfo, CustomerInfoIdOneOf, DeleteCartRequest, DeleteCartResponse, DeleteCurrentCartRequest, DeleteCurrentCartResponse, DeliveryInfo, DeliveryMethod, DeliverySummary, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineTypeWithLiterals, DescriptionLineValueOneOf, Details, DetailsKindOneOf, Discount, DiscountBenefit, DiscountBenefitValueOneOf, DiscountScope, DiscountScopeWithLiterals, DiscountSource, DiscountSourceType, DiscountSourceTypeWithLiterals, DiscountStatus, DiscountStatusWithLiterals, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ErrorCode, ErrorCodeWithLiterals, ExtendedFields, ExternalReference, FieldViolation, FileType, FileTypeWithLiterals, FreeTrialPeriod, FullAddressContactDetails, GetCartRequest, GetCartResponse, GetCheckoutURLRequest, GetCurrentCartRequest, GetCurrentCartResponse, GiftCard, GiftCardSummary, Group, HandleAsyncCheckoutCompletionRequest, HeadersEntry, IdentificationData, IdentificationDataIdOneOf, ItemAttributes, ItemDeliveryConfig, ItemModifier, ItemPaymentConfig, ItemPriceBreakdown, ItemPricingInfo, ItemQuantityInfo, ItemSource, ItemStatus, ItemStatusWithLiterals, ItemTaxConfig, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, ItemTypeItemTypeWithLiterals, LineItem, LineItemSummary, LineItemTax, LineItemUpdate, MarkCartAsCompletedRequest, MessageEnvelope, ModifierGroup, MultiCurrencyPrice, NameInLineItem, NameInLineItemWithLiterals, NameInOther, NameInOtherWithLiterals, Other, PaymentInfo, PaymentOption, PaymentOptionType, PaymentOptionTypeWithLiterals, PaymentSummary, PhysicalProperties, PlainTextValue, Policy, PriceDescription, PriceSummary, PricingInfo, QuantityUpdate, RedirectUrls, RefreshCartRequest, RefreshCurrentCartRequest, RefreshCurrentCartResponse, RemoveDiscountFromCurrentCartRequest, RemoveDiscountFromCurrentCartResponse, RemoveDiscountRequest, RemoveGiftCardFromCurrentCartRequest, RemoveGiftCardFromCurrentCartResponse, RemoveGiftCardRequest, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsFromCurrentCartResponse, RemoveLineItemsRequest, RestoreInfo, RuleType, RuleTypeWithLiterals, Scope, SecuredMedia, SelectedMembership, SelectedMembershipUpdate, ServiceProperties, Severity, SeverityWithLiterals, SiteInfo, StreetAddress, SubscriptionFrequency, SubscriptionFrequencyWithLiterals, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SuggestedFixWithLiterals, SystemError, Target, TargetTargetTypeOneOf, Tax, TaxDetails, TaxInfo, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, TaxableAddressTypeWithLiterals, Title, TranslatableString, UpdateCartRequest, UpdateCartResponse, UpdateCurrentCartRequest, UpdateCurrentCartResponse, UpdateLineItemsInCurrentCartRequest, UpdateLineItemsInCurrentCartResponse, UpdateLineItemsRequest, V2AdditionalFee, V2LineItem, V2SelectedMembership, ValidationError, ValidationsConfig, ValidationsConfigWithLiterals, VatId, VatType, VatTypeWithLiterals, Violation, WebhookIdentityType, WebhookIdentityTypeWithLiterals, WeightUnit, WeightUnitWithLiterals } from './index.typings.mjs';

/** @internal */
declare function createCart$1(httpClient: HttpClient): CreateCartSignature;
interface CreateCartSignature {
    /**
     * Creates a Cart.
     * @returns The created Cart.
     */
    (options?: NonNullablePaths<CreateCartOptions, `catalogItems.${number}.catalogReference` | `catalogItems.${number}.quantity` | `catalogItems.${number}.selectedMembership._id` | `catalogItems.${number}.selectedMembership.appId` | `customItems.${number}.attributes.descriptionLines.${number}.name` | `customItems.${number}.name` | `customItems.${number}.pricing` | `customItems.${number}.pricing.price` | `customItems.${number}.quantityInfo` | `customItems.${number}.quantityInfo.requestedQuantity`, 7>): Promise<NonNullablePaths<Cart, `_id` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.name.original` | `lineItems.${number}.quantityInfo.confirmedQuantity` | `lineItems.${number}.quantityInfo.requestedQuantity` | `lineItems.${number}.quantityInfo.fixedQuantity` | `lineItems.${number}.pricing.unitPrice.amount` | `lineItems.${number}.pricing.unitPrice.convertedAmount` | `lineItems.${number}.pricing.unitPrice.formattedAmount` | `lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `lineItems.${number}.pricing.priceDescription.original` | `lineItems.${number}.pricing.priceUndetermined` | `lineItems.${number}.source.customLineItem` | `lineItems.${number}.source.catalogReference.catalogItemId` | `lineItems.${number}.source.catalogReference.appId` | `lineItems.${number}.attributes.itemType.preset` | `lineItems.${number}.attributes.itemType.custom` | `lineItems.${number}.attributes.physicalProperties.shippable` | `lineItems.${number}.taxConfig.taxableAddress.addressType` | `lineItems.${number}.paymentConfig.savePaymentMethod` | `lineItems.${number}.paymentConfig.selectedMembership._id` | `lineItems.${number}.paymentConfig.selectedMembership.appId` | `lineItems.${number}.paymentConfig.paymentOption` | `lineItems.${number}.status` | `lineItems.${number}.membersOnly` | `discounts` | `discounts.${number}._id` | `discounts.${number}.source.sourceType` | `discounts.${number}.scope` | `discounts.${number}.status` | `source.channelType` | `source.externalReferences` | `source.externalReferences.${number}.appId` | `source.createdBy.visitorId` | `source.createdBy.memberId` | `source.createdBy.userId` | `source.createdBy.appId` | `source.customContentReference.appId` | `source.customContentReference.componentId` | `siteInfo.weightUnit` | `siteInfo.languageCode` | `siteInfo.currencyCode` | `customerInfo.visitorId` | `customerInfo.memberId` | `customerInfo.userId` | `customerInfo.languageCode` | `customerInfo.currencyCode` | `deliveryInfo.address.streetAddress.number` | `deliveryInfo.address.streetAddress.name` | `deliveryInfo.recipient.vatId._id` | `deliveryInfo.recipient.vatId.type` | `deliveryInfo.method.appId` | `deliveryInfo.method.code` | `deliveryInfo.method.pickup` | `taxInfo.pricesIncludeTax` | `paymentInfo.giftCards` | `paymentInfo.giftCards.${number}._id` | `paymentInfo.giftCards.${number}.obfuscatedCode` | `paymentInfo.giftCards.${number}.appId` | `paymentInfo.currencyCode` | `status` | `customSettings.lockGiftCard` | `customSettings.lockCouponCode` | `customSettings.policyAgreementCheckboxDisabled` | `customSettings.manualPaymentDisabled`, 6>>;
}
/** @internal */
declare function getCart$1(httpClient: HttpClient): GetCartSignature;
interface GetCartSignature {
    /**
     * Retrieves a Cart.
     * @param - ID of the Cart to retrieve.
     * @returns The requested Cart.
     */
    (cartId: string): Promise<NonNullablePaths<Cart, `_id` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.name.original` | `lineItems.${number}.quantityInfo.confirmedQuantity` | `lineItems.${number}.quantityInfo.requestedQuantity` | `lineItems.${number}.quantityInfo.fixedQuantity` | `lineItems.${number}.pricing.unitPrice.amount` | `lineItems.${number}.pricing.unitPrice.convertedAmount` | `lineItems.${number}.pricing.unitPrice.formattedAmount` | `lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `lineItems.${number}.pricing.priceDescription.original` | `lineItems.${number}.pricing.priceUndetermined` | `lineItems.${number}.source.customLineItem` | `lineItems.${number}.source.catalogReference.catalogItemId` | `lineItems.${number}.source.catalogReference.appId` | `lineItems.${number}.attributes.itemType.preset` | `lineItems.${number}.attributes.itemType.custom` | `lineItems.${number}.attributes.physicalProperties.shippable` | `lineItems.${number}.taxConfig.taxableAddress.addressType` | `lineItems.${number}.paymentConfig.savePaymentMethod` | `lineItems.${number}.paymentConfig.selectedMembership._id` | `lineItems.${number}.paymentConfig.selectedMembership.appId` | `lineItems.${number}.paymentConfig.paymentOption` | `lineItems.${number}.status` | `lineItems.${number}.membersOnly` | `discounts` | `discounts.${number}._id` | `discounts.${number}.source.sourceType` | `discounts.${number}.scope` | `discounts.${number}.status` | `source.channelType` | `source.externalReferences` | `source.externalReferences.${number}.appId` | `source.createdBy.visitorId` | `source.createdBy.memberId` | `source.createdBy.userId` | `source.createdBy.appId` | `source.customContentReference.appId` | `source.customContentReference.componentId` | `siteInfo.weightUnit` | `siteInfo.languageCode` | `siteInfo.currencyCode` | `customerInfo.visitorId` | `customerInfo.memberId` | `customerInfo.userId` | `customerInfo.languageCode` | `customerInfo.currencyCode` | `deliveryInfo.address.streetAddress.number` | `deliveryInfo.address.streetAddress.name` | `deliveryInfo.recipient.vatId._id` | `deliveryInfo.recipient.vatId.type` | `deliveryInfo.method.appId` | `deliveryInfo.method.code` | `deliveryInfo.method.pickup` | `taxInfo.pricesIncludeTax` | `paymentInfo.giftCards` | `paymentInfo.giftCards.${number}._id` | `paymentInfo.giftCards.${number}.obfuscatedCode` | `paymentInfo.giftCards.${number}.appId` | `paymentInfo.currencyCode` | `status` | `customSettings.lockGiftCard` | `customSettings.lockCouponCode` | `customSettings.policyAgreementCheckboxDisabled` | `customSettings.manualPaymentDisabled`, 6>>;
}
/** @internal */
declare function updateCart$1(httpClient: HttpClient): UpdateCartSignature;
interface UpdateCartSignature {
    /**
     * Updates a Cart.
     *
     * Use this endpoint to set and replace fields such as buyer note and delivery method.
     * To add or remove elements from lists (e.g., line items, discounts, gift cards), use their dedicated endpoints.
     * @param - Cart ID.
     * @returns Updated Cart.
     */
    (_id: string, cart: UpdateCart): Promise<NonNullablePaths<Cart, `_id` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.name.original` | `lineItems.${number}.quantityInfo.confirmedQuantity` | `lineItems.${number}.quantityInfo.requestedQuantity` | `lineItems.${number}.quantityInfo.fixedQuantity` | `lineItems.${number}.pricing.unitPrice.amount` | `lineItems.${number}.pricing.unitPrice.convertedAmount` | `lineItems.${number}.pricing.unitPrice.formattedAmount` | `lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `lineItems.${number}.pricing.priceDescription.original` | `lineItems.${number}.pricing.priceUndetermined` | `lineItems.${number}.source.customLineItem` | `lineItems.${number}.source.catalogReference.catalogItemId` | `lineItems.${number}.source.catalogReference.appId` | `lineItems.${number}.attributes.itemType.preset` | `lineItems.${number}.attributes.itemType.custom` | `lineItems.${number}.attributes.physicalProperties.shippable` | `lineItems.${number}.taxConfig.taxableAddress.addressType` | `lineItems.${number}.paymentConfig.savePaymentMethod` | `lineItems.${number}.paymentConfig.selectedMembership._id` | `lineItems.${number}.paymentConfig.selectedMembership.appId` | `lineItems.${number}.paymentConfig.paymentOption` | `lineItems.${number}.status` | `lineItems.${number}.membersOnly` | `discounts` | `discounts.${number}._id` | `discounts.${number}.source.sourceType` | `discounts.${number}.scope` | `discounts.${number}.status` | `source.channelType` | `source.externalReferences` | `source.externalReferences.${number}.appId` | `source.createdBy.visitorId` | `source.createdBy.memberId` | `source.createdBy.userId` | `source.createdBy.appId` | `source.customContentReference.appId` | `source.customContentReference.componentId` | `siteInfo.weightUnit` | `siteInfo.languageCode` | `siteInfo.currencyCode` | `customerInfo.visitorId` | `customerInfo.memberId` | `customerInfo.userId` | `customerInfo.languageCode` | `customerInfo.currencyCode` | `deliveryInfo.address.streetAddress.number` | `deliveryInfo.address.streetAddress.name` | `deliveryInfo.recipient.vatId._id` | `deliveryInfo.recipient.vatId.type` | `deliveryInfo.method.appId` | `deliveryInfo.method.code` | `deliveryInfo.method.pickup` | `taxInfo.pricesIncludeTax` | `paymentInfo.giftCards` | `paymentInfo.giftCards.${number}._id` | `paymentInfo.giftCards.${number}.obfuscatedCode` | `paymentInfo.giftCards.${number}.appId` | `paymentInfo.currencyCode` | `status` | `customSettings.lockGiftCard` | `customSettings.lockCouponCode` | `customSettings.policyAgreementCheckboxDisabled` | `customSettings.manualPaymentDisabled`, 6>>;
}
/** @internal */
declare function deleteCart$1(httpClient: HttpClient): DeleteCartSignature;
interface DeleteCartSignature {
    /**
     * Deletes a Cart.
     * @param - ID of the Cart to delete.
     */
    (cartId: string): Promise<void>;
}
/** @internal */
declare function refreshCart$1(httpClient: HttpClient): RefreshCartSignature;
interface RefreshCartSignature {
    /**
     * Re-evaluates prices, inventory and discounts to ensure the Cart is up-to-date with the latest changes.
     * @param - ID of the Cart to refresh.
     */
    (cartId: string): Promise<NonNullablePaths<RefreshCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function calculateCart$1(httpClient: HttpClient): CalculateCartSignature;
interface CalculateCartSignature {
    /**
     * Calculates the cart based on its current state (line items, discounts, delivery method, etc.)
     * and returns a detailed summary including subtotal, delivery costs, taxes, fees and the total price.
     * Note that discounts are already pre-computed and applied to the Cart.
     *
     * This is a read-only operation that does not modify the cart.
     * @param - ID of the Cart to calculate.
     */
    (cartId: string, options?: CalculateCartOptions): Promise<NonNullablePaths<CalculateCartResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled` | `summary.cartId` | `summary.lineItems` | `summary.lineItems.${number}.lineItemId` | `summary.lineItems.${number}.quantity` | `summary.lineItems.${number}.unitPrice.amount` | `summary.lineItems.${number}.unitPrice.convertedAmount` | `summary.lineItems.${number}.unitPrice.formattedAmount` | `summary.lineItems.${number}.unitPrice.formattedConvertedAmount` | `summary.discounts` | `summary.discounts.${number}._id` | `summary.discounts.${number}.name.original` | `summary.discounts.${number}.source.sourceType` | `summary.discounts.${number}.scope` | `summary.discounts.${number}.status` | `summary.deliverySummary.method.appId` | `summary.deliverySummary.method.code` | `summary.deliverySummary.method.pickup` | `summary.additionalFees` | `summary.taxSummary.taxes` | `summary.taxSummary.taxes.${number}.rate` | `summary.taxSummary.pricesIncludeTax` | `summary.taxSummary.lineItemTaxes` | `summary.taxSummary.lineItemTaxes.${number}.lineItemId` | `summary.taxSummary.additionalFeeTaxes` | `summary.taxSummary.additionalFeeTaxes.${number}.additionalFeeCode` | `summary.paymentSummary.giftCards` | `summary.paymentSummary.giftCards.${number}.giftCardId` | `summary.paymentSummary.memberships` | `summary.paymentSummary.memberships.${number}._id` | `summary.paymentSummary.memberships.${number}.appId` | `summary.paymentSummary.requiresPaymentAfterGiftCard` | `summary.errors` | `summary.errors.${number}.component` | `summary.errors.${number}.code` | `summary.violations` | `summary.violations.${number}.severity` | `summary.violations.${number}.target.other.name` | `summary.violations.${number}.target.lineItem.name`, 7>>;
}
/** @internal */
declare function getCheckoutUrl$1(httpClient: HttpClient): GetCheckoutUrlSignature;
interface GetCheckoutUrlSignature {
    /**
     * Retrieves the checkout URL for the Cart.
     *
     * By default, this is the standard Wix checkout page.
     * If `custom_checkout_url` is defined, it overrides the default and is returned as the checkout URL.
     * @param - ID of the Cart to calculate.
     */
    (cartId: string, options?: GetCheckoutUrlOptions): Promise<NonNullablePaths<GetCheckoutURLResponse, `checkoutUrl`, 2>>;
}
/** @internal */
declare function completeCheckout$1(httpClient: HttpClient): CompleteCheckoutSignature;
interface CompleteCheckoutSignature {
    /**
     * Completes the checkout process and creates an Order.
     * This endpoint may charge the customer.
     *
     * Read more about the [eCommerce Orders API](https://dev.wix.com/api/rest/wix-ecommerce/orders-api/introduction).
     * @param - Cart ID.
     */
    (cartId: string, options?: CompleteCheckoutOptions): Promise<NonNullablePaths<CompleteCheckoutResponse, `orderId` | `cartCompleted`, 2>>;
}
/** @internal */
declare function addLineItems$1(httpClient: HttpClient): AddLineItemsSignature;
interface AddLineItemsSignature {
    /**
     * Adds line items to the Cart.
     * @param - Cart ID.
     */
    (cartId: string, options?: NonNullablePaths<AddLineItemsOptions, `catalogItems.${number}.catalogReference` | `catalogItems.${number}.quantity` | `catalogItems.${number}.selectedMembership._id` | `catalogItems.${number}.selectedMembership.appId` | `customItems.${number}.attributes.descriptionLines.${number}.name` | `customItems.${number}.name` | `customItems.${number}.pricing` | `customItems.${number}.pricing.price` | `customItems.${number}.quantityInfo` | `customItems.${number}.quantityInfo.requestedQuantity`, 7>): Promise<NonNullablePaths<AddLineItemsResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function removeLineItems$1(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from the Cart.
     * @param - Cart ID.
     * @param - Line item IDs to remove from cart.
     */
    (cartId: string, lineItemIds: string[]): Promise<NonNullablePaths<RemoveLineItemsResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function addDiscount$1(httpClient: HttpClient): AddDiscountSignature;
interface AddDiscountSignature {
    /**
     * Applies a discount to the Cart.
     *
     * Currently only application of coupons is supported.
     * @param - Cart ID.
     * @param - Coupon to apply.
     *
     * Currently only one is supported.
     */
    (cartId: string, couponCode: string): Promise<NonNullablePaths<AddDiscountResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function removeDiscount$1(httpClient: HttpClient): RemoveDiscountSignature;
interface RemoveDiscountSignature {
    /**
     * Removes a discount from the Cart.
     *
     * Currently only removal of coupons is supported.
     * @param - Cart ID.
     * @param - Discount ID.
     */
    (cartId: string, discountId: string): Promise<NonNullablePaths<RemoveDiscountResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function addGiftCard$1(httpClient: HttpClient): AddGiftCardSignature;
interface AddGiftCardSignature {
    /**
     * Adds a gift card to the Cart.
     * Once added, the gift card’s balance will be used as a payment method during checkout, either partially or fully covering the cart total.
     * @param - Cart ID.
     * @param - Gift card code.
     *
     * Currently only one is supported.
     */
    (cartId: string, giftCardCode: string): Promise<NonNullablePaths<AddGiftCardResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function removeGiftCard$1(httpClient: HttpClient): RemoveGiftCardSignature;
interface RemoveGiftCardSignature {
    /**
     * Removes a gift card from the Cart.
     * @param - Cart ID.
     * @param - Gift card ID.
     */
    (cartId: string, giftCardId: string): Promise<NonNullablePaths<RemoveGiftCardResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function updateLineItems$1(httpClient: HttpClient): UpdateLineItemsSignature;
interface UpdateLineItemsSignature {
    /**
     * Updates line items in the Cart.
     * Use this endpoint to update line items properties such as quantity and selected membership.
     * @param - Cart ID.
     */
    (cartId: string, options?: NonNullablePaths<UpdateLineItemsOptions, `lineItemUpdates.${number}.lineItemId` | `lineItemUpdates.${number}.quantityUpdate.quantity`, 5>): Promise<NonNullablePaths<UpdateLineItemsResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function markCartAsCompleted$1(httpClient: HttpClient): MarkCartAsCompletedSignature;
interface MarkCartAsCompletedSignature {
    /**
     * Updates the Cart status to be completed.
     * @param - Cart ID.
     */
    (cartId: string, options?: MarkCartAsCompletedOptions): Promise<NonNullablePaths<MarkCartAsCompletedResponse, `cart._id` | `cart.lineItems` | `cart.lineItems.${number}._id` | `cart.lineItems.${number}.name.original` | `cart.lineItems.${number}.quantityInfo.confirmedQuantity` | `cart.lineItems.${number}.quantityInfo.requestedQuantity` | `cart.lineItems.${number}.quantityInfo.fixedQuantity` | `cart.lineItems.${number}.pricing.unitPrice.amount` | `cart.lineItems.${number}.pricing.unitPrice.convertedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedAmount` | `cart.lineItems.${number}.pricing.unitPrice.formattedConvertedAmount` | `cart.lineItems.${number}.pricing.priceDescription.original` | `cart.lineItems.${number}.pricing.priceUndetermined` | `cart.lineItems.${number}.source.customLineItem` | `cart.lineItems.${number}.source.catalogReference.catalogItemId` | `cart.lineItems.${number}.source.catalogReference.appId` | `cart.lineItems.${number}.attributes.itemType.preset` | `cart.lineItems.${number}.attributes.itemType.custom` | `cart.lineItems.${number}.attributes.physicalProperties.shippable` | `cart.lineItems.${number}.taxConfig.taxableAddress.addressType` | `cart.lineItems.${number}.paymentConfig.savePaymentMethod` | `cart.lineItems.${number}.paymentConfig.selectedMembership._id` | `cart.lineItems.${number}.paymentConfig.selectedMembership.appId` | `cart.lineItems.${number}.paymentConfig.paymentOption` | `cart.lineItems.${number}.status` | `cart.lineItems.${number}.membersOnly` | `cart.discounts` | `cart.discounts.${number}._id` | `cart.discounts.${number}.source.sourceType` | `cart.discounts.${number}.scope` | `cart.discounts.${number}.status` | `cart.source.channelType` | `cart.source.externalReferences` | `cart.source.externalReferences.${number}.appId` | `cart.source.createdBy.visitorId` | `cart.source.createdBy.memberId` | `cart.source.createdBy.userId` | `cart.source.createdBy.appId` | `cart.source.customContentReference.appId` | `cart.source.customContentReference.componentId` | `cart.siteInfo.weightUnit` | `cart.siteInfo.languageCode` | `cart.siteInfo.currencyCode` | `cart.customerInfo.visitorId` | `cart.customerInfo.memberId` | `cart.customerInfo.userId` | `cart.customerInfo.languageCode` | `cart.customerInfo.currencyCode` | `cart.deliveryInfo.address.streetAddress.number` | `cart.deliveryInfo.address.streetAddress.name` | `cart.deliveryInfo.recipient.vatId._id` | `cart.deliveryInfo.recipient.vatId.type` | `cart.deliveryInfo.method.appId` | `cart.deliveryInfo.method.code` | `cart.deliveryInfo.method.pickup` | `cart.taxInfo.pricesIncludeTax` | `cart.paymentInfo.giftCards` | `cart.paymentInfo.giftCards.${number}._id` | `cart.paymentInfo.giftCards.${number}.obfuscatedCode` | `cart.paymentInfo.giftCards.${number}.appId` | `cart.paymentInfo.currencyCode` | `cart.status` | `cart.customSettings.lockGiftCard` | `cart.customSettings.lockCouponCode` | `cart.customSettings.policyAgreementCheckboxDisabled` | `cart.customSettings.manualPaymentDisabled`, 7>>;
}
/** @internal */
declare function handleAsyncCheckoutCompletion$1(httpClient: HttpClient): HandleAsyncCheckoutCompletionSignature;
interface HandleAsyncCheckoutCompletionSignature {
    /**
     * Handles asynchronous checkout completion and redirects to a specified URL.
     *
     * Triggered by Wix Cashier after payment completion, this endpoint finalizes the checkout process and redirects the user to the previously provided success URL.
     * In some cases, this endpoint might be called directly by the external payment provider.
     * @param - Server-signed JWT token with required information to complete checkout
     */
    (token: string): Promise<NonNullablePaths<RawHttpResponse, `body` | `headers` | `headers.${number}.key` | `headers.${number}.value`, 4>>;
}

/** @internal */
declare const createCart: MaybeContext<BuildRESTFunction<typeof createCart$1> & typeof createCart$1>;
/** @internal */
declare const getCart: MaybeContext<BuildRESTFunction<typeof getCart$1> & typeof getCart$1>;
/** @internal */
declare const updateCart: MaybeContext<BuildRESTFunction<typeof updateCart$1> & typeof updateCart$1>;
/** @internal */
declare const deleteCart: MaybeContext<BuildRESTFunction<typeof deleteCart$1> & typeof deleteCart$1>;
/** @internal */
declare const refreshCart: MaybeContext<BuildRESTFunction<typeof refreshCart$1> & typeof refreshCart$1>;
/** @internal */
declare const calculateCart: MaybeContext<BuildRESTFunction<typeof calculateCart$1> & typeof calculateCart$1>;
/** @internal */
declare const getCheckoutUrl: MaybeContext<BuildRESTFunction<typeof getCheckoutUrl$1> & typeof getCheckoutUrl$1>;
/** @internal */
declare const completeCheckout: MaybeContext<BuildRESTFunction<typeof completeCheckout$1> & typeof completeCheckout$1>;
/** @internal */
declare const addLineItems: MaybeContext<BuildRESTFunction<typeof addLineItems$1> & typeof addLineItems$1>;
/** @internal */
declare const removeLineItems: MaybeContext<BuildRESTFunction<typeof removeLineItems$1> & typeof removeLineItems$1>;
/** @internal */
declare const addDiscount: MaybeContext<BuildRESTFunction<typeof addDiscount$1> & typeof addDiscount$1>;
/** @internal */
declare const removeDiscount: MaybeContext<BuildRESTFunction<typeof removeDiscount$1> & typeof removeDiscount$1>;
/** @internal */
declare const addGiftCard: MaybeContext<BuildRESTFunction<typeof addGiftCard$1> & typeof addGiftCard$1>;
/** @internal */
declare const removeGiftCard: MaybeContext<BuildRESTFunction<typeof removeGiftCard$1> & typeof removeGiftCard$1>;
/** @internal */
declare const updateLineItems: MaybeContext<BuildRESTFunction<typeof updateLineItems$1> & typeof updateLineItems$1>;
/** @internal */
declare const markCartAsCompleted: MaybeContext<BuildRESTFunction<typeof markCartAsCompleted$1> & typeof markCartAsCompleted$1>;
/** @internal */
declare const handleAsyncCheckoutCompletion: MaybeContext<BuildRESTFunction<typeof handleAsyncCheckoutCompletion$1> & typeof handleAsyncCheckoutCompletion$1>;

export { AddDiscountResponse, AddGiftCardResponse, AddLineItemsOptions, AddLineItemsResponse, CalculateCartOptions, CalculateCartResponse, Cart, CompleteCheckoutOptions, CompleteCheckoutResponse, CreateCartOptions, GetCheckoutURLResponse, GetCheckoutUrlOptions, MarkCartAsCompletedOptions, MarkCartAsCompletedResponse, RawHttpResponse, RefreshCartResponse, RemoveDiscountResponse, RemoveGiftCardResponse, RemoveLineItemsResponse, UpdateCart, UpdateLineItemsOptions, UpdateLineItemsResponse, addDiscount, addGiftCard, addLineItems, calculateCart, completeCheckout, createCart, deleteCart, getCart, getCheckoutUrl, handleAsyncCheckoutCompletion, markCartAsCompleted, refreshCart, removeDiscount, removeGiftCard, removeLineItems, updateCart, updateLineItems };
