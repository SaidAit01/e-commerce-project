// src/ecom-v2-cart-cart-v-2.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v2-cart-cart-v-2.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTBytesToSDKBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixEcomCartV2CartServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/cart-v2",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v2/carts",
        destPath: "/v2/carts"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/cart-v2",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_cart-v-2";
function createCart(payload) {
  function __createCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cart.createdDate" },
          { path: "cart.updatedDate" },
          {
            path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "cart.lineItems.attributes.image.urlExpirationDate" },
          {
            path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "cart.lineItems.attributes.serviceProperties.scheduledDate" },
          {
            path: "catalogItems.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "customItems.attributes.image.urlExpirationDate" },
          {
            path: "customItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "customItems.attributes.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cart.lineItems.attributes.physicalProperties.weight" },
          { path: "cart.deliveryInfo.address.geocode.latitude" },
          { path: "cart.deliveryInfo.address.geocode.longitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.longitude" },
          {
            path: "catalogItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "customItems.attributes.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.CreateCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCart;
}
function getCart(payload) {
  function __getCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "GET",
      methodFqn: "wix.ecom.cart.v2.CartService.GetCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCart;
}
function updateCart(payload) {
  function __updateCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cart.createdDate" },
          { path: "cart.updatedDate" },
          {
            path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "cart.lineItems.attributes.image.urlExpirationDate" },
          {
            path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "cart.lineItems.attributes.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cart.lineItems.attributes.physicalProperties.weight" },
          { path: "cart.deliveryInfo.address.geocode.latitude" },
          { path: "cart.deliveryInfo.address.geocode.longitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
          { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "PATCH",
      methodFqn: "wix.ecom.cart.v2.CartService.UpdateCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cart.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCart;
}
function deleteCart(payload) {
  function __deleteCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "DELETE",
      methodFqn: "wix.ecom.cart.v2.CartService.DeleteCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteCart;
}
function refreshCart(payload) {
  function __refreshCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.RefreshCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/refresh",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __refreshCart;
}
function calculateCart(payload) {
  function __calculateCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.CalculateCart",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/calculate",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __calculateCart;
}
function getCheckoutUrl(payload) {
  function __getCheckoutUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.GetCheckoutURL",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/get-checkout-url",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __getCheckoutUrl;
}
function completeCheckout(payload) {
  function __completeCheckout({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.CompleteCheckout",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/complete-checkout",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __completeCheckout;
}
function addLineItems(payload) {
  function __addLineItems({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "catalogItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "customItems.attributes.physicalProperties.weight" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          {
            path: "catalogItems.catalogOverrideFields.image.urlExpirationDate"
          },
          { path: "customItems.attributes.image.urlExpirationDate" },
          {
            path: "customItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
          },
          { path: "customItems.attributes.serviceProperties.scheduledDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.AddLineItems",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/add-line-items",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addLineItems;
}
function removeLineItems(payload) {
  function __removeLineItems({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.RemoveLineItems",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/remove-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeLineItems;
}
function addDiscount(payload) {
  function __addDiscount({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.AddDiscount",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/add-discount",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDiscount;
}
function removeDiscount(payload) {
  function __removeDiscount({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.RemoveDiscount",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/remove-discount",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDiscount;
}
function addGiftCard(payload) {
  function __addGiftCard({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.AddGiftCard",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/add-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addGiftCard;
}
function removeGiftCard(payload) {
  function __removeGiftCard({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.RemoveGiftCard",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/remove-gift-card",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeGiftCard;
}
function updateLineItems(payload) {
  function __updateLineItems({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.UpdateLineItems",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/update-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateLineItems;
}
function markCartAsCompleted(payload) {
  function __markCartAsCompleted({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.MarkCartAsCompleted",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/{cartId}/mark-cart-as-completed",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            {
              path: "cart.lineItems.source.catalogOverrideFields.image.urlExpirationDate"
            },
            { path: "cart.lineItems.attributes.image.urlExpirationDate" },
            {
              path: "cart.lineItems.attributes.subscriptionInfo.subscriptionSettings.startDate"
            },
            {
              path: "cart.lineItems.attributes.serviceProperties.scheduledDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "cart.lineItems.source.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.lineItems.attributes.physicalProperties.weight" },
            { path: "cart.deliveryInfo.address.geocode.latitude" },
            { path: "cart.deliveryInfo.address.geocode.longitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.latitude" },
            { path: "cart.paymentInfo.billingAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __markCartAsCompleted;
}
function handleAsyncCheckoutCompletion(payload) {
  function __handleAsyncCheckoutCompletion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v2.cart",
      method: "POST",
      methodFqn: "wix.ecom.cart.v2.CartService.HandleAsyncCheckoutCompletion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCartV2CartServiceUrl({
        protoPath: "/v2/carts/handle-async-checkout-completion",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __handleAsyncCheckoutCompletion;
}

// src/ecom-v2-cart-cart-v-2.universal.ts
import { transformSDKAddressToRESTAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformSDKPageURLV2ToRESTPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformRESTPageURLV2ToSDKPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var ItemStatus = /* @__PURE__ */ ((ItemStatus2) => {
  ItemStatus2["UNKNOWN_ITEM_STATUS"] = "UNKNOWN_ITEM_STATUS";
  ItemStatus2["AVAILABLE"] = "AVAILABLE";
  ItemStatus2["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
  ItemStatus2["OUT_OF_STOCK"] = "OUT_OF_STOCK";
  ItemStatus2["NOT_EXISTS"] = "NOT_EXISTS";
  return ItemStatus2;
})(ItemStatus || {});
var DiscountSourceType = /* @__PURE__ */ ((DiscountSourceType2) => {
  DiscountSourceType2["UNKNOWN_DISCOUNT_SOURCE_TYPE"] = "UNKNOWN_DISCOUNT_SOURCE_TYPE";
  DiscountSourceType2["AUTOMATIC_RULE"] = "AUTOMATIC_RULE";
  DiscountSourceType2["COUPON"] = "COUPON";
  return DiscountSourceType2;
})(DiscountSourceType || {});
var DiscountScope = /* @__PURE__ */ ((DiscountScope2) => {
  DiscountScope2["UNKNOWN_DISCOUNT_SCOPE"] = "UNKNOWN_DISCOUNT_SCOPE";
  DiscountScope2["CART_SUBTOTAL"] = "CART_SUBTOTAL";
  DiscountScope2["LINE_ITEM"] = "LINE_ITEM";
  DiscountScope2["DELIVERY"] = "DELIVERY";
  return DiscountScope2;
})(DiscountScope || {});
var DiscountStatus = /* @__PURE__ */ ((DiscountStatus2) => {
  DiscountStatus2["UNKNOWN_DISCOUNT_STATUS"] = "UNKNOWN_DISCOUNT_STATUS";
  DiscountStatus2["ACTIVE"] = "ACTIVE";
  DiscountStatus2["EXPIRED"] = "EXPIRED";
  DiscountStatus2["DELETED"] = "DELETED";
  DiscountStatus2["MAX_USAGE_REACHED"] = "MAX_USAGE_REACHED";
  return DiscountStatus2;
})(DiscountStatus || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var CartStatus = /* @__PURE__ */ ((CartStatus2) => {
  CartStatus2["CREATED"] = "CREATED";
  CartStatus2["CHECKOUT_COMPLETED"] = "CHECKOUT_COMPLETED";
  return CartStatus2;
})(CartStatus || {});
var CalculationComponent = /* @__PURE__ */ ((CalculationComponent2) => {
  CalculationComponent2["UNKNOWN_CALCULATION_COMPONENT"] = "UNKNOWN_CALCULATION_COMPONENT";
  CalculationComponent2["DISCOUNTS"] = "DISCOUNTS";
  CalculationComponent2["DELIVERY"] = "DELIVERY";
  CalculationComponent2["TAX"] = "TAX";
  CalculationComponent2["MEMBERSHIPS"] = "MEMBERSHIPS";
  CalculationComponent2["GIFT_CARDS"] = "GIFT_CARDS";
  return CalculationComponent2;
})(CalculationComponent || {});
var ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {
  ErrorCode2["UNKNOWN_ERROR_CODE"] = "UNKNOWN_ERROR_CODE";
  return ErrorCode2;
})(ErrorCode || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var Severity = /* @__PURE__ */ ((Severity2) => {
  Severity2["WARNING"] = "WARNING";
  Severity2["ERROR"] = "ERROR";
  return Severity2;
})(Severity || {});
var NameInOther = /* @__PURE__ */ ((NameInOther2) => {
  NameInOther2["OTHER_DEFAULT"] = "OTHER_DEFAULT";
  return NameInOther2;
})(NameInOther || {});
var NameInLineItem = /* @__PURE__ */ ((NameInLineItem2) => {
  NameInLineItem2["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
  return NameInLineItem2;
})(NameInLineItem || {});
var SuggestedFix = /* @__PURE__ */ ((SuggestedFix2) => {
  SuggestedFix2["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
  SuggestedFix2["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
  return SuggestedFix2;
})(SuggestedFix || {});
var ValidationsConfig = /* @__PURE__ */ ((ValidationsConfig2) => {
  ValidationsConfig2["UNKNOWN_VALIDATIONS_CONFIG"] = "UNKNOWN_VALIDATIONS_CONFIG";
  ValidationsConfig2["SKIP_VALIDATIONS"] = "SKIP_VALIDATIONS";
  ValidationsConfig2["PRE_CHECKOUT_VALIDATIONS"] = "PRE_CHECKOUT_VALIDATIONS";
  ValidationsConfig2["CHECKOUT_VALIDATIONS"] = "CHECKOUT_VALIDATIONS";
  return ValidationsConfig2;
})(ValidationsConfig || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      cart: options?.cart,
      catalogItems: options?.catalogItems,
      customItems: options?.customItems,
      couponCodes: options?.couponCodes,
      giftCardCodes: options?.giftCardCodes
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "cart.lineItems.source.catalogOverrideFields.image" },
          { path: "cart.lineItems.attributes.image" },
          { path: "catalogItems.catalogOverrideFields.image" },
          { path: "customItems.attributes.image" }
        ]
      },
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "cart.lineItems.attributes.url" },
          { path: "customItems.attributes.url" }
        ]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          { path: "cart.deliveryInfo.address" },
          { path: "cart.paymentInfo.billingAddress" }
        ]
      }
    ]
  );
  const reqOpts = createCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cart: "$[0].cart",
          catalogItems: "$[0].catalogItems",
          customItems: "$[0].customItems",
          couponCodes: "$[0].couponCodes",
          giftCardCodes: "$[0].giftCardCodes"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCart2(cartId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ cartId });
  const reqOpts = getCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["cartId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCart2(_id, cart) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({ cart: { ...cart, id: _id } }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "cart.lineItems.source.catalogOverrideFields.image" },
          { path: "cart.lineItems.attributes.image" }
        ]
      },
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "cart.lineItems.attributes.url" }]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [
          { path: "cart.deliveryInfo.address" },
          { path: "cart.paymentInfo.billingAddress" }
        ]
      }
    ]
  );
  const reqOpts = updateCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { cart: "$[1]" },
        explicitPathsToArguments: { "cart.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "cart"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCart2(cartId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ cartId });
  const reqOpts = deleteCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["cartId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function refreshCart2(cartId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ cartId });
  const reqOpts = refreshCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["cartId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function calculateCart2(cartId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    validationsConfig: options?.validationsConfig,
    customCalculationConfig: options?.customCalculationConfig
  });
  const reqOpts = calculateCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartId: "$[0]",
          validationsConfig: "$[1].validationsConfig",
          customCalculationConfig: "$[1].customCalculationConfig"
        },
        singleArgumentUnchanged: false
      },
      ["cartId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCheckoutUrl2(cartId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    currencyCode: options?.currencyCode
  });
  const reqOpts = getCheckoutUrl(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartId: "$[0]",
          currencyCode: "$[1].currencyCode"
        },
        singleArgumentUnchanged: false
      },
      ["cartId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function completeCheckout2(cartId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    pricingToken: options?.pricingToken,
    redirectUrls: options?.redirectUrls,
    savePaymentMethod: options?.savePaymentMethod,
    delayCapture: options?.delayCapture
  });
  const reqOpts = completeCheckout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartId: "$[0]",
          pricingToken: "$[1].pricingToken",
          redirectUrls: "$[1].redirectUrls",
          savePaymentMethod: "$[1].savePaymentMethod",
          delayCapture: "$[1].delayCapture"
        },
        singleArgumentUnchanged: false
      },
      ["cartId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addLineItems2(cartId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      cartId,
      catalogItems: options?.catalogItems,
      customItems: options?.customItems
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "catalogItems.catalogOverrideFields.image" },
          { path: "customItems.attributes.image" }
        ]
      },
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "customItems.attributes.url" }]
      }
    ]
  );
  const reqOpts = addLineItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartId: "$[0]",
          catalogItems: "$[1].catalogItems",
          customItems: "$[1].customItems"
        },
        singleArgumentUnchanged: false
      },
      ["cartId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeLineItems2(cartId, lineItemIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    lineItemIds
  });
  const reqOpts = removeLineItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]", lineItemIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["cartId", "lineItemIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addDiscount2(cartId, couponCode) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    couponCode
  });
  const reqOpts = addDiscount(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]", couponCode: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["cartId", "couponCode"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDiscount2(cartId, discountId) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    discountId
  });
  const reqOpts = removeDiscount(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]", discountId: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["cartId", "discountId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addGiftCard2(cartId, giftCardCode) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    giftCardCode
  });
  const reqOpts = addGiftCard(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]", giftCardCode: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["cartId", "giftCardCode"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeGiftCard2(cartId, giftCardId) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    giftCardId
  });
  const reqOpts = removeGiftCard(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]", giftCardId: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["cartId", "giftCardId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateLineItems2(cartId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    lineItemUpdates: options?.lineItemUpdates
  });
  const reqOpts = updateLineItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartId: "$[0]",
          lineItemUpdates: "$[1].lineItemUpdates"
        },
        singleArgumentUnchanged: false
      },
      ["cartId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function markCartAsCompleted2(cartId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cartId,
    orderId: options?.orderId
  });
  const reqOpts = markCartAsCompleted(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.source.catalogOverrideFields.image" },
            { path: "cart.lineItems.attributes.image" }
          ]
        },
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.attributes.url" }]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.deliveryInfo.address" },
            { path: "cart.paymentInfo.billingAddress" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cartId: "$[0]", orderId: "$[1].orderId" },
        singleArgumentUnchanged: false
      },
      ["cartId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function handleAsyncCheckoutCompletion2(token) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ token });
  const reqOpts = handleAsyncCheckoutCompletion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { token: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["token"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  CalculationComponent,
  CartStatus,
  ChannelType,
  DescriptionLineType,
  DiscountScope,
  DiscountSourceType,
  DiscountStatus,
  ErrorCode,
  FileType,
  ItemStatus,
  ItemTypeItemType,
  NameInLineItem,
  NameInOther,
  PaymentOptionType,
  RuleType,
  Severity,
  SubscriptionFrequency,
  SuggestedFix,
  TaxableAddressType,
  ValidationsConfig,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addDiscount2 as addDiscount,
  addGiftCard2 as addGiftCard,
  addLineItems2 as addLineItems,
  calculateCart2 as calculateCart,
  completeCheckout2 as completeCheckout,
  createCart2 as createCart,
  deleteCart2 as deleteCart,
  getCart2 as getCart,
  getCheckoutUrl2 as getCheckoutUrl,
  handleAsyncCheckoutCompletion2 as handleAsyncCheckoutCompletion,
  markCartAsCompleted2 as markCartAsCompleted,
  refreshCart2 as refreshCart,
  removeDiscount2 as removeDiscount,
  removeGiftCard2 as removeGiftCard,
  removeLineItems2 as removeLineItems,
  updateCart2 as updateCart,
  updateLineItems2 as updateLineItems
};
//# sourceMappingURL=index.typings.mjs.map