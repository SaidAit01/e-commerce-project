import { CreateCartRequest as CreateCartRequest$1, CreateCartResponse as CreateCartResponse$1, GetCartRequest as GetCartRequest$1, GetCartResponse as GetCartResponse$1, UpdateCartRequest as UpdateCartRequest$1, UpdateCartResponse as UpdateCartResponse$1, DeleteCartRequest as DeleteCartRequest$1, DeleteCartResponse as DeleteCartResponse$1, RefreshCartRequest as RefreshCartRequest$1, RefreshCartResponse as RefreshCartResponse$1, CalculateCartRequest as CalculateCartRequest$1, CalculateCartResponse as CalculateCartResponse$1, GetCheckoutURLRequest as GetCheckoutURLRequest$1, GetCheckoutURLResponse as GetCheckoutURLResponse$1, CompleteCheckoutRequest as CompleteCheckoutRequest$1, CompleteCheckoutResponse as CompleteCheckoutResponse$1, AddLineItemsRequest as AddLineItemsRequest$1, AddLineItemsResponse as AddLineItemsResponse$1, RemoveLineItemsRequest as RemoveLineItemsRequest$1, RemoveLineItemsResponse as RemoveLineItemsResponse$1, AddDiscountRequest as AddDiscountRequest$1, AddDiscountResponse as AddDiscountResponse$1, RemoveDiscountRequest as RemoveDiscountRequest$1, RemoveDiscountResponse as RemoveDiscountResponse$1, AddGiftCardRequest as AddGiftCardRequest$1, AddGiftCardResponse as AddGiftCardResponse$1, RemoveGiftCardRequest as RemoveGiftCardRequest$1, RemoveGiftCardResponse as RemoveGiftCardResponse$1, UpdateLineItemsRequest as UpdateLineItemsRequest$1, UpdateLineItemsResponse as UpdateLineItemsResponse$1, MarkCartAsCompletedRequest as MarkCartAsCompletedRequest$1, MarkCartAsCompletedResponse as MarkCartAsCompletedResponse$1, HandleAsyncCheckoutCompletionRequest as HandleAsyncCheckoutCompletionRequest$1, RawHttpResponse as RawHttpResponse$1 } from './index.mjs';

interface Cart {
    /**
     * Cart ID.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * Date and time the Cart was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the Cart was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Revision number, which increments by 1 each time the Cart is updated.
     * @readonly
     */
    revision?: string | null;
    /**
     * Custom fields.
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Line items added to the Cart by the customer.
     * This list may include both valid items (in stock) and invalid ones (e.g., out of stock).
     * When submitting an order, only valid items will be included in the order.
     * @maxSize 300
     * @readonly
     */
    lineItems?: V2LineItem[];
    /**
     * The discounts of the Cart.
     * Automatic discounts are removed from the Cart entirely when they are no longer valid.
     * Coupon discounts are not removed from the Cart, but are marked as invalid.
     * @maxSize 100
     * @readonly
     */
    discounts?: Discount[];
    /** Information about the source of the Cart, detailing the origin or context in which the Cart was created. */
    source?: CartSource;
    /** Information about the site from which the Cart's line items were added. */
    siteInfo?: SiteInfo;
    /** Information about the customer that owns the Cart. */
    customerInfo?: CustomerInfo;
    /** Delivery-related information associated with the Cart. */
    deliveryInfo?: DeliveryInfo;
    /** Tax-related information associated with the Cart. */
    taxInfo?: TaxInfo;
    /** Payment-related information associated with the Cart. */
    paymentInfo?: PaymentInfo;
    /**
     * The estimated costs that the customer will pay.
     * @readonly
     */
    pricingInfo?: PricingInfo;
    /**
     * The current status of the Cart.
     * @readonly
     */
    status?: CartStatusWithLiterals;
    /**
     * Additional Cart settings.
     *
     * > **Notes:**
     * > * Custom settings can only be set when creating a Cart.
     * > * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions". Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     * @immutable
     */
    customSettings?: CustomSettings;
    /**
     * Custom checkout URL to redirect the customer to a checkout page.
     * By default, customers are redirected to the standard Wix checkout page.
     * Clients can override this behavior by providing their own URL here.
     * If the URL contains the placeholder `{checkout_id}`, it will be replaced with the actual Cart ID.
     * @maxLength 2048
     */
    customCheckoutUrl?: string | null;
    /**
     * The ID of the Order created from the Cart.
     * This field is empty until the checkout process is completed.
     * @format GUID
     * @readonly
     */
    orderId?: string | null;
    /**
     * Persistent ID that correlates between the Cart and the created Order (after the checkout is completed).
     * @format GUID
     * @readonly
     */
    purchaseFlowId?: string | null;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface V2LineItem {
    /**
     * A unique identifier of the line item within the Cart.
     * @format GUID
     */
    id?: string;
    /** The name of the line item. */
    name?: TranslatableString;
    /** Quantity-related information about the line item. */
    quantityInfo?: ItemQuantityInfo;
    /** Pricing-related information about the line item. */
    pricing?: ItemPricingInfo;
    /** Information about the origin of the line item. */
    source?: ItemSource;
    /** Details about the item for display purposes. */
    attributes?: ItemAttributes;
    /** Delivery-related information about the line item. */
    deliveryConfig?: ItemDeliveryConfig;
    /** Tax-related information about the line item. */
    taxConfig?: ItemTaxConfig;
    /** Payment-related information about the line item. */
    paymentConfig?: ItemPaymentConfig;
    /** The availability status of the line item according to the inventory. */
    status?: ItemStatusWithLiterals;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Additional Fees to be added to this item calculation.
     * @maxSize 5
     */
    additionalFees?: AdditionalFee[];
    /**
     * Modifier groups that were added to the item.
     * @maxSize 25
     */
    modifierGroups?: ModifierGroup[];
    /**
     * Whether the item can only be purchased by site members.
     * Default: `false`
     */
    membersOnly?: boolean;
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface ItemQuantityInfo {
    /**
     * The final confirmed quantity of items to be purchased.
     * This value is the minimum between the requested quantity and the available quantity.
     * @min 1
     * @max 100000
     */
    confirmedQuantity?: number;
    /**
     * The amount of items originally requested by the customer.
     * @min 1
     * @max 100000
     */
    requestedQuantity?: number;
    /** The maximum quantity of items available for purchase. */
    availableQuantity?: number | null;
    /** Whether the line item quantity is fixed and cannot be changed. */
    fixedQuantity?: boolean;
}
interface ItemPricingInfo {
    /**
     * Final unit price after applying automatic discounts.
     * Includes tax if `tax_info.prices_include_tax` is true.
     */
    unitPrice?: MultiCurrencyPrice;
    /**
     * Final total price for this item (unit price Ã— quantity).
     * Includes tax if `tax_info.prices_include_tax` is true.
     */
    totalPrice?: MultiCurrencyPrice;
    /**
     * Additional description for the price.
     * For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     */
    priceDescription?: PriceDescription;
    /** Indicates whether the price is not yet defined, and will be updated after the order is created. */
    priceUndetermined?: boolean;
    /** Detailed breakdown of price components. */
    breakdown?: ItemPriceBreakdown;
}
interface MultiCurrencyPrice {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface PriceDescription {
    /**
     * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 100
     */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 100
     */
    translated?: string | null;
}
interface ItemPriceBreakdown {
    /**
     * Full catalog price of a single item before any discounts, including modifiers.
     * Includes tax if `tax_info.prices_include_tax` is true.
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Catalog sale price of a single item, including modifiers.
     * Includes tax if `tax_info.prices_include_tax` is true.
     */
    salePrice?: MultiCurrencyPrice;
    /**
     * Total price of all item modifiers for the entire quantity of this item.
     * Includes tax if `tax_info.prices_include_tax` is true.
     */
    totalModifiersPrice?: MultiCurrencyPrice;
    /** Total automatic discount applied to the entire quantity of this item. */
    totalDiscount?: MultiCurrencyPrice;
}
interface ItemSource {
    /**
     * Whether the line item is a custom line item.
     * Custom line items don't trigger the Catalog service plugin.
     */
    customLineItem?: boolean;
    /**
     * Catalog and item reference.
     * Holds IDs for the item and the catalog it came from, as well as further optional info.
     * Optional for custom line items, which don't trigger the Catalog service plugin.
     */
    catalogReference?: CatalogReference;
    /**
     * Overriding values for catalog item properties.
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * ID of the app managing the inventory.
     * @format GUID
     */
    inventoryAppId?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface CatalogOverrideFields {
    /** The name of the line item. */
    name?: TranslatableString;
    /**
     * The sale price of a single item after modifiers but before automatic discount.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    salePrice?: string | null;
    /**
     * The full price of a single item after modifiers but before automatic discount.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    fullPrice?: string | null;
    /**
     * Item description lines.
     * Used when displaying the line item to buyers.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: Image;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /**
     * Partial payment to be paid upfront during the checkout.
     * Only eligible for catalog items with `lineItem.paymentOption.value` type of `DEPOSIT_ONLINE`.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /**
     * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 100
     */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 200
     */
    translated?: string | null;
}
interface PlainTextValue {
    /**
     * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 600
     */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 600
     */
    translated?: string | null;
}
interface Color {
    /**
     * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 500
     */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 500
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface Image {
    /**
     * WixMedia image ID.
     * @maxLength 400
     */
    id?: string;
    /**
     * Image URL.
     * @format WEB_URL
     */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /**
     * Image alt text.
     * @maxLength 200
     */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     * @maxLength 200
     */
    filename?: string | null;
}
interface PaymentOption {
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    value?: PaymentOptionTypeWithLiterals;
}
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE",
    /**
     * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.
     * @documentationMaturity preview
     */
    MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"
}
/** @enumType */
type PaymentOptionTypeWithLiterals = PaymentOptionType | 'FULL_PAYMENT_ONLINE' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP' | 'DEPOSIT_ONLINE' | 'MEMBERSHIP_OFFLINE' | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';
interface ItemAttributes {
    /**
     * Description lines of the item.
     * @maxSize 100
     */
    descriptionLines?: DescriptionLine[];
    /** The image of the item. */
    image?: Image;
    /** URL to the item's page on the site. */
    url?: PageUrlV2;
    /**
     * Policies to be displayed to the buyer on the checkout page.
     * @maxSize 5
     */
    policies?: Policy[];
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Physical properties of the item.
     * When relevant, contains information such as SKU, item weight, and shippability.
     */
    physicalProperties?: PhysicalProperties;
    /** Subscription option information. */
    subscriptionInfo?: SubscriptionOptionInfo;
    /** Service properties. When relevant, this contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
}
interface PageUrlV2 {
    /**
     * The relative path for the page within the site. For example, `/product-page/a-product`.
     * @maxLength 200
     */
    relativePath?: string;
    /**
     * The page's full URL. For example, `https://mysite.com/product-page/a-product`.
     * @format WEB_URL
     */
    url?: string | null;
}
interface Policy {
    /**
     * Policy title - should be translated
     * @minLength 1
     * @maxLength 29
     */
    title?: string | null;
    /**
     * Policy content - should be translated
     * @minLength 1
     * @maxLength 3000
     */
    content?: string;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** @enumType */
type ItemTypeItemTypeWithLiterals = ItemTypeItemType | 'UNRECOGNISED' | 'PHYSICAL' | 'DIGITAL' | 'GIFT_CARD' | 'SERVICE';
interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     * @min 1
     * @max 3650
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`.
     * @min 1
     */
    billingCycles?: number | null;
    /** Whether to allow the customer to cancel the subscription.. */
    enableCustomerCancellation?: boolean;
    /**
     * Period until first cycle starts. If applied payNow will be 0
     * If None => no free trial
     */
    freeTrialPeriod?: FreeTrialPeriod;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface FreeTrialPeriod {
    /** Frequency of period. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * interval of period
     * @min 1
     * @max 999
     */
    interval?: number;
}
interface Title {
    /**
     * Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 150
     */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 150
     */
    translated?: string | null;
}
interface Description {
    /**
     * Subscription option description.
     * @maxLength 500
     */
    original?: string;
    /**
     * Translated subscription option description.
     * @maxLength 500
     */
    translated?: string | null;
}
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /**
     * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.
     * @min 1
     * @max 10000
     */
    numberOfParticipants?: number | null;
}
interface ItemDeliveryConfig {
    /**
     * Delivery profile ID.
     * @format GUID
     */
    deliveryProfileId?: string | null;
    /**
     * An optional custom fulfiller's ID.
     * @format GUID
     */
    fulfillerId?: string | null;
}
interface ItemTaxConfig {
    /** Address to use for tax calculation purposes. */
    taxableAddress?: TaxableAddress;
    /**
     * Tax group ID for this line item.
     * @maxLength 50
     */
    taxGroupId?: string | null;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type TaxableAddressTypeWithLiterals = TaxableAddressType | 'UNKNOWN_TAXABLE_ADDRESS' | 'BUSINESS' | 'BILLING' | 'SHIPPING';
interface ItemPaymentConfig {
    /**
     * Whether to save the payment method on the order.
     * Default: `false`
     */
    savePaymentMethod?: boolean;
    /**
     * Item payment policy that requires buyer consent to complete purchase.
     * The payment policy will be displayed on the checkout page.
     * @minLength 1
     * @maxLength 2500
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Partial payment to be paid upfront during the checkout.
     * Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     */
    depositAmount?: MultiCurrencyPrice;
    /**
     * Selected membership to be used as payment for this item.
     * Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`.
     * This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`.
     */
    selectedMembership?: V2SelectedMembership;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
}
interface V2SelectedMembership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    id?: string;
    /**
     * ID of the app providing this payment option.
     * @format GUID
     */
    appId?: string;
}
declare enum ItemStatus {
    UNKNOWN_ITEM_STATUS = "UNKNOWN_ITEM_STATUS",
    /** The item is available in the requested quantity. */
    AVAILABLE = "AVAILABLE",
    /** Only part of the requested quantity is available. */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE",
    /** The item is out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** The item is no longer exists in the catalog. */
    NOT_EXISTS = "NOT_EXISTS"
}
/** @enumType */
type ItemStatusWithLiterals = ItemStatus | 'UNKNOWN_ITEM_STATUS' | 'AVAILABLE' | 'PARTIALLY_AVAILABLE' | 'OUT_OF_STOCK' | 'NOT_EXISTS';
interface AdditionalFee {
    /**
     * Additional fee's unique code or ID.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Additional fee's name.
     *
     * Max: 50 characters
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Total additional fees. This `price` does not include any taxes that may apply to these additional fees.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:2 }
     */
    price?: string;
    /**
     * Tax details.
     *
     * > **Note:** Tax is not calculated in the returned `price` even when `taxDetails.taxable` is `true`.
     */
    taxDetails?: TaxDetails;
}
/** Tax details. */
interface TaxDetails {
    /** Whether additional fee is taxable. */
    taxable?: boolean;
    /**
     * Reserved for internal use.
     * @format GUID
     */
    taxGroupId?: string | null;
}
interface ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 25
     */
    modifiers?: ItemModifier[];
}
interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /** The price of the modifier. */
    price?: MultiCurrencyPrice;
}
interface Discount {
    /**
     * A unique identifier of the discount within the Cart.
     * @format GUID
     */
    id?: string;
    /** The display name of the discount. */
    name?: TranslatableString;
    /** The source of the discount, indicating how it was applied. */
    source?: DiscountSource;
    /** The component in the Cart that the discount applies to. */
    scope?: DiscountScopeWithLiterals;
    /**
     * List of benefits provided by the discount.
     * @minSize 1
     * @maxSize 100
     */
    benefits?: DiscountBenefit[];
    /**
     * The current status of the discount.
     * TODO: remodel.
     */
    status?: DiscountStatusWithLiterals;
    /**
     * Number of subscription cycles this discount applies to.
     * If unset, the discount applies to all billing cycles.
     * @min 1
     * @max 1000
     */
    subscriptionCycles?: number | null;
}
interface DiscountSource {
    /** The type of the discount source. */
    sourceType?: DiscountSourceTypeWithLiterals;
    /**
     * Coupon code that triggered the discount.
     * Relevant for coupon discounts only.
     * @maxLength 50
     */
    couponCode?: string | null;
}
declare enum DiscountSourceType {
    UNKNOWN_DISCOUNT_SOURCE_TYPE = "UNKNOWN_DISCOUNT_SOURCE_TYPE",
    /** The discount was applied automatically by a rule. */
    AUTOMATIC_RULE = "AUTOMATIC_RULE",
    /** The discount was applied by a coupon code. */
    COUPON = "COUPON"
}
/** @enumType */
type DiscountSourceTypeWithLiterals = DiscountSourceType | 'UNKNOWN_DISCOUNT_SOURCE_TYPE' | 'AUTOMATIC_RULE' | 'COUPON';
declare enum DiscountScope {
    UNKNOWN_DISCOUNT_SCOPE = "UNKNOWN_DISCOUNT_SCOPE",
    /** The discount applies to the cart's subtotal. */
    CART_SUBTOTAL = "CART_SUBTOTAL",
    /** The discount applies to a specific line item. */
    LINE_ITEM = "LINE_ITEM",
    /** The discount applies to the delivery price. */
    DELIVERY = "DELIVERY"
}
/** @enumType */
type DiscountScopeWithLiterals = DiscountScope | 'UNKNOWN_DISCOUNT_SCOPE' | 'CART_SUBTOTAL' | 'LINE_ITEM' | 'DELIVERY';
interface DiscountBenefit extends DiscountBenefitValueOneOf {
    /** A specific monetary value deducted from the total cost. */
    amountOff?: MultiCurrencyPrice;
    /**
     * The ID of line item that the discount applies to.
     * Relevant for item-level discounts only.
     * @format GUID
     */
    lineItemId?: string | null;
}
/** @oneof */
interface DiscountBenefitValueOneOf {
    /** A specific monetary value deducted from the total cost. */
    amountOff?: MultiCurrencyPrice;
}
declare enum DiscountStatus {
    UNKNOWN_DISCOUNT_STATUS = "UNKNOWN_DISCOUNT_STATUS",
    /** The discount is active and valid. */
    ACTIVE = "ACTIVE",
    /** The discount has expired. */
    EXPIRED = "EXPIRED",
    /** The discount was deleted from the system. */
    DELETED = "DELETED",
    /** The discount reached the maximum number of uses. */
    MAX_USAGE_REACHED = "MAX_USAGE_REACHED"
}
/** @enumType */
type DiscountStatusWithLiterals = DiscountStatus | 'UNKNOWN_DISCOUNT_STATUS' | 'ACTIVE' | 'EXPIRED' | 'DELETED' | 'MAX_USAGE_REACHED';
interface CartSource {
    /**
     * Sales channel that created the Cart.
     * @immutable
     */
    channelType?: ChannelTypeWithLiterals;
    /**
     * References to an external app and resource associated with this Cart.
     * Used for integration and tracking across different platforms.
     * @maxSize 10
     * @immutable
     */
    externalReferences?: ExternalReference[];
    /**
     * ID of the entity that created the Cart.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM",
    /** PayPal Agentic Checkout sales channel. */
    PAYPAL_AGENTIC_CHECKOUT = "PAYPAL_AGENTIC_CHECKOUT"
}
/** @enumType */
type ChannelTypeWithLiterals = ChannelType | 'UNSPECIFIED' | 'WEB' | 'POS' | 'EBAY' | 'AMAZON' | 'OTHER_PLATFORM' | 'WIX_APP_STORE' | 'WIX_INVOICES' | 'BACKOFFICE_MERCHANT' | 'WISH' | 'CLASS_PASS' | 'GLOBAL_E' | 'FACEBOOK' | 'ETSY' | 'TIKTOK' | 'FAIRE_COM' | 'PAYPAL_AGENTIC_CHECKOUT';
interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     * @format GUID
     * @immutable
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    resourceId?: string | null;
}
interface CreatedBy extends CreatedByIdOneOf {
    /**
     * Site visitor ID (if site visitor is **not** a member).
     * @format GUID
     * @readonly
     */
    visitorId?: string;
    /**
     * Site member ID.
     * @format GUID
     * @readonly
     */
    memberId?: string;
    /**
     * Wix user ID - when the Cart was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * App ID - when the Cart was created by an external application or Wix service.
     * @format GUID
     */
    appId?: string;
}
/** @oneof */
interface CreatedByIdOneOf {
    /**
     * Site visitor ID (if site visitor is **not** a member).
     * @format GUID
     * @readonly
     */
    visitorId?: string;
    /**
     * Site member ID.
     * @format GUID
     * @readonly
     */
    memberId?: string;
    /**
     * Wix user ID - when the Cart was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     * @format GUID
     */
    userId?: string;
    /**
     * App ID - when the Cart was created by an external application or Wix service.
     * @format GUID
     */
    appId?: string;
}
interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     * @format GUID
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     * @format GUID
     */
    componentId?: string;
}
interface SiteInfo {
    /**
     * The ID of the business location associated with the cart.
     * Learn more about the [Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     * @format GUID
     */
    businessLocationId?: string | null;
    /**
     * The businessâ€™s unit of weight measurement (e.g., KG, LB).
     * @readonly
     */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * The businessâ€™s default language, represented as a two-letter ISO 639-1 code.
     * @format LANGUAGE
     * @readonly
     */
    languageCode?: string;
    /**
     * The businessâ€™s default currency, represented as a three-letter ISO 4217 code.
     * @format CURRENCY
     * @readonly
     */
    currencyCode?: string;
}
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface CustomerInfo extends CustomerInfoIdOneOf {
    /**
     * Site visitor ID (if site visitor is **not** a member).
     * @format GUID
     * @readonly
     */
    visitorId?: string;
    /**
     * Site member ID.
     * @format GUID
     * @readonly
     */
    memberId?: string;
    /**
     * Wix user ID - when the Cart was created by a Wix user on behalf of a customer.
     * For example, via POS (point of service).
     * @format GUID
     * @readonly
     */
    userId?: string;
    /**
     * The Contact ID of the customer.
     * Created automatically if one does not yet exist.
     * For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @format GUID
     * @readonly
     */
    contactId?: string | null;
    /**
     * The customer's email address.
     * @format EMAIL
     */
    email?: string | null;
    /**
     * The customer's language, represented as a two-letter ISO 639-1 code.
     * Resolved automatically from the request metadata ('x-wix-linguist' header).
     * @format LANGUAGE
     * @readonly
     */
    languageCode?: string;
    /**
     * The customerâ€™s currency, represented as a three-letter ISO 4217 code.
     * Resolved automatically from the request metadata ('x-wix-currency' header).
     * @format CURRENCY
     * @readonly
     */
    currencyCode?: string;
    /**
     * The [buyer note](https://support.wix.com/en/article/wix-stores-viewing-customer-notes) left by the customer.
     * @maxLength 1000
     */
    buyerNote?: string | null;
}
/** @oneof */
interface CustomerInfoIdOneOf {
    /**
     * Site visitor ID (if site visitor is **not** a member).
     * @format GUID
     * @readonly
     */
    visitorId?: string;
    /**
     * Site member ID.
     * @format GUID
     * @readonly
     */
    memberId?: string;
    /**
     * Wix user ID - when the Cart was created by a Wix user on behalf of a customer.
     * For example, via POS (point of service).
     * @format GUID
     * @readonly
     */
    userId?: string;
}
interface DeliveryInfo {
    /** The delivery address. */
    address?: Address;
    /** The delivery recipient. */
    recipient?: FullAddressContactDetails;
    /** The selected delivery method by the customer. */
    method?: DeliveryMethod;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatTypeWithLiterals;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
/** @enumType */
type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';
interface DeliveryMethod {
    /**
     * The carrier app id
     * @format GUID
     */
    appId?: string;
    /**
     * Unique code that acts as an ID for a shipping rate.
     * For example, `"usps_std_overnight"`.
     * @maxLength 250
     */
    code?: string;
    /**
     * Delivery rate title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"`, or `"First-Class Package International"`.
     * @readonly
     */
    title?: TranslatableString;
    /**
     * Whether the delivery method is a pickup option.
     * @readonly
     */
    pickup?: boolean;
}
interface TaxInfo {
    /**
     * Indicates whether tax is already included in prices (line items, discounts, delivery, additional fess).
     * @readonly
     */
    pricesIncludeTax?: boolean;
}
interface PaymentInfo {
    /**
     * A list of gift cards to pay with.
     * Currently only one gift card is supported.
     * @readonly
     * @maxSize 1
     */
    giftCards?: GiftCard[];
    /**
     * The currency to pay with, represented as a three-letter ISO 4217 code.
     * @format CURRENCY
     * @readonly
     */
    currencyCode?: string;
    /** Billing address. */
    billingAddress?: Address;
    /** Full contact details for billing. */
    billingContact?: FullAddressContactDetails;
}
interface GiftCard {
    /**
     * A unique identifier of the gift card within the Cart.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * A partially hidden version of the actual gift card code
     * @maxLength 50
     * @readonly
     */
    obfuscatedCode?: string;
    /**
     * App ID of the gift card provider.
     * @format GUID
     * @readonly
     */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     * @minLength 1
     * @maxLength 50
     */
    externalId?: string | null;
}
interface PricingInfo {
    /** The sum of all line items after applying automatic discounts. */
    subtotal?: MultiCurrencyPrice;
    /** The coupon discount amount. Automatic discounts are not included in this amount. */
    discount?: MultiCurrencyPrice;
    /** The sum of all line items after applying all discounts. */
    discountedSubtotal?: MultiCurrencyPrice;
}
declare enum CartStatus {
    /** A new Cart. */
    CREATED = "CREATED",
    /** The checkout process is completed. */
    CHECKOUT_COMPLETED = "CHECKOUT_COMPLETED"
}
/** @enumType */
type CartStatusWithLiterals = CartStatus | 'CREATED' | 'CHECKOUT_COMPLETED';
interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page.
     * Default: `false`
     */
    policyAgreementCheckboxDisabled?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     * Default: `false`
     */
    manualPaymentDisabled?: boolean;
}
interface CartSummary {
    /**
     * The Cart ID.
     * @format GUID
     */
    cartId?: string;
    /**
     * Summarized details for each line item in the cart.
     * @maxSize 300
     */
    lineItems?: LineItemSummary[];
    /**
     * List of discounts applied to the cart.
     * @maxSize 100
     */
    discounts?: Discount[];
    /** Summary of the delivery costs. */
    deliverySummary?: DeliverySummary;
    /**
     * List of additional fees applied to the cart.
     * @maxSize 100
     */
    additionalFees?: V2AdditionalFee[];
    /** Summary of tax calculations applied to the cart. */
    taxSummary?: TaxSummary;
    /** Summary of all calculated price components in the cart. */
    priceSummary?: PriceSummary;
    /** Payment details summarizing how the customer will pay for the order. */
    paymentSummary?: PaymentSummary;
    /**
     * List of errors that occurred during the calculation process.
     * @maxSize 100
     */
    errors?: CalculationError[];
    /**
     * List of business violations raised by the Validations service plugin ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/service-plugins/validations/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/service-plugins/validations-integration-service-plugin/introduction)).
     * @maxSize 100
     */
    violations?: Violation[];
    /**
     * A token representing the Cart's calculated prices.
     *
     * The client can pass this token when completing the checkout to ensure that the
     * prices the customer saw match the final prices at checkout.
     *
     * The server will validate the token if provided by recalculating the cart and comparing the
     * resulting pricing token. If the validation fails, the checkout will be rejected.
     *
     * This mechanism protects against unexpected price changes or tampering between
     * cart calculation and order placement.
     *
     * The token is opaque and should not be parsed or modified by clients.
     * @maxLength 1024
     */
    priceVerificationToken?: string | null;
}
interface LineItemSummary {
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
    /**
     * The quantity of the line item.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Final unit price after applying automatic discounts.
     * Includes tax if `tax_summary.prices_include_tax` is true.
     */
    unitPrice?: MultiCurrencyPrice;
    /**
     * Total price for the line item (unit price Ã— quantity).
     * Includes tax if `tax_summary.prices_include_tax` is true.
     */
    totalPrice?: MultiCurrencyPrice;
}
interface DeliverySummary {
    /** The calculated delivery method. */
    method?: DeliveryMethod;
    /**
     * Delivery price after discount.
     * Includes tax if `tax_summary.prices_include_tax` is true.
     */
    price?: MultiCurrencyPrice;
}
interface V2AdditionalFee {
    /**
     * Additional fee's code.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /** Additional fee's name. */
    name?: TranslatableString;
    /**
     * Provider's app id.
     * @minLength 1
     * @maxLength 100
     */
    providerAppId?: string | null;
    /**
     * The line items associated with this fee.
     * If the list is empty, the fee will be associated with the entire cart.
     * @format GUID
     * @maxSize 100
     */
    lineItemIds?: string[];
    /**
     * Additional fee's price.
     * Includes tax if `tax_summary.prices_include_tax` is true.
     */
    price?: MultiCurrencyPrice;
    /**
     * Number of subscription cycle this fee applies to.
     * If None and discount is linked to subscription line item, it applies to all cycles.
     * @min 1
     * @max 999
     */
    subscriptionCycles?: number | null;
}
interface TaxSummary {
    /**
     * List of taxes applied to the cart.
     * @maxSize 100
     */
    taxes?: Tax[];
    /**
     * Indicates whether tax is already included in prices (line items, discounts, delivery, additional fess).
     * @readonly
     */
    pricesIncludeTax?: boolean;
    /**
     * Taxes applied to line items.
     * @maxSize 300
     */
    lineItemTaxes?: LineItemTax[];
    /** Tax applied to the delivery method. */
    deliveryTax?: MultiCurrencyPrice;
    /**
     * Taxes applied to additional fees.
     * @maxSize 100
     */
    additionalFeeTaxes?: AdditionalFeeTax[];
}
interface Tax {
    /** The name of the tax. */
    name?: TranslatableString;
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Tax rate %, as a decimal point between 0 and 1.
     * @decimalValue options { gte:0, lte:1, maxScale:6 }
     */
    rate?: string;
    /** Calculated tax, based on `taxable_amount` and `rate`. */
    totalTax?: MultiCurrencyPrice;
}
interface LineItemTax {
    /**
     * Line item ID.
     * @format GUID
     */
    lineItemId?: string;
    /** Tax amount applied to the additional fee. */
    tax?: MultiCurrencyPrice;
}
interface AdditionalFeeTax {
    /**
     * Additional fee's code.
     * @minLength 1
     * @maxLength 100
     */
    additionalFeeCode?: string;
    /** Tax amount applied to the additional fee. */
    tax?: MultiCurrencyPrice;
}
interface PriceSummary {
    /**
     * Total price of all line items after applying item-level discounts.
     * FIXME: Currently we don't know if the subtotal includes tax or not.
     */
    subtotal?: MultiCurrencyPrice;
    /**
     * Total cart-level discount applied to the subtotal.
     * Line-item discounts are reflected in the subtotal and not included here.
     * Currently supports only a single coupon.
     */
    discount?: MultiCurrencyPrice;
    /**
     * Final delivery cost for the cart.
     * FIXME: Currently we don't know if the subtotal includes tax or not.
     */
    delivery?: MultiCurrencyPrice;
    /**
     * Total additional fees associated with the cart.
     * FIXME: Currently we don't know if the subtotal includes tax or not.
     */
    additionalFees?: MultiCurrencyPrice;
    /** Total tax amount calculated across all applicable components (items, discounts, delivery, and fees). */
    tax?: MultiCurrencyPrice;
    /**
     * Total amount to be paid.
     * Curenntly, total = subtotal - discount + delivery + additional_fees + tax.
     */
    total?: MultiCurrencyPrice;
}
interface PaymentSummary {
    /**
     * The amount that will be deducted from each gift card added to the cart.
     * Currently, only one gift card is supported.
     * @maxSize 1
     */
    giftCards?: GiftCardSummary[];
    /**
     * A list of valid memberships that will be charged as part of the order.
     * @maxSize 300
     */
    memberships?: SelectedMembership[];
    /** Indicates whether a remaining payment is required to create the order, after applying gift cards. */
    requiresPaymentAfterGiftCard?: boolean;
    /** The total amount due after applying all gift cards. */
    totalAfterGiftCards?: MultiCurrencyPrice;
    /** The upfront amount to be charged immediately when placing the order (after applying gift cards). */
    payNow?: MultiCurrencyPrice;
    /** The remaining amount to be collected later. */
    payLater?: MultiCurrencyPrice;
    /** The amount to be charged after a free trial period (typically for subscription-based products). */
    payAfterFreeTrial?: MultiCurrencyPrice;
}
interface GiftCardSummary {
    /**
     * The ID of the gift card assigned by the Cart.
     * @format GUID
     */
    giftCardId?: string;
    /** The amount to be reduced from the gift card's balance. */
    redeemAmount?: MultiCurrencyPrice;
}
interface SelectedMembership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    id?: string;
    /**
     * ID of the app providing this payment option.
     * @format GUID
     */
    appId?: string;
    /**
     * IDs of the line items this membership applies to.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
}
interface CalculationError {
    /** The calculation component that caused the error. */
    component?: CalculationComponentWithLiterals;
    /** Machine-readable error code. */
    code?: ErrorCodeWithLiterals;
    /**
     * Human-readable explanation.
     * @maxLength 100
     */
    description?: string | null;
}
declare enum CalculationComponent {
    UNKNOWN_CALCULATION_COMPONENT = "UNKNOWN_CALCULATION_COMPONENT",
    DISCOUNTS = "DISCOUNTS",
    DELIVERY = "DELIVERY",
    TAX = "TAX",
    MEMBERSHIPS = "MEMBERSHIPS",
    GIFT_CARDS = "GIFT_CARDS"
}
/** @enumType */
type CalculationComponentWithLiterals = CalculationComponent | 'UNKNOWN_CALCULATION_COMPONENT' | 'DISCOUNTS' | 'DELIVERY' | 'TAX' | 'MEMBERSHIPS' | 'GIFT_CARDS';
declare enum ErrorCode {
    UNKNOWN_ERROR_CODE = "UNKNOWN_ERROR_CODE"
}
/** @enumType */
type ErrorCodeWithLiterals = ErrorCode | 'UNKNOWN_ERROR_CODE';
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: SeverityWithLiterals;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /**
     * Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`.
     * @minLength 1
     * @maxLength 1000
     */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
/** @enumType */
type SeverityWithLiterals = Severity | 'WARNING' | 'ERROR';
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: LineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: LineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** Default location, in case no specific location is specified. */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** @enumType */
type NameInOtherWithLiterals = NameInOther | 'OTHER_DEFAULT';
/** Available locations on the line item */
declare enum NameInLineItem {
    /** Default location, in case no specific location is specified. */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
/** @enumType */
type NameInLineItemWithLiterals = NameInLineItem | 'LINE_ITEM_DEFAULT';
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOtherWithLiterals;
}
/** Specific line item violation. */
interface LineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItemWithLiterals;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface CatalogItemInput {
    /** A reference to the catalog item. */
    catalogReference?: CatalogReference;
    /**
     * The amount of catalog items requested by the customer.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Selected membership to be used as payment for this item. */
    selectedMembership?: V2SelectedMembership;
    /**
     * Overriding values for catalog item properties.
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * ID of the app managing the inventory.
     * @format GUID
     */
    inventoryAppId?: string | null;
}
interface CustomItemInput {
    /** The name of the line item. */
    name?: TranslatableString;
    /** Quantity-related information about the line item. */
    quantityInfo?: CustomItemQuantityInfo;
    /** Pricing-related information about the line item. */
    pricing?: CustomItemPricingInfo;
    /** Information about the origin of the line item. */
    source?: CustomItemSource;
    /** Details about the item for display purposes. */
    attributes?: CustomItemAttributes;
    /** Delivery-related information about the line item. */
    deliveryConfig?: CustomItemDeliveryConfig;
    /** Tax-related information about the line item. */
    taxConfig?: CustomItemTaxConfig;
    /** Payment-related information about the line item. */
    paymentConfig?: CustomItemPaymentConfig;
    /**
     * Modifier groups that were added to the item.
     * @maxSize 25
     */
    modifierGroups?: ModifierGroup[];
    /**
     * Whether the item can only be purchased by site members.
     * Default: `false`
     */
    membersOnly?: boolean;
}
interface CustomItemQuantityInfo {
    /**
     * The amount of items originally requested by the customer.
     * @min 1
     * @max 100000
     */
    requestedQuantity?: number;
    /** The maximum quantity of items available for purchase. */
    availableQuantity?: number | null;
    /** Whether the line item quantity is fixed and cannot be changed. */
    fixedQuantity?: boolean;
}
interface CustomItemPricingInfo {
    /**
     * Sale price of a single item, without modifiers.
     * Includes tax if `tax_info.prices_include_tax` is true.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    price?: string;
    /**
     * Full price of a single item before any discounts, without modifiers.
     * Defaults to `price` when not provided.
     * Includes tax if `tax_info.prices_include_tax` is true.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    fullPrice?: string | null;
    /**
     * Additional description for the price.
     * For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     */
    priceDescription?: PriceDescription;
    /** Indicates whether the price is not yet defined, and will be updated after the order is created. */
    priceUndetermined?: boolean;
}
interface CustomItemSource {
    /**
     * Catalog and item reference.
     * Holds IDs for the item and the catalog it came from, as well as further optional info.
     * Optional for custom line items, which don't trigger the Catalog service plugin.
     */
    catalogReference?: CatalogReference;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * ID of the app managing the inventory.
     * @format GUID
     */
    inventoryAppId?: string | null;
}
interface CustomItemAttributes {
    /**
     * Description lines of the item.
     * @maxSize 100
     */
    descriptionLines?: DescriptionLine[];
    /** The image of the item. */
    image?: Image;
    /** URL to the item's page on the site. */
    url?: PageUrlV2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Physical properties of the item.
     * When relevant, contains information such as SKU, item weight, and shippability.
     */
    physicalProperties?: PhysicalProperties;
    /** Subscription option information. */
    subscriptionInfo?: SubscriptionOptionInfo;
    /** Service properties. When relevant, this contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
}
interface CustomItemDeliveryConfig {
    /**
     * Delivery profile ID.
     * @format GUID
     */
    deliveryProfileId?: string | null;
}
interface CustomItemTaxConfig {
    /** Address to use for tax calculation purposes. */
    taxableAddress?: TaxableAddress;
    /**
     * Tax group ID for this line item.
     * @maxLength 50
     */
    taxGroupId?: string | null;
}
interface CustomItemPaymentConfig {
    /**
     * Partial payment to be paid upfront during the checkout.
     * Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     */
    depositAmount?: MultiCurrencyPrice;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
}
declare enum ValidationsConfig {
    UNKNOWN_VALIDATIONS_CONFIG = "UNKNOWN_VALIDATIONS_CONFIG",
    /** No business validations are performed. */
    SKIP_VALIDATIONS = "SKIP_VALIDATIONS",
    /** Perform cart-level business validations as defined by the service plugin implementer. */
    PRE_CHECKOUT_VALIDATIONS = "PRE_CHECKOUT_VALIDATIONS",
    /** Perform checkout-specific business validations as defined by the service plugin implementer. */
    CHECKOUT_VALIDATIONS = "CHECKOUT_VALIDATIONS"
}
/** @enumType */
type ValidationsConfigWithLiterals = ValidationsConfig | 'UNKNOWN_VALIDATIONS_CONFIG' | 'SKIP_VALIDATIONS' | 'PRE_CHECKOUT_VALIDATIONS' | 'CHECKOUT_VALIDATIONS';
interface CalculationConfig {
    /**
     * Whether to calculate delivery costs.
     * Default: false
     */
    calculateDelivery?: boolean;
    /**
     * Whether to calculate any additional fees.
     * Default: false
     */
    calculateAdditionalFees?: boolean;
    /**
     * Whether to include tax calculation.
     * Default: false
     */
    calculateTax?: boolean;
    /**
     * Whether to calculate the effect of gift card balances on the cart total.
     * Gift cards are not redeemed - only reflected for estimation purposes.
     * Default: false
     */
    calculateGiftCards?: boolean;
}
interface LineItemUpdate {
    /**
     * Line item ID to update.
     * @format GUID
     */
    lineItemId?: string;
    /** Quantity update (optional - if not provided, quantity is not updated) */
    quantityUpdate?: QuantityUpdate;
    /** Selected membership update (optional - if not provided, membership is not updated) */
    selectedMembershipUpdate?: SelectedMembershipUpdate;
}
interface QuantityUpdate {
    /**
     * The new quantity of the line item.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface SelectedMembershipUpdate {
    /**
     * The new selectedMembership of the item.
     *
     * To just remove current selected membership, and not replace with a new one, pass an empty value here.
     */
    membership?: V2SelectedMembership;
}
interface CreateCartRequest {
    /** Cart to be created. */
    cart?: Cart;
    /**
     * A list of catalog items to add to the cart.
     * @maxSize 300
     */
    catalogItems?: CatalogItemInput[];
    /**
     * A list of custom items to add to the cart.
     * Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     * @maxSize 300
     */
    customItems?: CustomItemInput[];
    /**
     * Coupons to apply.
     * Currently only one is supported.
     * If the coupon code is invalid, the cart will be created without it.
     * @maxSize 1
     * @minLength 1
     * @maxLength 50
     */
    couponCodes?: string[];
    /**
     * Gift cards to add.
     * Currently only one is support.
     * If the gift card code is invalid, the cart will be created without it.
     * @maxSize 1
     * @minLength 8
     * @maxLength 20
     */
    giftCardCodes?: string[];
}
interface CreateCartResponse {
    /** The created Cart. */
    cart?: Cart;
}
interface GetCartRequest {
    /**
     * ID of the Cart to retrieve.
     * @format GUID
     */
    cartId: string;
}
interface GetCartResponse {
    /** The requested Cart. */
    cart?: Cart;
}
interface UpdateCartRequest {
    /** Cart to be updated, may be partial. */
    cart: Cart;
}
interface UpdateCartResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface DeleteCartRequest {
    /**
     * ID of the Cart to delete.
     * @format GUID
     */
    cartId: string;
}
interface DeleteCartResponse {
}
interface RefreshCartRequest {
    /**
     * ID of the Cart to refresh.
     * @format GUID
     */
    cartId: string;
}
interface RefreshCartResponse {
    /** Synchronized Cart. */
    cart?: Cart;
}
interface CalculateCartRequest {
    /**
     * ID of the Cart to calculate.
     * @format GUID
     */
    cartId: string;
    /**
     * Specifies the level of **business validation** to perform during cart calculation,
     * by calling the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     */
    validationsConfig?: ValidationsConfigWithLiterals;
    /**
     * Optional custom configuration for the calculation.
     * If not provided, all price components are calculated by default.
     */
    customCalculationConfig?: CalculationConfig;
}
interface CalculateCartResponse {
    /** The Cart that was calculated. */
    cart?: Cart;
    /** The calculation summary. */
    summary?: CartSummary;
}
interface GetCheckoutURLRequest {
    /**
     * ID of the Cart to calculate.
     * @format GUID
     */
    cartId: string;
    /**
     * Checkout currency parameter to append as a query param
     * @format CURRENCY
     */
    currencyCode?: string | null;
}
interface GetCheckoutURLResponse {
    /**
     * The checkout URL.
     * @format WEB_URL
     */
    checkoutUrl?: string;
}
interface CompleteCheckoutRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * The pricing token received from `CalculateCart`'s response.
     * Used to verify that the prices shown to the customer have not changed before completing checkout.
     * @maxLength 1024
     * @readonly
     */
    pricingToken?: string | null;
    /** Urls to redirect to after payment is made. */
    redirectUrls?: RedirectUrls;
    /** Indicates the payment method should be saved on the order */
    savePaymentMethod?: boolean;
    /** Indicates whether to authorize the payment and delay the capture */
    delayCapture?: boolean;
}
interface RedirectUrls {
    /**
     * URL to redirect to if payment is canceled (usually checkout url).
     * @format WEB_URL
     */
    cancelUrl?: string;
    /**
     * URL to redirect to if an error occurred on payment (usually checkout url).
     * @format WEB_URL
     */
    errorUrl?: string;
    /**
     * URL to redirect to after successful payment, excepts order place holder {orderId}.
     * @maxLength 2000
     */
    successUrl?: string | null;
    /**
     * URL to redirect to if payment is pending, excepts order place holder {orderId}.
     * @maxLength 2000
     */
    pendingUrl?: string | null;
}
interface CompleteCheckoutResponse {
    /**
     * The order ID of the created order.
     * @format GUID
     */
    orderId?: string;
    /**
     * Payment response token.
     * @maxLength 1000
     */
    paymentResponseToken?: string | null;
    /**
     * The payment gateway is Cashier.
     * payment_gateway_order_id will be returned given that money was charged.
     * In some cases, money will not be charged:
     * If the total price is 0 - For example, could be a free item or a an item with 100% discount
     * If the total price is not 0, but the payment is covered by alternative payment methods such as gift card
     * @maxLength 50
     */
    paymentGatewayOrderId?: string | null;
    /** Whether an order was successfully created from this cart and the payment transaction was completed. */
    cartCompleted?: boolean;
}
interface AddLineItemsRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * A list of catalog items to add to the cart.
     * @maxSize 300
     */
    catalogItems?: CatalogItemInput[];
    /**
     * A list of custom items to add to the cart.
     * @maxSize 300
     */
    customItems?: CustomItemInput[];
}
interface AddLineItemsResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface RemoveLineItemsRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Line item IDs to remove from cart.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface AddDiscountRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Coupon to apply.
     *
     * Currently only one is supported.
     * @minLength 1
     * @maxLength 50
     */
    couponCode: string;
}
interface AddDiscountResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface RemoveDiscountRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Discount ID.
     * @format GUID
     */
    discountId: string;
}
interface RemoveDiscountResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface AddGiftCardRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Gift card code.
     *
     * Currently only one is supported.
     * @maxLength 50
     */
    giftCardCode: string;
}
interface AddGiftCardResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface RemoveGiftCardRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Gift card ID.
     * @format GUID
     */
    giftCardId: string;
}
interface RemoveGiftCardResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface UpdateLineItemsRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Line item updates to apply.
     * @minSize 1
     * @maxSize 100
     */
    lineItemUpdates?: LineItemUpdate[];
}
interface UpdateLineItemsResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface MarkCartAsCompletedRequest {
    /**
     * Cart ID.
     * @format GUID
     */
    cartId: string;
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string | null;
}
interface MarkCartAsCompletedResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface HandleAsyncCheckoutCompletionRequest {
    /**
     * Server-signed JWT token with required information to complete checkout
     * @maxLength 4096
     */
    token: string;
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCart(): __PublicMethodMetaInfo<'POST', {}, CreateCartRequest$1, CreateCartRequest, CreateCartResponse$1, CreateCartResponse>;
declare function getCart(): __PublicMethodMetaInfo<'GET', {
    cartId: string;
}, GetCartRequest$1, GetCartRequest, GetCartResponse$1, GetCartResponse>;
declare function updateCart(): __PublicMethodMetaInfo<'PATCH', {
    cartId: string;
}, UpdateCartRequest$1, UpdateCartRequest, UpdateCartResponse$1, UpdateCartResponse>;
declare function deleteCart(): __PublicMethodMetaInfo<'DELETE', {
    cartId: string;
}, DeleteCartRequest$1, DeleteCartRequest, DeleteCartResponse$1, DeleteCartResponse>;
declare function refreshCart(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, RefreshCartRequest$1, RefreshCartRequest, RefreshCartResponse$1, RefreshCartResponse>;
declare function calculateCart(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, CalculateCartRequest$1, CalculateCartRequest, CalculateCartResponse$1, CalculateCartResponse>;
declare function getCheckoutUrl(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, GetCheckoutURLRequest$1, GetCheckoutURLRequest, GetCheckoutURLResponse$1, GetCheckoutURLResponse>;
declare function completeCheckout(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, CompleteCheckoutRequest$1, CompleteCheckoutRequest, CompleteCheckoutResponse$1, CompleteCheckoutResponse>;
declare function addLineItems(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, AddLineItemsRequest$1, AddLineItemsRequest, AddLineItemsResponse$1, AddLineItemsResponse>;
declare function removeLineItems(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, RemoveLineItemsRequest$1, RemoveLineItemsRequest, RemoveLineItemsResponse$1, RemoveLineItemsResponse>;
declare function addDiscount(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, AddDiscountRequest$1, AddDiscountRequest, AddDiscountResponse$1, AddDiscountResponse>;
declare function removeDiscount(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, RemoveDiscountRequest$1, RemoveDiscountRequest, RemoveDiscountResponse$1, RemoveDiscountResponse>;
declare function addGiftCard(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, AddGiftCardRequest$1, AddGiftCardRequest, AddGiftCardResponse$1, AddGiftCardResponse>;
declare function removeGiftCard(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, RemoveGiftCardRequest$1, RemoveGiftCardRequest, RemoveGiftCardResponse$1, RemoveGiftCardResponse>;
declare function updateLineItems(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, UpdateLineItemsRequest$1, UpdateLineItemsRequest, UpdateLineItemsResponse$1, UpdateLineItemsResponse>;
declare function markCartAsCompleted(): __PublicMethodMetaInfo<'POST', {
    cartId: string;
}, MarkCartAsCompletedRequest$1, MarkCartAsCompletedRequest, MarkCartAsCompletedResponse$1, MarkCartAsCompletedResponse>;
declare function handleAsyncCheckoutCompletion(): __PublicMethodMetaInfo<'POST', {}, HandleAsyncCheckoutCompletionRequest$1, HandleAsyncCheckoutCompletionRequest, RawHttpResponse$1, RawHttpResponse>;

export { type __PublicMethodMetaInfo, addDiscount, addGiftCard, addLineItems, calculateCart, completeCheckout, createCart, deleteCart, getCart, getCheckoutUrl, handleAsyncCheckoutCompletion, markCartAsCompleted, refreshCart, removeDiscount, removeGiftCard, removeLineItems, updateCart, updateLineItems };
