import { NonNullablePaths } from '@wix/sdk-types';

interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @minLength 35
     * @maxLength 36
     * @readonly
     */
    _id?: string | null;
    /**
     * Collection name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /**
     * Collection description.
     * @maxLength 600
     */
    description?: string | null;
    /**
     * Collection slug.
     * @minLength 1
     * @maxLength 100
     */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface Media {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemTypeWithLiterals;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    _id?: string;
}
/** @oneof */
interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
interface MediaItemUrlAndSize {
    /**
     * Media item URL.
     * @format WEB_URL
     */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    /** Image media type. */
    image = "image",
    /** Video media type. */
    video = "video",
    /** Audio media type. */
    audio = "audio",
    /** Document media type. */
    document = "document",
    /** Zip media type. */
    zip = "zip"
}
/** @enumType */
type MediaItemTypeWithLiterals = MediaItemType | 'unspecified_media_item_type' | 'image' | 'video' | 'audio' | 'document' | 'zip';
interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /**
     * The source that added the keyword terms to the SEO settings.
     * @maxLength 1000
     */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag metadata. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a [custom tag](https://support.wix.com/en/article/adding-additional-meta-tags-to-your-sites-pages). */
    custom?: boolean;
    /** Whether the tag is disabled. If the tag is disabled, people can't find your page when searching for this phrase in search engines. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the [automatical redirect visits](https://support.wix.com/en/article/customizing-your-pages-seo-settings-in-the-seo-panel) from the old URL to the new one is enabled.
     *
     *
     * Default: `false` (automatical redirect is enabled).
     */
    preventAutoRedirect?: boolean;
    /**
     * User-selected keyword terms for a specific page.
     * @maxSize 5
     */
    keywords?: Keyword[];
}
interface QueryCollectionsRequest {
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryCollectionsResponse {
    /** @maxSize 100 */
    collections?: Collection[];
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface GetCollectionRequest {
    /** Requested collection ID. */
    _id: string;
}
interface GetCollectionResponse {
    collection?: Collection;
}
interface GetCollectionBySlugRequest {
    /**
     * Slug of the collection to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    slug: string;
}
interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}
/**
 * Retrieves a list of up to 100 collections, given the provided paging, sorting and filtering.
 * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
 * @public
 * @fqn wix.catalog.api.v2.CollectionReadApi.QueryCollections
 */
declare function queryCollections(): CollectionsQueryBuilder;
interface QueryOffsetResult {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface CollectionsQueryResult extends QueryOffsetResult {
    items: Collection[];
    query: CollectionsQueryBuilder;
    next: () => Promise<CollectionsQueryResult>;
    prev: () => Promise<CollectionsQueryResult>;
}
interface CollectionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'name', value: any[]) => CollectionsQueryBuilder;
    in: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    exists: (propertyName: '_id' | 'name', value: boolean) => CollectionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'name'>) => CollectionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'name'>) => CollectionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => CollectionsQueryBuilder;
    /** @param skip - Number of items to skip in the query results before returning the results. */
    skip: (skip: number) => CollectionsQueryBuilder;
    find: () => Promise<CollectionsQueryResult>;
}
/**
 * Retrieves a collection with the provided ID.
 * @param _id - Requested collection ID.
 * @public
 * @requiredField _id
 * @fqn wix.catalog.api.v2.CollectionReadApi.GetCollection
 */
declare function getCollection(_id: string): Promise<NonNullablePaths<Collection, `media.mainMedia.image.url` | `media.mainMedia.image.width` | `media.mainMedia.image.height` | `media.mainMedia.video.files` | `media.mainMedia.video.stillFrameMediaId` | `media.mainMedia.mediaType` | `media.mainMedia.title` | `media.mainMedia._id` | `media.items` | `numberOfProducts`, 5>>;
/**
 * Retrieves a collection with the provided slug.
 * @param slug - Slug of the collection to retrieve.
 * @public
 * @requiredField slug
 * @fqn wix.catalog.api.v2.CollectionReadApi.GetCollectionBySlug
 */
declare function getCollectionBySlug(slug: string): Promise<NonNullablePaths<GetCollectionBySlugResponse, `collection.media.mainMedia.image.url` | `collection.media.mainMedia.image.width` | `collection.media.mainMedia.image.height` | `collection.media.mainMedia.video.files` | `collection.media.mainMedia.video.stillFrameMediaId` | `collection.media.mainMedia.mediaType` | `collection.media.mainMedia.title` | `collection.media.mainMedia._id` | `collection.media.items` | `collection.numberOfProducts`, 6>>;

export { type Collection, type CollectionsQueryBuilder, type CollectionsQueryResult, type CursorPaging, type Cursors, type GetCollectionBySlugRequest, type GetCollectionBySlugResponse, type GetCollectionRequest, type GetCollectionResponse, type Keyword, type Media, type MediaItem, type MediaItemItemOneOf, MediaItemType, type MediaItemTypeWithLiterals, type MediaItemUrlAndSize, type MediaItemVideo, type PlatformPaging, type PlatformPagingMetadata, type PlatformQuery, type PlatformQueryPagingMethodOneOf, type QueryCollectionsRequest, type QueryCollectionsResponse, type SeoSchema, type Settings, SortOrder, type SortOrderWithLiterals, type Sorting, type Tag, getCollection, getCollectionBySlug, queryCollections };
