import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { UpdateInventoryVariantsInventoryItem, DecrementData, IncrementData, GetInventoryVariantsOptions, GetInventoryVariantsResponse, QueryInventoryOptions, QueryInventoryResponse, InventoryItemChangedEnvelope, InventoryVariantsChangedEnvelope } from './index.typings.js';
export { BaseEventMetadata, BulkUpdateInventoryItemsRequest, BulkUpdateInventoryItemsResponse, BulkUpdateInventoryVariantsRequest, BulkUpdateInventoryVariantsRequestActionOneOf, BulkUpdateInventoryVariantsResponse, ChangedInventoryVariant, ChangedInventoryVariantData, DecrementDataIdOneOf, DecrementInventoryRequest, DecrementInventoryResponse, GetInventoryItemsRequest, GetInventoryItemsResponse, GetInventoryVariantsOptionsIdOneOf, GetInventoryVariantsRequest, GetInventoryVariantsRequestIdOneOf, IdentificationData, IdentificationDataIdOneOf, IncrementDataIdOneOf, IncrementInventoryRequest, IncrementInventoryResponse, InventoryItemChanged, InventoryItemV2, InventoryVariantV2, InventoryVariantsChanged, MessageEnvelope, Paging, PagingMetadata, PreorderInfo, Query, QueryInventoryRequest, ReasonType, ReasonTypeWithLiterals, UpdateInventoryVariantsRequest, UpdateInventoryVariantsResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function updateInventoryVariants$1(httpClient: HttpClient): UpdateInventoryVariantsSignature;
interface UpdateInventoryVariantsSignature {
    /**
     * Updates product inventory, including total quantity, whether the product is in stock, and whether the product inventory is tracked.
     *
     *
     * The `updateInventoryVariants()` function is a Promise that resolves to the updated inventory variant data.
     * @param - Product ID.
     * @param - Inventory item to update.
     */
    (productId: string, inventoryItem: UpdateInventoryVariantsInventoryItem): Promise<void>;
}
declare function decrementInventory$1(httpClient: HttpClient): DecrementInventorySignature;
interface DecrementInventorySignature {
    /**
     * Subtracts a set number of items from inventory.
     *
     *
     * The `decrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
     * @param - Item or product to decrement.
     */
    (decrementData: DecrementData[]): Promise<void>;
}
declare function incrementInventory$1(httpClient: HttpClient): IncrementInventorySignature;
interface IncrementInventorySignature {
    /**
     * Adds a set number of items to inventory.
     *
     *
     * The `incrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
     * @param - Item or product to increment.
     */
    (incrementData: IncrementData[]): Promise<void>;
}
declare function getInventoryVariants$1(httpClient: HttpClient): GetInventoryVariantsSignature;
interface GetInventoryVariantsSignature {
    /**
     * Gets inventory variant information based on the specified option choices.
     *
     *
     * The `getInventoryVariants()` function returns a Promise that resolves to the specified inventory variant information.
     * @param - Inventory item ID.
     */
    (inventoryId: string, options?: GetInventoryVariantsOptions): Promise<NonNullablePaths<GetInventoryVariantsResponse, `inventoryItem.variants` | `inventoryItem.variants.${number}.variantId` | `inventoryItem.variants.${number}.availableForPreorder` | `inventoryItem.numericId` | `inventoryItem.preorderInfo.enabled`, 5>>;
}
declare function queryInventory$1(httpClient: HttpClient): QueryInventorySignature;
interface QueryInventorySignature {
    /**
     * Returns a list of inventory items, given the provided paging, sorting and filtering.
     */
    (options?: QueryInventoryOptions): Promise<NonNullablePaths<QueryInventoryResponse, `inventoryItems` | `inventoryItems.${number}.numericId` | `inventoryItems.${number}.preorderInfo.enabled` | `metadata.items` | `metadata.offset` | `totalResults`, 5>>;
}
declare const onInventoryItemChanged$1: EventDefinition<InventoryItemChangedEnvelope, "com.wix.ecommerce.inventory.api.v1.InventoryItemChanged">;
declare const onInventoryVariantsChanged$1: EventDefinition<InventoryVariantsChangedEnvelope, "com.wix.ecommerce.inventory.api.v1.InventoryVariantsChanged">;

declare const updateInventoryVariants: MaybeContext<BuildRESTFunction<typeof updateInventoryVariants$1> & typeof updateInventoryVariants$1>;
declare const decrementInventory: MaybeContext<BuildRESTFunction<typeof decrementInventory$1> & typeof decrementInventory$1>;
declare const incrementInventory: MaybeContext<BuildRESTFunction<typeof incrementInventory$1> & typeof incrementInventory$1>;
declare const getInventoryVariants: MaybeContext<BuildRESTFunction<typeof getInventoryVariants$1> & typeof getInventoryVariants$1>;
declare const queryInventory: MaybeContext<BuildRESTFunction<typeof queryInventory$1> & typeof queryInventory$1>;
/**
 * Triggered when an inventory item is changed.
 */
declare const onInventoryItemChanged: BuildEventDefinition<typeof onInventoryItemChanged$1> & typeof onInventoryItemChanged$1;
/**
 * Triggered when inventory variants are changed.
 */
declare const onInventoryVariantsChanged: BuildEventDefinition<typeof onInventoryVariantsChanged$1> & typeof onInventoryVariantsChanged$1;

export { DecrementData, GetInventoryVariantsOptions, GetInventoryVariantsResponse, IncrementData, InventoryItemChangedEnvelope, InventoryVariantsChangedEnvelope, QueryInventoryOptions, QueryInventoryResponse, UpdateInventoryVariantsInventoryItem, decrementInventory, getInventoryVariants, incrementInventory, onInventoryItemChanged, onInventoryVariantsChanged, queryInventory, updateInventoryVariants };
