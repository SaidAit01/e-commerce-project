// src/ecom-v1-checkout-settings-checkout-settings.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTImageToSDKImage as transformRESTImageToSDKImage2 } from "@wix/sdk-runtime/transformations/image";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/ecom-v1-checkout-settings-checkout-settings.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-checkout-settings-checkout-settings.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixEcomCheckoutSettingsApiV1CheckoutSettingsServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/checkout-settings",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/checkout-settings",
        destPath: "/v1/checkout-settings"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/checkout-settings",
        destPath: "/v1/checkout-settings"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_checkout-settings";
function getCheckoutSettings(payload) {
  function __getCheckoutSettings({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout_settings",
      method: "GET",
      methodFqn: "wix.ecom.checkout_settings.api.v1.CheckoutSettingsService.GetCheckoutSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCheckoutSettingsApiV1CheckoutSettingsServiceUrl({
        protoPath: "/v1/checkout-settings",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkoutSettings.createdDate" },
            { path: "checkoutSettings.updatedDate" },
            {
              path: "checkoutSettings.checkoutBrand.header.logo.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "checkoutSettings.checkoutBrand.header.logo.image.focalPoint.x"
            },
            {
              path: "checkoutSettings.checkoutBrand.header.logo.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCheckoutSettings;
}
function updateCheckoutSettings(payload) {
  function __updateCheckoutSettings({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "checkoutSettings.createdDate" },
          { path: "checkoutSettings.updatedDate" },
          {
            path: "checkoutSettings.checkoutBrand.header.logo.image.urlExpirationDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "checkoutSettings.checkoutBrand.header.logo.image.focalPoint.x"
          },
          {
            path: "checkoutSettings.checkoutBrand.header.logo.image.focalPoint.y"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.checkout_settings",
      method: "PATCH",
      methodFqn: "wix.ecom.checkout_settings.api.v1.CheckoutSettingsService.UpdateCheckoutSettings",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomCheckoutSettingsApiV1CheckoutSettingsServiceUrl({
        protoPath: "/v1/checkout-settings",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "checkoutSettings.createdDate" },
            { path: "checkoutSettings.updatedDate" },
            {
              path: "checkoutSettings.checkoutBrand.header.logo.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "checkoutSettings.checkoutBrand.header.logo.image.focalPoint.x"
            },
            {
              path: "checkoutSettings.checkoutBrand.header.logo.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCheckoutSettings;
}

// src/ecom-v1-checkout-settings-checkout-settings.universal.ts
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var LogoSize = /* @__PURE__ */ ((LogoSize2) => {
  LogoSize2["UNKNOWN_LOGO_SIZE"] = "UNKNOWN_LOGO_SIZE";
  LogoSize2["SMALL"] = "SMALL";
  LogoSize2["MEDIUM"] = "MEDIUM";
  LogoSize2["LARGE"] = "LARGE";
  return LogoSize2;
})(LogoSize || {});
var Alignment = /* @__PURE__ */ ((Alignment2) => {
  Alignment2["UNKNOWN_ALIGNMENT"] = "UNKNOWN_ALIGNMENT";
  Alignment2["SIDE"] = "SIDE";
  Alignment2["CENTER"] = "CENTER";
  return Alignment2;
})(Alignment || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getCheckoutSettings2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = getCheckoutSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "checkoutSettings.checkoutBrand.header.logo.image" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCheckoutSettings2(checkoutSettings) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      checkoutSettings
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "checkoutSettings.checkoutBrand.header.logo.image" }]
      }
    ]
  );
  const reqOpts = updateCheckoutSettings(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "checkoutSettings.checkoutBrand.header.logo.image" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { checkoutSettings: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["checkoutSettings"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-checkout-settings-checkout-settings.public.ts
function getCheckoutSettings3(httpClient) {
  return () => getCheckoutSettings2(
    // @ts-ignore
    { httpClient }
  );
}
function updateCheckoutSettings3(httpClient) {
  return (checkoutSettings) => updateCheckoutSettings2(
    checkoutSettings,
    // @ts-ignore
    { httpClient }
  );
}
var onCheckoutSettingsUpdated = EventDefinition(
  "wix.ecom.v1.checkout_settings_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [{ path: "entity.checkoutBrand.header.logo.image" }]
      }
    ])
  )
)();

// src/ecom-v1-checkout-settings-checkout-settings.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var getCheckoutSettings4 = /* @__PURE__ */ createRESTModule(getCheckoutSettings3);
var updateCheckoutSettings4 = /* @__PURE__ */ createRESTModule(updateCheckoutSettings3);
var onCheckoutSettingsUpdated2 = createEventModule(
  onCheckoutSettingsUpdated
);
export {
  Alignment,
  LogoSize,
  WebhookIdentityType,
  getCheckoutSettings4 as getCheckoutSettings,
  onCheckoutSettingsUpdated2 as onCheckoutSettingsUpdated,
  updateCheckoutSettings4 as updateCheckoutSettings
};
//# sourceMappingURL=index.mjs.map