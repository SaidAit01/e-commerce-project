// src/stores-catalog-v3-customization-customizations-v-3.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v3-customization-customizations-v-3.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/customization",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/customizations",
        destPath: "/v3/customizations"
      },
      {
        srcPath: "/stores/v3/bulk/customizations",
        destPath: "/v3/bulk/customizations"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/customization",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/customization",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/customization",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/customization",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/customization",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_customizations-v-3";
function createCustomization(payload) {
  function __createCustomization({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "customization.createdDate" },
          { path: "customization.updatedDate" },
          {
            path: "customization.choicesSettings.choices.image.urlExpirationDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "customization.choicesSettings.choices.image.focalPoint.x" },
          { path: "customization.choicesSettings.choices.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.CreateCustomization",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customization.createdDate" },
            { path: "customization.updatedDate" },
            {
              path: "customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCustomization;
}
function getCustomization(payload) {
  function __getCustomization({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "GET",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.GetCustomization",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/{customizationId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customization.createdDate" },
            { path: "customization.updatedDate" },
            {
              path: "customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCustomization;
}
function updateCustomization(payload) {
  function __updateCustomization({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "customization.createdDate" },
          { path: "customization.updatedDate" },
          {
            path: "customization.choicesSettings.choices.image.urlExpirationDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "customization.choicesSettings.choices.image.focalPoint.x" },
          { path: "customization.choicesSettings.choices.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "PATCH",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.UpdateCustomization",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/{customization.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customization.createdDate" },
            { path: "customization.updatedDate" },
            {
              path: "customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCustomization;
}
function deleteCustomization(payload) {
  function __deleteCustomization({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "DELETE",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.DeleteCustomization",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/{customizationId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteCustomization;
}
function queryCustomizations(payload) {
  function __queryCustomizations({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "GET",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.QueryCustomizations",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/query",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload, true),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customizations.createdDate" },
            { path: "customizations.updatedDate" },
            {
              path: "customizations.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customizations.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customizations.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
            protoPath: "/v3/customizations/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryCustomizations;
}
function bulkCreateCustomizations(payload) {
  function __bulkCreateCustomizations({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "customizations.createdDate" },
          { path: "customizations.updatedDate" },
          {
            path: "customizations.choicesSettings.choices.image.urlExpirationDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "customizations.choicesSettings.choices.image.focalPoint.x" },
          { path: "customizations.choicesSettings.choices.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.BulkCreateCustomizations",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/bulk/customizations/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.customization.createdDate" },
            { path: "results.customization.updatedDate" },
            {
              path: "results.customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "results.customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateCustomizations;
}
function addCustomizationChoices(payload) {
  function __addCustomizationChoices({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "choices.image.urlExpirationDate" }]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "choices.image.focalPoint.x" },
          { path: "choices.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.AddCustomizationChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/{customizationId}/add-choices",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customization.createdDate" },
            { path: "customization.updatedDate" },
            {
              path: "customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addCustomizationChoices;
}
function setCustomizationChoices(payload) {
  function __setCustomizationChoices({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "choices.image.urlExpirationDate" }]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "choices.image.focalPoint.x" },
          { path: "choices.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.SetCustomizationChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/{customizationId}/set-choices",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customization.createdDate" },
            { path: "customization.updatedDate" },
            {
              path: "customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __setCustomizationChoices;
}
function removeCustomizationChoices(payload) {
  function __removeCustomizationChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.RemoveCustomizationChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/customizations/{customizationId}/remove-choices",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "customization.createdDate" },
            { path: "customization.updatedDate" },
            {
              path: "customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeCustomizationChoices;
}
function bulkAddCustomizationChoices(payload) {
  function __bulkAddCustomizationChoices({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "customizationsChoices.choices.image.urlExpirationDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "customizationsChoices.choices.image.focalPoint.x" },
          { path: "customizationsChoices.choices.image.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.BulkAddCustomizationChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/bulk/customizations/add-choices",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.customization.createdDate" },
            { path: "results.customization.updatedDate" },
            {
              path: "results.customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "results.customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkAddCustomizationChoices;
}
function bulkUpdateCustomizations(payload) {
  function __bulkUpdateCustomizations({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "customizations.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "customizations.customization.createdDate" },
          { path: "customizations.customization.updatedDate" },
          {
            path: "customizations.customization.choicesSettings.choices.image.urlExpirationDate"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "customizations.customization.choicesSettings.choices.image.focalPoint.x"
          },
          {
            path: "customizations.customization.choicesSettings.choices.image.focalPoint.y"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.customization",
      method: "POST",
      methodFqn: "wix.stores.catalog.customization.v3.CustomizationService.BulkUpdateCustomizations",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogCustomizationV3CustomizationServiceUrl({
        protoPath: "/v3/bulk/customizations/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.customization.createdDate" },
            { path: "results.customization.updatedDate" },
            {
              path: "results.customization.choicesSettings.choices.image.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.customization.choicesSettings.choices.image.focalPoint.x"
            },
            {
              path: "results.customization.choicesSettings.choices.image.focalPoint.y"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateCustomizations;
}

// src/stores-catalog-v3-customization-customizations-v-3.universal.ts
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var CustomizationType = /* @__PURE__ */ ((CustomizationType2) => {
  CustomizationType2["UNKNOWN_CUSTOMIZATION_TYPE"] = "UNKNOWN_CUSTOMIZATION_TYPE";
  CustomizationType2["PRODUCT_OPTION"] = "PRODUCT_OPTION";
  CustomizationType2["MODIFIER"] = "MODIFIER";
  return CustomizationType2;
})(CustomizationType || {});
var CustomizationRenderType = /* @__PURE__ */ ((CustomizationRenderType2) => {
  CustomizationRenderType2["UNKNOWN_CUSTOMIZATION_RENDER_TYPE"] = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE";
  CustomizationRenderType2["FREE_TEXT"] = "FREE_TEXT";
  CustomizationRenderType2["TEXT_CHOICES"] = "TEXT_CHOICES";
  CustomizationRenderType2["SWATCH_CHOICES"] = "SWATCH_CHOICES";
  return CustomizationRenderType2;
})(CustomizationRenderType || {});
var ChoiceType = /* @__PURE__ */ ((ChoiceType2) => {
  ChoiceType2["UNKNOWN_CHOICE_TYPE"] = "UNKNOWN_CHOICE_TYPE";
  ChoiceType2["CHOICE_TEXT"] = "CHOICE_TEXT";
  ChoiceType2["ONE_COLOR"] = "ONE_COLOR";
  ChoiceType2["MULTIPLE_COLORS"] = "MULTIPLE_COLORS";
  ChoiceType2["IMAGE"] = "IMAGE";
  return ChoiceType2;
})(ChoiceType || {});
var RequestedFields = /* @__PURE__ */ ((RequestedFields2) => {
  RequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  RequestedFields2["ASSIGNED_PRODUCTS_COUNT"] = "ASSIGNED_PRODUCTS_COUNT";
  return RequestedFields2;
})(RequestedFields || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCustomization2(customization) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({ customization }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "customization.choicesSettings.choices.image" }]
      }
    ]
  );
  const reqOpts = createCustomization(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "customization.choicesSettings.choices.image" }]
        }
      ])
    )?.customization;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { customization: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["customization"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCustomization2(customizationId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    customizationId,
    fields: options?.fields
  });
  const reqOpts = getCustomization(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "customization.choicesSettings.choices.image" }]
        }
      ])
    )?.customization;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizationId: "$[0]",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["customizationId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCustomization2(_id, customization, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      customization: { ...customization, id: _id },
      fields: options?.fields
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "customization.choicesSettings.choices.image" }]
      }
    ]
  );
  const reqOpts = updateCustomization(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "customization.choicesSettings.choices.image" }]
        }
      ])
    )?.customization;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { customization: "$[1]" },
        explicitPathsToArguments: {
          "customization.id": "$[0]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "customization", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCustomization2(customizationId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    customizationId
  });
  const reqOpts = deleteCustomization(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { customizationId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["customizationId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryCustomizations2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryCustomizations({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [
          {
            transformFn: transformRESTImageToSDKImage,
            paths: [{ path: "customizations.choicesSettings.choices.image" }]
          }
        ])
      );
      return {
        items: transformedData?.customizations,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function bulkCreateCustomizations2(customizations, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      customizations,
      returnEntity: options?.returnEntity
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "customizations.choicesSettings.choices.image" }]
      }
    ]
  );
  const reqOpts = bulkCreateCustomizations(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "results.customization.choicesSettings.choices.image" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizations: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["customizations", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addCustomizationChoices2(customizationId, choices, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      customizationId,
      choices,
      fields: options?.fields
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "choices.image" }]
      }
    ]
  );
  const reqOpts = addCustomizationChoices(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "customization.choicesSettings.choices.image" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizationId: "$[0]",
          choices: "$[1]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["customizationId", "choices", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function setCustomizationChoices2(customizationId, choices, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      customizationId,
      choices,
      fields: options?.fields
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "choices.image" }]
      }
    ]
  );
  const reqOpts = setCustomizationChoices(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "customization.choicesSettings.choices.image" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizationId: "$[0]",
          choices: "$[1]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["customizationId", "choices", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeCustomizationChoices2(customizationId, choiceIds, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    customizationId,
    choiceIds,
    revision: options?.revision,
    fields: options?.fields
  });
  const reqOpts = removeCustomizationChoices(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "customization.choicesSettings.choices.image" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizationId: "$[0]",
          choiceIds: "$[1]",
          revision: "$[2].revision",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["customizationId", "choiceIds", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkAddCustomizationChoices2(customizationsChoices, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      customizationsChoices,
      returnEntity: options?.returnEntity,
      fields: options?.fields
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [{ path: "customizationsChoices.choices.image" }]
      }
    ]
  );
  const reqOpts = bulkAddCustomizationChoices(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "results.customization.choicesSettings.choices.image" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizationsChoices: "$[0]",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["customizationsChoices", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateCustomizations2(customizations, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      customizations,
      returnEntity: options?.returnEntity,
      fields: options?.fields
    }),
    [
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          {
            path: "customizations.customization.choicesSettings.choices.image"
          }
        ]
      }
    ]
  );
  const reqOpts = bulkUpdateCustomizations(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "results.customization.choicesSettings.choices.image" }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          customizations: "$[0]",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["customizations", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  ChoiceType,
  CustomizationRenderType,
  CustomizationType,
  RequestedFields,
  SortOrder,
  WebhookIdentityType,
  addCustomizationChoices2 as addCustomizationChoices,
  bulkAddCustomizationChoices2 as bulkAddCustomizationChoices,
  bulkCreateCustomizations2 as bulkCreateCustomizations,
  bulkUpdateCustomizations2 as bulkUpdateCustomizations,
  createCustomization2 as createCustomization,
  deleteCustomization2 as deleteCustomization,
  getCustomization2 as getCustomization,
  queryCustomizations2 as queryCustomizations,
  removeCustomizationChoices2 as removeCustomizationChoices,
  setCustomizationChoices2 as setCustomizationChoices,
  updateCustomization2 as updateCustomization
};
//# sourceMappingURL=index.typings.mjs.map