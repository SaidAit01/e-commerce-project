import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { Customization, CreateCustomizationApplicationErrors, CreateCustomizationValidationErrors, GetCustomizationOptions, UpdateCustomization, UpdateCustomizationOptions, DeleteCustomizationValidationErrors, QueryCustomizationsOptions, CustomizationsQueryBuilder, BulkCreateCustomizationsOptions, BulkCreateCustomizationsResponse, BulkCreateCustomizationsApplicationErrors, BulkCreateCustomizationsValidationErrors, Choice, AddCustomizationChoicesOptions, AddCustomizationChoicesResponse, AddCustomizationChoicesApplicationErrors, AddCustomizationChoicesValidationErrors, SetCustomizationChoicesOptions, SetCustomizationChoicesResponse, SetCustomizationChoicesApplicationErrors, SetCustomizationChoicesValidationErrors, RemoveCustomizationChoicesOptions, RemoveCustomizationChoicesResponse, RemoveCustomizationChoicesApplicationErrors, RemoveCustomizationChoicesValidationErrors, CustomizationChoices, BulkAddCustomizationChoicesOptions, BulkAddCustomizationChoicesResponse, BulkAddCustomizationChoicesApplicationErrors, BulkAddCustomizationChoicesValidationErrors, MaskedCustomization, BulkUpdateCustomizationsOptions, BulkUpdateCustomizationsResponse, CustomizationCreatedEnvelope, CustomizationDeletedEnvelope, CustomizationUpdatedEnvelope } from './index.typings.mjs';
export { ActionEvent, AddCustomizationChoicesRequest, App, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkAddCustomizationChoicesRequest, BulkCreateCustomizationsRequest, BulkCustomizationResult, BulkUpdateCustomizationsRequest, ChoiceType, ChoiceTypeWithLiterals, ChoiceValueOneOf, ChoicesSettings, CreateCustomizationRequest, CreateCustomizationResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomTag, CustomizationCustomizationSettingsOneOf, CustomizationIdsWrapper, CustomizationRenderType, CustomizationRenderTypeWithLiterals, CustomizationType, CustomizationTypeWithLiterals, CustomizationsQueryResult, DeleteCustomizationRequest, DeleteCustomizationResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, FocalPoint, FreeTextSettings, GetCustomizationRequest, GetCustomizationResponse, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, ItemMetadata, MessageEnvelope, MultipleColors, Page, QueryCustomizationsRequest, QueryCustomizationsResponse, RemoveCustomizationChoicesRequest, RequestedFields, RequestedFieldsWithLiterals, RestoreInfo, SetCustomizationChoicesRequest, SortOrder, SortOrderWithLiterals, Sorting, URI, UpdateCustomizationRequest, UpdateCustomizationResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function createCustomization$1(httpClient: HttpClient): CreateCustomizationSignature;
interface CreateCustomizationSignature {
    /**
     * Creates a customization.
     * @param - Customization to create.
     * @returns Created customization.
     */
    (customization: NonNullablePaths<Customization, `choicesSettings.choices` | `customizationRenderType` | `customizationType` | `freeTextInput.title` | `name`, 3>): Promise<NonNullablePaths<Customization, `freeTextInput.minCharCount` | `freeTextInput.maxCharCount` | `freeTextInput.title` | `choicesSettings.choices` | `choicesSettings.choices.${number}.colorCode` | `choicesSettings.choices.${number}._id` | `choicesSettings.choices.${number}.choiceType` | `choicesSettings.choices.${number}.name` | `choicesSettings.choices.${number}.assignedProductsCount` | `name` | `customizationType` | `customizationRenderType`, 5> & {
        __applicationErrorsType?: CreateCustomizationApplicationErrors;
        __validationErrorsType?: CreateCustomizationValidationErrors;
    }>;
}
declare function getCustomization$1(httpClient: HttpClient): GetCustomizationSignature;
interface GetCustomizationSignature {
    /**
     * Retrieves a customization.
     * @param - Customization ID.
     * @returns Customization.
     */
    (customizationId: string, options?: GetCustomizationOptions): Promise<NonNullablePaths<Customization, `freeTextInput.minCharCount` | `freeTextInput.maxCharCount` | `freeTextInput.title` | `choicesSettings.choices` | `choicesSettings.choices.${number}.colorCode` | `choicesSettings.choices.${number}._id` | `choicesSettings.choices.${number}.choiceType` | `choicesSettings.choices.${number}.name` | `choicesSettings.choices.${number}.assignedProductsCount` | `name` | `customizationType` | `customizationRenderType`, 5>>;
}
declare function updateCustomization$1(httpClient: HttpClient): UpdateCustomizationSignature;
interface UpdateCustomizationSignature {
    /**
     * Updates a customization.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - Customization ID.
     * @returns Updated customization.
     */
    (_id: string, customization: NonNullablePaths<UpdateCustomization, `revision`, 2>, options?: UpdateCustomizationOptions): Promise<NonNullablePaths<Customization, `freeTextInput.minCharCount` | `freeTextInput.maxCharCount` | `freeTextInput.title` | `choicesSettings.choices` | `choicesSettings.choices.${number}.colorCode` | `choicesSettings.choices.${number}._id` | `choicesSettings.choices.${number}.choiceType` | `choicesSettings.choices.${number}.name` | `choicesSettings.choices.${number}.assignedProductsCount` | `name` | `customizationType` | `customizationRenderType`, 5>>;
}
declare function deleteCustomization$1(httpClient: HttpClient): DeleteCustomizationSignature;
interface DeleteCustomizationSignature {
    /**
     * Deletes a customization.
     *
     * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
     * @param - Customization ID.
     */
    (customizationId: string): Promise<void & {
        __validationErrorsType?: DeleteCustomizationValidationErrors;
    }>;
}
declare function queryCustomizations$1(httpClient: HttpClient): QueryCustomizationsSignature;
interface QueryCustomizationsSignature {
    /**
     * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Customizations runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryCustomizationsOptions): CustomizationsQueryBuilder;
}
declare function bulkCreateCustomizations$1(httpClient: HttpClient): BulkCreateCustomizationsSignature;
interface BulkCreateCustomizationsSignature {
    /**
     * Creates multiple brands.
     * @param - Customizations to create.
     */
    (customizations: Customization[], options?: BulkCreateCustomizationsOptions): Promise<NonNullablePaths<BulkCreateCustomizationsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.customization.freeTextInput.minCharCount` | `results.${number}.customization.freeTextInput.maxCharCount` | `results.${number}.customization.freeTextInput.title` | `results.${number}.customization.name` | `results.${number}.customization.customizationType` | `results.${number}.customization.customizationRenderType` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkCreateCustomizationsApplicationErrors;
        __validationErrorsType?: BulkCreateCustomizationsValidationErrors;
    }>;
}
declare function addCustomizationChoices$1(httpClient: HttpClient): AddCustomizationChoicesSignature;
interface AddCustomizationChoicesSignature {
    /**
     * Adds choices to a customization.
     * @param - Customization ID.
     * @param - Choices to add.
     */
    (customizationId: string, choices: Choice[], options?: AddCustomizationChoicesOptions): Promise<NonNullablePaths<AddCustomizationChoicesResponse, `customization.freeTextInput.minCharCount` | `customization.freeTextInput.maxCharCount` | `customization.freeTextInput.title` | `customization.choicesSettings.choices` | `customization.choicesSettings.choices.${number}.colorCode` | `customization.choicesSettings.choices.${number}._id` | `customization.choicesSettings.choices.${number}.choiceType` | `customization.choicesSettings.choices.${number}.name` | `customization.choicesSettings.choices.${number}.assignedProductsCount` | `customization.name` | `customization.customizationType` | `customization.customizationRenderType`, 6> & {
        __applicationErrorsType?: AddCustomizationChoicesApplicationErrors;
        __validationErrorsType?: AddCustomizationChoicesValidationErrors;
    }>;
}
declare function setCustomizationChoices$1(httpClient: HttpClient): SetCustomizationChoicesSignature;
interface SetCustomizationChoicesSignature {
    /**
     * Sets a customization's choices. Any and all existing choices will be overridden.
     *
     * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - Choices to set.
     */
    (customizationId: string, choices: Choice[], options?: SetCustomizationChoicesOptions): Promise<NonNullablePaths<SetCustomizationChoicesResponse, `customization.freeTextInput.minCharCount` | `customization.freeTextInput.maxCharCount` | `customization.freeTextInput.title` | `customization.choicesSettings.choices` | `customization.choicesSettings.choices.${number}.colorCode` | `customization.choicesSettings.choices.${number}._id` | `customization.choicesSettings.choices.${number}.choiceType` | `customization.choicesSettings.choices.${number}.name` | `customization.choicesSettings.choices.${number}.assignedProductsCount` | `customization.name` | `customization.customizationType` | `customization.customizationRenderType`, 6> & {
        __applicationErrorsType?: SetCustomizationChoicesApplicationErrors;
        __validationErrorsType?: SetCustomizationChoicesValidationErrors;
    }>;
}
declare function removeCustomizationChoices$1(httpClient: HttpClient): RemoveCustomizationChoicesSignature;
interface RemoveCustomizationChoicesSignature {
    /**
     * Removes choices from a customization.
     *
     * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - IDs of choices to remove.
     */
    (customizationId: string, choiceIds: string[], options?: RemoveCustomizationChoicesOptions): Promise<NonNullablePaths<RemoveCustomizationChoicesResponse, `customization.freeTextInput.minCharCount` | `customization.freeTextInput.maxCharCount` | `customization.freeTextInput.title` | `customization.choicesSettings.choices` | `customization.choicesSettings.choices.${number}.colorCode` | `customization.choicesSettings.choices.${number}._id` | `customization.choicesSettings.choices.${number}.choiceType` | `customization.choicesSettings.choices.${number}.name` | `customization.choicesSettings.choices.${number}.assignedProductsCount` | `customization.name` | `customization.customizationType` | `customization.customizationRenderType`, 6> & {
        __applicationErrorsType?: RemoveCustomizationChoicesApplicationErrors;
        __validationErrorsType?: RemoveCustomizationChoicesValidationErrors;
    }>;
}
declare function bulkAddCustomizationChoices$1(httpClient: HttpClient): BulkAddCustomizationChoicesSignature;
interface BulkAddCustomizationChoicesSignature {
    /**
     * Adds choices to multiple customizations.
     * @param - List of customization IDs and choices.
     */
    (customizationsChoices: NonNullablePaths<CustomizationChoices, `choices` | `customizationId`, 2>[], options?: BulkAddCustomizationChoicesOptions): Promise<NonNullablePaths<BulkAddCustomizationChoicesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.customization.freeTextInput.minCharCount` | `results.${number}.customization.freeTextInput.maxCharCount` | `results.${number}.customization.freeTextInput.title` | `results.${number}.customization.name` | `results.${number}.customization.customizationType` | `results.${number}.customization.customizationRenderType` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
        __applicationErrorsType?: BulkAddCustomizationChoicesApplicationErrors;
        __validationErrorsType?: BulkAddCustomizationChoicesValidationErrors;
    }>;
}
declare function bulkUpdateCustomizations$1(httpClient: HttpClient): BulkUpdateCustomizationsSignature;
interface BulkUpdateCustomizationsSignature {
    /**
     * Updates multiple customizations.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - List of customizations to update.
     */
    (customizations: NonNullablePaths<MaskedCustomization, `customization._id` | `customization.name` | `customization.revision`, 3>[], options?: BulkUpdateCustomizationsOptions): Promise<NonNullablePaths<BulkUpdateCustomizationsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.customization.freeTextInput.minCharCount` | `results.${number}.customization.freeTextInput.maxCharCount` | `results.${number}.customization.freeTextInput.title` | `results.${number}.customization.name` | `results.${number}.customization.customizationType` | `results.${number}.customization.customizationRenderType` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onCustomizationCreated$1: EventDefinition<CustomizationCreatedEnvelope, "wix.stores.catalog.v3.customization_created">;
declare const onCustomizationDeleted$1: EventDefinition<CustomizationDeletedEnvelope, "wix.stores.catalog.v3.customization_deleted">;
declare const onCustomizationUpdated$1: EventDefinition<CustomizationUpdatedEnvelope, "wix.stores.catalog.v3.customization_updated">;

declare const createCustomization: MaybeContext<BuildRESTFunction<typeof createCustomization$1> & typeof createCustomization$1>;
declare const getCustomization: MaybeContext<BuildRESTFunction<typeof getCustomization$1> & typeof getCustomization$1>;
declare const updateCustomization: MaybeContext<BuildRESTFunction<typeof updateCustomization$1> & typeof updateCustomization$1>;
declare const deleteCustomization: MaybeContext<BuildRESTFunction<typeof deleteCustomization$1> & typeof deleteCustomization$1>;
declare const queryCustomizations: MaybeContext<BuildRESTFunction<typeof queryCustomizations$1> & typeof queryCustomizations$1>;
declare const bulkCreateCustomizations: MaybeContext<BuildRESTFunction<typeof bulkCreateCustomizations$1> & typeof bulkCreateCustomizations$1>;
declare const addCustomizationChoices: MaybeContext<BuildRESTFunction<typeof addCustomizationChoices$1> & typeof addCustomizationChoices$1>;
declare const setCustomizationChoices: MaybeContext<BuildRESTFunction<typeof setCustomizationChoices$1> & typeof setCustomizationChoices$1>;
declare const removeCustomizationChoices: MaybeContext<BuildRESTFunction<typeof removeCustomizationChoices$1> & typeof removeCustomizationChoices$1>;
declare const bulkAddCustomizationChoices: MaybeContext<BuildRESTFunction<typeof bulkAddCustomizationChoices$1> & typeof bulkAddCustomizationChoices$1>;
declare const bulkUpdateCustomizations: MaybeContext<BuildRESTFunction<typeof bulkUpdateCustomizations$1> & typeof bulkUpdateCustomizations$1>;
/**
 * Triggered when a customization is created.
 */
declare const onCustomizationCreated: BuildEventDefinition<typeof onCustomizationCreated$1> & typeof onCustomizationCreated$1;
/**
 * Triggered when a customization is deleted.
 */
declare const onCustomizationDeleted: BuildEventDefinition<typeof onCustomizationDeleted$1> & typeof onCustomizationDeleted$1;
/**
 * Triggered when a customization is updated.
 */
declare const onCustomizationUpdated: BuildEventDefinition<typeof onCustomizationUpdated$1> & typeof onCustomizationUpdated$1;

export { AddCustomizationChoicesApplicationErrors, AddCustomizationChoicesOptions, AddCustomizationChoicesResponse, AddCustomizationChoicesValidationErrors, BulkAddCustomizationChoicesApplicationErrors, BulkAddCustomizationChoicesOptions, BulkAddCustomizationChoicesResponse, BulkAddCustomizationChoicesValidationErrors, BulkCreateCustomizationsApplicationErrors, BulkCreateCustomizationsOptions, BulkCreateCustomizationsResponse, BulkCreateCustomizationsValidationErrors, BulkUpdateCustomizationsOptions, BulkUpdateCustomizationsResponse, Choice, CreateCustomizationApplicationErrors, CreateCustomizationValidationErrors, Customization, CustomizationChoices, CustomizationCreatedEnvelope, CustomizationDeletedEnvelope, CustomizationUpdatedEnvelope, CustomizationsQueryBuilder, DeleteCustomizationValidationErrors, GetCustomizationOptions, MaskedCustomization, QueryCustomizationsOptions, RemoveCustomizationChoicesApplicationErrors, RemoveCustomizationChoicesOptions, RemoveCustomizationChoicesResponse, RemoveCustomizationChoicesValidationErrors, SetCustomizationChoicesApplicationErrors, SetCustomizationChoicesOptions, SetCustomizationChoicesResponse, SetCustomizationChoicesValidationErrors, UpdateCustomization, UpdateCustomizationOptions, addCustomizationChoices, bulkAddCustomizationChoices, bulkCreateCustomizations, bulkUpdateCustomizations, createCustomization, deleteCustomization, getCustomization, onCustomizationCreated, onCustomizationDeleted, onCustomizationUpdated, queryCustomizations, removeCustomizationChoices, setCustomizationChoices, updateCustomization };
