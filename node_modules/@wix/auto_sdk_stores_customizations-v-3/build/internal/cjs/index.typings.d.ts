import { NonNullablePaths } from '@wix/sdk-types';

/**
 * Customizations include options and modifiers which can later be applied to products.
 * Options are designed to add variations to a product, where modifiers add a customizable change to the product but without creating another variant.
 */
interface Customization extends CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     * @immutable
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
    /**
     * Customization ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`).
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Customization type.
     * @immutable
     */
    customizationType?: CustomizationTypeWithLiterals;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     * @immutable
     */
    customizationRenderType?: CustomizationRenderTypeWithLiterals;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
/** @oneof */
interface CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     * @immutable
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
}
declare enum CustomizationType {
    UNKNOWN_CUSTOMIZATION_TYPE = "UNKNOWN_CUSTOMIZATION_TYPE",
    PRODUCT_OPTION = "PRODUCT_OPTION",
    MODIFIER = "MODIFIER"
}
/** @enumType */
type CustomizationTypeWithLiterals = CustomizationType | 'UNKNOWN_CUSTOMIZATION_TYPE' | 'PRODUCT_OPTION' | 'MODIFIER';
declare enum CustomizationRenderType {
    UNKNOWN_CUSTOMIZATION_RENDER_TYPE = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE",
    /** Customization by free text input. */
    FREE_TEXT = "FREE_TEXT",
    /** Customization by selection of text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Customization by selection of colors. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
/** @enumType */
type CustomizationRenderTypeWithLiterals = CustomizationRenderType | 'UNKNOWN_CUSTOMIZATION_RENDER_TYPE' | 'FREE_TEXT' | 'TEXT_CHOICES' | 'SWATCH_CHOICES';
interface FreeTextSettings {
    /** Minimum text character length. */
    minCharCount?: number;
    /**
     * Maximum text character length.
     * @max 500
     */
    maxCharCount?: number;
    /**
     * Default amount added to a product's price when this choice is assigned to a modifier.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    defaultAddedPrice?: string | null;
    /**
     * Title to display to customer for their free-text input.
     * @minLength 1
     * @maxLength 100
     */
    title?: string;
}
interface ChoicesSettings {
    /**
     * List of choices.
     * @minSize 1
     * @maxSize 200
     * @immutable
     */
    choices?: Choice[];
}
interface Choice extends ChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     * @format COLOR_HEX
     */
    colorCode?: string;
    /**
     * Choice ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * Choice type.
     *
     * > **Notes:**
     * > + For `customizationRenderType: SWATCH_CHOICES`, the supported `choiceType` values are: `ONE_COLOR`, `MULTIPLE_COLORS`, or `IMAGE`.
     * > + For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`, the supported `choiceType` value is: `CHOICE_TEXT`.
     * @immutable
     */
    choiceType?: ChoiceTypeWithLiterals;
    /**
     * A read-only key generated based on choice name. Used for eCommerce integration.
     * @readonly
     * @minLength 1
     * @maxLength 50
     */
    key?: string | null;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Default amount added to a product's price when this customization is assigned to a modifier.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    defaultAddedPrice?: string | null;
    /**
     * Number of products this choice is assigned to .
     * @readonly
     */
    assignedProductsCount?: number;
}
/** @oneof */
interface ChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     * @format COLOR_HEX
     */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    /** For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`. */
    CHOICE_TEXT = "CHOICE_TEXT",
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    ONE_COLOR = "ONE_COLOR",
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    IMAGE = "IMAGE"
}
/** @enumType */
type ChoiceTypeWithLiterals = ChoiceType | 'UNKNOWN_CHOICE_TYPE' | 'CHOICE_TEXT' | 'ONE_COLOR' | 'MULTIPLE_COLORS' | 'IMAGE';
interface MultipleColors {
    /**
     * A list of color codes.
     * @minLength 3
     * @maxLength 20
     * @minSize 2
     * @maxSize 2
     */
    colorCodes?: string[];
}
interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */
    customTag?: CustomTag;
    /**
     * tell us why you're invalidating the cache. You don't need to add your app name
     * @maxLength 256
     */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */
    customTag?: CustomTag;
}
interface App {
    /**
     * The AppDefId
     * @minLength 1
     */
    appDefId?: string;
    /**
     * The instance Id
     * @format GUID
     */
    instanceId?: string;
}
interface Page {
    /**
     * the msid the page is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Page ID
     * @minLength 1
     */
    pageId?: string;
}
interface URI {
    /**
     * the msid the URI is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes
     * @minLength 1
     */
    uriPath?: string;
}
interface File {
    /**
     * the msid the file is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by filename (for media files such as PDFs)
     * @minLength 1
     * @maxLength 256
     */
    fileName?: string;
}
interface CustomTag {
    /**
     * the msid the tag is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Tag to invalidate by
     * @minLength 1
     * @maxLength 256
     */
    tag?: string;
}
interface CreateCustomizationRequest {
    /** Customization to create. */
    customization: Customization;
}
interface CreateCustomizationResponse {
    /** Created customization. */
    customization?: Customization;
}
interface GetCustomizationRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
declare enum RequestedFields {
    /** Unknown requested field. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    /** Assigned products count. */
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'ASSIGNED_PRODUCTS_COUNT';
interface GetCustomizationResponse {
    /** Customization. */
    customization?: Customization;
}
interface UpdateCustomizationRequest {
    /** Customization to update. */
    customization: Customization;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface UpdateCustomizationResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface DeleteCustomizationRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
}
interface DeleteCustomizationResponse {
}
interface QueryCustomizationsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryCustomizationsResponse {
    /**
     * List of customizations.
     * @minSize 1
     * @maxSize 200
     */
    customizations?: Customization[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface BulkCreateCustomizationsRequest {
    /**
     * Customizations to create.
     * @minSize 1
     * @maxSize 100
     */
    customizations: Customization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateCustomizationsResponse {
    /**
     * Customizations created by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkCustomizationResult {
    /** Bulk action metadata for customization. */
    itemMetadata?: ItemMetadata;
    /**
     * Full customization entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    customization?: Customization;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface CustomizationIdsWrapper {
    /**
     * list of all the customization ids that are invalid
     * e.g list of failed choices ids
     * @minSize 1
     * @maxSize 100
     * @minLength 1
     * @maxLength 36
     */
    customizationIds?: string[];
}
interface AddCustomizationChoicesRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * Choices to add.
     * @minSize 1
     * @maxSize 100
     */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface AddCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface SetCustomizationChoicesRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * Choices to set.
     * @minSize 1
     * @maxSize 100
     */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface SetCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface RemoveCustomizationChoicesRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * IDs of choices to remove.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    choiceIds: string[];
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface RemoveCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface BulkAddCustomizationChoicesRequest {
    /**
     * List of customization IDs and choices.
     * @minSize 1
     * @maxSize 100
     */
    customizationsChoices: CustomizationChoices[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CustomizationChoices {
    /**
     * Customization ID.
     * @minLength 1
     * @maxLength 36
     */
    customizationId?: string;
    /**
     * Choices to add.
     * @minSize 1
     * @maxSize 100
     */
    choices?: Choice[];
}
interface BulkAddCustomizationChoicesResponse {
    /**
     * Customizations updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateCustomizationsRequest {
    /**
     * List of customizations to update.
     * @minSize 1
     * @maxSize 100
     */
    customizations: MaskedCustomization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface MaskedCustomization {
    /** Customization to update. */
    customization?: Customization;
}
interface BulkUpdateCustomizationsResponse {
    /**
     * Customizations updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
/** @docsIgnore */
type CreateCustomizationApplicationErrors = {
    code?: 'OPTIONS_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIERS_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_CUSTOMIZATION_RENDER_TYPE';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'INVALID_FREE_TEXT_SETTINGS';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type CreateCustomizationValidationErrors = {
    ruleName?: 'ONLY_SPACES_STRING_ERROR';
} | {
    ruleName?: 'DUPLICATE_CHOICE_NAME';
};
/** @docsIgnore */
type DeleteCustomizationValidationErrors = {
    ruleName?: 'NOT_ALLOWED_DELETE_CUSTOMIZATION_ASSIGNED_TO_PRODUCT';
};
/** @docsIgnore */
type BulkCreateCustomizationsApplicationErrors = {
    code?: 'OPTIONS_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'MODIFIERS_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DOESNT_SUPPORT_CHOICES';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICES_LIMIT_EXCEEDED';
    description?: string;
    data?: CustomizationIdsWrapper;
};
/** @docsIgnore */
type BulkCreateCustomizationsValidationErrors = {
    ruleName?: 'ONLY_SPACES_STRING_ERROR';
} | {
    ruleName?: 'INVALID_CHOICE_TYPE';
} | {
    ruleName?: 'DUPLICATE_CHOICE_NAME';
} | {
    ruleName?: 'INVALID_CHOICE_VALUE';
};
/** @docsIgnore */
type AddCustomizationChoicesApplicationErrors = {
    code?: 'CHOICES_LIMIT_EXCEEDED';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'DOESNT_SUPPORT_CHOICES';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type AddCustomizationChoicesValidationErrors = {
    ruleName?: 'INVALID_CHOICE_TYPE';
} | {
    ruleName?: 'INVALID_CHOICE_VALUE';
} | {
    ruleName?: 'DUPLICATE_CHOICE_NAME';
};
/** @docsIgnore */
type SetCustomizationChoicesApplicationErrors = {
    code?: 'DOESNT_SUPPORT_CHOICES';
    description?: string;
    data?: Record<string, any>;
} | {
    code?: 'CHOICES_LIMIT_EXCEEDED';
    description?: string;
    data?: CustomizationIdsWrapper;
};
/** @docsIgnore */
type SetCustomizationChoicesValidationErrors = {
    ruleName?: 'INVALID_CHOICE_TYPE';
} | {
    ruleName?: 'INVALID_CHOICE_VALUE';
} | {
    ruleName?: 'NOT_ALLOWED_DELETE_CHOICE_ASSIGNED_TO_PRODUCT';
} | {
    ruleName?: 'DUPLICATE_CHOICE_NAME';
};
/** @docsIgnore */
type RemoveCustomizationChoicesApplicationErrors = {
    code?: 'CHOICE_ASSIGNED_TO_PRODUCT';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type RemoveCustomizationChoicesValidationErrors = {
    ruleName?: 'NOT_ALLOWED_CUSTOMIZATION_WITHOUT_CHOICES';
};
/** @docsIgnore */
type BulkAddCustomizationChoicesApplicationErrors = {
    code?: 'CHOICES_LIMIT_EXCEEDED';
    description?: string;
    data?: CustomizationIdsWrapper;
} | {
    code?: 'DOESNT_SUPPORT_CHOICES';
    description?: string;
    data?: Record<string, any>;
};
/** @docsIgnore */
type BulkAddCustomizationChoicesValidationErrors = {
    ruleName?: 'INVALID_CHOICE_TYPE';
} | {
    ruleName?: 'INVALID_CHOICE_VALUE';
};
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
interface CustomizationCreatedEnvelope {
    entity: Customization;
    metadata: EventMetadata;
}
/**
 * Triggered when a customization is created.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Read customizations in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_READ
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.customization_created
 * @serviceIdentifier wix.stores.catalog.customization.v3.CustomizationService
 * @slug created
 */
declare function onCustomizationCreated(handler: (event: CustomizationCreatedEnvelope) => void | Promise<void>): void;
interface CustomizationDeletedEnvelope {
    entity: Customization;
    metadata: EventMetadata;
}
/**
 * Triggered when a customization is deleted.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Read customizations in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_READ
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.customization_deleted
 * @serviceIdentifier wix.stores.catalog.customization.v3.CustomizationService
 * @slug deleted
 */
declare function onCustomizationDeleted(handler: (event: CustomizationDeletedEnvelope) => void | Promise<void>): void;
interface CustomizationUpdatedEnvelope {
    entity: Customization;
    metadata: EventMetadata;
}
/**
 * Triggered when a customization is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Read customizations in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_READ
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.customization_updated
 * @serviceIdentifier wix.stores.catalog.customization.v3.CustomizationService
 * @slug updated
 */
declare function onCustomizationUpdated(handler: (event: CustomizationUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Creates a customization.
 * @param customization - Customization to create.
 * @public
 * @requiredField customization
 * @requiredField customization.choicesSettings.choices
 * @requiredField customization.customizationRenderType
 * @requiredField customization.customizationSettings
 * @requiredField customization.customizationType
 * @requiredField customization.name
 * @permissionId WIX_STORES.CUSTOMIZATION_CREATE
 * @applicableIdentity APP
 * @returns Created customization.
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.CreateCustomization
 */
declare function createCustomization(customization: NonNullablePaths<Customization, `choicesSettings.choices` | `customizationRenderType` | `customizationType` | `freeTextInput.title` | `name`, 3>): Promise<NonNullablePaths<Customization, `freeTextInput.minCharCount` | `freeTextInput.maxCharCount` | `freeTextInput.title` | `choicesSettings.choices` | `choicesSettings.choices.${number}.colorCode` | `choicesSettings.choices.${number}._id` | `choicesSettings.choices.${number}.choiceType` | `choicesSettings.choices.${number}.name` | `choicesSettings.choices.${number}.assignedProductsCount` | `name` | `customizationType` | `customizationRenderType`, 5> & {
    __applicationErrorsType?: CreateCustomizationApplicationErrors;
    __validationErrorsType?: CreateCustomizationValidationErrors;
}>;
/**
 * Retrieves a customization.
 * @param customizationId - Customization ID.
 * @public
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @applicableIdentity APP
 * @returns Customization.
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.GetCustomization
 */
declare function getCustomization(customizationId: string, options?: GetCustomizationOptions): Promise<NonNullablePaths<Customization, `freeTextInput.minCharCount` | `freeTextInput.maxCharCount` | `freeTextInput.title` | `choicesSettings.choices` | `choicesSettings.choices.${number}.colorCode` | `choicesSettings.choices.${number}._id` | `choicesSettings.choices.${number}.choiceType` | `choicesSettings.choices.${number}.name` | `choicesSettings.choices.${number}.assignedProductsCount` | `name` | `customizationType` | `customizationRenderType`, 5>>;
interface GetCustomizationOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Updates a customization.
 *
 * Each time the customization is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the customization.
 * This ensures you're working with the latest customization and prevents unintended overwrites.
 * @param _id - Customization ID.
 * @public
 * @requiredField _id
 * @requiredField customization
 * @requiredField customization.revision
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @applicableIdentity APP
 * @returns Updated customization.
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.UpdateCustomization
 */
declare function updateCustomization(_id: string, customization: NonNullablePaths<UpdateCustomization, `revision`, 2>, options?: UpdateCustomizationOptions): Promise<NonNullablePaths<Customization, `freeTextInput.minCharCount` | `freeTextInput.maxCharCount` | `freeTextInput.title` | `choicesSettings.choices` | `choicesSettings.choices.${number}.colorCode` | `choicesSettings.choices.${number}._id` | `choicesSettings.choices.${number}.choiceType` | `choicesSettings.choices.${number}.name` | `choicesSettings.choices.${number}.assignedProductsCount` | `name` | `customizationType` | `customizationRenderType`, 5>>;
interface UpdateCustomization {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     * @immutable
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
    /**
     * Customization ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`).
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Customization type.
     * @immutable
     */
    customizationType?: CustomizationTypeWithLiterals;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     * @immutable
     */
    customizationRenderType?: CustomizationRenderTypeWithLiterals;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface UpdateCustomizationOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Deletes a customization.
 *
 * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
 * @param customizationId - Customization ID.
 * @public
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_DELETE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.DeleteCustomization
 */
declare function deleteCustomization(customizationId: string): Promise<void & {
    __validationErrorsType?: DeleteCustomizationValidationErrors;
}>;
/**
 * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Customizations runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.QueryCustomizations
 */
declare function queryCustomizations(options?: QueryCustomizationsOptions): CustomizationsQueryBuilder;
interface QueryCustomizationsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[] | undefined;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface CustomizationsQueryResult extends QueryCursorResult {
    items: Customization[];
    query: CustomizationsQueryBuilder;
    next: () => Promise<CustomizationsQueryResult>;
    prev: () => Promise<CustomizationsQueryResult>;
}
interface CustomizationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any[]) => CustomizationsQueryBuilder;
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any) => CustomizationsQueryBuilder;
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: boolean) => CustomizationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'name'>) => CustomizationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'name'>) => CustomizationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => CustomizationsQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => CustomizationsQueryBuilder;
    find: () => Promise<CustomizationsQueryResult>;
}
/**
 * Creates multiple brands.
 * @param customizations - Customizations to create.
 * @public
 * @requiredField customizations
 * @permissionId WIX_STORES.CUSTOMIZATION_CREATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.BulkCreateCustomizations
 */
declare function bulkCreateCustomizations(customizations: Customization[], options?: BulkCreateCustomizationsOptions): Promise<NonNullablePaths<BulkCreateCustomizationsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.customization.freeTextInput.minCharCount` | `results.${number}.customization.freeTextInput.maxCharCount` | `results.${number}.customization.freeTextInput.title` | `results.${number}.customization.name` | `results.${number}.customization.customizationType` | `results.${number}.customization.customizationRenderType` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
    __applicationErrorsType?: BulkCreateCustomizationsApplicationErrors;
    __validationErrorsType?: BulkCreateCustomizationsValidationErrors;
}>;
interface BulkCreateCustomizationsOptions {
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
/**
 * Adds choices to a customization.
 * @param customizationId - Customization ID.
 * @param choices - Choices to add.
 * @public
 * @requiredField choices
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.AddCustomizationChoices
 */
declare function addCustomizationChoices(customizationId: string, choices: Choice[], options?: AddCustomizationChoicesOptions): Promise<NonNullablePaths<AddCustomizationChoicesResponse, `customization.freeTextInput.minCharCount` | `customization.freeTextInput.maxCharCount` | `customization.freeTextInput.title` | `customization.choicesSettings.choices` | `customization.choicesSettings.choices.${number}.colorCode` | `customization.choicesSettings.choices.${number}._id` | `customization.choicesSettings.choices.${number}.choiceType` | `customization.choicesSettings.choices.${number}.name` | `customization.choicesSettings.choices.${number}.assignedProductsCount` | `customization.name` | `customization.customizationType` | `customization.customizationRenderType`, 6> & {
    __applicationErrorsType?: AddCustomizationChoicesApplicationErrors;
    __validationErrorsType?: AddCustomizationChoicesValidationErrors;
}>;
interface AddCustomizationChoicesOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Sets a customization's choices. Any and all existing choices will be overridden.
 *
 * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
 * @param customizationId - Customization ID.
 * @param choices - Choices to set.
 * @public
 * @requiredField choices
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.SetCustomizationChoices
 */
declare function setCustomizationChoices(customizationId: string, choices: Choice[], options?: SetCustomizationChoicesOptions): Promise<NonNullablePaths<SetCustomizationChoicesResponse, `customization.freeTextInput.minCharCount` | `customization.freeTextInput.maxCharCount` | `customization.freeTextInput.title` | `customization.choicesSettings.choices` | `customization.choicesSettings.choices.${number}.colorCode` | `customization.choicesSettings.choices.${number}._id` | `customization.choicesSettings.choices.${number}.choiceType` | `customization.choicesSettings.choices.${number}.name` | `customization.choicesSettings.choices.${number}.assignedProductsCount` | `customization.name` | `customization.customizationType` | `customization.customizationRenderType`, 6> & {
    __applicationErrorsType?: SetCustomizationChoicesApplicationErrors;
    __validationErrorsType?: SetCustomizationChoicesValidationErrors;
}>;
interface SetCustomizationChoicesOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Removes choices from a customization.
 *
 * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
 * @param customizationId - Customization ID.
 * @param choiceIds - IDs of choices to remove.
 * @public
 * @requiredField choiceIds
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.RemoveCustomizationChoices
 */
declare function removeCustomizationChoices(customizationId: string, choiceIds: string[], options?: RemoveCustomizationChoicesOptions): Promise<NonNullablePaths<RemoveCustomizationChoicesResponse, `customization.freeTextInput.minCharCount` | `customization.freeTextInput.maxCharCount` | `customization.freeTextInput.title` | `customization.choicesSettings.choices` | `customization.choicesSettings.choices.${number}.colorCode` | `customization.choicesSettings.choices.${number}._id` | `customization.choicesSettings.choices.${number}.choiceType` | `customization.choicesSettings.choices.${number}.name` | `customization.choicesSettings.choices.${number}.assignedProductsCount` | `customization.name` | `customization.customizationType` | `customization.customizationRenderType`, 6> & {
    __applicationErrorsType?: RemoveCustomizationChoicesApplicationErrors;
    __validationErrorsType?: RemoveCustomizationChoicesValidationErrors;
}>;
interface RemoveCustomizationChoicesOptions {
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Adds choices to multiple customizations.
 * @param customizationsChoices - List of customization IDs and choices.
 * @public
 * @requiredField customizationsChoices
 * @requiredField customizationsChoices.choices
 * @requiredField customizationsChoices.customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.BulkAddCustomizationChoices
 */
declare function bulkAddCustomizationChoices(customizationsChoices: NonNullablePaths<CustomizationChoices, `choices` | `customizationId`, 2>[], options?: BulkAddCustomizationChoicesOptions): Promise<NonNullablePaths<BulkAddCustomizationChoicesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.customization.freeTextInput.minCharCount` | `results.${number}.customization.freeTextInput.maxCharCount` | `results.${number}.customization.freeTextInput.title` | `results.${number}.customization.name` | `results.${number}.customization.customizationType` | `results.${number}.customization.customizationRenderType` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6> & {
    __applicationErrorsType?: BulkAddCustomizationChoicesApplicationErrors;
    __validationErrorsType?: BulkAddCustomizationChoicesValidationErrors;
}>;
interface BulkAddCustomizationChoicesOptions {
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
/**
 * Updates multiple customizations.
 *
 * Each time the customization is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the customization.
 * This ensures you're working with the latest customization and prevents unintended overwrites.
 * @param customizations - List of customizations to update.
 * @public
 * @requiredField customizations
 * @requiredField customizations.customization._id
 * @requiredField customizations.customization.name
 * @requiredField customizations.customization.revision
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.BulkUpdateCustomizations
 */
declare function bulkUpdateCustomizations(customizations: NonNullablePaths<MaskedCustomization, `customization._id` | `customization.name` | `customization.revision`, 3>[], options?: BulkUpdateCustomizationsOptions): Promise<NonNullablePaths<BulkUpdateCustomizationsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.customization.freeTextInput.minCharCount` | `results.${number}.customization.freeTextInput.maxCharCount` | `results.${number}.customization.freeTextInput.title` | `results.${number}.customization.name` | `results.${number}.customization.customizationType` | `results.${number}.customization.customizationRenderType` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
interface BulkUpdateCustomizationsOptions {
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}

export { type ActionEvent, type AddCustomizationChoicesApplicationErrors, type AddCustomizationChoicesOptions, type AddCustomizationChoicesRequest, type AddCustomizationChoicesResponse, type AddCustomizationChoicesValidationErrors, type App, type ApplicationError, type BaseEventMetadata, type BulkActionMetadata, type BulkAddCustomizationChoicesApplicationErrors, type BulkAddCustomizationChoicesOptions, type BulkAddCustomizationChoicesRequest, type BulkAddCustomizationChoicesResponse, type BulkAddCustomizationChoicesValidationErrors, type BulkCreateCustomizationsApplicationErrors, type BulkCreateCustomizationsOptions, type BulkCreateCustomizationsRequest, type BulkCreateCustomizationsResponse, type BulkCreateCustomizationsValidationErrors, type BulkCustomizationResult, type BulkUpdateCustomizationsOptions, type BulkUpdateCustomizationsRequest, type BulkUpdateCustomizationsResponse, type Choice, ChoiceType, type ChoiceTypeWithLiterals, type ChoiceValueOneOf, type ChoicesSettings, type CreateCustomizationApplicationErrors, type CreateCustomizationRequest, type CreateCustomizationResponse, type CreateCustomizationValidationErrors, type CursorPaging, type CursorPagingMetadata, type CursorQuery, type CursorQueryPagingMethodOneOf, type Cursors, type CustomTag, type Customization, type CustomizationChoices, type CustomizationCreatedEnvelope, type CustomizationCustomizationSettingsOneOf, type CustomizationDeletedEnvelope, type CustomizationIdsWrapper, CustomizationRenderType, type CustomizationRenderTypeWithLiterals, CustomizationType, type CustomizationTypeWithLiterals, type CustomizationUpdatedEnvelope, type CustomizationsQueryBuilder, type CustomizationsQueryResult, type DeleteCustomizationRequest, type DeleteCustomizationResponse, type DeleteCustomizationValidationErrors, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type File, type FocalPoint, type FreeTextSettings, type GetCustomizationOptions, type GetCustomizationRequest, type GetCustomizationResponse, type IdentificationData, type IdentificationDataIdOneOf, type InvalidateCache, type InvalidateCacheGetByOneOf, type ItemMetadata, type MaskedCustomization, type MessageEnvelope, type MultipleColors, type Page, type QueryCustomizationsOptions, type QueryCustomizationsRequest, type QueryCustomizationsResponse, type RemoveCustomizationChoicesApplicationErrors, type RemoveCustomizationChoicesOptions, type RemoveCustomizationChoicesRequest, type RemoveCustomizationChoicesResponse, type RemoveCustomizationChoicesValidationErrors, RequestedFields, type RequestedFieldsWithLiterals, type RestoreInfo, type SetCustomizationChoicesApplicationErrors, type SetCustomizationChoicesOptions, type SetCustomizationChoicesRequest, type SetCustomizationChoicesResponse, type SetCustomizationChoicesValidationErrors, SortOrder, type SortOrderWithLiterals, type Sorting, type URI, type UpdateCustomization, type UpdateCustomizationOptions, type UpdateCustomizationRequest, type UpdateCustomizationResponse, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, addCustomizationChoices, bulkAddCustomizationChoices, bulkCreateCustomizations, bulkUpdateCustomizations, createCustomization, deleteCustomization, getCustomization, onCustomizationCreated, onCustomizationDeleted, onCustomizationUpdated, queryCustomizations, removeCustomizationChoices, setCustomizationChoices, updateCustomization };
