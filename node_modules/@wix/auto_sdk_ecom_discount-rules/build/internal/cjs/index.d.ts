import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { DiscountRule, CreateDiscountRuleApplicationErrors, CreateDiscountRuleValidationErrors, UpdateDiscountRule, DiscountRulesQueryBuilder, DiscountRuleCreatedEnvelope, DiscountRuleDeletedEnvelope, DiscountRuleUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, ActiveTimeInfo, And, AppliedDiscount, AppliedDiscountRule, AppliedSubjectType, AppliedSubjectTypeWithLiterals, BaseEventMetadata, BuyXGetYInfo, CatalogItemFilter, CatalogReference, CreateDiscountRuleRequest, CreateDiscountRuleResponse, CursorPaging, Cursors, Custom, CustomFilter, CustomerBuy, CustomerBuyConditionOneOf, CustomerGet, DeleteDiscountRuleRequest, DeleteDiscountRuleResponse, Discount, DiscountDiscountOneOf, DiscountRuleName, DiscountRuleUsageLimitReached, DiscountRulesQueryResult, DiscountSettings, DiscountTrigger, DiscountTriggerTriggerOneOf, DiscountType, DiscountTypeWithLiterals, Discounts, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, GetAppliedDiscountsRequest, GetAppliedDiscountsResponse, GetDiscountRuleRequest, GetDiscountRuleResponse, IdentificationData, IdentificationDataIdOneOf, ItemQuantityRange, LineItem, MessageEnvelope, MultiCurrencyPrice, Or, PlatformPaging, PlatformPagingMetadata, PlatformQuery, PlatformQueryPagingMethodOneOf, QueryDiscountRulesRequest, QueryDiscountRulesResponse, RestoreInfo, Scope, ScopeScopeItemsOneOf, ScopeType, ScopeTypeWithLiterals, SortOrder, SortOrderWithLiterals, Sorting, SpecificItemsInfo, Status, StatusWithLiterals, SubtotalRange, Tier, TieredPrice, TriggerType, TriggerTypeWithLiterals, Type, TypeWithLiterals, UpdateDiscountRuleRequest, UpdateDiscountRuleResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function createDiscountRule$1(httpClient: HttpClient): CreateDiscountRuleSignature;
interface CreateDiscountRuleSignature {
    /**
     * Creates a new discount rule.
     *
     *
     * The `createDiscountRule()` function returns a Promise that resolves to the new discount rule when it's created.
     * @param - Discount rule info.
     * @returns Discount rule.
     */
    (discountRule: NonNullablePaths<DiscountRule, `discounts` | `name`, 2>): Promise<NonNullablePaths<DiscountRule, `trigger.and.triggers` | `trigger.or.triggers` | `trigger.customTrigger._id` | `trigger.customTrigger.appId` | `trigger.subtotalRange.scopes` | `trigger.subtotalRange.scopes.${number}.catalogItemFilter.catalogAppId` | `trigger.subtotalRange.scopes.${number}.customFilter.appId` | `trigger.subtotalRange.scopes.${number}._id` | `trigger.subtotalRange.scopes.${number}.type` | `trigger.itemQuantityRange.scopes` | `trigger.triggerType` | `discounts.values` | `discounts.values.${number}.percentage` | `discounts.values.${number}.fixedAmount` | `discounts.values.${number}.fixedPrice` | `discounts.values.${number}.targetType` | `discounts.values.${number}.discountType` | `status` | `usageCount`, 7> & {
        __applicationErrorsType?: CreateDiscountRuleApplicationErrors;
        __validationErrorsType?: CreateDiscountRuleValidationErrors;
    }>;
}
declare function getDiscountRule$1(httpClient: HttpClient): GetDiscountRuleSignature;
interface GetDiscountRuleSignature {
    /**
     * Retrieves a discount rule.
     *
     *
     * The `getDiscountRule()` function returns a Promise that resolves when the specified discount rule is retrieved.
     * @param - ID of the discount rule to retrieve.
     * @returns The requested discount rule.
     */
    (discountRuleId: string): Promise<NonNullablePaths<DiscountRule, `trigger.and.triggers` | `trigger.or.triggers` | `trigger.customTrigger._id` | `trigger.customTrigger.appId` | `trigger.subtotalRange.scopes` | `trigger.subtotalRange.scopes.${number}.catalogItemFilter.catalogAppId` | `trigger.subtotalRange.scopes.${number}.customFilter.appId` | `trigger.subtotalRange.scopes.${number}._id` | `trigger.subtotalRange.scopes.${number}.type` | `trigger.itemQuantityRange.scopes` | `trigger.triggerType` | `discounts.values` | `discounts.values.${number}.percentage` | `discounts.values.${number}.fixedAmount` | `discounts.values.${number}.fixedPrice` | `discounts.values.${number}.targetType` | `discounts.values.${number}.discountType` | `status` | `usageCount`, 7>>;
}
declare function updateDiscountRule$1(httpClient: HttpClient): UpdateDiscountRuleSignature;
interface UpdateDiscountRuleSignature {
    /**
     * Updates a discount rule's properties.
     *
     *
     * The `updateDiscountRule()` function returns a Promise that resolves when the specified discount rule's properties are updated.
     *
     * Each time the discount rule is updated, `revision` increments by 1. The existing `revision` must be included when updating the discount rule. This ensures you're working with the latest discount rule information, and it prevents unintended overwrites.
     * @param - Discount rule ID.
     * @param - Discount rule info.
     * @param - Discount rule info.
     * @returns Updated discount rule.
     */
    (_id: string, discountRule: NonNullablePaths<UpdateDiscountRule, `revision`, 2>): Promise<NonNullablePaths<DiscountRule, `trigger.and.triggers` | `trigger.or.triggers` | `trigger.customTrigger._id` | `trigger.customTrigger.appId` | `trigger.subtotalRange.scopes` | `trigger.subtotalRange.scopes.${number}.catalogItemFilter.catalogAppId` | `trigger.subtotalRange.scopes.${number}.customFilter.appId` | `trigger.subtotalRange.scopes.${number}._id` | `trigger.subtotalRange.scopes.${number}.type` | `trigger.itemQuantityRange.scopes` | `trigger.triggerType` | `discounts.values` | `discounts.values.${number}.percentage` | `discounts.values.${number}.fixedAmount` | `discounts.values.${number}.fixedPrice` | `discounts.values.${number}.targetType` | `discounts.values.${number}.discountType` | `status` | `usageCount`, 7>>;
}
declare function deleteDiscountRule$1(httpClient: HttpClient): DeleteDiscountRuleSignature;
interface DeleteDiscountRuleSignature {
    /**
     * Deletes a discount rule.
     *
     *
     * The `deleteDiscountRule()` function returns a Promise that resolves when the specified discount rule is deleted.
     * @param - ID of the discount rule to delete.
     */
    (discountRuleId: string): Promise<void>;
}
declare function queryDiscountRules$1(httpClient: HttpClient): QueryDiscountRulesSignature;
interface QueryDiscountRulesSignature {
    /**
     * Creates a query to retrieve a list of discount rules.
     *
     *
     * The `queryDiscountRules()` function builds a query to retrieve a list of up to 100 discount rules, and returns a [`DiscountRulesQueryBuilder`](#discountrulesquerybuilder) object.
     *
     * The returned object contains the query definition which is typically used to run the query using the [`find()`](/discount-rules/discount-rules-query-builder/find) function.
     *
     * You can refine the query by chaining `DiscountRulesQueryBuilder` functions onto the query. `DiscountRulesQueryBuilder` functions enable you to sort, filter, and control the results queryDiscountRules() returns.
     *
     * By default, `queryDiscountRules()` sorts results by [`ascending("_id")`](/discount-rules/discount-rules-query-builder/ascending) by default. This can be overridden.
     *
     * To learn how to query posts, refer to the table below.
     *
     * The following `DiscountRulesQueryBuilder` functions are supported for the `queryDiscountRules()` function. For a full description of the discount rule object, see the object returned for the [`items`](/discount-rules/discount-rules-query-result/items) property in the `DiscountRulesQueryResult`.
     */
    (): DiscountRulesQueryBuilder;
}
declare const onDiscountRuleCreated$1: EventDefinition<DiscountRuleCreatedEnvelope, "wix.ecom.discounts.v1.discount_rule_created">;
declare const onDiscountRuleDeleted$1: EventDefinition<DiscountRuleDeletedEnvelope, "wix.ecom.discounts.v1.discount_rule_deleted">;
declare const onDiscountRuleUpdated$1: EventDefinition<DiscountRuleUpdatedEnvelope, "wix.ecom.discounts.v1.discount_rule_updated">;

declare const createDiscountRule: MaybeContext<BuildRESTFunction<typeof createDiscountRule$1> & typeof createDiscountRule$1>;
declare const getDiscountRule: MaybeContext<BuildRESTFunction<typeof getDiscountRule$1> & typeof getDiscountRule$1>;
declare const updateDiscountRule: MaybeContext<BuildRESTFunction<typeof updateDiscountRule$1> & typeof updateDiscountRule$1>;
declare const deleteDiscountRule: MaybeContext<BuildRESTFunction<typeof deleteDiscountRule$1> & typeof deleteDiscountRule$1>;
declare const queryDiscountRules: MaybeContext<BuildRESTFunction<typeof queryDiscountRules$1> & typeof queryDiscountRules$1>;
/**
 * Triggered when a discount rule is created.
 */
declare const onDiscountRuleCreated: BuildEventDefinition<typeof onDiscountRuleCreated$1> & typeof onDiscountRuleCreated$1;
/**
 * Triggered when a discount rule is deleted.
 */
declare const onDiscountRuleDeleted: BuildEventDefinition<typeof onDiscountRuleDeleted$1> & typeof onDiscountRuleDeleted$1;
/**
 * Triggered when a discount rule is updated.
 */
declare const onDiscountRuleUpdated: BuildEventDefinition<typeof onDiscountRuleUpdated$1> & typeof onDiscountRuleUpdated$1;

export { CreateDiscountRuleApplicationErrors, CreateDiscountRuleValidationErrors, DiscountRule, DiscountRuleCreatedEnvelope, DiscountRuleDeletedEnvelope, DiscountRuleUpdatedEnvelope, DiscountRulesQueryBuilder, UpdateDiscountRule, createDiscountRule, deleteDiscountRule, getDiscountRule, onDiscountRuleCreated, onDiscountRuleDeleted, onDiscountRuleUpdated, queryDiscountRules, updateDiscountRule };
