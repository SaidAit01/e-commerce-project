// src/ecom-discounts-v1-discount-rule-discount-rules.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-discounts-v1-discount-rule-discount-rules.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomDiscountsDiscountRuleServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/discount-rules-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/discount-rules",
        destPath: "/v1/discount-rules"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/discount-rules",
        destPath: "/v1/discount-rules"
      },
      {
        srcPath: "/v1/discount-rules",
        destPath: "/v1/discount-rules"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/ecom/discounts/v1/discount-rules",
        destPath: "/v1/discount-rules"
      }
    ],
    _: [
      {
        srcPath: "/ecom/discounts/v1/discount-rules",
        destPath: "/v1/discount-rules"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_discount-rules";
function createDiscountRule(payload) {
  function __createDiscountRule({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "discountRule.createdDate" },
          { path: "discountRule.updatedDate" },
          { path: "discountRule.activeTimeInfo.start" },
          { path: "discountRule.activeTimeInfo.end" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "discountRule.discounts.values.percentage" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.discounts.v1.discount_rule",
      method: "POST",
      methodFqn: "com.wix.ecom.discounts.DiscountRuleService.CreateDiscountRule",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomDiscountsDiscountRuleServiceUrl({
        protoPath: "/v1/discount-rules",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "discountRule.createdDate" },
            { path: "discountRule.updatedDate" },
            { path: "discountRule.activeTimeInfo.start" },
            { path: "discountRule.activeTimeInfo.end" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "discountRule.discounts.values.percentage" }]
        }
      ])
    };
    return metadata;
  }
  return __createDiscountRule;
}
function getDiscountRule(payload) {
  function __getDiscountRule({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.discounts.v1.discount_rule",
      method: "GET",
      methodFqn: "com.wix.ecom.discounts.DiscountRuleService.GetDiscountRule",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomDiscountsDiscountRuleServiceUrl({
        protoPath: "/v1/discount-rules/{discountRuleId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "discountRule.createdDate" },
            { path: "discountRule.updatedDate" },
            { path: "discountRule.activeTimeInfo.start" },
            { path: "discountRule.activeTimeInfo.end" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "discountRule.discounts.values.percentage" }]
        }
      ])
    };
    return metadata;
  }
  return __getDiscountRule;
}
function updateDiscountRule(payload) {
  function __updateDiscountRule({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "mask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "discountRule.createdDate" },
          { path: "discountRule.updatedDate" },
          { path: "discountRule.activeTimeInfo.start" },
          { path: "discountRule.activeTimeInfo.end" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "discountRule.discounts.values.percentage" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.discounts.v1.discount_rule",
      method: "PATCH",
      methodFqn: "com.wix.ecom.discounts.DiscountRuleService.UpdateDiscountRule",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomDiscountsDiscountRuleServiceUrl({
        protoPath: "/v1/discount-rules/{discountRule.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "discountRule.createdDate" },
            { path: "discountRule.updatedDate" },
            { path: "discountRule.activeTimeInfo.start" },
            { path: "discountRule.activeTimeInfo.end" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "discountRule.discounts.values.percentage" }]
        }
      ])
    };
    return metadata;
  }
  return __updateDiscountRule;
}
function deleteDiscountRule(payload) {
  function __deleteDiscountRule({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.discounts.v1.discount_rule",
      method: "DELETE",
      methodFqn: "com.wix.ecom.discounts.DiscountRuleService.DeleteDiscountRule",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomDiscountsDiscountRuleServiceUrl({
        protoPath: "/v1/discount-rules/{discountRuleId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteDiscountRule;
}
function queryDiscountRules(payload) {
  function __queryDiscountRules({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.discounts.v1.discount_rule",
      method: "POST",
      methodFqn: "com.wix.ecom.discounts.DiscountRuleService.QueryDiscountRules",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomDiscountsDiscountRuleServiceUrl({
        protoPath: "/v1/discount-rules/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "discountRules.createdDate" },
            { path: "discountRules.updatedDate" },
            { path: "discountRules.activeTimeInfo.start" },
            { path: "discountRules.activeTimeInfo.end" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "discountRules.discounts.values.percentage" }]
        }
      ])
    };
    return metadata;
  }
  return __queryDiscountRules;
}

// src/ecom-discounts-v1-discount-rule-discount-rules.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var ScopeType = /* @__PURE__ */ ((ScopeType2) => {
  ScopeType2["UNDEFINED_SCOPE"] = "UNDEFINED_SCOPE";
  ScopeType2["CATALOG_ITEM"] = "CATALOG_ITEM";
  ScopeType2["CUSTOM_FILTER"] = "CUSTOM_FILTER";
  return ScopeType2;
})(ScopeType || {});
var TriggerType = /* @__PURE__ */ ((TriggerType2) => {
  TriggerType2["UNDEFINED"] = "UNDEFINED";
  TriggerType2["AND"] = "AND";
  TriggerType2["SUBTOTAL_RANGE"] = "SUBTOTAL_RANGE";
  TriggerType2["ITEM_QUANTITY_RANGE"] = "ITEM_QUANTITY_RANGE";
  TriggerType2["CUSTOM"] = "CUSTOM";
  TriggerType2["OR"] = "OR";
  return TriggerType2;
})(TriggerType || {});
var Type = /* @__PURE__ */ ((Type2) => {
  Type2["UNDEFINED"] = "UNDEFINED";
  Type2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  return Type2;
})(Type || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["UNDEFINED"] = "UNDEFINED";
  DiscountType2["PERCENTAGE"] = "PERCENTAGE";
  DiscountType2["FIXED_AMOUNT"] = "FIXED_AMOUNT";
  DiscountType2["FIXED_PRICE"] = "FIXED_PRICE";
  return DiscountType2;
})(DiscountType || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNDEFINED"] = "UNDEFINED";
  Status2["LIVE"] = "LIVE";
  Status2["EXPIRED"] = "EXPIRED";
  Status2["PENDING"] = "PENDING";
  return Status2;
})(Status || {});
var AppliedSubjectType = /* @__PURE__ */ ((AppliedSubjectType2) => {
  AppliedSubjectType2["UNDEFINED"] = "UNDEFINED";
  AppliedSubjectType2["ALL_ITEMS"] = "ALL_ITEMS";
  AppliedSubjectType2["LOWEST_PRICED_ITEM"] = "LOWEST_PRICED_ITEM";
  return AppliedSubjectType2;
})(AppliedSubjectType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createDiscountRule2(discountRule) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    discountRule
  });
  const reqOpts = createDiscountRule(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.discountRule;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { discountRule: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["discountRule"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getDiscountRule2(discountRuleId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    discountRuleId
  });
  const reqOpts = getDiscountRule(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.discountRule;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { discountRuleId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["discountRuleId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateDiscountRule2(_id, discountRule) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    discountRule: { ...discountRule, id: _id }
  });
  const reqOpts = updateDiscountRule(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.discountRule;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { discountRule: "$[1]" },
        explicitPathsToArguments: { "discountRule.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "discountRule"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteDiscountRule2(discountRuleId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    discountRuleId
  });
  const reqOpts = deleteDiscountRule(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { discountRuleId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["discountRuleId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryDiscountRules2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryDiscountRules(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.discountRules,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
export {
  AppliedSubjectType,
  DiscountType,
  ScopeType,
  SortOrder,
  Status,
  TriggerType,
  Type,
  WebhookIdentityType,
  createDiscountRule2 as createDiscountRule,
  deleteDiscountRule2 as deleteDiscountRule,
  getDiscountRule2 as getDiscountRule,
  queryDiscountRules2 as queryDiscountRules,
  updateDiscountRule2 as updateDiscountRule
};
//# sourceMappingURL=index.typings.mjs.map