import { type LineItem } from "../services/current-cart-service.js";
import * as currentCart from "@wix/auto_sdk_ecom_current-cart";
/**
 * Props for Trigger headless component
 */
export interface TriggerProps {
    /** Render prop function that receives trigger data */
    children: (props: TriggerRenderProps) => React.ReactNode;
}
/**
 * Render props for Trigger component
 */
export interface TriggerRenderProps {
    /** Number of items in cart */
    itemCount: number;
    /** Whether cart has items */
    hasItems: boolean;
    /** Function to open cart */
    onOpen: () => void;
    /** Whether cart is currently loading */
    isLoading: boolean;
}
/**
 * Headless component for cart trigger with item count
 */
export declare const Trigger: (props: TriggerProps) => import("react").ReactNode;
/**
 * Props for Content headless component
 */
export interface ContentProps {
    /** Render prop function that receives content data */
    children: (props: ContentRenderProps) => React.ReactNode;
}
/**
 * Render props for Content component
 */
export interface ContentRenderProps {
    /** Whether cart content is open */
    isOpen: boolean;
    /** Function to close cart */
    onClose: () => void;
    /** Cart data */
    cart: currentCart.Cart | null;
    /** Whether cart is loading */
    isLoading: boolean;
    /** Error message if any */
    error: string | null;
}
/**
 * Headless component for cart content/modal
 */
export declare const Content: (props: ContentProps) => import("react").ReactNode;
/**
 * Props for Items headless component
 */
export interface ItemsProps {
    /** Render prop function that receives items data */
    children: (props: ItemsRenderProps) => React.ReactNode;
}
/**
 * Render props for Items component
 */
export interface ItemsRenderProps {
    /** Array of line items in cart */
    items: any[];
    /** Whether cart has items */
    hasItems: boolean;
    /** Total number of items */
    totalItems: number;
}
/**
 * Headless component for cart items collection
 */
export declare const Items: (props: ItemsProps) => import("react").ReactNode;
/**
 * Props for Item headless component
 */
export interface ItemProps {
    /** Line item data */
    item: any;
    /** Render prop function that receives item data */
    children: (props: ItemRenderProps) => React.ReactNode;
}
/**
 * Render props for Item component
 */
export interface ItemRenderProps {
    /** Line item data */
    item: any | null;
    /** Current quantity */
    quantity: number;
    /** Product title */
    title: string;
    /** Product image URL */
    image: string | null;
    /** Line item price */
    price: string;
    /** Selected product options */
    selectedOptions: Array<{
        name: string;
        value: string | {
            name: string;
            code: string;
        };
    }>;
    /** Function to increase quantity */
    onIncrease: () => Promise<void>;
    /** Function to decrease quantity */
    onDecrease: () => Promise<void>;
    /** Function to remove item */
    onRemove: () => Promise<void>;
    /** Whether item is loading */
    isLoading: boolean;
}
/**
 * Headless component for individual cart item
 */
export declare const Item: (props: ItemProps) => import("react").ReactNode;
/**
 * Props for Summary headless component
 */
export interface SummaryProps {
    /** Render prop function that receives summary data */
    children: (props: SummaryRenderProps) => React.ReactNode;
}
/**
 * Render props for Summary component
 */
export interface SummaryRenderProps {
    /** Cart subtotal */
    subtotal: string;
    /** Discount amount if coupon applied */
    discount: string | null;
    /** Applied coupon code if any */
    appliedCoupon: string | null;
    /** Shipping cost */
    shipping: string;
    /** Tax amount */
    tax: string;
    /** Cart total */
    total: string;
    /** Currency code */
    currency: string;
    /** Total number of items */
    itemCount: number;
    /** Whether checkout is available */
    canCheckout: boolean;
    /** Whether totals are being calculated */
    isTotalsLoading: boolean;
}
/**
 * Headless component for cart summary/totals
 */
export declare const Summary: (props: SummaryProps) => import("react").ReactNode;
/**
 * Props for Clear headless component
 */
export interface ClearProps {
    /** Render prop function that receives clear action */
    children: (props: ClearRenderProps) => React.ReactNode;
}
/**
 * Render props for Clear component
 */
export interface ClearRenderProps {
    /** Function to clear all items from cart */
    onClear: () => Promise<void>;
    /** Whether cart has items to clear */
    hasItems: boolean;
    /** Whether clear action is loading */
    isLoading: boolean;
}
/**
 * Headless component for clearing the cart
 */
export declare const Clear: (props: ClearProps) => import("react").ReactNode;
/**
 * Props for Checkout headless component
 */
export interface CheckoutProps {
    /** Render prop function that receives checkout data */
    children: (props: CheckoutRenderProps) => React.ReactNode;
}
/**
 * Render props for Checkout component
 */
export interface CheckoutRenderProps {
    /** Function to proceed to checkout */
    onProceed: () => Promise<void>;
    /** Whether checkout is available */
    canCheckout: boolean;
    /** Whether checkout action is loading */
    isLoading: boolean;
    /** Error message if checkout fails */
    error: string | null;
}
/**
 * Headless component for checkout action
 */
export declare const Checkout: (props: CheckoutProps) => import("react").ReactNode;
/**
 * Props for Notes headless component
 */
export interface NotesProps {
    /** Render prop function that receives notes data */
    children: (props: NotesRenderProps) => React.ReactNode;
}
/**
 * Render props for Notes component
 */
export interface NotesRenderProps {
    /** Current notes value */
    notes: string;
    /** Function to update notes */
    onNotesChange: (notes: string) => Promise<void>;
}
/**
 * Headless component for notes
 */
export declare const Notes: (props: NotesProps) => import("react").ReactNode;
/**
 * Props for Coupon headless component
 */
export interface CouponProps {
    /** Render prop function that receives coupon data */
    children: (props: CouponRenderProps) => React.ReactNode;
}
/**
 * Render props for Coupon component
 */
export interface CouponRenderProps {
    /** Applied coupon code if any */
    appliedCoupon: string | null;
    /** Function to apply coupon */
    onApply: (code: string) => Promise<void>;
    /** Function to remove coupon */
    onRemove: () => Promise<void>;
    /** Whether coupon action is loading */
    isLoading: boolean;
    /** Error message if coupon operation fails */
    error: string | null;
}
/**
 * Headless component for coupon functionality
 */
export declare const Coupon: (props: CouponProps) => import("react").ReactNode;
/**
 * Props for LineItemAdded headless component
 */
export interface LineItemAddedProps {
    /** Render prop function that receives line item added subscription data */
    children: (props: LineItemAddedRenderProps) => React.ReactNode;
}
/**
 * Render props for LineItemAdded component
 */
export interface LineItemAddedRenderProps {
    /**
     * Subscribe to line item added events
     *
     * Call this function with a callback to receive notifications when items
     * are added to the cart. The callback receives the updated line items array.
     *
     * @param callback - Function called when items are added to cart. Receives array of line items or undefined
     * @returns Unsubscribe function to clean up the subscription
     *
     * @example
     * ```tsx
     * useEffect(() => {
     *   return onAddedToCart((lineItems) => {
     *     console.log('Items added:', lineItems);
     *   });
     * }, [onAddedToCart]);
     * ```
     */
    onAddedToCart: (callback: LineItemAddedCallback) => void;
}
/**
 * Callback function type for line item added events
 *
 * @param lineItems - Array of line items currently in the cart, or undefined if cart is empty
 */
export type LineItemAddedCallback = (lineItems: LineItem[] | undefined) => void;
/**
 * Headless component for line item added event subscription
 *
 * Provides a way to subscribe to cart addition events and receive notifications
 * when items are added to the current cart. The callback receives the updated
 * line items array, allowing you to show notifications, trigger animations,
 * or perform other actions when products are added.
 *
 * @example
 * ```tsx
 * // Basic usage - show global notification
 * <CurrentCart.LineItemAdded>
 *   {({ onAddedToCart }) => {
 *     useEffect(() => {
 *       return onAddedToCart((lineItems) => {
 *         setShowSuccessMessage(true);
 *         setTimeout(() => setShowSuccessMessage(false), 3000);
 *       });
 *     }, [onAddedToCart]);
 *     return null;
 *   }}
 * </CurrentCart.LineItemAdded>
 * ```
 *
 * @example
 * ```tsx
 * // Product-specific usage - show notification only for specific product
 * <CurrentCart.LineItemAdded>
 *   {({ onAddedToCart }) => {
 *     useEffect(() => {
 *       return onAddedToCart((lineItems) => {
 *         if (!lineItems) return;
 *         const myLineItemIsThere = lineItems.some(
 *           lineItem => lineItem.catalogReference?.catalogItemId === product._id
 *         );
 *         if (!myLineItemIsThere) return;
 *
 *         setShowSuccessMessage(true);
 *         setTimeout(() => setShowSuccessMessage(false), 3000);
 *       });
 *     }, [onAddedToCart, product._id]);
 *     return null;
 *   }}
 * </CurrentCart.LineItemAdded>
 * ```
 *
 * @example
 * ```tsx
 * // Combined with cart opening - show notification then open cart
 * <CurrentCart.Trigger>
 *   {({ onOpen }) => (
 *     <CurrentCart.LineItemAdded>
 *       {({ onAddedToCart }) => {
 *         useEffect(() => {
 *           return onAddedToCart((lineItems) => {
 *             setShowSuccessMessage(true);
 *             setTimeout(() => {
 *               setShowSuccessMessage(false);
 *               onOpen(); // Open cart after notification
 *             }, 3000);
 *           });
 *         }, [onAddedToCart]);
 *         return null;
 *       }}
 *     </CurrentCart.LineItemAdded>
 *   )}
 * </CurrentCart.Trigger>
 * ```
 */
export declare const LineItemAdded: (props: LineItemAddedProps) => import("react").ReactNode;
