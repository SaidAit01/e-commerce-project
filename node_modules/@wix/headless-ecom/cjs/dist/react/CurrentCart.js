import { useService } from "@wix/services-manager-react";
import { CurrentCartServiceDefinition, } from "../services/current-cart-service.js";
import { media } from "@wix/sdk";
/**
 * Helper function to format currency properly
 */
function formatCurrency(amount, currencyCode) {
    try {
        return new Intl.NumberFormat("en-US", {
            style: "currency",
            currency: currencyCode,
        }).format(amount);
    }
    catch (error) {
        // Fallback if currency code is invalid
        return `${amount.toFixed(2)} ${currencyCode}`;
    }
}
/**
 * Headless component for cart trigger with item count
 */
export const Trigger = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const itemCount = service.cartCount.get();
    const isLoading = service.isLoading.get();
    return props.children({
        itemCount,
        hasItems: itemCount > 0,
        onOpen: service.openCart,
        isLoading,
    });
};
/**
 * Headless component for cart content/modal
 */
export const Content = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const isOpen = service.isOpen.get();
    const cart = service.cart.get();
    const isLoading = service.isLoading.get();
    const error = service.error.get();
    return props.children({
        isOpen,
        onClose: service.closeCart,
        cart,
        isLoading,
        error,
    });
};
/**
 * Headless component for cart items collection
 */
export const Items = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const cart = service.cart.get();
    const items = cart?.lineItems || [];
    const totalItems = service.cartCount.get();
    return props.children({
        items,
        hasItems: items.length > 0,
        totalItems,
    });
};
/**
 * Headless component for individual cart item
 */
export const Item = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const cart = service.cart.get();
    const item = props.item;
    const isLoading = service.isLoading.get();
    if (!item) {
        const currency = cart?.currency || "USD";
        return props.children({
            item: null,
            quantity: 0,
            title: "",
            image: null,
            price: formatCurrency(0, currency),
            selectedOptions: [],
            onIncrease: async () => { },
            onDecrease: async () => { },
            onRemove: async () => { },
            isLoading: false,
        });
    }
    // Fix image URL access - properly handle null/undefined image
    let image = null;
    if (item.image) {
        try {
            image = media.getImageUrl(item.image).url;
        }
        catch (error) {
            console.warn("Failed to get image URL:", error);
            image = null;
        }
    }
    // Extract variant information from description lines
    const selectedOptions = [];
    if (item.descriptionLines) {
        item.descriptionLines.forEach((line) => {
            if (line.name?.original) {
                const optionName = line.name.original;
                if (line.colorInfo) {
                    selectedOptions.push({
                        name: optionName,
                        value: {
                            name: line.colorInfo.original,
                            code: line.colorInfo.code,
                        },
                    });
                }
                else if (line.plainText) {
                    selectedOptions.push({
                        name: optionName,
                        value: line.plainText.original,
                    });
                }
            }
        });
    }
    // Calculate total price for this line item (unit price Ã— quantity)
    const unitPrice = parseFloat(item.price?.amount || "0");
    const quantity = item.quantity || 0;
    const totalPrice = unitPrice * quantity;
    const currency = cart?.currency || "USD";
    // Format price with proper currency
    const formattedPrice = formatCurrency(totalPrice, currency);
    const lineItemId = item._id || "";
    return props.children({
        item,
        quantity,
        title: item.productName?.original || "",
        image,
        price: formattedPrice,
        selectedOptions,
        onIncrease: () => service.increaseLineItemQuantity(lineItemId),
        onDecrease: () => service.decreaseLineItemQuantity(lineItemId),
        onRemove: () => service.removeLineItem(lineItemId),
        isLoading,
    });
};
/**
 * Headless component for cart summary/totals
 */
export const Summary = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const cart = service.cart.get();
    const itemCount = service.cartCount.get();
    const cartTotals = service.cartTotals.get();
    const isTotalsLoading = service.isTotalsLoading.get();
    const currency = cart?.currency || cartTotals?.currency || "USD";
    // Use SDK totals only
    const totals = cartTotals?.priceSummary || {};
    const subtotal = formatCurrency(parseFloat(totals.subtotal?.amount || "0"), currency);
    const shipping = formatCurrency(parseFloat(totals.shipping?.amount || "0"), currency);
    const tax = formatCurrency(parseFloat(totals.tax?.amount || "0"), currency);
    const total = formatCurrency(parseFloat(totals.total?.amount || "0"), currency);
    const appliedCoupon = cart?.appliedDiscounts?.find((discount) => discount.coupon?.code)
        ?.coupon?.code || null;
    // Calculate discount from totals if available
    const discount = totals.discount?.amount
        ? formatCurrency(parseFloat(totals.discount.amount), currency)
        : null;
    return props.children({
        subtotal,
        discount,
        appliedCoupon,
        shipping,
        tax,
        total,
        currency,
        itemCount,
        canCheckout: itemCount > 0,
        isTotalsLoading,
    });
};
/**
 * Headless component for clearing the cart
 */
export const Clear = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const itemCount = service.cartCount.get();
    const isLoading = service.isLoading.get();
    return props.children({
        onClear: service.clearCart,
        hasItems: itemCount > 0,
        isLoading,
    });
};
/**
 * Headless component for checkout action
 */
export const Checkout = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const itemCount = service.cartCount.get();
    const isLoading = service.isLoading.get();
    const error = service.error.get();
    return props.children({
        onProceed: service.proceedToCheckout,
        canCheckout: itemCount > 0,
        isLoading,
        error,
    });
};
/**
 * Headless component for notes
 */
export const Notes = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const notes = service.buyerNotes.get();
    return props.children({
        notes,
        onNotesChange: service.setBuyerNotes,
    });
};
/**
 * Headless component for coupon functionality
 */
export const Coupon = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    const cart = service.cart.get();
    const isLoading = service.isCouponLoading.get();
    const error = service.error.get();
    const appliedCoupon = cart?.appliedDiscounts?.find((discount) => discount.coupon?.code)
        ?.coupon?.code || null;
    return props.children({
        appliedCoupon,
        onApply: service.applyCoupon,
        onRemove: service.removeCoupon,
        isLoading,
        error,
    });
};
/**
 * Headless component for line item added event subscription
 *
 * Provides a way to subscribe to cart addition events and receive notifications
 * when items are added to the current cart. The callback receives the updated
 * line items array, allowing you to show notifications, trigger animations,
 * or perform other actions when products are added.
 *
 * @example
 * ```tsx
 * // Basic usage - show global notification
 * <CurrentCart.LineItemAdded>
 *   {({ onAddedToCart }) => {
 *     useEffect(() => {
 *       return onAddedToCart((lineItems) => {
 *         setShowSuccessMessage(true);
 *         setTimeout(() => setShowSuccessMessage(false), 3000);
 *       });
 *     }, [onAddedToCart]);
 *     return null;
 *   }}
 * </CurrentCart.LineItemAdded>
 * ```
 *
 * @example
 * ```tsx
 * // Product-specific usage - show notification only for specific product
 * <CurrentCart.LineItemAdded>
 *   {({ onAddedToCart }) => {
 *     useEffect(() => {
 *       return onAddedToCart((lineItems) => {
 *         if (!lineItems) return;
 *         const myLineItemIsThere = lineItems.some(
 *           lineItem => lineItem.catalogReference?.catalogItemId === product._id
 *         );
 *         if (!myLineItemIsThere) return;
 *
 *         setShowSuccessMessage(true);
 *         setTimeout(() => setShowSuccessMessage(false), 3000);
 *       });
 *     }, [onAddedToCart, product._id]);
 *     return null;
 *   }}
 * </CurrentCart.LineItemAdded>
 * ```
 *
 * @example
 * ```tsx
 * // Combined with cart opening - show notification then open cart
 * <CurrentCart.Trigger>
 *   {({ onOpen }) => (
 *     <CurrentCart.LineItemAdded>
 *       {({ onAddedToCart }) => {
 *         useEffect(() => {
 *           return onAddedToCart((lineItems) => {
 *             setShowSuccessMessage(true);
 *             setTimeout(() => {
 *               setShowSuccessMessage(false);
 *               onOpen(); // Open cart after notification
 *             }, 3000);
 *           });
 *         }, [onAddedToCart]);
 *         return null;
 *       }}
 *     </CurrentCart.LineItemAdded>
 *   )}
 * </CurrentCart.Trigger>
 * ```
 */
export const LineItemAdded = (props) => {
    const service = useService(CurrentCartServiceDefinition);
    return props.children({
        onAddedToCart: service.onAddedToCart,
    });
};
