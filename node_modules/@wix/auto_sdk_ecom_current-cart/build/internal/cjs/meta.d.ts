import { GetCurrentCartRequest as GetCurrentCartRequest$1, GetCurrentCartResponse as GetCurrentCartResponse$1, UpdateCartRequest as UpdateCartRequest$1, UpdateCartResponse as UpdateCartResponse$1, AddToCurrentCartRequest as AddToCurrentCartRequest$1, AddToCartResponse as AddToCartResponse$1, RemoveLineItemsFromCurrentCartRequest as RemoveLineItemsFromCurrentCartRequest$1, RemoveLineItemsResponse as RemoveLineItemsResponse$1, CreateCheckoutFromCurrentCartRequest as CreateCheckoutFromCurrentCartRequest$1, CreateCheckoutResponse as CreateCheckoutResponse$1, RemoveCouponFromCurrentCartRequest as RemoveCouponFromCurrentCartRequest$1, RemoveCouponResponse as RemoveCouponResponse$1, UpdateCurrentCartLineItemQuantityRequest as UpdateCurrentCartLineItemQuantityRequest$1, UpdateLineItemsQuantityResponse as UpdateLineItemsQuantityResponse$1, EstimateCurrentCartTotalsRequest as EstimateCurrentCartTotalsRequest$1, EstimateTotalsResponse as EstimateTotalsResponse$1, DeleteCurrentCartRequest as DeleteCurrentCartRequest$1, DeleteCartResponse as DeleteCartResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

interface Cart {
    /**
     * Cart ID.
     * @format GUID
     */
    id?: string | null;
    /**
     * Line items.
     * @minSize 1
     * @maxSize 300
     * @readonly
     */
    lineItems?: LineItem[];
    /**
     * [Buyer note](https://support.wix.com/en/article/collecting-and-viewing-buyer-notes) left by the customer.
     * @maxLength 1000
     */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * The site's default currency, in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @format CURRENCY
     * @readonly
     */
    currency?: string;
    /**
     * The currency selected by the buyer during the purchase flow, in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     * @format CURRENCY
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     *
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     * @format GUID
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used in the Abandoned Checkout API
     * to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a
     * standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     * @maxLength 1000
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /**
     * The business location ID associated with the cart.
     *
     * To learn more, see the Locations API.
     * @format GUID
     */
    businessLocationId?: string | null;
    /**
     * Currency used for payment, in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     * @format CURRENCY
     */
    paymentCurrency?: string;
}
interface LineItem {
    /**
     * Line item ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Item quantity.
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: PageUrlV2;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /**
     * Total price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: CommonImage;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     * @readonly
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership;
    /**
     * Delivery profile ID.
     * @format GUID
     * @readonly
     */
    deliveryProfileId?: string | null;
    /**
     * Tax group ID for this line item.
     * @format GUID
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @minLength 1
     * @maxLength 2500
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether the price is not yet defined, and will be updated after the order is created.
     * @readonly
     */
    priceUndetermined?: boolean;
    /**
     * Whether the line item quantity is fixed and cannot be changed.
     * @readonly
     */
    fixedQuantity?: boolean;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
    /** Address to use for tax calculation purposes. */
    taxableAddress?: TaxableAddress;
    /**
     * Policies to be displayed to the customer on the checkout page.
     * @readonly
     * @maxSize 5
     */
    policies?: Policy[];
    /**
     * Whether the item can only be purchased by site members.
     *
     * Default: `false`
     * @readonly
     */
    membersOnly?: boolean;
    /**
     * Modifier groups that were added to the item.
     * @readonly
     * @maxSize 25
     */
    modifierGroups?: ModifierGroup[];
    /**
     * Total price of all item modifiers. Included in the item price.
     * @readonly
     */
    modifiersTotalPrice?: MultiCurrencyPrice;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface MultiCurrencyPrice {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
interface DescriptionLineDescriptionLineValueOneOf {
}
interface DescriptionLineName {
    /**
     * Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 100
     */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 200
     */
    translated?: string | null;
}
interface PlainTextValue {
    /**
     * Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 600
     */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 600
     */
    translated?: string | null;
}
interface Color {
    /**
     * Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @maxLength 500
     */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @maxLength 500
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
interface CommonImage {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface ItemAvailabilityInfo {
    /** Item availability status. */
    status?: ItemAvailabilityStatusWithLiterals;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    /** Item does not exist. */
    NOT_FOUND = "NOT_FOUND",
    /** Item is not in stock. */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested. */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
/** @enumType */
type ItemAvailabilityStatusWithLiterals = ItemAvailabilityStatus | 'AVAILABLE' | 'NOT_FOUND' | 'NOT_AVAILABLE' | 'PARTIALLY_AVAILABLE';
interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemTypeWithLiterals;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** @enumType */
type ItemTypeItemTypeWithLiterals = ItemTypeItemType | 'UNRECOGNISED' | 'PHYSICAL' | 'DIGITAL' | 'GIFT_CARD' | 'SERVICE';
/** Type of selected payment option for catalog item */
declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. Any remaining amount not covered by the membership, such as item modifiers, is paid online. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE",
    /**
     * Item price is charged to online membership. Any remaining amount not covered by the membership, such as item modifiers, is paid offline.
     * @documentationMaturity preview
     */
    MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"
}
/** @enumType */
type PaymentOptionTypeWithLiterals = PaymentOptionType | 'FULL_PAYMENT_ONLINE' | 'FULL_PAYMENT_OFFLINE' | 'MEMBERSHIP' | 'DEPOSIT_ONLINE' | 'MEMBERSHIP_OFFLINE' | 'MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER';
interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /**
     * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.
     * @min 1
     * @max 10000
     */
    numberOfParticipants?: number | null;
}
interface PriceDescription {
    /**
     * __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 100
     */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 100
     */
    translated?: string | null;
}
/** Selected Membership */
interface SelectedMembership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    id?: string;
    /**
     * ID of the app providing this payment option.
     * @format GUID
     */
    appId?: string;
}
interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /**
     * Item price **after** discounts.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    price?: string | null;
    /**
     * Item price **before** discounts.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    fullPrice?: string | null;
    /**
     * Item description lines. Used when displaying the line item to customers.
     * @maxSize 20
     */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: Image;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /**
     * Only eligible for catalog items with `lineItem.paymentOption.value` type of `DEPOSIT_ONLINE`.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Original image height. */
    height?: number;
    /** Original image width. */
    width?: number;
    /** Image alt text. Optional. */
    altText?: string | null;
    /** Image filename. Optional. */
    filename?: string | null;
}
interface PaymentOption {
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    value?: PaymentOptionTypeWithLiterals;
}
interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
/** @oneof */
interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressTypeWithLiterals;
}
declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type TaxableAddressTypeWithLiterals = TaxableAddressType | 'UNKNOWN_TAXABLE_ADDRESS' | 'BUSINESS' | 'BILLING' | 'SHIPPING';
interface Policy {
    /**
     * Policy title - should be translated
     * @minLength 1
     * @maxLength 29
     */
    title?: string | null;
    /**
     * Policy content - should be translated
     * @minLength 1
     * @maxLength 3000
     */
    content?: string;
}
interface ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 25
     */
    modifiers?: ItemModifier[];
}
interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /** The price of the modifier. */
    price?: MultiCurrencyPrice;
}
/** Buyer Info */
interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID. If the buyer is **not** a site member.
     * @format GUID
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID. If the buyer is a site member.
     * @format GUID
     * @readonly
     */
    memberId?: string;
    /**
     * User ID. If the buyer, or cart owner, is a Wix user.
     * @format GUID
     * @readonly
     */
    userId?: string;
    /**
     * Contact ID. For more information, see the Contacts API.
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * @format EMAIL
     */
    email?: string | null;
}
/** @oneof */
interface BuyerInfoIdOneOf {
    /**
     * Visitor ID. If the buyer is **not** a site member.
     * @format GUID
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID. If the buyer is a site member.
     * @format GUID
     * @readonly
     */
    memberId?: string;
    /**
     * User ID. If the buyer, or cart owner, is a Wix user.
     * @format GUID
     * @readonly
     */
    userId?: string;
}
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface CartDiscount extends CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
}
/** @oneof */
interface CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
}
interface Coupon {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
}
interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
/** Billing Info and shipping details */
interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
/** Full contact details for an address */
interface FullAddressContactDetails {
    /**
     * First name.
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatTypeWithLiterals;
}
/** tax info types */
declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
/** @enumType */
type VatTypeWithLiterals = VatType | 'UNSPECIFIED' | 'CPF' | 'CNPJ';
interface SelectedShippingOption {
    /**
     * Carrier ID.
     * @format GUID
     */
    carrierId?: string | null;
    /**
     * Selected shipping option code. For example, "usps_std_overnight".
     * @minLength 1
     * @maxLength 100
     */
    code?: string;
}
interface GetCurrentCartRequest {
}
interface GetCurrentCartResponse {
    /** Current session's active cart. */
    cart?: Cart;
}
interface UpdateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** Coupon code. For more information, see the Coupons API. */
    couponCode?: string | null;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart.
     * @maxSize 100
     * @deprecated Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart.
     * @targetRemovalDate 2025-09-01
     */
    merchantDiscounts?: MerchantDiscountInput[];
    /**
     * Catalog line items.
     * @maxSize 300
     */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     * @maxSize 300
     */
    customLineItems?: CustomLineItem[];
}
interface MerchantDiscountInput {
    /**
     * Discount amount.
     * @decimalValue options { gte:0 }
     */
    amount?: string;
    /**
     * IDs of line items the discount applies to.
     * @format GUID
     * @maxSize 300
     */
    lineItemIds?: string[];
}
interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     * @min 1
     * @max 100000
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Custom line item description lines. Used for display purposes for the cart, checkout and order.
     * @maxSize 10
     */
    descriptionLines?: DescriptionLine[];
    /** Custom line item's media. */
    media?: Image;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     * @format GUID
     */
    id?: string | null;
    /**
     * Tax group ID for this custom line item.
     * @format GUID
     */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: PageUrlV2;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @format DECIMAL_VALUE
     */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     * @max 100000
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     * @format DECIMAL_VALUE
     */
    depositAmount?: string | null;
    /**
     * Delivery profile ID.
     * @format GUID
     */
    deliveryProfileId?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
    /**
     * Policies to be displayed to the customer on the checkout page.
     * @maxSize 5
     */
    policies?: Policy[];
    /**
     * Whether the item can only be purchased by site members.
     *
     * Default: `false`
     */
    membersOnly?: boolean;
    /** Address to use for tax calculation purposes. */
    taxableAddress?: TaxableAddress;
    /**
     * Modifier groups that were added to the item.
     * @maxSize 25
     */
    modifierGroups?: V1ModifierGroup[];
}
interface V1ModifierGroup {
    /**
     * Modifier group ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 25
     */
    modifiers?: V1ItemModifier[];
}
interface V1ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Additional details. */
    details?: TranslatableString;
    /**
     * The price of the modifier.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    price?: string | null;
}
interface UpdateCartResponse {
    /** Updated Cart. */
    cart?: Cart;
}
interface AddToCurrentCartRequest {
    /**
     * Catalog line items.
     * @maxSize 100
     */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     * @maxSize 100
     */
    customLineItems?: CustomLineItem[];
    /**
     * Business location ID.
     * To update a cart's business location ID, use the UpdateCart method.
     * Learn more about the [Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     * @format GUID
     */
    businessLocationId?: string | null;
}
interface AddToCartResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface SelectedMemberships {
    /**
     * Selected memberships.
     * @maxSize 300
     */
    memberships?: HostSelectedMembership[];
}
interface HostSelectedMembership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    id?: string;
    /**
     * ID of the app providing this payment option.
     * @format GUID
     */
    appId?: string;
    /**
     * IDs of the line items this membership applies to.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
}
interface EstimateTotalsResponse {
    /** Cart. */
    cart?: Cart;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem[];
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Applied gift card. */
    giftCard?: GiftCard;
    /** Tax summary. */
    taxSummary?: TaxSummary;
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors;
    /** Weight measurement unit. Defaults to site's weight unit. */
    weightUnit?: WeightUnitWithLiterals;
    /**
     * Currency used for pricing in this store.
     * @format CURRENCY
     */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions;
    /**
     * Additional fees.
     * @maxSize 100
     */
    additionalFees?: AdditionalFee[];
    /**
     * List of validation violations raised by the Validations service plugin ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/service-plugins/validations/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/service-plugins/validations-integration-service-plugin/introduction)).
     * @readonly
     */
    violations?: Violation[];
}
interface CalculatedLineItem {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionTypeWithLiterals;
    /** tax calculation address. */
    taxableAddress?: TaxableAddress;
}
interface LineItemPricesData {
    /** Total price after discounts, tax, and modifiers. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts and modifiers, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount applied for the line item. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog-defined discount, automatic discounts, and modifiers. */
    price?: MultiCurrencyPrice;
    /**
     * Item price before automatic discounts, coupons, and global discounts; after catalog-defined discounts and modifiers.
     * Defaults to `price` when not provided.
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total line item price after catalog-defined discounts, automatic discounts, and modifiers. */
    lineItemPrice?: MultiCurrencyPrice;
    /**
     * Item price before all discounts and modifiers.
     * Defaults to `price` when not provided.
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Partial payment to be paid upfront during the checkout.
     * Applies to catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     */
    depositAmount?: MultiCurrencyPrice;
}
interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Tax rate %, as a decimal point between 0 and 1.
     * @decimalValue options { gte:0, lte:1, maxScale:6 }
     */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
interface TaxRateBreakdown {
    /**
     * Name of tax against which the calculation was performed.
     * @maxLength 100
     */
    name?: string;
    /**
     * Rate at which this tax detail was calculated.
     * @decimalValue options { gte:0, lte:1, maxScale:6 }
     */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Actual amount to be redeemed from the gift card. */
    amount?: MultiCurrencyPrice;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     * @minLength 1
     * @maxLength 50
     */
    externalId?: string | null;
    /** Requested amount to redeem from the gift card. */
    requestedAmount?: MultiCurrencyPrice;
}
interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReasonWithLiterals;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateTypeWithLiterals;
}
/** @oneof */
interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReasonWithLiterals;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
/** @enumType */
type RateTypeWithLiterals = RateType | 'NO_TAX_COLLECTED' | 'MANUAL_RATE' | 'AUTO_RATE' | 'FALLBACK_RATE';
declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
/** @enumType */
type ManualCalculationReasonWithLiterals = ManualCalculationReason | 'GLOBAL_SETTING_TO_MANUAL' | 'REGION_SETTING_TO_MANUAL';
interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReasonWithLiterals;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
/** @enumType */
type FallbackReasonWithLiterals = FallbackReason | 'AUTO_TAX_FAILED' | 'AUTO_TAX_DEACTIVATED';
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface ShippingInformation {
    /** Shipping region. */
    region?: ShippingRegion;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption[];
}
interface ShippingRegion {
    /**
     * Shipping region ID.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * Shipping region name.
     * @maxLength 100
     */
    name?: string;
}
interface SelectedCarrierServiceOption {
    /**
     * Unique identifier of selected option. For example, "usps_std_overnight".
     * @maxLength 100
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @maxLength 250
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /**
     * Other charges
     * @deprecated Other charges
     * @replacedBy additional_fees
     * @targetRemovalDate 2025-10-01
     */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /**
     * This carrier's unique ID
     * @format GUID
     */
    carrierId?: string | null;
    /**
     * Delivery solution allocations to different delivery carriers and delivery regions
     * @maxSize 300
     */
    deliveryAllocations?: DeliveryAllocation[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
interface DeliveryLogistics {
    /**
     * Expected delivery time, in free text. For example, "3-5 business days".
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot".
     * @maxLength 1000
     */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethodWithLiterals;
}
declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
/** @enumType */
type PickupMethodWithLiterals = PickupMethod | 'UNKNOWN_METHOD' | 'STORE_PICKUP' | 'PICKUP_POINT';
interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeTypeWithLiterals;
    /**
     * Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'.
     * @maxLength 200
     */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
/** @enumType */
type ChargeTypeWithLiterals = ChargeType | 'HANDLING_FEE' | 'INSURANCE';
interface DeliveryAllocation {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems;
}
interface Carrier {
    /**
     * The carrier app id
     * @format GUID
     */
    appId?: string | null;
    /**
     * Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`.
     * @maxLength 250
     */
    code?: string;
}
interface Region {
    /**
     * The delivery region id.
     * @format GUID
     */
    id?: string | null;
    /**
     * The delivery region name.
     * @maxLength 100
     */
    name?: string | null;
}
interface ApplicableLineItems {
    /**
     * Line items that the delivery solution is for.
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
}
interface CarrierServiceOption {
    /**
     * Carrier ID.
     * @format GUID
     */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     * @maxLength 100
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @maxLength 250
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
    /**
     * Delivery solution allocations to different delivery carriers and delivery regions
     * @maxSize 300
     */
    deliveryAllocations?: DeliveryAllocation[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeTypeWithLiterals;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
    /**
     * Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`.
     * @maxLength 250
     */
    details?: string | null;
}
interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: V1DiscountRule;
    /** Discount type. */
    discountType?: AppliedDiscountDiscountTypeWithLiterals;
    /**
     * IDs of line items the discount applies to.
     * @format GUID
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: V1DiscountRule;
}
declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type AppliedDiscountDiscountTypeWithLiterals = AppliedDiscountDiscountType | 'GLOBAL' | 'SPECIFIC_ITEMS' | 'SHIPPING';
/** Coupon */
interface V1Coupon {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
interface V1MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /**
     * Discount Percentage. Will be calculated from items price before other discounts.
     * @min 1
     * @max 100
     */
    percentage?: number | null;
}
interface V1DiscountRule {
    /**
     * Discount rule ID
     * @format GUID
     */
    id?: string;
    /** Discount rule name */
    name?: V1DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
interface V1DiscountRuleName {
    /**
     * Original discount rule name (in site's default language).
     * @minLength 1
     * @maxLength 256
     */
    original?: string;
    /**
     * Translated discount rule name according to buyer language. Defaults to `original` when not provided.
     * @minLength 1
     * @maxLength 500
     */
    translated?: string | null;
}
interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
interface ValidationError {
    fieldViolations?: FieldViolation[];
}
declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT",
    EXACT_LENGTH = "EXACT_LENGTH",
    EXACT_SIZE = "EXACT_SIZE",
    REQUIRED_ONE_OF_FIELD = "REQUIRED_ONE_OF_FIELD"
}
/** @enumType */
type RuleTypeWithLiterals = RuleType | 'VALIDATION' | 'OTHER' | 'MAX' | 'MIN' | 'MAX_LENGTH' | 'MIN_LENGTH' | 'MAX_SIZE' | 'MIN_SIZE' | 'FORMAT' | 'DECIMAL_LTE' | 'DECIMAL_GTE' | 'DECIMAL_LT' | 'DECIMAL_GT' | 'DECIMAL_MAX_SCALE' | 'INVALID_ENUM_VALUE' | 'REQUIRED_FIELD' | 'FIELD_NOT_ALLOWED' | 'ONE_OF_ALIGNMENT' | 'EXACT_LENGTH' | 'EXACT_SIZE' | 'REQUIRED_ONE_OF_FIELD';
interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleTypeWithLiterals;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
interface MembershipOptions {
    /**
     * List of payment options that can be used.
     * @maxSize 300
     */
    eligibleMemberships?: Membership[];
    /**
     * List of payment options that are owned by the member, but cannot be used due to reason provided.
     * @maxSize 300
     */
    invalidMemberships?: InvalidMembership[];
    /**
     * The selected membership payment options and which line items they apply to.
     * @maxSize 300
     */
    selectedMemberships?: HostSelectedMembership[];
}
interface Membership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    id?: string;
    /**
     * ID of the application providing this payment option.
     * @format GUID
     */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /**
     * Line item IDs which are "paid" for by this membership.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
interface MembershipName {
    /**
     * Membership name.
     * @maxLength 100
     */
    original?: string;
    /**
     * Translated membership name. Defaults to `original` when not provided.
     * @maxLength 100
     */
    translated?: string | null;
}
interface MembershipPaymentCredits {
    /**
     * Membership's total amount of credits.
     * @min 1
     */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /**
     * Reason why this membership is invalid and cannot be used.
     * @minLength 1
     * @maxLength 100
     */
    reason?: string;
}
interface AdditionalFee {
    /**
     * Additional fee's unique code (or ID) for future processing.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Translated additional fee's name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Provider's app id.
     * @minLength 1
     * @maxLength 100
     */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
    /** the source the additional fee was added from */
    source?: AdditionalFeeSourceWithLiterals;
    /**
     * The translated name of the additional fee. The translation language is determined by the `languages` field in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     * @minLength 1
     * @maxLength 50
     */
    translatedName?: string | null;
}
declare enum AdditionalFeeSource {
    UNKNOWN_ADDITIONAL_FEE_SOURCE = "UNKNOWN_ADDITIONAL_FEE_SOURCE",
    /** The additional fee was added by an additional fee service plugin */
    SERVICE_PLUGIN = "SERVICE_PLUGIN",
    /** The additional fee was added on the item either via the catalog or on custom line item */
    ITEM = "ITEM",
    /** The additional fee was added manually on the request */
    MANUAL = "MANUAL",
    /** The additional fee was added by the shipping provider */
    SHIPPING = "SHIPPING"
}
/** @enumType */
type AdditionalFeeSourceWithLiterals = AdditionalFeeSource | 'UNKNOWN_ADDITIONAL_FEE_SOURCE' | 'SERVICE_PLUGIN' | 'ITEM' | 'MANUAL' | 'SHIPPING';
interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: SeverityWithLiterals;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /**
     * Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`.
     * @minLength 1
     * @maxLength 1000
     */
    description?: string | null;
}
declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
/** @enumType */
type SeverityWithLiterals = Severity | 'WARNING' | 'ERROR';
interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
declare enum NameInOther {
    /** Default location, in case no specific location is specified. */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** @enumType */
type NameInOtherWithLiterals = NameInOther | 'OTHER_DEFAULT';
/** Available locations on the line item */
declare enum NameInLineItem {
    /** Default location, in case no specific location is specified. */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
/** @enumType */
type NameInLineItemWithLiterals = NameInLineItem | 'LINE_ITEM_DEFAULT';
/** General (other) violation. */
interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOtherWithLiterals;
}
/** Specific line item violation. */
interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItemWithLiterals;
    /** ID of the line item containing the violation. */
    id?: string | null;
}
interface RemoveLineItemsFromCurrentCartRequest {
    /**
     * Line item IDs to remove from cart.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    lineItemIds: string[];
}
interface RemoveLineItemsResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface CreateCheckoutFromCurrentCartRequest {
    /** __Required.__ Sales channel type. */
    channelType?: ChannelTypeWithLiterals;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /**
     * Required when setting billing or shipping address and user is not logged in.
     * @format EMAIL
     */
    email?: string | null;
}
declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM",
    /** PayPal Agentic Checkout sales channel. */
    PAYPAL_AGENTIC_CHECKOUT = "PAYPAL_AGENTIC_CHECKOUT"
}
/** @enumType */
type ChannelTypeWithLiterals = ChannelType | 'UNSPECIFIED' | 'WEB' | 'POS' | 'EBAY' | 'AMAZON' | 'OTHER_PLATFORM' | 'WIX_APP_STORE' | 'WIX_INVOICES' | 'BACKOFFICE_MERCHANT' | 'WISH' | 'CLASS_PASS' | 'GLOBAL_E' | 'FACEBOOK' | 'ETSY' | 'TIKTOK' | 'FAIRE_COM' | 'PAYPAL_AGENTIC_CHECKOUT';
interface CreateCheckoutResponse {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
interface RemoveCouponFromCurrentCartRequest {
}
interface RemoveCouponResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface UpdateCurrentCartLineItemQuantityRequest {
    /**
     * Line item IDs and their new quantity.
     * @minSize 1
     * @maxSize 100
     */
    lineItems: LineItemQuantityUpdate[];
}
interface LineItemQuantityUpdate {
    /**
     * *Required.** Line item ID.
     * @format GUID
     */
    id?: string;
    /**
     * *Required.** New quantity. Number must be 1 or higher.
     * @min 1
     * @max 100000
     */
    quantity?: number;
}
interface UpdateLineItemsQuantityResponse {
    /** Updated cart. */
    cart?: Cart;
}
interface EstimateCurrentCartTotalsRequest {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
interface DeleteCurrentCartRequest {
}
interface DeleteCartResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getCurrentCart(): __PublicMethodMetaInfo<'GET', {}, GetCurrentCartRequest$1, GetCurrentCartRequest, GetCurrentCartResponse$1, GetCurrentCartResponse>;
declare function updateCurrentCart(): __PublicMethodMetaInfo<'PATCH', {}, UpdateCartRequest$1, UpdateCartRequest, UpdateCartResponse$1, UpdateCartResponse>;
declare function addToCurrentCart(): __PublicMethodMetaInfo<'POST', {}, AddToCurrentCartRequest$1, AddToCurrentCartRequest, AddToCartResponse$1, AddToCartResponse>;
declare function removeLineItemsFromCurrentCart(): __PublicMethodMetaInfo<'POST', {}, RemoveLineItemsFromCurrentCartRequest$1, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsResponse$1, RemoveLineItemsResponse>;
declare function createCheckoutFromCurrentCart(): __PublicMethodMetaInfo<'POST', {}, CreateCheckoutFromCurrentCartRequest$1, CreateCheckoutFromCurrentCartRequest, CreateCheckoutResponse$1, CreateCheckoutResponse>;
declare function removeCouponFromCurrentCart(): __PublicMethodMetaInfo<'POST', {}, RemoveCouponFromCurrentCartRequest$1, RemoveCouponFromCurrentCartRequest, RemoveCouponResponse$1, RemoveCouponResponse>;
declare function updateCurrentCartLineItemQuantity(): __PublicMethodMetaInfo<'POST', {}, UpdateCurrentCartLineItemQuantityRequest$1, UpdateCurrentCartLineItemQuantityRequest, UpdateLineItemsQuantityResponse$1, UpdateLineItemsQuantityResponse>;
declare function estimateCurrentCartTotals(): __PublicMethodMetaInfo<'POST', {}, EstimateCurrentCartTotalsRequest$1, EstimateCurrentCartTotalsRequest, EstimateTotalsResponse$1, EstimateTotalsResponse>;
declare function deleteCurrentCart(): __PublicMethodMetaInfo<'DELETE', {}, DeleteCurrentCartRequest$1, DeleteCurrentCartRequest, DeleteCartResponse$1, DeleteCartResponse>;

export { type __PublicMethodMetaInfo, addToCurrentCart, createCheckoutFromCurrentCart, deleteCurrentCart, estimateCurrentCartTotals, getCurrentCart, removeCouponFromCurrentCart, removeLineItemsFromCurrentCart, updateCurrentCart, updateCurrentCartLineItemQuantity };
