// src/ecom-v1-cart-current-cart.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTAddressToSDKAddress as transformRESTAddressToSDKAddress2 } from "@wix/sdk-runtime/transformations/address";
import { transformRESTFloatToSDKFloat as transformRESTFloatToSDKFloat2 } from "@wix/sdk-runtime/transformations/float";
import { transformRESTImageToSDKImage as transformRESTImageToSDKImage2 } from "@wix/sdk-runtime/transformations/image";
import { transformRESTPageURLV2ToSDKPageURLV2 as transformRESTPageURLV2ToSDKPageURLV22 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/ecom-v1-cart-current-cart.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/ecom-v1-cart-current-cart.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixEcomCartApiV1CurrentCartServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/cart",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "www.wixgateway.com": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    _: [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      },
      {
        srcPath: "/_api/cart",
        destPath: ""
      },
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/ecom-cart",
        destPath: ""
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/ecom/v1/carts",
        destPath: "/v1/carts"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_current-cart";
function currentCartGetCurrentCart(payload) {
  function __currentCartGetCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "GET",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.GetCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __currentCartGetCurrentCart;
}
function updateCurrentCart(payload) {
  function __updateCurrentCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "cartFieldmask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "cartInfo.createdDate" },
          { path: "cartInfo.updatedDate" },
          { path: "cartInfo.lineItems.image.urlExpirationDate" },
          {
            path: "cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "cartInfo.lineItems.serviceProperties.scheduledDate" },
          { path: "lineItems.image.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "cartInfo.lineItems.image.focalPoint.x" },
          { path: "cartInfo.lineItems.image.focalPoint.y" },
          { path: "lineItems.image.focalPoint.x" },
          { path: "lineItems.image.focalPoint.y" },
          { path: "cartInfo.lineItems.physicalProperties.weight" },
          {
            path: "cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight"
          },
          { path: "cartInfo.contactInfo.address.geocode.latitude" },
          { path: "cartInfo.contactInfo.address.geocode.longitude" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "PATCH",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.UpdateCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCurrentCart;
}
function addToCurrentCart(payload) {
  function __addToCurrentCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "lineItems.image.urlExpirationDate" },
          {
            path: "lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "lineItems.serviceProperties.scheduledDate" },
          {
            path: "customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "customLineItems.serviceProperties.scheduledDate" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "lineItems.image.focalPoint.x" },
          { path: "lineItems.image.focalPoint.y" },
          { path: "lineItems.physicalProperties.weight" },
          { path: "lineItems.catalogOverrideFields.physicalProperties.weight" },
          { path: "customLineItems.physicalProperties.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.AddToCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current/add-to-cart",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addToCurrentCart;
}
function removeLineItemsFromCurrentCart(payload) {
  function __removeLineItemsFromCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.RemoveLineItemsFromCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current/remove-line-items",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeLineItemsFromCurrentCart;
}
function createCheckoutFromCurrentCart(payload) {
  function __createCheckoutFromCurrentCart({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "shippingAddress.geocode.latitude" },
          { path: "shippingAddress.geocode.longitude" },
          { path: "billingAddress.geocode.latitude" },
          { path: "billingAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.CreateCheckoutFromCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current/create-checkout",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __createCheckoutFromCurrentCart;
}
function removeCouponFromCurrentCart(payload) {
  function __removeCouponFromCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.RemoveCouponFromCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current/remove-coupon",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeCouponFromCurrentCart;
}
function updateCurrentCartLineItemQuantity(payload) {
  function __updateCurrentCartLineItemQuantity({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.UpdateCurrentCartLineItemQuantity",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current/update-line-items-quantity",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCurrentCartLineItemQuantity;
}
function estimateCurrentCartTotals(payload) {
  function __estimateCurrentCartTotals({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "shippingAddress.geocode.latitude" },
          { path: "shippingAddress.geocode.longitude" },
          { path: "billingAddress.geocode.latitude" },
          { path: "billingAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "POST",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.EstimateCurrentCartTotals",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current/estimate-totals",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "cart.createdDate" },
            { path: "cart.updatedDate" },
            { path: "cart.lineItems.image.urlExpirationDate" },
            {
              path: "cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
            },
            { path: "cart.lineItems.serviceProperties.scheduledDate" },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from"
            },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to"
            },
            { path: "membershipOptions.eligibleMemberships.expirationDate" },
            {
              path: "membershipOptions.invalidMemberships.membership.expirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "cart.lineItems.image.focalPoint.x" },
            { path: "cart.lineItems.image.focalPoint.y" },
            { path: "cart.lineItems.physicalProperties.weight" },
            {
              path: "cart.lineItems.catalogOverrideFields.physicalProperties.weight"
            },
            { path: "cart.contactInfo.address.geocode.latitude" },
            { path: "cart.contactInfo.address.geocode.longitude" },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude"
            },
            { path: "appliedDiscounts.merchantDiscount.percentage" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __estimateCurrentCartTotals;
}
function deleteCurrentCart(payload) {
  function __deleteCurrentCart({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.cart",
      method: "DELETE",
      methodFqn: "com.wix.ecom.cart.api.v1.CurrentCartService.DeleteCurrentCart",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
        protoPath: "/v1/carts/current",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteCurrentCart;
}

// src/ecom-v1-cart-current-cart.universal.ts
import { transformSDKAddressToRESTAddress } from "@wix/sdk-runtime/transformations/address";
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformSDKImageToRESTImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformSDKPageURLV2ToRESTPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformRESTPageURLV2ToSDKPageURLV2 } from "@wix/sdk-runtime/transformations/page-url-v2";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var DescriptionLineType = /* @__PURE__ */ ((DescriptionLineType2) => {
  DescriptionLineType2["UNRECOGNISED"] = "UNRECOGNISED";
  DescriptionLineType2["PLAIN_TEXT"] = "PLAIN_TEXT";
  DescriptionLineType2["COLOR"] = "COLOR";
  return DescriptionLineType2;
})(DescriptionLineType || {});
var ItemAvailabilityStatus = /* @__PURE__ */ ((ItemAvailabilityStatus2) => {
  ItemAvailabilityStatus2["AVAILABLE"] = "AVAILABLE";
  ItemAvailabilityStatus2["NOT_FOUND"] = "NOT_FOUND";
  ItemAvailabilityStatus2["NOT_AVAILABLE"] = "NOT_AVAILABLE";
  ItemAvailabilityStatus2["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
  return ItemAvailabilityStatus2;
})(ItemAvailabilityStatus || {});
var ItemTypeItemType = /* @__PURE__ */ ((ItemTypeItemType2) => {
  ItemTypeItemType2["UNRECOGNISED"] = "UNRECOGNISED";
  ItemTypeItemType2["PHYSICAL"] = "PHYSICAL";
  ItemTypeItemType2["DIGITAL"] = "DIGITAL";
  ItemTypeItemType2["GIFT_CARD"] = "GIFT_CARD";
  ItemTypeItemType2["SERVICE"] = "SERVICE";
  return ItemTypeItemType2;
})(ItemTypeItemType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var PaymentOptionType = /* @__PURE__ */ ((PaymentOptionType2) => {
  PaymentOptionType2["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
  PaymentOptionType2["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
  PaymentOptionType2["MEMBERSHIP"] = "MEMBERSHIP";
  PaymentOptionType2["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
  PaymentOptionType2["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
  PaymentOptionType2["MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER"] = "MEMBERSHIP_ONLINE_WITH_OFFLINE_REMAINDER";
  return PaymentOptionType2;
})(PaymentOptionType || {});
var TaxableAddressType = /* @__PURE__ */ ((TaxableAddressType2) => {
  TaxableAddressType2["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
  TaxableAddressType2["BUSINESS"] = "BUSINESS";
  TaxableAddressType2["BILLING"] = "BILLING";
  TaxableAddressType2["SHIPPING"] = "SHIPPING";
  return TaxableAddressType2;
})(TaxableAddressType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["GLOBAL"] = "GLOBAL";
  DiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  DiscountType2["SHIPPING"] = "SHIPPING";
  return DiscountType2;
})(DiscountType || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED"] = "UNSPECIFIED";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var JurisdictionType = /* @__PURE__ */ ((JurisdictionType2) => {
  JurisdictionType2["UNDEFINED"] = "UNDEFINED";
  JurisdictionType2["COUNTRY"] = "COUNTRY";
  JurisdictionType2["STATE"] = "STATE";
  JurisdictionType2["COUNTY"] = "COUNTY";
  JurisdictionType2["CITY"] = "CITY";
  JurisdictionType2["SPECIAL"] = "SPECIAL";
  return JurisdictionType2;
})(JurisdictionType || {});
var RateType = /* @__PURE__ */ ((RateType2) => {
  RateType2["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
  RateType2["MANUAL_RATE"] = "MANUAL_RATE";
  RateType2["AUTO_RATE"] = "AUTO_RATE";
  RateType2["FALLBACK_RATE"] = "FALLBACK_RATE";
  return RateType2;
})(RateType || {});
var ManualCalculationReason = /* @__PURE__ */ ((ManualCalculationReason2) => {
  ManualCalculationReason2["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
  ManualCalculationReason2["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
  return ManualCalculationReason2;
})(ManualCalculationReason || {});
var FallbackReason = /* @__PURE__ */ ((FallbackReason2) => {
  FallbackReason2["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
  FallbackReason2["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
  return FallbackReason2;
})(FallbackReason || {});
var PickupMethod = /* @__PURE__ */ ((PickupMethod2) => {
  PickupMethod2["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
  PickupMethod2["STORE_PICKUP"] = "STORE_PICKUP";
  PickupMethod2["PICKUP_POINT"] = "PICKUP_POINT";
  return PickupMethod2;
})(PickupMethod || {});
var ChargeType = /* @__PURE__ */ ((ChargeType2) => {
  ChargeType2["HANDLING_FEE"] = "HANDLING_FEE";
  ChargeType2["INSURANCE"] = "INSURANCE";
  return ChargeType2;
})(ChargeType || {});
var AppliedDiscountDiscountType = /* @__PURE__ */ ((AppliedDiscountDiscountType2) => {
  AppliedDiscountDiscountType2["GLOBAL"] = "GLOBAL";
  AppliedDiscountDiscountType2["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
  AppliedDiscountDiscountType2["SHIPPING"] = "SHIPPING";
  return AppliedDiscountDiscountType2;
})(AppliedDiscountDiscountType || {});
var RuleType = /* @__PURE__ */ ((RuleType2) => {
  RuleType2["VALIDATION"] = "VALIDATION";
  RuleType2["OTHER"] = "OTHER";
  RuleType2["MAX"] = "MAX";
  RuleType2["MIN"] = "MIN";
  RuleType2["MAX_LENGTH"] = "MAX_LENGTH";
  RuleType2["MIN_LENGTH"] = "MIN_LENGTH";
  RuleType2["MAX_SIZE"] = "MAX_SIZE";
  RuleType2["MIN_SIZE"] = "MIN_SIZE";
  RuleType2["FORMAT"] = "FORMAT";
  RuleType2["DECIMAL_LTE"] = "DECIMAL_LTE";
  RuleType2["DECIMAL_GTE"] = "DECIMAL_GTE";
  RuleType2["DECIMAL_LT"] = "DECIMAL_LT";
  RuleType2["DECIMAL_GT"] = "DECIMAL_GT";
  RuleType2["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
  RuleType2["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
  RuleType2["REQUIRED_FIELD"] = "REQUIRED_FIELD";
  RuleType2["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
  RuleType2["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
  RuleType2["EXACT_LENGTH"] = "EXACT_LENGTH";
  RuleType2["EXACT_SIZE"] = "EXACT_SIZE";
  RuleType2["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
  return RuleType2;
})(RuleType || {});
var AdditionalFeeSource = /* @__PURE__ */ ((AdditionalFeeSource2) => {
  AdditionalFeeSource2["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
  AdditionalFeeSource2["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
  AdditionalFeeSource2["ITEM"] = "ITEM";
  AdditionalFeeSource2["MANUAL"] = "MANUAL";
  AdditionalFeeSource2["SHIPPING"] = "SHIPPING";
  return AdditionalFeeSource2;
})(AdditionalFeeSource || {});
var Severity = /* @__PURE__ */ ((Severity2) => {
  Severity2["WARNING"] = "WARNING";
  Severity2["ERROR"] = "ERROR";
  return Severity2;
})(Severity || {});
var NameInOther = /* @__PURE__ */ ((NameInOther2) => {
  NameInOther2["OTHER_DEFAULT"] = "OTHER_DEFAULT";
  return NameInOther2;
})(NameInOther || {});
var NameInLineItem = /* @__PURE__ */ ((NameInLineItem2) => {
  NameInLineItem2["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
  return NameInLineItem2;
})(NameInLineItem || {});
var SuggestedFix = /* @__PURE__ */ ((SuggestedFix2) => {
  SuggestedFix2["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
  SuggestedFix2["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
  return SuggestedFix2;
})(SuggestedFix || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getCurrentCart() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = currentCartGetCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCurrentCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      cartInfo: options?.cartInfo,
      couponCode: options?.couponCode,
      merchantDiscounts: options?.merchantDiscounts,
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems
    }),
    [
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [
          { path: "cartInfo.lineItems.url" },
          { path: "lineItems.url" },
          { path: "customLineItems.url" }
        ]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "cartInfo.lineItems.image" },
          { path: "cartInfo.lineItems.catalogOverrideFields.image" },
          { path: "lineItems.image" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      },
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "cartInfo.contactInfo.address" }]
      }
    ]
  );
  const reqOpts = updateCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    )?.cart;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          cartInfo: "$[0].cartInfo",
          couponCode: "$[0].couponCode",
          merchantDiscounts: "$[0].merchantDiscounts",
          lineItems: "$[0].lineItems",
          customLineItems: "$[0].customLineItems"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addToCurrentCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      lineItems: options?.lineItems,
      customLineItems: options?.customLineItems,
      businessLocationId: options?.businessLocationId
    }),
    [
      {
        transformFn: transformSDKPageURLV2ToRESTPageURLV2,
        paths: [{ path: "lineItems.url" }, { path: "customLineItems.url" }]
      },
      {
        transformFn: transformSDKImageToRESTImage,
        paths: [
          { path: "lineItems.image" },
          { path: "lineItems.catalogOverrideFields.image" },
          { path: "customLineItems.media" }
        ]
      }
    ]
  );
  const reqOpts = addToCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          lineItems: "$[0].lineItems",
          customLineItems: "$[0].customLineItems",
          businessLocationId: "$[0].businessLocationId"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeLineItemsFromCurrentCart2(lineItemIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    lineItemIds
  });
  const reqOpts = removeLineItemsFromCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { lineItemIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["lineItemIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createCheckoutFromCurrentCart2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      channelType: options?.channelType,
      shippingAddress: options?.shippingAddress,
      billingAddress: options?.billingAddress,
      selectedShippingOption: options?.selectedShippingOption,
      email: options?.email
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "shippingAddress" }, { path: "billingAddress" }]
      }
    ]
  );
  const reqOpts = createCheckoutFromCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          channelType: "$[0].channelType",
          shippingAddress: "$[0].shippingAddress",
          billingAddress: "$[0].billingAddress",
          selectedShippingOption: "$[0].selectedShippingOption",
          email: "$[0].email"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeCouponFromCurrentCart2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = removeCouponFromCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCurrentCartLineItemQuantity2(lineItems) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    lineItems
  });
  const reqOpts = updateCurrentCartLineItemQuantity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "cart.contactInfo.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { lineItems: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["lineItems"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function estimateCurrentCartTotals2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = transformPaths2(
    renameKeysFromSDKRequestToRESTRequest({
      selectedShippingOption: options?.selectedShippingOption,
      shippingAddress: options?.shippingAddress,
      billingAddress: options?.billingAddress,
      selectedMemberships: options?.selectedMemberships,
      calculateTax: options?.calculateTax,
      calculateShipping: options?.calculateShipping
    }),
    [
      {
        transformFn: transformSDKAddressToRESTAddress,
        paths: [{ path: "shippingAddress" }, { path: "billingAddress" }]
      }
    ]
  );
  const reqOpts = estimateCurrentCartTotals(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLV2ToSDKPageURLV2,
          paths: [{ path: "cart.lineItems.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "cart.lineItems.image" },
            { path: "cart.lineItems.catalogOverrideFields.image" }
          ]
        },
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [
            { path: "cart.contactInfo.address" },
            {
              path: "shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address"
            },
            {
              path: "shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address"
            }
          ]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          selectedShippingOption: "$[0].selectedShippingOption",
          shippingAddress: "$[0].shippingAddress",
          billingAddress: "$[0].billingAddress",
          selectedMemberships: "$[0].selectedMemberships",
          calculateTax: "$[0].calculateTax",
          calculateShipping: "$[0].calculateShipping"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCurrentCart2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = deleteCurrentCart(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-cart-current-cart.public.ts
function getCurrentCart2(httpClient) {
  return () => getCurrentCart(
    // @ts-ignore
    { httpClient }
  );
}
function updateCurrentCart3(httpClient) {
  return (options) => updateCurrentCart2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function addToCurrentCart3(httpClient) {
  return (options) => addToCurrentCart2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeLineItemsFromCurrentCart3(httpClient) {
  return (lineItemIds) => removeLineItemsFromCurrentCart2(
    lineItemIds,
    // @ts-ignore
    { httpClient }
  );
}
function createCheckoutFromCurrentCart3(httpClient) {
  return (options) => createCheckoutFromCurrentCart2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeCouponFromCurrentCart3(httpClient) {
  return () => removeCouponFromCurrentCart2(
    // @ts-ignore
    { httpClient }
  );
}
function updateCurrentCartLineItemQuantity3(httpClient) {
  return (lineItems) => updateCurrentCartLineItemQuantity2(
    lineItems,
    // @ts-ignore
    { httpClient }
  );
}
function estimateCurrentCartTotals3(httpClient) {
  return (options) => estimateCurrentCartTotals2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteCurrentCart3(httpClient) {
  return () => deleteCurrentCart2(
    // @ts-ignore
    { httpClient }
  );
}
var onCartDeleted = EventDefinition(
  "wix.ecom.v1.cart_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          {
            path: "undefined.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "undefined.lineItems.serviceProperties.scheduledDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTPageURLV2ToSDKPageURLV22,
        paths: [{ path: "undefined.lineItems.url" }]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [
          { path: "undefined.lineItems.image" },
          { path: "undefined.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "undefined.lineItems.physicalProperties.weight" },
          {
            path: "undefined.lineItems.catalogOverrideFields.physicalProperties.weight"
          }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [{ path: "undefined.contactInfo.address" }]
      }
    ])
  )
)();
var onCartUpdated = EventDefinition(
  "wix.ecom.v1.cart_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          {
            path: "entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.lineItems.serviceProperties.scheduledDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTPageURLV2ToSDKPageURLV22,
        paths: [{ path: "entity.lineItems.url" }]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [
          { path: "entity.lineItems.image" },
          { path: "entity.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "entity.lineItems.physicalProperties.weight" },
          {
            path: "entity.lineItems.catalogOverrideFields.physicalProperties.weight"
          }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [{ path: "entity.contactInfo.address" }]
      }
    ])
  )
)();
var onCartCreated = EventDefinition(
  "wix.ecom.v1.cart_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          {
            path: "entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate"
          },
          { path: "entity.lineItems.serviceProperties.scheduledDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTPageURLV2ToSDKPageURLV22,
        paths: [{ path: "entity.lineItems.url" }]
      },
      {
        transformFn: transformRESTImageToSDKImage2,
        paths: [
          { path: "entity.lineItems.image" },
          { path: "entity.lineItems.catalogOverrideFields.image" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "entity.lineItems.physicalProperties.weight" },
          {
            path: "entity.lineItems.catalogOverrideFields.physicalProperties.weight"
          }
        ]
      },
      {
        transformFn: transformRESTAddressToSDKAddress2,
        paths: [{ path: "entity.contactInfo.address" }]
      }
    ])
  )
)();

// src/ecom-v1-cart-current-cart.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var getCurrentCart3 = /* @__PURE__ */ createRESTModule(getCurrentCart2);
var updateCurrentCart4 = /* @__PURE__ */ createRESTModule(updateCurrentCart3);
var addToCurrentCart4 = /* @__PURE__ */ createRESTModule(addToCurrentCart3);
var removeLineItemsFromCurrentCart4 = /* @__PURE__ */ createRESTModule(removeLineItemsFromCurrentCart3);
var createCheckoutFromCurrentCart4 = /* @__PURE__ */ createRESTModule(createCheckoutFromCurrentCart3);
var removeCouponFromCurrentCart4 = /* @__PURE__ */ createRESTModule(removeCouponFromCurrentCart3);
var updateCurrentCartLineItemQuantity4 = /* @__PURE__ */ createRESTModule(updateCurrentCartLineItemQuantity3);
var estimateCurrentCartTotals4 = /* @__PURE__ */ createRESTModule(estimateCurrentCartTotals3);
var deleteCurrentCart4 = /* @__PURE__ */ createRESTModule(deleteCurrentCart3);
var onCartDeleted2 = createEventModule(onCartDeleted);
var onCartUpdated2 = createEventModule(onCartUpdated);
var onCartCreated2 = createEventModule(onCartCreated);
export {
  AdditionalFeeSource,
  AppliedDiscountDiscountType,
  ChannelType,
  ChargeType,
  DescriptionLineType,
  DiscountType,
  FallbackReason,
  FileType,
  ItemAvailabilityStatus,
  ItemTypeItemType,
  JurisdictionType,
  ManualCalculationReason,
  NameInLineItem,
  NameInOther,
  PaymentOptionType,
  PickupMethod,
  RateType,
  RuleType,
  Severity,
  SubscriptionFrequency,
  SuggestedFix,
  TaxableAddressType,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addToCurrentCart4 as addToCurrentCart,
  createCheckoutFromCurrentCart4 as createCheckoutFromCurrentCart,
  deleteCurrentCart4 as deleteCurrentCart,
  estimateCurrentCartTotals4 as estimateCurrentCartTotals,
  getCurrentCart3 as getCurrentCart,
  onCartCreated2 as onCartCreated,
  onCartDeleted2 as onCartDeleted,
  onCartUpdated2 as onCartUpdated,
  removeCouponFromCurrentCart4 as removeCouponFromCurrentCart,
  removeLineItemsFromCurrentCart4 as removeLineItemsFromCurrentCart,
  updateCurrentCart4 as updateCurrentCart,
  updateCurrentCartLineItemQuantity4 as updateCurrentCartLineItemQuantity
};
//# sourceMappingURL=index.mjs.map