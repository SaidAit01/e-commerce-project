import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { CalculateTaxOptions, CalculateTaxResponse, CalculateTaxApplicationErrors, ListTaxCalculatorsResponse } from './index.typings.js';
export { Address, AddressIndex, AddressIndexAddressIndexOptionsOneOf, AggregatedTaxBreakdown, ApplicationError, CalculateTaxRequest, JurisdictionType, JurisdictionTypeWithLiterals, LineItem, LineItemTaxDetails, LineItemTaxSummary, ListTaxCalculatorsRequest, MultipleAddresses, TaxBreakdown, TaxCalculationGateway, TaxCalculatorDetails, TaxSummary } from './index.typings.js';

declare function calculateTax$1(httpClient: HttpClient): CalculateTaxSignature;
interface CalculateTaxSignature {
    /**
     * Calculates tax for the provided line items.
     *
     * Tax is calculated for each line item based on the tax region
     * that corresponds to the address provided in `lineItems.addressIndex` and the tax group in `taxGroupId`. If no tax region is found for
     * the line item's address then no tax will be calculated for this line item. If no tax group with that `taxGroupId` is found then the
     * default tax group is used to calculate tax. Call List Default Tax Groups to retrieve a site's default tax groups.
     *
     * The tax is calculated by a tax calculator app installed on the site.
     * Call List Tax Calculators to see which tax calculators are available.
     * To provide your own tax calculations, use the Tax Calculation service plugin.
     *
     * The breakdown of calculated tax returned, includes:
     * + `taxSummary`: The overall total tax calculated.
     * + `taxSummary.aggregatedTaxBreakdown`: The total tax calculated for each jurisdiction.
     * + `lineItemTaxDetails.taxSummary`: The total tax calculated for each line item.
     * + `lineItemTaxDetails.taxBreakdown`: The tax calculated for each line item in each jurisdiction.
     * @param - Calculate tax options.
     */
    (options?: NonNullablePaths<CalculateTaxOptions, `addresses` | `lineItems` | `lineItems.${number}._id` | `lineItems.${number}.addressIndex` | `lineItems.${number}.price`, 4>): Promise<NonNullablePaths<CalculateTaxResponse, `currency` | `addresses` | `taxSummary.totalAmount` | `taxSummary.totalTax` | `taxSummary.totalTaxableAmount` | `taxSummary.totalTaxIncludedInPrice` | `taxSummary.aggregatedTaxBreakdown` | `taxSummary.aggregatedTaxBreakdown.${number}.taxName` | `taxSummary.aggregatedTaxBreakdown.${number}.taxType` | `taxSummary.aggregatedTaxBreakdown.${number}.jurisdiction` | `taxSummary.aggregatedTaxBreakdown.${number}.jurisdictionType` | `taxSummary.aggregatedTaxBreakdown.${number}.rate` | `taxSummary.aggregatedTaxBreakdown.${number}.aggregatedTaxAmount` | `lineItemTaxDetails` | `lineItemTaxDetails.${number}._id` | `lineItemTaxDetails.${number}.quantity` | `lineItemTaxDetails.${number}.taxSummary.taxAmount` | `lineItemTaxDetails.${number}.taxSummary.taxableAmount` | `lineItemTaxDetails.${number}.addressIndex.singleAddress` | `lineItemTaxDetails.${number}.addressIndex.multipleAddresses.origin` | `lineItemTaxDetails.${number}.addressIndex.multipleAddresses.destination` | `lineItemTaxDetails.${number}.taxIncludedInPrice` | `errors` | `errors.${number}.code` | `errors.${number}.description`, 6> & {
        __applicationErrorsType?: CalculateTaxApplicationErrors;
    }>;
}
declare function listTaxCalculators$1(httpClient: HttpClient): ListTaxCalculatorsSignature;
interface ListTaxCalculatorsSignature {
    /**
     * Retrieves a list of installed tax calculators.
     *
     * Wix uses these calculators to calculate tax.
     */
    (): Promise<NonNullablePaths<ListTaxCalculatorsResponse, `taxCalculatorDetails` | `taxCalculatorDetails.${number}.appId` | `taxCalculatorDetails.${number}.displayName`, 4>>;
}

declare const calculateTax: MaybeContext<BuildRESTFunction<typeof calculateTax$1> & typeof calculateTax$1>;
declare const listTaxCalculators: MaybeContext<BuildRESTFunction<typeof listTaxCalculators$1> & typeof listTaxCalculators$1>;

export { CalculateTaxApplicationErrors, CalculateTaxOptions, CalculateTaxResponse, ListTaxCalculatorsResponse, calculateTax, listTaxCalculators };
