import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { ListTransactionsForSingleOrderResponse, ListTransactionsForMultipleOrdersResponse, Payment, AddPaymentsResponse, UpdatePaymentStatusIdentifiers, UpdatePaymentStatusOptions, UpdatePaymentStatusResponse, PaymentAndOrderId, BulkUpdatePaymentStatusesOptions, BulkUpdatePaymentStatusesResponse, UpdateRefundTransactionApplicationErrors, UpdatePaymentsApplicationErrors, OrderTransactionsDetailsUpdatedEnvelope, OrderTransactionsRefundCompletedEnvelope, OrderTransactionsUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, ActionType, ActionTypeWithLiterals, Activity, ActivityType, ActivityTypeWithLiterals, AddChargebackRequest, AddChargebackResponse, AddInvoiceToOrderRequest, AddInvoiceToOrderResponse, AddPaymentsRequest, AddRefundRequest, AddRefundResponse, AdditionalFeeRefund, Address, AddressAddressLine1OptionsOneOf, AggregatedRefundSummary, ApplicationError, AppliedCoupon, AuthorizationActionFailureDetails, AuthorizationCapture, AuthorizationCaptureStatus, AuthorizationCaptureStatusWithLiterals, AuthorizationDetails, AuthorizationVoid, AuthorizationVoidStatus, AuthorizationVoidStatusWithLiterals, BaseEventMetadata, BillingInfo, BulkActionMetadata, BulkGenerateInvoicesRequest, BulkGenerateInvoicesResponse, BulkInvoiceResult, BulkPaymentResult, BulkUpdatePaymentStatusesRequest, BuyerDetails, BuyerInfo, CalculateRefundItemRequest, CalculateRefundItemResponse, CalculateRefundRequest, CalculateRefundResponse, ChannelInfo, ChannelType, ChannelTypeWithLiterals, Chargeback, ChargebackApproved, ChargebackReversed, ChargebackStatus, ChargebackStatusWithLiterals, CreditCardPaymentMethodDetails, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomField, CustomTextFieldSelection, DiffmatokyPayload, DigitalFile, Discount, DomainEvent, DomainEventBodyOneOf, EnteredBy, EnteredByIdentityType, EnteredByIdentityTypeWithLiterals, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ErrorInformation, EventMetadata, ExternalReceiptInfo, Fulfillment, FulfillmentLineItem, FulfillmentStatus, FulfillmentStatusWithLiterals, FulfillmentTrackingInfo, FullName, GenerateInvoiceRequest, GenerateInvoiceResponse, GetRefundabilityStatusRequest, GetRefundabilityStatusResponse, GiftCard, GiftCardPaymentDetails, IdentificationData, IdentificationDataIdOneOf, IdentityType, IdentityTypeWithLiterals, IndexingMessage, InvoiceForOrder, InvoiceInfo, InvoiceSource, InvoiceSourceWithLiterals, InvoicesForOrder, ItemMetadata, LineItem, LineItemPriceData, LineItemRefund, LineItemRefundSummary, LineItemType, LineItemTypeWithLiterals, ListInvoicesForMultipleOrdersRequest, ListInvoicesForMultipleOrdersResponse, ListInvoicesForSingleOrderRequest, ListInvoicesForSingleOrderResponse, ListTransactionsForMultipleOrdersRequest, ListTransactionsForSingleOrderRequest, ManuallyRefundableReason, ManuallyRefundableReasonWithLiterals, MaskedPayment, MediaItem, MediaItemType, MediaItemTypeWithLiterals, MembershipName, MembershipPaymentDetails, MembershipPaymentStatus, MembershipPaymentStatusWithLiterals, MessageEnvelope, NonRefundableReason, NonRefundableReasonWithLiterals, OptionSelection, Order, OrderRefunded, OrderTransactions, PaymentDetailsUpdated, PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf, PaymentRefund, PaymentStatus, PaymentStatusWithLiterals, PaymentsUpdated, PickupAddress, PickupDetails, Price, QueryOrderTransactionsRequest, QueryOrderTransactionsResponse, Reason, ReasonWithLiterals, Refund, RefundCompleted, RefundCreated, RefundDetails, RefundItem, RefundItemsBreakdown, RefundSideEffects, RefundStatus, RefundStatusInfo, RefundStatusWithLiterals, RefundTransaction, Refundability, RefundabilityAdditionalRefundabilityInfoOneOf, RefundableStatus, RefundableStatusWithLiterals, RegularPaymentDetails, RegularPaymentDetailsPaymentMethodDetailsOneOf, RestockInfo, RestockItem, RestockType, RestockTypeWithLiterals, RestoreInfo, ReverseChargebackRequest, ReverseChargebackResponse, ScheduledAction, ShipmentDetails, ShippingInfo, ShippingInfoDetailsOneOf, ShippingPriceData, ShippingRefund, SnapshotMessage, SortOrder, SortOrderWithLiterals, Sorting, Street, SubscriptionFrequency, SubscriptionFrequencyWithLiterals, SubscriptionInfo, SubscriptionOptionInfo, SubscriptionSettings, Totals, TrackingInfo, TransactionStatus, TransactionStatusWithLiterals, TriggerRefundRequest, TriggerRefundResponse, UpdatePaymentStatusRequest, UpdatePaymentsRequest, UpdatePaymentsResponse, UpdateRefundRequest, UpdateRefundResponse, UpdateRefundTransactionRequest, UpdateRefundTransactionResponse, V2InvoiceInfo, V2Refund, VatId, VatType, VatTypeWithLiterals, WebhookIdentityType, WebhookIdentityTypeWithLiterals, WeightUnit, WeightUnitWithLiterals, WixReceiptInfo } from './index.typings.js';

declare function listTransactionsForSingleOrder$1(httpClient: HttpClient): ListTransactionsForSingleOrderSignature;
interface ListTransactionsForSingleOrderSignature {
    /**
     * Retrieves information about payments and refunds associated with a specified order.
     *
     *
     * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
     * @param - Order ID.
     */
    (orderId: string): Promise<NonNullablePaths<ListTransactionsForSingleOrderResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7>>;
}
declare function listTransactionsForMultipleOrders$1(httpClient: HttpClient): ListTransactionsForMultipleOrdersSignature;
interface ListTransactionsForMultipleOrdersSignature {
    /**
     * Retrieves information about payments and refunds associated with all specified orders.
     *
     *
     * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.
     * @param - Order IDs for which to retrieve transactions.
     */
    (orderIds: string[]): Promise<NonNullablePaths<ListTransactionsForMultipleOrdersResponse, `orderTransactions` | `orderTransactions.${number}.orderId`, 4>>;
}
declare function addPayments$1(httpClient: HttpClient): AddPaymentsSignature;
interface AddPaymentsSignature {
    /**
     * Adds up to 50 payment records to an order.
     *
     *
     * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.
     *
     * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.
     * @param - Order ID.
     * @param - Payments to be added to order.
     */
    (orderId: string, payments: NonNullablePaths<Payment, `amount` | `giftcardPaymentDetails.giftCardPaymentId`, 3>[]): Promise<NonNullablePaths<AddPaymentsResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending` | `paymentsIds`, 7>>;
}
declare function updatePaymentStatus$1(httpClient: HttpClient): UpdatePaymentStatusSignature;
interface UpdatePaymentStatusSignature {
    /**
     * Updates the status of an order's payment.
     *
     *
     * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.
     */
    (identifiers: NonNullablePaths<UpdatePaymentStatusIdentifiers, `orderId` | `paymentId`, 2>, options?: UpdatePaymentStatusOptions): Promise<NonNullablePaths<UpdatePaymentStatusResponse, `orderTransactions.orderId` | `orderTransactions.payments` | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment` | `orderTransactions.payments.${number}.regularPaymentDetails.status` | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod` | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture` | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId` | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided` | `orderTransactions.payments.${number}.amount.amount` | `orderTransactions.payments.${number}.amount.formattedAmount` | `orderTransactions.payments.${number}.refundDisabled` | `orderTransactions.refunds` | `orderTransactions.refunds.${number}._id` | `orderTransactions.refunds.${number}.details.shippingIncluded` | `orderTransactions.refunds.${number}.summary.pending`, 7>>;
}
declare function bulkUpdatePaymentStatuses$1(httpClient: HttpClient): BulkUpdatePaymentStatusesSignature;
interface BulkUpdatePaymentStatusesSignature {
    /**
     * Updates multiple order payments with a specified status.
     *
     *
     * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.
     * @param - Order and payment IDs for which to update payment status.
     */
    (paymentAndOrderIds: PaymentAndOrderId[], options?: BulkUpdatePaymentStatusesOptions): Promise<NonNullablePaths<BulkUpdatePaymentStatusesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `results.${number}.item.regularPaymentDetails.offlinePayment` | `results.${number}.item.regularPaymentDetails.status` | `results.${number}.item.regularPaymentDetails.savedPaymentMethod` | `results.${number}.item.giftcardPaymentDetails.giftCardPaymentId` | `results.${number}.item.giftcardPaymentDetails.appId` | `results.${number}.item.giftcardPaymentDetails.voided` | `results.${number}.item.amount.amount` | `results.${number}.item.amount.formattedAmount` | `results.${number}.item.refundDisabled` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
/** @internal */
declare function updateRefundTransaction$1(httpClient: HttpClient): UpdateRefundTransactionSignature;
interface UpdateRefundTransactionSignature {
    /**
     * Updates OrderTransactions.refunds.transactions properties
     */
    (): Promise<void & {
        __applicationErrorsType?: UpdateRefundTransactionApplicationErrors;
    }>;
}
/** @internal */
declare function updatePayments$1(httpClient: HttpClient): UpdatePaymentsSignature;
interface UpdatePaymentsSignature {
    /**
     * Updates properties of payments associated to order.
     *
     * Currently, the following fields can be updated:
     * + `payment.payment_details.regular_payment_details.provider_transaction_id`
     * + `payment.payment_details.regular_payment_details.status`
     * + `payment.payment_details.regular_payment_details.payment_method_details.credit_card_details`
     * + `payment.payment_details.regular_payment_details.authorization_details`
     * + `payment.payment_details.regular_payment_details.authorization_details.scheduled_action`
     * + `payment.payment_details.regular_payment_details.authorization_details.authorized_date`
     * + `payment.payment_details.regular_payment_details.authorization_details.captures`
     * + `payment.payment_details.regular_payment_details.authorization_details.captures.status`
     * + `payment.payment_details.regular_payment_details.authorization_details.captures.created_date`
     * + `payment.payment_details.regular_payment_details.authorization_details.captures.failure_details`
     * + `payment.payment_details.regular_payment_details.authorization_details.void`
     * + `payment.payment_details.regular_payment_details.authorization_details.void.status`
     * + `payment.payment_details.regular_payment_details.authorization_details.void.voided_date`
     * + `payment.payment_details.regular_payment_details.authorization_details.void.reason`
     * + `payment.payment_details.regular_payment_details.authorization_details.void.failure_details`
     * + `payment.receipt_info`
     * + `payment.receipt_info.wix_receipt`
     * + `payment.receipt_info.wix_receipt.receipt_id`
     * + `payment.receipt_info.wix_receipt.display_number`
     * + `payment.receipt_info.external_receipt`
     * + `payment.receipt_info.external_receipt.receipt_id`
     * + `payment.receipt_info.external_receipt.display_number`
     * + `payment.receipt_info.external_receipt.app_id`
     *
     * To update a field's value, include the new value in the `payment` object in the body params.
     *
     * > **Note:** Removing fields value results in an error.
     */
    (): Promise<void & {
        __applicationErrorsType?: UpdatePaymentsApplicationErrors;
    }>;
}
declare const onOrderTransactionsDetailsUpdated$1: EventDefinition<OrderTransactionsDetailsUpdatedEnvelope, "wix.ecom.v1.order_transactions_details_updated">;
declare const onOrderTransactionsRefundCompleted$1: EventDefinition<OrderTransactionsRefundCompletedEnvelope, "wix.ecom.v1.order_transactions_refund_completed">;
declare const onOrderTransactionsUpdated$1: EventDefinition<OrderTransactionsUpdatedEnvelope, "wix.ecom.v1.order_transactions_updated">;

declare const listTransactionsForSingleOrder: MaybeContext<BuildRESTFunction<typeof listTransactionsForSingleOrder$1> & typeof listTransactionsForSingleOrder$1>;
declare const listTransactionsForMultipleOrders: MaybeContext<BuildRESTFunction<typeof listTransactionsForMultipleOrders$1> & typeof listTransactionsForMultipleOrders$1>;
declare const addPayments: MaybeContext<BuildRESTFunction<typeof addPayments$1> & typeof addPayments$1>;
declare const updatePaymentStatus: MaybeContext<BuildRESTFunction<typeof updatePaymentStatus$1> & typeof updatePaymentStatus$1>;
declare const bulkUpdatePaymentStatuses: MaybeContext<BuildRESTFunction<typeof bulkUpdatePaymentStatuses$1> & typeof bulkUpdatePaymentStatuses$1>;
/** @internal */
declare const updateRefundTransaction: MaybeContext<BuildRESTFunction<typeof updateRefundTransaction$1> & typeof updateRefundTransaction$1>;
/** @internal */
declare const updatePayments: MaybeContext<BuildRESTFunction<typeof updatePayments$1> & typeof updatePayments$1>;
/**
 * Triggered when a payment or refund is added to an order, or when an existing payment is updated.
 *
 * Contains the ID of the updated order and details of its associated transactions,
 * as well as IDs of the updated payments and refunds.
 */
declare const onOrderTransactionsDetailsUpdated: BuildEventDefinition<typeof onOrderTransactionsDetailsUpdated$1> & typeof onOrderTransactionsDetailsUpdated$1;
/**
 * Triggered when a refund has been fully processed and completed.
 *
 * This event is fired once when all refund transactions within a refund have reached
 * their final state (either `SUCCEEDED` or `FAILED`). Contains the order ID, completed
 * refund details, any side effects (such as inventory restocking or email notifications),
 * and the updated order transaction state.
 */
declare const onOrderTransactionsRefundCompleted: BuildEventDefinition<typeof onOrderTransactionsRefundCompleted$1> & typeof onOrderTransactionsRefundCompleted$1;
/**
 * Triggered when a payment or refund is added to an order, or when an existing payment is updated.
 *
 * Contains the ID of the updated order and details of its associated transactions,
 * as well as IDs of the updated payments and refunds.
 * @deprecated
 */
declare const onOrderTransactionsUpdated: BuildEventDefinition<typeof onOrderTransactionsUpdated$1> & typeof onOrderTransactionsUpdated$1;

export { AddPaymentsResponse, BulkUpdatePaymentStatusesOptions, BulkUpdatePaymentStatusesResponse, ListTransactionsForMultipleOrdersResponse, ListTransactionsForSingleOrderResponse, OrderTransactionsDetailsUpdatedEnvelope, OrderTransactionsRefundCompletedEnvelope, OrderTransactionsUpdatedEnvelope, Payment, PaymentAndOrderId, UpdatePaymentStatusIdentifiers, UpdatePaymentStatusOptions, UpdatePaymentStatusResponse, UpdatePaymentsApplicationErrors, UpdateRefundTransactionApplicationErrors, addPayments, bulkUpdatePaymentStatuses, listTransactionsForMultipleOrders, listTransactionsForSingleOrder, onOrderTransactionsDetailsUpdated, onOrderTransactionsRefundCompleted, onOrderTransactionsUpdated, updatePaymentStatus, updatePayments, updateRefundTransaction };
