"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  ActionType: () => ActionType,
  ActivityType: () => ActivityType,
  AuthorizationCaptureStatus: () => AuthorizationCaptureStatus,
  AuthorizationVoidStatus: () => AuthorizationVoidStatus,
  ChannelType: () => ChannelType,
  ChargebackStatus: () => ChargebackStatus,
  EnteredByIdentityType: () => EnteredByIdentityType,
  FulfillmentStatus: () => FulfillmentStatus,
  IdentityType: () => IdentityType,
  InvoiceSource: () => InvoiceSource,
  LineItemType: () => LineItemType,
  ManuallyRefundableReason: () => ManuallyRefundableReason,
  MediaItemType: () => MediaItemType,
  MembershipPaymentStatus: () => MembershipPaymentStatus,
  NonRefundableReason: () => NonRefundableReason,
  PaymentStatus: () => PaymentStatus,
  Reason: () => Reason,
  RefundStatus: () => RefundStatus,
  RefundableStatus: () => RefundableStatus,
  RestockType: () => RestockType,
  SortOrder: () => SortOrder,
  SubscriptionFrequency: () => SubscriptionFrequency,
  TransactionStatus: () => TransactionStatus,
  VatType: () => VatType,
  WebhookIdentityType: () => WebhookIdentityType,
  WeightUnit: () => WeightUnit,
  addPayments: () => addPayments4,
  bulkUpdatePaymentStatuses: () => bulkUpdatePaymentStatuses4,
  listTransactionsForMultipleOrders: () => listTransactionsForMultipleOrders4,
  listTransactionsForSingleOrder: () => listTransactionsForSingleOrder4,
  onOrderTransactionsDetailsUpdated: () => onOrderTransactionsDetailsUpdated2,
  onOrderTransactionsRefundCompleted: () => onOrderTransactionsRefundCompleted2,
  onOrderTransactionsUpdated: () => onOrderTransactionsUpdated2,
  updatePaymentStatus: () => updatePaymentStatus4,
  updatePayments: () => updatePayments4,
  updateRefundTransaction: () => updateRefundTransaction4
});
module.exports = __toCommonJS(index_exports);

// src/ecom-v1-order-transactions-order-transactions.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/ecom-v1-order-transactions-order-transactions.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-order-transactions-order-transactions.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomOrdersPaymentsV1PaymentsUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/ecom-payments",
        destPath: ""
      },
      {
        srcPath: "/_api/payments",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/bulk/payments",
        destPath: "/v1/bulk/payments"
      },
      {
        srcPath: "/ecom/v1/bulk/invoices",
        destPath: "/v1/bulk/invoices"
      },
      {
        srcPath: "/ecom/v1/payments",
        destPath: "/v1/payments"
      },
      {
        srcPath: "/ecom/v1/invoices",
        destPath: "/v1/invoices"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/ecom-payments",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_order-transactions";
function listTransactionsForSingleOrder(payload) {
  function __listTransactionsForSingleOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "GET",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForSingleOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/payments/orders/{orderId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listTransactionsForSingleOrder;
}
function listTransactionsForMultipleOrders(payload) {
  function __listTransactionsForMultipleOrders({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForMultipleOrders",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/payments/list-by-ids",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listTransactionsForMultipleOrders;
}
function addPayments(payload) {
  function __addPayments({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "payments.createdDate" },
          { path: "payments.updatedDate" },
          {
            path: "payments.regularPaymentDetails.authorizationDetails.authorizedDate"
          },
          {
            path: "payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
          },
          {
            path: "payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
          },
          {
            path: "payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
          },
          { path: "payments.regularPaymentDetails.chargebacks.createdDate" },
          { path: "payments.regularPaymentDetails.chargebacks.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.AddPayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/payments/orders/{orderId}/add-payment",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addPayments;
}
function updatePaymentStatus(payload) {
  function __updatePaymentStatus({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "statusUpdatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.UpdatePaymentStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/payments/{paymentId}/orders/{orderId}/update-payment-transaction-status",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updatePaymentStatus;
}
function bulkUpdatePaymentStatuses(payload) {
  function __bulkUpdatePaymentStatuses({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "statusUpdatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.BulkUpdatePaymentStatuses",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/bulk/payments/update-payment-transaction-status",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            {
              path: "results.item.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "results.item.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "results.item.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "results.item.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "results.item.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "results.item.regularPaymentDetails.chargebacks.updatedDate"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdatePaymentStatuses;
}
function updateRefundTransaction(payload) {
  function __updateRefundTransaction({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.UpdateRefundTransaction",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/payments/orders/{orderId}/update-refund-transaction",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateRefundTransaction;
}
function updatePayments(payload) {
  function __updatePayments({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "payments.fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "payments.statusUpdatedDate" },
          { path: "payments.payment.createdDate" },
          { path: "payments.payment.updatedDate" },
          {
            path: "payments.payment.regularPaymentDetails.authorizationDetails.authorizedDate"
          },
          {
            path: "payments.payment.regularPaymentDetails.authorizationDetails.captures.createdDate"
          },
          {
            path: "payments.payment.regularPaymentDetails.authorizationDetails.void.voidedDate"
          },
          {
            path: "payments.payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
          },
          {
            path: "payments.payment.regularPaymentDetails.chargebacks.createdDate"
          },
          {
            path: "payments.payment.regularPaymentDetails.chargebacks.updatedDate"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.order_transactions",
      method: "POST",
      methodFqn: "com.wix.ecom.orders.payments.v1.Payments.UpdatePayments",
      packageName: PACKAGE_NAME,
      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
        protoPath: "/v1/payments/orders/{orderId}/update-payments",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "orderTransactions.payments.createdDate" },
            { path: "orderTransactions.payments.updatedDate" },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
            },
            {
              path: "orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
            },
            { path: "orderTransactions.refunds.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updatePayments;
}

// src/ecom-v1-order-transactions-order-transactions.universal.ts
var TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {
  TransactionStatus2["UNDEFINED"] = "UNDEFINED";
  TransactionStatus2["APPROVED"] = "APPROVED";
  TransactionStatus2["PENDING"] = "PENDING";
  TransactionStatus2["PENDING_MERCHANT"] = "PENDING_MERCHANT";
  TransactionStatus2["CANCELED"] = "CANCELED";
  TransactionStatus2["DECLINED"] = "DECLINED";
  TransactionStatus2["REFUNDED"] = "REFUNDED";
  TransactionStatus2["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
  TransactionStatus2["AUTHORIZED"] = "AUTHORIZED";
  TransactionStatus2["VOIDED"] = "VOIDED";
  return TransactionStatus2;
})(TransactionStatus || {});
var AuthorizationCaptureStatus = /* @__PURE__ */ ((AuthorizationCaptureStatus2) => {
  AuthorizationCaptureStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  AuthorizationCaptureStatus2["PENDING"] = "PENDING";
  AuthorizationCaptureStatus2["SUCCEEDED"] = "SUCCEEDED";
  AuthorizationCaptureStatus2["FAILED"] = "FAILED";
  return AuthorizationCaptureStatus2;
})(AuthorizationCaptureStatus || {});
var AuthorizationVoidStatus = /* @__PURE__ */ ((AuthorizationVoidStatus2) => {
  AuthorizationVoidStatus2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  AuthorizationVoidStatus2["PENDING"] = "PENDING";
  AuthorizationVoidStatus2["SUCCEEDED"] = "SUCCEEDED";
  AuthorizationVoidStatus2["FAILED"] = "FAILED";
  return AuthorizationVoidStatus2;
})(AuthorizationVoidStatus || {});
var Reason = /* @__PURE__ */ ((Reason2) => {
  Reason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  Reason2["MANUAL"] = "MANUAL";
  Reason2["SCHEDULED"] = "SCHEDULED";
  return Reason2;
})(Reason || {});
var ActionType = /* @__PURE__ */ ((ActionType2) => {
  ActionType2["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
  ActionType2["VOID"] = "VOID";
  ActionType2["CAPTURE"] = "CAPTURE";
  return ActionType2;
})(ActionType || {});
var ChargebackStatus = /* @__PURE__ */ ((ChargebackStatus2) => {
  ChargebackStatus2["UNSPECIFIED"] = "UNSPECIFIED";
  ChargebackStatus2["APPROVED"] = "APPROVED";
  ChargebackStatus2["REVERSED"] = "REVERSED";
  return ChargebackStatus2;
})(ChargebackStatus || {});
var MembershipPaymentStatus = /* @__PURE__ */ ((MembershipPaymentStatus2) => {
  MembershipPaymentStatus2["CHARGED"] = "CHARGED";
  MembershipPaymentStatus2["CHARGE_FAILED"] = "CHARGE_FAILED";
  return MembershipPaymentStatus2;
})(MembershipPaymentStatus || {});
var RefundStatus = /* @__PURE__ */ ((RefundStatus2) => {
  RefundStatus2["PENDING"] = "PENDING";
  RefundStatus2["SUCCEEDED"] = "SUCCEEDED";
  RefundStatus2["FAILED"] = "FAILED";
  RefundStatus2["SCHEDULED"] = "SCHEDULED";
  RefundStatus2["STARTED"] = "STARTED";
  return RefundStatus2;
})(RefundStatus || {});
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["CONTACT"] = "CONTACT";
  return IdentityType2;
})(IdentityType || {});
var WeightUnit = /* @__PURE__ */ ((WeightUnit2) => {
  WeightUnit2["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
  WeightUnit2["KG"] = "KG";
  WeightUnit2["LB"] = "LB";
  return WeightUnit2;
})(WeightUnit || {});
var VatType = /* @__PURE__ */ ((VatType2) => {
  VatType2["UNSPECIFIED_TAX_TYPE"] = "UNSPECIFIED_TAX_TYPE";
  VatType2["CPF"] = "CPF";
  VatType2["CNPJ"] = "CNPJ";
  return VatType2;
})(VatType || {});
var PaymentStatus = /* @__PURE__ */ ((PaymentStatus2) => {
  PaymentStatus2["UNSPECIFIED_PAYMENT_STATUS"] = "UNSPECIFIED_PAYMENT_STATUS";
  PaymentStatus2["PENDING"] = "PENDING";
  PaymentStatus2["NOT_PAID"] = "NOT_PAID";
  PaymentStatus2["PAID"] = "PAID";
  PaymentStatus2["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
  PaymentStatus2["FULLY_REFUNDED"] = "FULLY_REFUNDED";
  PaymentStatus2["PARTIALLY_PAID"] = "PARTIALLY_PAID";
  return PaymentStatus2;
})(PaymentStatus || {});
var FulfillmentStatus = /* @__PURE__ */ ((FulfillmentStatus2) => {
  FulfillmentStatus2["NOT_FULFILLED"] = "NOT_FULFILLED";
  FulfillmentStatus2["FULFILLED"] = "FULFILLED";
  FulfillmentStatus2["CANCELED"] = "CANCELED";
  FulfillmentStatus2["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
  return FulfillmentStatus2;
})(FulfillmentStatus || {});
var LineItemType = /* @__PURE__ */ ((LineItemType2) => {
  LineItemType2["UNSPECIFIED_LINE_ITEM_TYPE"] = "UNSPECIFIED_LINE_ITEM_TYPE";
  LineItemType2["PHYSICAL"] = "PHYSICAL";
  LineItemType2["DIGITAL"] = "DIGITAL";
  LineItemType2["CUSTOM_AMOUNT_ITEM"] = "CUSTOM_AMOUNT_ITEM";
  return LineItemType2;
})(LineItemType || {});
var MediaItemType = /* @__PURE__ */ ((MediaItemType2) => {
  MediaItemType2["UNSPECIFIED_MEDIA_TYPE_ITEM"] = "UNSPECIFIED_MEDIA_TYPE_ITEM";
  MediaItemType2["IMAGE"] = "IMAGE";
  return MediaItemType2;
})(MediaItemType || {});
var ActivityType = /* @__PURE__ */ ((ActivityType2) => {
  ActivityType2["UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE"] = "UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE";
  ActivityType2["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
  ActivityType2["ORDER_PLACED"] = "ORDER_PLACED";
  ActivityType2["ORDER_PAID"] = "ORDER_PAID";
  ActivityType2["ORDER_FULFILLED"] = "ORDER_FULFILLED";
  ActivityType2["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
  ActivityType2["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
  ActivityType2["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
  ActivityType2["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
  ActivityType2["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
  ActivityType2["TRACKING_LINK_WAS_SET"] = "TRACKING_LINK_WAS_SET";
  ActivityType2["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
  ActivityType2["INVOICE_WAS_SET"] = "INVOICE_WAS_SET";
  ActivityType2["INVOICE_WAS_REMOVED"] = "INVOICE_WAS_REMOVED";
  ActivityType2["INVOICE_WAS_SENT"] = "INVOICE_WAS_SENT";
  ActivityType2["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
  ActivityType2["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
  ActivityType2["EMAIL_EDITED"] = "EMAIL_EDITED";
  ActivityType2["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
  return ActivityType2;
})(ActivityType || {});
var InvoiceSource = /* @__PURE__ */ ((InvoiceSource2) => {
  InvoiceSource2["UNSPECIFIED_INVOICE_SOURCE"] = "UNSPECIFIED_INVOICE_SOURCE";
  InvoiceSource2["WIX"] = "WIX";
  return InvoiceSource2;
})(InvoiceSource || {});
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["UNSPECIFIED"] = "UNSPECIFIED";
  ChannelType2["WEB"] = "WEB";
  ChannelType2["POS"] = "POS";
  ChannelType2["EBAY"] = "EBAY";
  ChannelType2["AMAZON"] = "AMAZON";
  ChannelType2["OTHER_PLATFORM"] = "OTHER_PLATFORM";
  ChannelType2["WIX_APP_STORE"] = "WIX_APP_STORE";
  ChannelType2["WIX_INVOICES"] = "WIX_INVOICES";
  ChannelType2["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
  ChannelType2["WISH"] = "WISH";
  ChannelType2["CLASS_PASS"] = "CLASS_PASS";
  ChannelType2["GLOBAL_E"] = "GLOBAL_E";
  ChannelType2["FACEBOOK"] = "FACEBOOK";
  ChannelType2["ETSY"] = "ETSY";
  ChannelType2["TIKTOK"] = "TIKTOK";
  ChannelType2["FAIRE_COM"] = "FAIRE_COM";
  ChannelType2["PAYPAL_AGENTIC_CHECKOUT"] = "PAYPAL_AGENTIC_CHECKOUT";
  return ChannelType2;
})(ChannelType || {});
var EnteredByIdentityType = /* @__PURE__ */ ((EnteredByIdentityType2) => {
  EnteredByIdentityType2["USER"] = "USER";
  EnteredByIdentityType2["MEMBER"] = "MEMBER";
  EnteredByIdentityType2["CONTACT"] = "CONTACT";
  EnteredByIdentityType2["APP"] = "APP";
  return EnteredByIdentityType2;
})(EnteredByIdentityType || {});
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var RestockType = /* @__PURE__ */ ((RestockType2) => {
  RestockType2["NO_ITEMS"] = "NO_ITEMS";
  RestockType2["ALL_ITEMS"] = "ALL_ITEMS";
  RestockType2["SOME_ITEMS"] = "SOME_ITEMS";
  return RestockType2;
})(RestockType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var RefundableStatus = /* @__PURE__ */ ((RefundableStatus2) => {
  RefundableStatus2["NOT_REFUNDABLE"] = "NOT_REFUNDABLE";
  RefundableStatus2["MANUAL"] = "MANUAL";
  RefundableStatus2["REFUNDABLE"] = "REFUNDABLE";
  return RefundableStatus2;
})(RefundableStatus || {});
var NonRefundableReason = /* @__PURE__ */ ((NonRefundableReason2) => {
  NonRefundableReason2["NONE"] = "NONE";
  NonRefundableReason2["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
  NonRefundableReason2["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
  NonRefundableReason2["INTERNAL_ERROR"] = "INTERNAL_ERROR";
  NonRefundableReason2["NOT_PAID"] = "NOT_PAID";
  NonRefundableReason2["ACCESS_DENIED"] = "ACCESS_DENIED";
  NonRefundableReason2["ZERO_PRICE"] = "ZERO_PRICE";
  NonRefundableReason2["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
  NonRefundableReason2["PARTIALLY_PAID"] = "PARTIALLY_PAID";
  NonRefundableReason2["DEPOSIT_ONLINE_ITEM"] = "DEPOSIT_ONLINE_ITEM";
  NonRefundableReason2["PENDING_REFUND"] = "PENDING_REFUND";
  NonRefundableReason2["FORBIDDEN"] = "FORBIDDEN";
  return NonRefundableReason2;
})(NonRefundableReason || {});
var ManuallyRefundableReason = /* @__PURE__ */ ((ManuallyRefundableReason2) => {
  ManuallyRefundableReason2["EXPIRED"] = "EXPIRED";
  ManuallyRefundableReason2["NOT_SUPPORTED"] = "NOT_SUPPORTED";
  ManuallyRefundableReason2["NOT_FOUND"] = "NOT_FOUND";
  ManuallyRefundableReason2["OFFLINE"] = "OFFLINE";
  ManuallyRefundableReason2["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
  return ManuallyRefundableReason2;
})(ManuallyRefundableReason || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function listTransactionsForSingleOrder2(orderId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ orderId });
  const reqOpts = listTransactionsForSingleOrder(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listTransactionsForMultipleOrders2(orderIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ orderIds });
  const reqOpts = listTransactionsForMultipleOrders(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["orderIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addPayments2(orderId, payments) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    orderId,
    payments
  });
  const reqOpts = addPayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { orderId: "$[0]", payments: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["orderId", "payments"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updatePaymentStatus2(identifiers, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    paymentId: identifiers?.paymentId,
    orderId: identifiers?.orderId,
    status: options?.status
  });
  const reqOpts = updatePaymentStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          paymentId: "$[0].paymentId",
          orderId: "$[0].orderId",
          status: "$[1].status"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdatePaymentStatuses2(paymentAndOrderIds, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    paymentAndOrderIds,
    returnFullEntity: options?.returnFullEntity,
    status: options?.status
  });
  const reqOpts = bulkUpdatePaymentStatuses(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          paymentAndOrderIds: "$[0]",
          returnFullEntity: "$[1].returnFullEntity",
          status: "$[1].status"
        },
        singleArgumentUnchanged: false
      },
      ["paymentAndOrderIds", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateRefundTransaction2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = updateRefundTransaction(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updatePayments2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = updatePayments(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-order-transactions-order-transactions.public.ts
function listTransactionsForSingleOrder3(httpClient) {
  return (orderId) => listTransactionsForSingleOrder2(
    orderId,
    // @ts-ignore
    { httpClient }
  );
}
function listTransactionsForMultipleOrders3(httpClient) {
  return (orderIds) => listTransactionsForMultipleOrders2(
    orderIds,
    // @ts-ignore
    { httpClient }
  );
}
function addPayments3(httpClient) {
  return (orderId, payments) => addPayments2(
    orderId,
    payments,
    // @ts-ignore
    { httpClient }
  );
}
function updatePaymentStatus3(httpClient) {
  return (identifiers, options) => updatePaymentStatus2(
    identifiers,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdatePaymentStatuses3(httpClient) {
  return (paymentAndOrderIds, options) => bulkUpdatePaymentStatuses2(
    paymentAndOrderIds,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateRefundTransaction3(httpClient) {
  return () => updateRefundTransaction2(
    // @ts-ignore
    { httpClient }
  );
}
function updatePayments3(httpClient) {
  return () => updatePayments2(
    // @ts-ignore
    { httpClient }
  );
}
var onOrderTransactionsDetailsUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.order_transactions_details_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "data.orderTransactions.payments.createdDate" },
          { path: "data.orderTransactions.payments.updatedDate" },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
          },
          { path: "data.orderTransactions.refunds.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onOrderTransactionsRefundCompleted = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.order_transactions_refund_completed",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "data.refund.createdDate" },
          { path: "data.orderTransactions.payments.createdDate" },
          { path: "data.orderTransactions.payments.updatedDate" },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
          },
          { path: "data.orderTransactions.refunds.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onOrderTransactionsUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.order_transactions_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "data.orderTransactions.payments.createdDate" },
          { path: "data.orderTransactions.payments.updatedDate" },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate"
          },
          {
            path: "data.orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate"
          },
          { path: "data.orderTransactions.refunds.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/ecom-v1-order-transactions-order-transactions.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var listTransactionsForSingleOrder4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listTransactionsForSingleOrder3);
var listTransactionsForMultipleOrders4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listTransactionsForMultipleOrders3);
var addPayments4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addPayments3);
var updatePaymentStatus4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updatePaymentStatus3);
var bulkUpdatePaymentStatuses4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkUpdatePaymentStatuses3);
var updateRefundTransaction4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateRefundTransaction3);
var updatePayments4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updatePayments3);
var onOrderTransactionsDetailsUpdated2 = (0, import_event_definition_modules.createEventModule)(
  onOrderTransactionsDetailsUpdated
);
var onOrderTransactionsRefundCompleted2 = (0, import_event_definition_modules.createEventModule)(
  onOrderTransactionsRefundCompleted
);
var onOrderTransactionsUpdated2 = (0, import_event_definition_modules.createEventModule)(
  onOrderTransactionsUpdated
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ActionType,
  ActivityType,
  AuthorizationCaptureStatus,
  AuthorizationVoidStatus,
  ChannelType,
  ChargebackStatus,
  EnteredByIdentityType,
  FulfillmentStatus,
  IdentityType,
  InvoiceSource,
  LineItemType,
  ManuallyRefundableReason,
  MediaItemType,
  MembershipPaymentStatus,
  NonRefundableReason,
  PaymentStatus,
  Reason,
  RefundStatus,
  RefundableStatus,
  RestockType,
  SortOrder,
  SubscriptionFrequency,
  TransactionStatus,
  VatType,
  WebhookIdentityType,
  WeightUnit,
  addPayments,
  bulkUpdatePaymentStatuses,
  listTransactionsForMultipleOrders,
  listTransactionsForSingleOrder,
  onOrderTransactionsDetailsUpdated,
  onOrderTransactionsRefundCompleted,
  onOrderTransactionsUpdated,
  updatePaymentStatus,
  updatePayments,
  updateRefundTransaction
});
//# sourceMappingURL=index.js.map