{"version":3,"sources":["../../../index.typings.ts","../../../src/ecom-v1-order-transactions-order-transactions.universal.ts","../../../src/ecom-v1-order-transactions-order-transactions.http.ts"],"sourcesContent":["export * from './src/ecom-v1-order-transactions-order-transactions.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixEcomV1OrderTransactions from './ecom-v1-order-transactions-order-transactions.http.js';\n// @ts-ignore\n\nexport interface OrderTransactions {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Record of payments made to the merchant.\n   * @maxSize 100\n   */\n  payments?: Payment[];\n  /**\n   * Record of refunds made to the buyer.\n   * @maxSize 300\n   */\n  refunds?: Refund[];\n}\n\nexport interface Payment\n  extends PaymentPaymentDetailsOneOf,\n    PaymentReceiptInfoOneOf {\n  /** Regular payment details. */\n  regularPaymentDetails?: RegularPaymentDetails;\n  /** Gift card payment details. */\n  giftcardPaymentDetails?: GiftCardPaymentDetails;\n  /**\n   * Receipt created by Wix\n   * @internal\n   */\n  wixReceipt?: WixReceiptInfo;\n  /**\n   * Receipt created by an external system.\n   * @internal\n   */\n  externalReceipt?: ExternalReceiptInfo;\n  /**\n   * Payment ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /** Payment amount. */\n  amount?: Price;\n  /**\n   * Whether refunds for this payment are disabled.\n   * + `true`: This payment is not refundable.\n   * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.\n   */\n  refundDisabled?: boolean;\n  /**\n   * Whether receipt generation for this payment are allowed.\n   * + `true`: This payment supports receipt generation.\n   * + `false`: This payment not supports receipt generation, or receipt already generated\n   * @internal\n   * @readonly\n   */\n  supportReceiptGeneration?: boolean;\n}\n\n/** @oneof */\nexport interface PaymentPaymentDetailsOneOf {\n  /** Regular payment details. */\n  regularPaymentDetails?: RegularPaymentDetails;\n  /** Gift card payment details. */\n  giftcardPaymentDetails?: GiftCardPaymentDetails;\n}\n\n/** @oneof */\nexport interface PaymentReceiptInfoOneOf {\n  /**\n   * Receipt created by Wix\n   * @internal\n   */\n  wixReceipt?: WixReceiptInfo;\n  /**\n   * Receipt created by an external system.\n   * @internal\n   */\n  externalReceipt?: ExternalReceiptInfo;\n}\n\nexport interface RegularPaymentDetails\n  extends RegularPaymentDetailsPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n  /**\n   * Wix Payments order ID.\n   * @maxLength 100\n   */\n  paymentOrderId?: string | null;\n  /**\n   * Payment gateway's transaction ID.\n   * This field is only returned when the value of `offline_payment` is `false`.\n   * @maxLength 100\n   */\n  gatewayTransactionId?: string | null;\n  /**\n   * Payment method. Non-exhaustive list of supported values:\n   * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`\n   * @maxLength 100\n   */\n  paymentMethod?: string | null;\n  /**\n   * Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments.\n   * @maxLength 100\n   */\n  providerTransactionId?: string | null;\n  /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */\n  offlinePayment?: boolean;\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n  /**\n   * Whether there is a payment agreement that allows for future charges.\n   * @immutable\n   */\n  savedPaymentMethod?: boolean;\n  /** Authorization details. */\n  authorizationDetails?: AuthorizationDetails;\n  /**\n   * Payment service provider display name. Non-exhaustive list of supported values: Wix Payments, PayPal, Square, Stripe, etc.\n   * @internal\n   * @maxLength 300\n   */\n  paymentProvider?: string | null;\n  /**\n   * Record of chargebacks made by the buyer.\n   * @maxSize 6\n   */\n  chargebacks?: Chargeback[];\n}\n\n/** @oneof */\nexport interface RegularPaymentDetailsPaymentMethodDetailsOneOf {\n  /** Whether regular card used */\n  creditCardDetails?: CreditCardPaymentMethodDetails;\n}\n\nexport enum TransactionStatus {\n  UNDEFINED = 'UNDEFINED',\n  APPROVED = 'APPROVED',\n  PENDING = 'PENDING',\n  PENDING_MERCHANT = 'PENDING_MERCHANT',\n  CANCELED = 'CANCELED',\n  DECLINED = 'DECLINED',\n  REFUNDED = 'REFUNDED',\n  PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',\n  AUTHORIZED = 'AUTHORIZED',\n  VOIDED = 'VOIDED',\n}\n\n/** @enumType */\nexport type TransactionStatusWithLiterals =\n  | TransactionStatus\n  | 'UNDEFINED'\n  | 'APPROVED'\n  | 'PENDING'\n  | 'PENDING_MERCHANT'\n  | 'CANCELED'\n  | 'DECLINED'\n  | 'REFUNDED'\n  | 'PARTIALLY_REFUNDED'\n  | 'AUTHORIZED'\n  | 'VOIDED';\n\nexport interface CreditCardPaymentMethodDetails {\n  /**\n   * The last 4 digits of the card number.\n   * @maxLength 4\n   */\n  lastFourDigits?: string | null;\n  /**\n   * Card issuer's brand.\n   * @maxLength 100\n   */\n  brand?: string | null;\n}\n\nexport interface AuthorizationDetails {\n  /**\n   * Whether the authorized payment is of a delayed capture.\n   * @readonly\n   */\n  delayedCapture?: boolean;\n  /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  authorizedDate?: Date | null;\n  /**\n   * List of captures associated with payment\n   * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses\n   * @maxSize 1\n   */\n  captures?: AuthorizationCapture[];\n  /** Void associated with payment */\n  void?: AuthorizationVoid;\n  /** Scheduled action for this transaction */\n  scheduledAction?: ScheduledAction;\n}\n\nexport interface AuthorizationCapture {\n  /**\n   * Capture ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /** Status of this capture action */\n  status?: AuthorizationCaptureStatusWithLiterals;\n  /**\n   * Amount of this capture\n   * @immutable\n   */\n  amount?: Price;\n  /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  _createdDate?: Date | null;\n  /** In case of status is FAILED may contain failure details */\n  failureDetails?: AuthorizationActionFailureDetails;\n}\n\nexport enum AuthorizationCaptureStatus {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Capture operation still in progress. */\n  PENDING = 'PENDING',\n  /** Capture operation succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Capture operation failed. */\n  FAILED = 'FAILED',\n}\n\n/** @enumType */\nexport type AuthorizationCaptureStatusWithLiterals =\n  | AuthorizationCaptureStatus\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED';\n\nexport interface Price {\n  /**\n   * Amount.\n   * @decimalValue options { gte:0, lte:1000000000000000 }\n   */\n  amount?: string;\n  /**\n   * Amount formatted with currency symbol.\n   * @readonly\n   */\n  formattedAmount?: string;\n}\n\nexport interface AuthorizationActionFailureDetails {\n  /** @maxLength 100 */\n  failureCode?: string;\n}\n\nexport interface AuthorizationVoid {\n  /** Status of this void action */\n  status?: AuthorizationVoidStatusWithLiterals;\n  /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */\n  voidedDate?: Date | null;\n  /** In case of status is FAILED may contain failure details */\n  failureDetails?: AuthorizationActionFailureDetails;\n  /** Reason of void action */\n  reason?: ReasonWithLiterals;\n}\n\nexport enum AuthorizationVoidStatus {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  /** Void operation still in progress. */\n  PENDING = 'PENDING',\n  /** Void operation succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Void operation failed. */\n  FAILED = 'FAILED',\n}\n\n/** @enumType */\nexport type AuthorizationVoidStatusWithLiterals =\n  | AuthorizationVoidStatus\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED';\n\n/** Reason the authorization was voided. */\nexport enum Reason {\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  /** Authorization was voided by user. */\n  MANUAL = 'MANUAL',\n  /** Authorization passed execution date. */\n  SCHEDULED = 'SCHEDULED',\n}\n\n/** @enumType */\nexport type ReasonWithLiterals =\n  | Reason\n  | 'UNKNOWN_REASON'\n  | 'MANUAL'\n  | 'SCHEDULED';\n\nexport interface ScheduledAction {\n  /** Type of the action. */\n  actionType?: ActionTypeWithLiterals;\n  /** The date and time of the action. */\n  executionDate?: Date | null;\n}\n\nexport enum ActionType {\n  UNKNOWN_ACTION_TYPE = 'UNKNOWN_ACTION_TYPE',\n  VOID = 'VOID',\n  CAPTURE = 'CAPTURE',\n}\n\n/** @enumType */\nexport type ActionTypeWithLiterals =\n  | ActionType\n  | 'UNKNOWN_ACTION_TYPE'\n  | 'VOID'\n  | 'CAPTURE';\n\nexport interface Chargeback {\n  /**\n   * Chargeback ID.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  _id?: string;\n  /**\n   * Date and time the chargeback was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the chargeback was updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Amount.\n   * @readonly\n   * @immutable\n   */\n  amount?: Price;\n  /**\n   * Reversal amount. Present only when status is REVERSED.\n   * @readonly\n   */\n  reversalAmount?: Price;\n  /**\n   * Status.\n   *\n   * Default: `\"APPROVED\"`.\n   */\n  status?: ChargebackStatusWithLiterals;\n  /**\n   * External chargeback ID.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  externalId?: string | null;\n}\n\nexport enum ChargebackStatus {\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** Chargeback was approved. */\n  APPROVED = 'APPROVED',\n  /** Chargeback was reversed. */\n  REVERSED = 'REVERSED',\n}\n\n/** @enumType */\nexport type ChargebackStatusWithLiterals =\n  | ChargebackStatus\n  | 'UNSPECIFIED'\n  | 'APPROVED'\n  | 'REVERSED';\n\nexport interface GiftCardPaymentDetails {\n  /**\n   * Gift card payment ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  giftCardPaymentId?: string;\n  /**\n   * ID of the app that created the gift card.\n   * @format GUID\n   */\n  appId?: string;\n  /**\n   * Whether the gift card is voided.\n   * @readonly\n   */\n  voided?: boolean;\n  /**\n   * Gift card obfuscated code.\n   * @internal\n   * @maxLength 30\n   * @immutable\n   */\n  obfuscatedCode?: string | null;\n}\n\nexport interface MembershipPaymentDetails {\n  /**\n   * Membership ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  membershipId?: string;\n  /**\n   * ID of the line item this membership applies to.\n   * @minLength 1\n   * @maxLength 100\n   */\n  lineItemId?: string;\n  /** Payment status. */\n  status?: MembershipPaymentStatusWithLiterals;\n  /** Membership name. */\n  name?: MembershipName;\n  /**\n   * The transaction ID in the membership system. Can be used to void the transaction.\n   * @minLength 1\n   * @maxLength 100\n   */\n  externalTransactionId?: string | null;\n  /**\n   * Whether the membership is voided.\n   * @readonly\n   */\n  voided?: boolean;\n  /**\n   * ID of the application providing this payment option.\n   * @format GUID\n   */\n  providerAppId?: string;\n}\n\nexport enum MembershipPaymentStatus {\n  /** Payment was charged. */\n  CHARGED = 'CHARGED',\n  /** The attempt to charge the payment failed, for example, due to lack of credits. */\n  CHARGE_FAILED = 'CHARGE_FAILED',\n}\n\n/** @enumType */\nexport type MembershipPaymentStatusWithLiterals =\n  | MembershipPaymentStatus\n  | 'CHARGED'\n  | 'CHARGE_FAILED';\n\nexport interface MembershipName {\n  /**\n   * Membership name.\n   * @maxLength 100\n   */\n  original?: string;\n  /**\n   * Translated membership name. Defaults to `original` when not provided.\n   * @maxLength 100\n   */\n  translated?: string | null;\n}\n\nexport interface WixReceiptInfo {\n  /**\n   * Receipt ID\n   * @format GUID\n   */\n  receiptId?: string;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface ExternalReceiptInfo {\n  /**\n   * External receipt ID\n   * @maxLength 100\n   */\n  receiptId?: string | null;\n  /**\n   * ID of the app providing the receipt\n   * @format GUID\n   */\n  appId?: string | null;\n  /**\n   * Display number of receipt\n   * @minLength 1\n   * @maxLength 40\n   */\n  displayNumber?: string | null;\n}\n\nexport interface Refund {\n  /**\n   * Refund ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string;\n  /**\n   * List of transactions.\n   * @maxSize 50\n   */\n  transactions?: RefundTransaction[];\n  /** Refund business details. */\n  details?: RefundDetails;\n  /**\n   * Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.\n   * @readonly\n   * @immutable\n   */\n  _createdDate?: Date | null;\n  /**\n   * Aggregated refund summary.\n   * @readonly\n   */\n  summary?: AggregatedRefundSummary;\n  /**\n   * ID of the app that initiated this refund.\n   * @format GUID\n   * @readonly\n   * @immutable\n   */\n  requestingServiceAppId?: string | null;\n}\n\nexport interface RefundTransaction {\n  /**\n   * ID of the payment associated with this refund.\n   * @format GUID\n   * @immutable\n   */\n  paymentId?: string;\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n  /** Refund status. */\n  refundStatus?: RefundStatusWithLiterals;\n  /** Optional details of current refund status. */\n  refundStatusInfo?: RefundStatusInfo;\n  /**\n   * Payment gateway's refund ID.\n   * This field is only returned when the value of `external_refund` is `false`.\n   * @format GUID\n   */\n  gatewayRefundId?: string | null;\n  /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */\n  providerRefundId?: string | null;\n  /**\n   * Whether refund was made externally and manually on the payment provider's side.\n   * @immutable\n   */\n  externalRefund?: boolean;\n}\n\n/** Refund transaction status. */\nexport enum RefundStatus {\n  /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */\n  PENDING = 'PENDING',\n  /** Refund transaction succeeded. */\n  SUCCEEDED = 'SUCCEEDED',\n  /** Refund transaction failed. */\n  FAILED = 'FAILED',\n  /** Refund request acknowledged, and will be executed soon. */\n  SCHEDULED = 'SCHEDULED',\n  /** Refund was initiated on payment provider side. */\n  STARTED = 'STARTED',\n}\n\n/** @enumType */\nexport type RefundStatusWithLiterals =\n  | RefundStatus\n  | 'PENDING'\n  | 'SUCCEEDED'\n  | 'FAILED'\n  | 'SCHEDULED'\n  | 'STARTED';\n\nexport interface RefundStatusInfo {\n  /**\n   * Reason code for the refund's current status.\n   *\n   * Learn more about [reason codes](https://dev.wix.com/docs/rest/business-management/payments/service-plugins/payment-service-provider-service-plugin/reason-codes).\n   * @minLength 1\n   * @maxLength 10\n   */\n  paymentGatewayReasonCode?: string | null;\n  /**\n   * Free text explanation of current refund status.\n   * @minLength 1\n   * @maxLength 1000\n   */\n  description?: string | null;\n}\n\n/** Business model of a refund request */\nexport interface RefundDetails {\n  /**\n   * Order line item IDs and quantities that were refunded.\n   * @maxSize 300\n   */\n  items?: RefundItem[];\n  /** Whether the shipping fee was also refunded. */\n  shippingIncluded?: boolean;\n  /**\n   * Reason for the refund, provided by customer (optional).\n   * @maxLength 200\n   */\n  reason?: string | null;\n  /**\n   * Line items that were refunded.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefund[];\n  /**\n   * Additional fees that were refunded.\n   * @maxSize 100\n   */\n  additionalFees?: AdditionalFeeRefund[];\n  /** Shipping amount that was refunded. */\n  shipping?: ShippingRefund;\n}\n\nexport interface RefundItem {\n  /**\n   * Line item ID the refunded line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity refunded.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface LineItemRefund {\n  /**\n   * Line item ID.\n   * @format GUID\n   * @immutable\n   */\n  lineItemId?: string;\n  /**\n   * Refund quantity.\n   * @min 1\n   * @max 100000\n   * @immutable\n   */\n  quantity?: number;\n}\n\nexport interface AdditionalFeeRefund {\n  /**\n   * Additional fee ID.\n   * @format GUID\n   * @immutable\n   */\n  additionalFeeId?: string;\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n}\n\nexport interface ShippingRefund {\n  /**\n   * Refund amount.\n   * @immutable\n   */\n  amount?: Price;\n}\n\nexport interface AggregatedRefundSummary {\n  /** Total amount requested for refund. */\n  requestedRefund?: Price;\n  /** Pending refund amount - the portion of `requestedRefund` that is still pending. */\n  pendingRefund?: Price;\n  /** Refunded amount - the portion of `requestedRefund` that refunded successfully. */\n  refunded?: Price;\n  /** Failed refund amount - the portion of `requestedRefund` that failed. */\n  failedRefundAmount?: Price;\n  /** Whether at least one refund transaction is still in `\"PENDING\"` status. */\n  pending?: boolean;\n  /** Breakdown of refunded items. Available only after refund is complete. */\n  breakdown?: RefundItemsBreakdown;\n}\n\nexport interface RefundItemsBreakdown {\n  /**\n   * Refunded line items and the amount refunded for each.\n   * @maxSize 300\n   */\n  lineItems?: LineItemRefundSummary[];\n}\n\nexport interface LineItemRefundSummary {\n  /**\n   * ID of the refunded line item.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /** Total refunded amount for the line item. */\n  totalRefundedAmount?: Price;\n}\n\nexport interface SnapshotMessage {\n  _id?: string;\n  opType?: number;\n}\n\nexport interface IndexingMessage {\n  _id?: string;\n  opType?: number;\n  requiredVersions?: string[];\n}\n\nexport interface DiffmatokyPayload {\n  left?: string;\n  right?: string;\n  compareChannel?: string;\n  entityId?: string;\n  errorInformation?: ErrorInformation;\n  tags?: string[];\n}\n\nexport interface ErrorInformation {\n  stackTrace?: string;\n}\n\nexport interface OrderRefunded {\n  /**\n   * Refund ID.\n   * @readonly\n   */\n  refundId?: string;\n  /**\n   * Refunded order data.\n   * @readonly\n   */\n  order?: Order;\n}\n\nexport interface Order {\n  /**\n   * Order ID (auto-generated upon order creation).\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Order number displayed in the owner's store (auto-generated).\n   * @readonly\n   */\n  number?: number;\n  /**\n   * Order creation date and time.\n   * @readonly\n   */\n  dateCreated?: Date | null;\n  /** Buyer information. */\n  buyerInfo?: BuyerInfo;\n  /**\n   * Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.\n   * @format CURRENCY\n   */\n  currency?: string | null;\n  /** Weight unit used in this store. */\n  weightUnit?: WeightUnitWithLiterals;\n  /** Totals for order's line items. */\n  totals?: Totals;\n  /** Billing information. */\n  billingInfo?: BillingInfo;\n  /** Shipping information. */\n  shippingInfo?: ShippingInfo;\n  /**\n   * A note added by the buyer.\n   * @maxLength 1000\n   */\n  buyerNote?: string | null;\n  /**\n   * Deprecated.\n   * @readonly\n   * @deprecated\n   */\n  read?: boolean;\n  /**\n   * Whether or not the order was archived.\n   * @readonly\n   */\n  archived?: boolean;\n  /** Current status of the payment. */\n  paymentStatus?: PaymentStatusWithLiterals;\n  /**\n   * Order's current fulfillment status (whether the order received a tracking number or was delivered/picked up).\n   * @readonly\n   */\n  fulfillmentStatus?: FulfillmentStatusWithLiterals;\n  /**\n   * Line items ordered.\n   * @minSize 1\n   * @maxSize 300\n   */\n  lineItems?: LineItem[];\n  /**\n   * Log of updates related to the order.\n   * @readonly\n   */\n  activities?: Activity[];\n  /** Invoice information. */\n  invoiceInfo?: V2InvoiceInfo;\n  /**\n   * Order fulfillment information.\n   * @readonly\n   */\n  fulfillments?: Fulfillment[];\n  /** Discount information. */\n  discount?: Discount;\n  /** Custom field information. */\n  customField?: CustomField;\n  /**\n   * Shopping cart ID.\n   * @format GUID\n   */\n  cartId?: string | null;\n  /**\n   * Language for communication with the buyer. Defaults to the site language.\n   * For a site that supports multiple languages, this is the language the buyer selected.\n   * @maxLength 10\n   */\n  buyerLanguage?: string | null;\n  /** Information about the sales channel that submitted this order. */\n  channelInfo?: ChannelInfo;\n  /**\n   * Identity of the order's initiator.\n   * @readonly\n   */\n  enteredBy?: EnteredBy;\n  /**\n   * Date and time of latest update.\n   * @readonly\n   */\n  lastUpdated?: Date | null;\n  /** Subscription information. */\n  subscriptionInfo?: SubscriptionInfo;\n  /**\n   * Order’s unique numeric ID.\n   * Primarily used for sorting and filtering when crawling all orders.\n   * @readonly\n   */\n  numericId?: string;\n  /**\n   * Refund information.\n   * @readonly\n   */\n  refunds?: V2Refund[];\n}\n\n/** Buyer Info */\nexport interface BuyerInfo {\n  /**\n   * Wix customer ID\n   * @format GUID\n   */\n  _id?: string | null;\n  /**\n   * Deprecated (use identityType instead)\n   * @readonly\n   * @deprecated\n   */\n  type?: IdentityTypeWithLiterals;\n  /** Customer type */\n  identityType?: IdentityTypeWithLiterals;\n  /**\n   * Customer's first name\n   * @readonly\n   */\n  firstName?: string;\n  /**\n   * Customer's last name\n   * @readonly\n   */\n  lastName?: string;\n  /**\n   * Customer's phone number\n   * @readonly\n   */\n  phone?: string | null;\n  /**\n   * Customer's email address\n   * @readonly\n   */\n  email?: string;\n}\n\nexport enum IdentityType {\n  UNSPECIFIED_IDENTITY_TYPE = 'UNSPECIFIED_IDENTITY_TYPE',\n  /** Site member */\n  MEMBER = 'MEMBER',\n  /** Contact */\n  CONTACT = 'CONTACT',\n}\n\n/** @enumType */\nexport type IdentityTypeWithLiterals =\n  | IdentityType\n  | 'UNSPECIFIED_IDENTITY_TYPE'\n  | 'MEMBER'\n  | 'CONTACT';\n\nexport enum WeightUnit {\n  /** Weight unit can't be classified due to an error. */\n  UNSPECIFIED_WEIGHT_UNIT = 'UNSPECIFIED_WEIGHT_UNIT',\n  /** Kilograms. */\n  KG = 'KG',\n  /** Pounds. */\n  LB = 'LB',\n}\n\n/** @enumType */\nexport type WeightUnitWithLiterals =\n  | WeightUnit\n  | 'UNSPECIFIED_WEIGHT_UNIT'\n  | 'KG'\n  | 'LB';\n\nexport interface Totals {\n  /**\n   * Subtotal of all the line items, before tax.\n   * @format DECIMAL_VALUE\n   */\n  subtotal?: string;\n  /**\n   * Total shipping price, before tax.\n   * @format DECIMAL_VALUE\n   */\n  shipping?: string | null;\n  /**\n   * Total tax.\n   * @format DECIMAL_VALUE\n   */\n  tax?: string | null;\n  /**\n   * Total calculated discount value.\n   * @format DECIMAL_VALUE\n   */\n  discount?: string | null;\n  /**\n   * Total price charged.\n   * @format DECIMAL_VALUE\n   */\n  total?: string;\n  /**\n   * Total items weight.\n   * @readonly\n   */\n  weight?: string;\n  /**\n   * Total number of line items.\n   * @readonly\n   */\n  quantity?: number;\n  /**\n   * Total refund.\n   * @format DECIMAL_VALUE\n   * @readonly\n   */\n  refund?: string | null;\n  /**\n   * Total calculated gift card value.\n   * @format DECIMAL_VALUE\n   */\n  giftCard?: string | null;\n}\n\nexport interface BillingInfo {\n  /**\n   * Payment method used for this order\n   * @maxLength 50\n   */\n  paymentMethod?: string | null;\n  /**\n   * Deprecated (use paymentProviderTransactionId instead)\n   * @readonly\n   * @deprecated\n   */\n  externalTransactionId?: string | null;\n  /**\n   * Transaction ID from payment provider (e.g., PayPal, Square, Stripe) transaction ID\n   * @maxLength 100\n   */\n  paymentProviderTransactionId?: string | null;\n  /**\n   * Transaction ID from payment gateway (e.g., Wix Payments)\n   * @maxLength 100\n   */\n  paymentGatewayTransactionId?: string | null;\n  /** Full billing address */\n  address?: Address;\n  /**\n   * Payment date\n   * @readonly\n   */\n  paidDate?: Date | null;\n  /** Whether order can be refunded by payment provider (manually or automatic) */\n  refundableByPaymentProvider?: boolean | null;\n}\n\nexport interface Address extends AddressAddressLine1OptionsOneOf {\n  /**\n   * Address line 1 (free text)\n   * @maxLength 1000\n   */\n  addressLine1?: string;\n  /** Address line 1 (street) */\n  street?: Street;\n  /** Addressee name */\n  fullName?: FullName;\n  /**\n   * Country code (2 letters)\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /**\n   * State or district\n   * @maxLength 50\n   */\n  subdivision?: string | null;\n  /**\n   * City name\n   * @maxLength 150\n   */\n  city?: string | null;\n  /**\n   * ZIP/postal code\n   * @maxLength 200\n   */\n  zipCode?: string | null;\n  /**\n   * Phone number\n   * @maxLength 200\n   */\n  phone?: string | null;\n  /**\n   * Company name\n   * @maxLength 500\n   */\n  company?: string | null;\n  /**\n   * Email address\n   * @maxLength 500\n   */\n  email?: string | null;\n  /**\n   * address line\n   * @maxLength 250\n   */\n  addressLine2?: string | null;\n  /** Tax information (for Brazil only) */\n  vatId?: VatId;\n}\n\n/** @oneof */\nexport interface AddressAddressLine1OptionsOneOf {\n  /**\n   * Address line 1 (free text)\n   * @maxLength 1000\n   */\n  addressLine1?: string;\n  /** Address line 1 (street) */\n  street?: Street;\n}\n\nexport interface FullName {\n  /**\n   * Customer's first name\n   * @maxLength 1000\n   */\n  firstName?: string;\n  /**\n   * Customer's last name\n   * @maxLength 1000\n   */\n  lastName?: string;\n}\n\nexport interface Street {\n  /**\n   * Street number\n   * @maxLength 500\n   */\n  number?: string;\n  /**\n   * Street name\n   * @maxLength 1000\n   */\n  name?: string;\n}\n\nexport interface VatId {\n  /**\n   * Customer's tax ID.\n   * @maxLength 50\n   */\n  number?: string;\n  /**\n   * Tax type.\n   * + `CPF`: For individual tax payers.\n   * + `CNPJ`: For corporations.\n   */\n  type?: VatTypeWithLiterals;\n}\n\n/** Brazilian tax info types */\nexport enum VatType {\n  /** When the tax info type can't be classified, due to an error */\n  UNSPECIFIED_TAX_TYPE = 'UNSPECIFIED_TAX_TYPE',\n  /** CPF - for individual tax payers */\n  CPF = 'CPF',\n  /** CNPJ - for corporations */\n  CNPJ = 'CNPJ',\n}\n\n/** @enumType */\nexport type VatTypeWithLiterals =\n  | VatType\n  | 'UNSPECIFIED_TAX_TYPE'\n  | 'CPF'\n  | 'CNPJ';\n\nexport interface ShippingInfo extends ShippingInfoDetailsOneOf {\n  /** Shipment details (when this object describes shipment). */\n  shipmentDetails?: ShipmentDetails;\n  /** Pickup details (when this object describes pickup). */\n  pickupDetails?: PickupDetails;\n  /**\n   * Shipping option name.\n   * @maxLength 1000\n   */\n  deliveryOption?: string;\n  /**\n   * Shipping option delivery time.\n   * @maxLength 500\n   */\n  estimatedDeliveryTime?: string | null;\n  /**\n   * Deprecated - Latest expected delivery date.\n   * @deprecated\n   */\n  deliverByDate?: Date | null;\n  /**\n   * Shipping region.\n   * @maxLength 100\n   */\n  shippingRegion?: string | null;\n  /**\n   * Unique code of provided shipping option. For example, `\"usps_std_overnight\"`.\n   * @maxLength 100\n   * @readonly\n   */\n  code?: string | null;\n}\n\n/** @oneof */\nexport interface ShippingInfoDetailsOneOf {\n  /** Shipment details (when this object describes shipment). */\n  shipmentDetails?: ShipmentDetails;\n  /** Pickup details (when this object describes pickup). */\n  pickupDetails?: PickupDetails;\n}\n\nexport interface ShipmentDetails {\n  /** Shipping destination address. */\n  address?: Address;\n  /**\n   * Deprecated (use fulfillments instead).\n   * @readonly\n   * @deprecated\n   */\n  trackingInfo?: TrackingInfo;\n  /**\n   * Discount applied for shipping.\n   * @format DECIMAL_VALUE\n   */\n  discount?: string | null;\n  /**\n   * Tax applied for shipping.\n   * @format DECIMAL_VALUE\n   */\n  tax?: string | null;\n  /** Price data. */\n  priceData?: ShippingPriceData;\n}\n\nexport interface TrackingInfo {\n  /**\n   * Tracking number\n   * @maxLength 100\n   * @readonly\n   */\n  trackingNumber?: string | null;\n  /**\n   * Shipping provider\n   * @maxLength 100\n   * @readonly\n   */\n  shippingProvider?: string | null;\n  /**\n   * Tracking link\n   * @format WEB_URL\n   * @readonly\n   */\n  trackingLink?: string | null;\n}\n\nexport interface ShippingPriceData {\n  /** Whether tax is included in the price. */\n  taxIncludedInPrice?: boolean;\n  /**\n   * Shipping price.\n   * @format DECIMAL_VALUE\n   */\n  price?: string | null;\n}\n\nexport interface PickupDetails {\n  /** Pickup address. */\n  pickupAddress?: PickupAddress;\n  /**\n   * Deprecated (use billingInfo instead).\n   * @readonly\n   * @deprecated\n   */\n  buyerDetails?: BuyerDetails;\n  /**\n   * Store owner's pickup instructions.\n   * @maxLength 1000\n   */\n  pickupInstructions?: string | null;\n}\n\nexport interface PickupAddress {\n  /** Country code (3 letters) */\n  country?: string;\n  /**\n   * State/District\n   * @maxLength 50\n   */\n  subdivision?: string | null;\n  /**\n   * Address\n   * @maxLength 250\n   */\n  addressLine1?: string;\n  /**\n   * City\n   * @maxLength 100\n   */\n  city?: string;\n  /**\n   * ZIP/postal code\n   * @maxLength 50\n   */\n  zipCode?: string;\n}\n\nexport interface BuyerDetails {\n  /** Addressee name */\n  fullName?: FullName;\n  /**\n   * Email address\n   * @maxLength 100\n   * @format EMAIL\n   */\n  email?: string;\n  /**\n   * Phone number\n   * @maxLength 30\n   * @format PHONE\n   */\n  phone?: string;\n}\n\n/** This might be extended in the future with pending orders statuses */\nexport enum PaymentStatus {\n  /** Payment status can't be classified, due to an error */\n  UNSPECIFIED_PAYMENT_STATUS = 'UNSPECIFIED_PAYMENT_STATUS',\n  /** Order is pending response from the payment provider */\n  PENDING = 'PENDING',\n  /** Order is marked as not paid, and can be marked as paid later on. This is relevant for POS and offline orders */\n  NOT_PAID = 'NOT_PAID',\n  /** The order is marked as paid */\n  PAID = 'PAID',\n  /** Order was refunded, refund amount less than order total price */\n  PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',\n  /** Full order total price was refunded */\n  FULLY_REFUNDED = 'FULLY_REFUNDED',\n  /** At least one payment was received and approved, covering less than total price amount */\n  PARTIALLY_PAID = 'PARTIALLY_PAID',\n}\n\n/** @enumType */\nexport type PaymentStatusWithLiterals =\n  | PaymentStatus\n  | 'UNSPECIFIED_PAYMENT_STATUS'\n  | 'PENDING'\n  | 'NOT_PAID'\n  | 'PAID'\n  | 'PARTIALLY_REFUNDED'\n  | 'FULLY_REFUNDED'\n  | 'PARTIALLY_PAID';\n\nexport enum FulfillmentStatus {\n  /** None of the order items are fulfilled */\n  NOT_FULFILLED = 'NOT_FULFILLED',\n  /**\n   * All of the order items are fulfilled\n   * Orders without shipping info are fulfilled automatically\n   */\n  FULFILLED = 'FULFILLED',\n  /** Order is canceled */\n  CANCELED = 'CANCELED',\n  /** Some, but not all of the order items are fulfilled */\n  PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',\n}\n\n/** @enumType */\nexport type FulfillmentStatusWithLiterals =\n  | FulfillmentStatus\n  | 'NOT_FULFILLED'\n  | 'FULFILLED'\n  | 'CANCELED'\n  | 'PARTIALLY_FULFILLED';\n\nexport interface LineItem {\n  /**\n   * Line item ID (auto-generated, stable within this order only)\n   * @readonly\n   */\n  index?: number | null;\n  /**\n   * Line item quantity\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n  /**\n   * Deprecated (use priceData instead)\n   * @format DECIMAL_VALUE\n   * @readonly\n   * @deprecated\n   */\n  price?: string | null;\n  /**\n   * Line item name\n   * @minLength 1\n   * @maxLength 200\n   */\n  name?: string | null;\n  /** Product name, translated into the customer's language */\n  translatedName?: string | null;\n  /**\n   * Line item product ID (optional for POS orders)\n   * @minLength 1\n   */\n  productId?: string | null;\n  /**\n   * Deprecated (use priceData instead)\n   * @format DECIMAL_VALUE\n   * @readonly\n   * @deprecated\n   */\n  totalPrice?: string | null;\n  /** Line item type (may be extended) */\n  lineItemType?: LineItemTypeWithLiterals;\n  /**\n   * Line item options ordered\n   * @maxSize 500\n   */\n  options?: OptionSelection[];\n  /**\n   * Line item custom text field entry\n   * @maxSize 500\n   */\n  customTextFields?: CustomTextFieldSelection[];\n  /**\n   * Line item weight\n   * @format DECIMAL_VALUE\n   */\n  weight?: string | null;\n  /** Primary media for preview of the line item */\n  mediaItem?: MediaItem;\n  /**\n   * Line item SKU\n   * @maxLength 40\n   */\n  sku?: string | null;\n  /**\n   * Line item notes\n   * @maxLength 1000\n   */\n  notes?: string | null;\n  /** Line item variantId (from Stores Catalog) */\n  variantId?: string | null;\n  /**\n   * Line item fulfillerId from stores fulfillers. No value equals self fulfilled\n   * @format GUID\n   */\n  fulfillerId?: string | null;\n  /**\n   * Discount applied for this line item\n   * @format DECIMAL_VALUE\n   */\n  discount?: string | null;\n  /**\n   * Tax applied for this line item\n   * @format DECIMAL_VALUE\n   */\n  tax?: string | null;\n  /**\n   * Deprecated (use priceData instead)\n   * @readonly\n   * @deprecated\n   */\n  taxIncludedInPrice?: boolean;\n  /**\n   * Tax group ID\n   * @format GUID\n   */\n  taxGroupId?: string | null;\n  /** Price data */\n  priceData?: LineItemPriceData;\n}\n\nexport enum LineItemType {\n  /** Line item type can't be classified, due to an error */\n  UNSPECIFIED_LINE_ITEM_TYPE = 'UNSPECIFIED_LINE_ITEM_TYPE',\n  /** Physical item type */\n  PHYSICAL = 'PHYSICAL',\n  /** Digital item type */\n  DIGITAL = 'DIGITAL',\n  /** Custom item price */\n  CUSTOM_AMOUNT_ITEM = 'CUSTOM_AMOUNT_ITEM',\n}\n\n/** @enumType */\nexport type LineItemTypeWithLiterals =\n  | LineItemType\n  | 'UNSPECIFIED_LINE_ITEM_TYPE'\n  | 'PHYSICAL'\n  | 'DIGITAL'\n  | 'CUSTOM_AMOUNT_ITEM';\n\nexport interface OptionSelection {\n  /**\n   * Option name\n   * @maxLength 1000\n   */\n  option?: string;\n  /**\n   * Selected choice for this option\n   * @maxLength 16000\n   */\n  selection?: string;\n}\n\nexport interface CustomTextFieldSelection {\n  /**\n   * Custom text field name\n   * @maxLength 1000\n   */\n  title?: string;\n  /**\n   * Custom text field value\n   * @maxLength 16000\n   */\n  value?: string;\n}\n\nexport interface MediaItem {\n  /**\n   * Media type\n   * @readonly\n   */\n  mediaType?: MediaItemTypeWithLiterals;\n  /**\n   * Media URL\n   * @format WEB_URL\n   * @readonly\n   */\n  url?: string;\n  /**\n   * Media item width\n   * @readonly\n   */\n  width?: number;\n  /**\n   * Media item height\n   * @readonly\n   */\n  height?: number;\n  /**\n   * Deprecated\n   * @deprecated\n   */\n  mediaId?: string | null;\n  /** Media ID (for media items previously saved in Wix Media) */\n  _id?: string | null;\n  /** Media external URL */\n  externalImageUrl?: string | null;\n  /**\n   * Alternative text for presentation when media cannot be displayed\n   * @maxLength 256\n   */\n  altText?: string | null;\n}\n\nexport enum MediaItemType {\n  /** Media item type can't be classified, due to an error */\n  UNSPECIFIED_MEDIA_TYPE_ITEM = 'UNSPECIFIED_MEDIA_TYPE_ITEM',\n  /** Image item type */\n  IMAGE = 'IMAGE',\n}\n\n/** @enumType */\nexport type MediaItemTypeWithLiterals =\n  | MediaItemType\n  | 'UNSPECIFIED_MEDIA_TYPE_ITEM'\n  | 'IMAGE';\n\nexport interface LineItemPriceData {\n  /** Whether tax is included in the price set for this line item */\n  taxIncludedInPrice?: boolean;\n  /**\n   * Line item price\n   * @format DECIMAL_VALUE\n   */\n  price?: string;\n  /**\n   * Total price charged to the customer (per line item) after computation of quantity and discount\n   * @format DECIMAL_VALUE\n   * @readonly\n   */\n  totalPrice?: string | null;\n}\n\nexport interface DigitalFile {\n  /**\n   * id of the secure file in media\n   * @minLength 1\n   * @maxLength 100\n   */\n  fileId?: string;\n}\n\nexport interface Activity {\n  /**\n   * Activity item type\n   * @readonly\n   */\n  type?: ActivityTypeWithLiterals;\n  /**\n   * Activity item author\n   * @maxLength 50\n   * @readonly\n   */\n  author?: string | null;\n  /**\n   * Comment added to activity item\n   * @maxLength 1000\n   * @readonly\n   */\n  message?: string | null;\n  /**\n   * Activity item timestamp\n   * @readonly\n   */\n  timestamp?: Date | null;\n}\n\nexport enum ActivityType {\n  /** Activity item type can't be classified, due to an error */\n  UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE = 'UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE',\n  /** Store owner added a comment */\n  MERCHANT_COMMENT = 'MERCHANT_COMMENT',\n  /** Order placed */\n  ORDER_PLACED = 'ORDER_PLACED',\n  /** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */\n  ORDER_PAID = 'ORDER_PAID',\n  /** Order shipping status set as fulfilled */\n  ORDER_FULFILLED = 'ORDER_FULFILLED',\n  /** Order shipping status set as not fulfilled */\n  ORDER_NOT_FULFILLED = 'ORDER_NOT_FULFILLED',\n  /** A download link was sent (relevant for orders with digital line items) */\n  DOWNLOAD_LINK_SENT = 'DOWNLOAD_LINK_SENT',\n  /** An email notification for pickup was sent */\n  PICKUP_READY_EMAIL_SENT = 'PICKUP_READY_EMAIL_SENT',\n  /** Shipping tracking number was set */\n  TRACKING_NUMBER_ADDED = 'TRACKING_NUMBER_ADDED',\n  /** Shipping tracking number was edited */\n  TRACKING_NUMBER_EDITED = 'TRACKING_NUMBER_EDITED',\n  /** Shipping tracking link was set */\n  TRACKING_LINK_WAS_SET = 'TRACKING_LINK_WAS_SET',\n  /** An email confirmation of order shipment was sent */\n  SHIPPING_CONFIRMATION_EMAIL_SENT = 'SHIPPING_CONFIRMATION_EMAIL_SENT',\n  /** Invoice was set in the order */\n  INVOICE_WAS_SET = 'INVOICE_WAS_SET',\n  /** Invoice was removed from the order */\n  INVOICE_WAS_REMOVED = 'INVOICE_WAS_REMOVED',\n  /** Invoice was sent to customer via email */\n  INVOICE_WAS_SENT = 'INVOICE_WAS_SENT',\n  /** Email was sent to fulfiller */\n  FULFILLER_EMAIL_SENT = 'FULFILLER_EMAIL_SENT',\n  /** Shipping address was updated */\n  SHIPPING_ADDRESS_EDITED = 'SHIPPING_ADDRESS_EDITED',\n  /** Order email was updated */\n  EMAIL_EDITED = 'EMAIL_EDITED',\n  /** Order partially paid. During the checkout for orders with deposit items. */\n  ORDER_PARTIALLY_PAID = 'ORDER_PARTIALLY_PAID',\n}\n\n/** @enumType */\nexport type ActivityTypeWithLiterals =\n  | ActivityType\n  | 'UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE'\n  | 'MERCHANT_COMMENT'\n  | 'ORDER_PLACED'\n  | 'ORDER_PAID'\n  | 'ORDER_FULFILLED'\n  | 'ORDER_NOT_FULFILLED'\n  | 'DOWNLOAD_LINK_SENT'\n  | 'PICKUP_READY_EMAIL_SENT'\n  | 'TRACKING_NUMBER_ADDED'\n  | 'TRACKING_NUMBER_EDITED'\n  | 'TRACKING_LINK_WAS_SET'\n  | 'SHIPPING_CONFIRMATION_EMAIL_SENT'\n  | 'INVOICE_WAS_SET'\n  | 'INVOICE_WAS_REMOVED'\n  | 'INVOICE_WAS_SENT'\n  | 'FULFILLER_EMAIL_SENT'\n  | 'SHIPPING_ADDRESS_EDITED'\n  | 'EMAIL_EDITED'\n  | 'ORDER_PARTIALLY_PAID';\n\nexport interface V2InvoiceInfo {\n  /**\n   * Invoice ID\n   * @maxLength 100\n   */\n  _id?: string;\n  /** Invoice source */\n  source?: InvoiceSourceWithLiterals;\n}\n\nexport enum InvoiceSource {\n  /** Invoice source can't be classified, due to an error */\n  UNSPECIFIED_INVOICE_SOURCE = 'UNSPECIFIED_INVOICE_SOURCE',\n  /** Invoice created using the Invoices API */\n  WIX = 'WIX',\n}\n\n/** @enumType */\nexport type InvoiceSourceWithLiterals =\n  | InvoiceSource\n  | 'UNSPECIFIED_INVOICE_SOURCE'\n  | 'WIX';\n\nexport interface Fulfillment {\n  /**\n   * Fulfillment ID (auto generated upon fulfillment creation).\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Fulfillment creation date and time.\n   * @readonly\n   */\n  dateCreated?: Date | null;\n  /**\n   * Information about the line items in the fulfilled order.\n   * @minSize 1\n   * @maxSize 300\n   */\n  lineItems?: FulfillmentLineItem[];\n  /** Tracking information. */\n  trackingInfo?: FulfillmentTrackingInfo;\n}\n\nexport interface FulfillmentLineItem {\n  /**\n   * Line item ID (mirrors the line item index of the order).\n   * @min 1\n   * @max 200\n   */\n  index?: number;\n  /**\n   * Line item quantity.\n   * On creation, if this parameter isn't passed, the new fulfillment will automatically include all items of this line item that have not already been linked to a fulfillment.\n   * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error will be returned.\n   * This property will always have a value when returned.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number | null;\n}\n\nexport interface FulfillmentTrackingInfo {\n  /**\n   * Tracking number.\n   * @minLength 1\n   * @maxLength 100\n   */\n  trackingNumber?: string;\n  /**\n   * Shipping provider. Using the following shipping providers will allow for autofilling the tracking link:\n   * * `fedex`\n   * * `ups`\n   * * `usps`\n   * * `dhl`\n   * * `canadaPost`\n   * @minLength 1\n   * @maxLength 100\n   */\n  shippingProvider?: string;\n  /**\n   * Tracking link - autofilled if using a predefined shipping provider, otherwise provided on creation.\n   * @minLength 1\n   * @maxLength 2048\n   * @format WEB_URL\n   */\n  trackingLink?: string | null;\n}\n\nexport interface Discount {\n  /**\n   * Deprecated (use Totals.discount instead)\n   * @readonly\n   * @deprecated\n   */\n  value?: string;\n  /** Applied coupon */\n  appliedCoupon?: AppliedCoupon;\n}\n\nexport interface AppliedCoupon {\n  /**\n   * Coupon ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  couponId?: string;\n  /**\n   * Coupon name\n   * @maxLength 100\n   */\n  name?: string;\n  /**\n   * Coupon code\n   * @maxLength 100\n   */\n  code?: string;\n}\n\n/** Custom field */\nexport interface CustomField {\n  /**\n   * Free text that the customer entered in the custom field during the checkout process\n   * @maxLength 2000\n   */\n  value?: string;\n  /**\n   * Title for the custom field\n   * @maxLength 1000\n   */\n  title?: string;\n  /**\n   * The title translated according to the buyer language\n   * @maxLength 1000\n   */\n  translatedTitle?: string;\n}\n\nexport interface ChannelInfo {\n  /** Sales channel that submitted the order */\n  type?: ChannelTypeWithLiterals;\n  /**\n   * Reference to an order ID from an external system, as defined in channelInfo (e.g., eBay or Amazon)\n   * @maxLength 100\n   */\n  externalOrderId?: string | null;\n  /**\n   * URL to the order in the external system, as defined in channelInfo (e.g., eBay or Amazon)\n   * @maxLength 300\n   */\n  externalOrderUrl?: string | null;\n}\n\nexport enum ChannelType {\n  UNSPECIFIED = 'UNSPECIFIED',\n  WEB = 'WEB',\n  POS = 'POS',\n  EBAY = 'EBAY',\n  AMAZON = 'AMAZON',\n  OTHER_PLATFORM = 'OTHER_PLATFORM',\n  WIX_APP_STORE = 'WIX_APP_STORE',\n  WIX_INVOICES = 'WIX_INVOICES',\n  BACKOFFICE_MERCHANT = 'BACKOFFICE_MERCHANT',\n  WISH = 'WISH',\n  CLASS_PASS = 'CLASS_PASS',\n  GLOBAL_E = 'GLOBAL_E',\n  FACEBOOK = 'FACEBOOK',\n  ETSY = 'ETSY',\n  TIKTOK = 'TIKTOK',\n  FAIRE_COM = 'FAIRE_COM',\n  PAYPAL_AGENTIC_CHECKOUT = 'PAYPAL_AGENTIC_CHECKOUT',\n}\n\n/** @enumType */\nexport type ChannelTypeWithLiterals =\n  | ChannelType\n  | 'UNSPECIFIED'\n  | 'WEB'\n  | 'POS'\n  | 'EBAY'\n  | 'AMAZON'\n  | 'OTHER_PLATFORM'\n  | 'WIX_APP_STORE'\n  | 'WIX_INVOICES'\n  | 'BACKOFFICE_MERCHANT'\n  | 'WISH'\n  | 'CLASS_PASS'\n  | 'GLOBAL_E'\n  | 'FACEBOOK'\n  | 'ETSY'\n  | 'TIKTOK'\n  | 'FAIRE_COM'\n  | 'PAYPAL_AGENTIC_CHECKOUT';\n\nexport interface EnteredBy {\n  /** @format GUID */\n  _id?: string;\n  identityType?: EnteredByIdentityTypeWithLiterals;\n}\n\nexport enum EnteredByIdentityType {\n  USER = 'USER',\n  MEMBER = 'MEMBER',\n  CONTACT = 'CONTACT',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type EnteredByIdentityTypeWithLiterals =\n  | EnteredByIdentityType\n  | 'USER'\n  | 'MEMBER'\n  | 'CONTACT'\n  | 'APP';\n\nexport interface SubscriptionInfo {\n  /**\n   * Subscription ID.\n   * @format GUID\n   */\n  _id?: string | null;\n  /**\n   * Current cycle number. For example, if the subscription is in the 3rd month of a 4-month subscription, the value will be `3`.\n   * @min 1\n   */\n  cycleNumber?: number;\n  /** Subscription settings. */\n  subscriptionSettings?: SubscriptionSettings;\n  /** Subscription options info. */\n  subscriptionOptionInfo?: SubscriptionOptionInfo;\n}\n\nexport interface SubscriptionSettings {\n  /** Frequency of recurring payment. */\n  frequency?: SubscriptionFrequencyWithLiterals;\n  /** Whether subscription is renewed automatically at the end of each period. */\n  autoRenewal?: boolean;\n  /**\n   * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.\n   * @min 2\n   * @max 999\n   */\n  billingCycles?: number | null;\n}\n\n/** Frequency unit of recurring payment */\nexport enum SubscriptionFrequency {\n  UNDEFINED = 'UNDEFINED',\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n  YEAR = 'YEAR',\n}\n\n/** @enumType */\nexport type SubscriptionFrequencyWithLiterals =\n  | SubscriptionFrequency\n  | 'UNDEFINED'\n  | 'DAY'\n  | 'WEEK'\n  | 'MONTH'\n  | 'YEAR';\n\nexport interface SubscriptionOptionInfo {\n  /**\n   * Subscription option title.\n   * @minLength 1\n   * @maxLength 150\n   */\n  title?: string;\n  /**\n   * Subscription option description.\n   * @maxLength 500\n   */\n  description?: string | null;\n}\n\nexport interface V2Refund {\n  /** Refund created timestamp. */\n  dateCreated?: Date | null;\n  /**\n   * Refund amount.\n   * @format DECIMAL_VALUE\n   */\n  amount?: string;\n  /** Reason for refund, given by user (optional). */\n  reason?: string | null;\n  /** Payment provider transaction ID. Used to find refund transaction info on the payment provider's side. */\n  paymentProviderTransactionId?: string | null;\n  /**\n   * Refund ID.\n   * @format GUID\n   */\n  _id?: string;\n  /** Whether refund was made externally (on the payment provider's side). */\n  externalRefund?: boolean;\n}\n\nexport interface GiftCard {\n  /**\n   * @minLength 1\n   * @maxLength 100\n   */\n  transactionId?: string;\n  /**\n   * giftcard internal ID\n   * @maxLength 36\n   * @deprecated giftcard internal ID\n   * @targetRemovalDate 2024-12-31\n   */\n  _id?: string;\n  /**\n   * giftcard provider appid\n   * @format GUID\n   */\n  providerId?: string;\n  /**\n   * giftcard amount\n   * @format DECIMAL_VALUE\n   */\n  amount?: string;\n}\n\n/** Triggered when a payment is updated. */\nexport interface PaymentsUpdated {\n  /** Updated order transactions. */\n  orderTransactions?: OrderTransactions;\n  /**\n   * List of IDs of the updated payments.\n   * @maxSize 100\n   */\n  paymentIds?: string[];\n  /**\n   * List of IDs of the updated refunds.\n   * @maxSize 300\n   */\n  refundIds?: string[];\n}\n\n/** Triggered when a payment is updated. */\nexport interface PaymentDetailsUpdated {\n  /** Updated order transactions. */\n  orderTransactions?: OrderTransactions;\n  /**\n   * List of IDs of the updated payments.\n   * @format GUID\n   * @maxSize 100\n   */\n  paymentIds?: string[];\n  /**\n   * List of IDs of the updated refunds.\n   * @format GUID\n   * @maxSize 300\n   */\n  refundIds?: string[];\n}\n\n/** Triggered when a refund is created. */\nexport interface RefundCreated {\n  /** Updated order transactions. */\n  orderTransactions?: OrderTransactions;\n  /** ID of the created refund. */\n  refundId?: string;\n  /** Inventory restock details as part of this refund.. */\n  restockInfo?: RestockInfo;\n  /** Whether to send a refund confirmation email to the customer. */\n  sendOrderRefundedEmail?: boolean;\n  /** Custom message added to the refund confirmation email. */\n  customMessage?: string | null;\n  /** Refunded line items and quantities that are part of the created refund. */\n  refundItems?: RefundItem[];\n}\n\nexport interface RestockInfo {\n  /** Restock type. */\n  type?: RestockTypeWithLiterals;\n  /**\n   * Restocked line items and quantities. Only relevant for `{\"type\": \"SOME_ITEMS\"}`.\n   * @maxSize 300\n   */\n  items?: RestockItem[];\n}\n\nexport enum RestockType {\n  NO_ITEMS = 'NO_ITEMS',\n  ALL_ITEMS = 'ALL_ITEMS',\n  SOME_ITEMS = 'SOME_ITEMS',\n}\n\n/** @enumType */\nexport type RestockTypeWithLiterals =\n  | RestockType\n  | 'NO_ITEMS'\n  | 'ALL_ITEMS'\n  | 'SOME_ITEMS';\n\nexport interface RestockItem {\n  /**\n   * ID of the line item being restocked.\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * Line item quantity being restocked.\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n}\n\nexport interface RefundCompleted {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /** Completed refund. */\n  refund?: Refund;\n  /** Refund side effects. */\n  sideEffects?: RefundSideEffects;\n  /** Order transactions after refund is completed. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface RefundSideEffects {\n  /** Inventory restock details as part of this refund. */\n  restockInfo?: RestockInfo;\n  /** Whether to send a refund confirmation email to the customer. */\n  sendOrderRefundedEmail?: boolean;\n  /**\n   * Custom message added to the refund confirmation email.\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n}\n\nexport interface ChargebackApproved {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Approved chargeback. */\n  chargeback?: Chargeback;\n  /** Order transactions after chargeback is approved. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface ChargebackReversed {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Reversed chargeback. */\n  chargeback?: Chargeback;\n  /** Order transactions after chargeback is reversed. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface ListTransactionsForSingleOrderRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId: string;\n}\n\nexport interface ListTransactionsForSingleOrderResponse {\n  /** Order ID and its associated transactions. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface ListTransactionsForMultipleOrdersRequest {\n  /**\n   * Order IDs for which to retrieve transactions.\n   * @minSize 1\n   * @maxSize 100\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderIds: string[];\n}\n\nexport interface ListTransactionsForMultipleOrdersResponse {\n  /** List of order IDs and their associated transactions. */\n  orderTransactions?: OrderTransactions[];\n}\n\nexport interface AddPaymentsRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * Payments to be added to order.\n   * @minSize 1\n   * @maxSize 50\n   */\n  payments: Payment[];\n}\n\nexport interface AddPaymentsResponse {\n  /** Order ID and its associated transactions. */\n  orderTransactions?: OrderTransactions;\n  /** IDs of added order payments. */\n  paymentsIds?: string[];\n}\n\nexport interface AddRefundRequest {\n  /**\n   * Order ID this refunds related to\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /** Refund with refund transactions to be added to order. */\n  refund?: Refund;\n  /** Side effect details related to refund */\n  sideEffects?: RefundSideEffects;\n}\n\nexport interface AddRefundResponse {\n  /** Order ID and its associated transactions. */\n  orderTransactions?: OrderTransactions;\n  /** Created refund ID */\n  refundId?: string;\n}\n\nexport interface UpdatePaymentStatusRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId: string;\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n}\n\nexport interface UpdatePaymentStatusResponse {\n  /** Order ID and its associated transactions after update. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface BulkUpdatePaymentStatusesRequest {\n  /**\n   * Order and payment IDs for which to update payment status.\n   * @minSize 1\n   * @maxSize 300\n   */\n  paymentAndOrderIds: PaymentAndOrderId[];\n  /** Whether to return the full payment entity (`results.item`) in the response. */\n  returnFullEntity?: boolean;\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n}\n\nexport interface PaymentAndOrderId {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Payment ID.\n   * todo: remove comment once UI will use BulkMarkOrderAsPaid\n   */\n  paymentId?: string;\n}\n\nexport interface BulkUpdatePaymentStatusesResponse {\n  /** Bulk operation results. */\n  results?: BulkPaymentResult[];\n  /** Bulk operation metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkPaymentResult {\n  /** Item metadata. */\n  itemMetadata?: ItemMetadata;\n  /** Updated payment. Returned if `return_full_entity` set to `true`. */\n  item?: Payment;\n}\n\nexport interface ItemMetadata {\n  /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface UpdateRefundRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /** Refund with updated field values. */\n  refund?: Refund;\n}\n\nexport interface UpdateRefundResponse {\n  /** Refund after update. */\n  refund?: Refund;\n  /** Order transactions after update. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface UpdateRefundTransactionRequest {\n  /**\n   * Order ID.\n   * @internal\n   * @format GUID\n   */\n  orderId: string;\n  /**\n   * Payment ID.\n   * @internal\n   * @format GUID\n   */\n  refundId: string;\n  /**\n   * Updated refund transaction\n   * @internal\n   */\n  transaction: RefundTransaction;\n}\n\nexport interface UpdateRefundTransactionResponse {\n  /**\n   * OrderTransactions with updated refund transaction\n   * @internal\n   */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface UpdatePaymentsRequest {}\n\nexport interface MaskedPayment {}\n\nexport interface UpdatePaymentsResponse {\n  /**\n   * OrderTransactions with updated payments\n   * @internal\n   */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface QueryOrderTransactionsRequest {\n  /**\n   * Query options.\n   * @internal\n   */\n  query?: CursorQuery;\n}\n\nexport interface CursorQuery extends CursorQueryPagingMethodOneOf {\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n  /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */\n  filter?: Record<string, any> | null;\n  /**\n   * Sort object in the following format:\n   * `[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`\n   * @maxSize 5\n   */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface CursorQueryPagingMethodOneOf {\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrderWithLiterals;\n}\n\nexport enum SortOrder {\n  /** Ascending order. */\n  ASC = 'ASC',\n  /** Descending order. */\n  DESC = 'DESC',\n}\n\n/** @enumType */\nexport type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface QueryOrderTransactionsResponse {\n  /**\n   * Order transactions.\n   * @internal\n   * @maxSize 100\n   */\n  orderTransactions?: OrderTransactions[];\n  /**\n   * Details on the paged set of results returned.\n   * @internal\n   */\n  metadata?: CursorPagingMetadata;\n}\n\nexport interface CursorPagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Cursor strings that point to the next page, previous page, or both. */\n  cursors?: Cursors;\n  /**\n   * Whether there are more pages to retrieve following the current page.\n   *\n   * + `true`: Another page of results can be retrieved.\n   * + `false`: This is the last page.\n   */\n  hasNext?: boolean | null;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface AddChargebackRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Chargeback. */\n  chargeback?: Chargeback;\n}\n\nexport interface AddChargebackResponse {\n  /** Chargeback. */\n  chargeback?: Chargeback;\n  /**\n   * Payment ID of a payment which received chargeback.\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Order transactions. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface ReverseChargebackRequest {\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId?: string;\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId?: string;\n  /**\n   * Chargeback ID.\n   * @format GUID\n   */\n  chargebackId?: string;\n  /**\n   * Reversal amount.\n   *\n   * Default: original chargeback amount.\n   */\n  reversalAmount?: Price;\n}\n\nexport interface ReverseChargebackResponse {\n  /** Updated order transactions. */\n  orderTransactions?: OrderTransactions;\n}\n\nexport interface TriggerRefundRequest {\n  /**\n   * The order this refund related to\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Refund operations information\n   * Currently, only *one* payment refund is supported per request\n   * @minSize 1\n   * @maxSize 1\n   */\n  payments?: PaymentRefund[];\n  /** Business model of a refund */\n  details?: RefundDetails;\n  /** How to restock items as part of this refund */\n  restockInfo?: RestockInfo;\n  /** Should send a confirmation mail to the customer */\n  sendOrderRefundedEmail?: boolean;\n  /**\n   * Personal note added to the email\n   * @minLength 1\n   * @maxLength 1000\n   */\n  customMessage?: string | null;\n}\n\nexport interface PaymentRefund {\n  /**\n   * Specific payment within the order to refund\n   * @format GUID\n   */\n  paymentId?: string;\n  /** Refund amount. Not relevant for membership and gift card refunds. */\n  amount?: Price;\n  /**\n   * Whether refund is made externally and manually (on the payment provider's side)\n   * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.\n   * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.\n   */\n  externalRefund?: boolean;\n}\n\nexport interface TriggerRefundResponse {\n  /** All order's transactions after the refunds were added */\n  orderTransactions?: OrderTransactions;\n  /** Created refund ID */\n  refundId?: string;\n}\n\nexport interface CalculateRefundRequest {\n  /**\n   * Order ID\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /**\n   * Refunded line items and quantity\n   * @maxSize 300\n   */\n  refundItems?: CalculateRefundItemRequest[];\n  /** Should include shipping in refund calculation */\n  refundShipping?: boolean;\n}\n\nexport interface CalculateRefundItemRequest {\n  /**\n   * ID of the line item being refunded\n   * @format GUID\n   */\n  lineItemId?: string;\n  /**\n   * How much of that line item is being refunded\n   * @min 1\n   * @max 100000\n   */\n  quantity?: number;\n  /** Should this item be restocked (used for validation purposes) */\n  restock?: boolean;\n}\n\nexport interface CalculateRefundResponse {\n  /**\n   * Total refundable amount\n   * @format DECIMAL_VALUE\n   */\n  total?: string;\n  /**\n   * Tax cost of the order\n   * @format DECIMAL_VALUE\n   */\n  tax?: string;\n  /**\n   * Discount given for this order\n   * @format DECIMAL_VALUE\n   */\n  discount?: string;\n  /**\n   * Total cost of the order (without tax)\n   * @format DECIMAL_VALUE\n   */\n  subtotal?: string;\n  /**\n   * Previous refund given on that order\n   * @format DECIMAL_VALUE\n   */\n  previouslyRefundedAmount?: string | null;\n  /** The refundable items of that order */\n  items?: CalculateRefundItemResponse[];\n}\n\nexport interface CalculateRefundItemResponse {\n  /** Line item ID */\n  lineItemId?: string;\n  /** The line item's price */\n  lineItemPrice?: number;\n}\n\nexport interface GetRefundabilityStatusRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface GetRefundabilityStatusResponse {\n  /**\n   * Refundability details.\n   * @maxSize 1\n   */\n  refundabilities?: Refundability[];\n  /** Whether the order supports refunding per item. */\n  refundablePerItem?: boolean;\n}\n\nexport interface Refundability\n  extends RefundabilityAdditionalRefundabilityInfoOneOf {\n  /** Reason why payment is not refundable. */\n  nonRefundableReason?: NonRefundableReasonWithLiterals;\n  /** Reason why payment is only refundable manually. */\n  manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;\n  /** Payment ID. */\n  paymentId?: string;\n  /** Payment refundability status. */\n  refundabilityStatus?: RefundableStatusWithLiterals;\n  /** Link to payment provider dashboard. */\n  providerLink?: string | null;\n}\n\n/** @oneof */\nexport interface RefundabilityAdditionalRefundabilityInfoOneOf {\n  /** Reason why payment is not refundable. */\n  nonRefundableReason?: NonRefundableReasonWithLiterals;\n  /** Reason why payment is only refundable manually. */\n  manuallyRefundableReason?: ManuallyRefundableReasonWithLiterals;\n}\n\nexport enum RefundableStatus {\n  /** Not refundable. */\n  NOT_REFUNDABLE = 'NOT_REFUNDABLE',\n  /** Refundable manually. */\n  MANUAL = 'MANUAL',\n  /** Refundable. */\n  REFUNDABLE = 'REFUNDABLE',\n}\n\n/** @enumType */\nexport type RefundableStatusWithLiterals =\n  | RefundableStatus\n  | 'NOT_REFUNDABLE'\n  | 'MANUAL'\n  | 'REFUNDABLE';\n\nexport enum NonRefundableReason {\n  /** No reason. */\n  NONE = 'NONE',\n  /** Payment already refunded. */\n  ALREADY_REFUNDED = 'ALREADY_REFUNDED',\n  /** Payment provider is down. */\n  PROVIDER_IS_DOWN = 'PROVIDER_IS_DOWN',\n  /** Internal error occurred. */\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  /** Payment not made. */\n  NOT_PAID = 'NOT_PAID',\n  /** Access denied. */\n  ACCESS_DENIED = 'ACCESS_DENIED',\n  /** Payment amount is zero. */\n  ZERO_PRICE = 'ZERO_PRICE',\n  /** Disabled by provider. */\n  DISABLED_BY_PROVIDER = 'DISABLED_BY_PROVIDER',\n  /** Payment partially paid. */\n  PARTIALLY_PAID = 'PARTIALLY_PAID',\n  /** Deposit for online item. */\n  DEPOSIT_ONLINE_ITEM = 'DEPOSIT_ONLINE_ITEM',\n  /** Refund is pending. */\n  PENDING_REFUND = 'PENDING_REFUND',\n  /** Action forbidden. */\n  FORBIDDEN = 'FORBIDDEN',\n}\n\n/** @enumType */\nexport type NonRefundableReasonWithLiterals =\n  | NonRefundableReason\n  | 'NONE'\n  | 'ALREADY_REFUNDED'\n  | 'PROVIDER_IS_DOWN'\n  | 'INTERNAL_ERROR'\n  | 'NOT_PAID'\n  | 'ACCESS_DENIED'\n  | 'ZERO_PRICE'\n  | 'DISABLED_BY_PROVIDER'\n  | 'PARTIALLY_PAID'\n  | 'DEPOSIT_ONLINE_ITEM'\n  | 'PENDING_REFUND'\n  | 'FORBIDDEN';\n\nexport enum ManuallyRefundableReason {\n  /** Payment expired. */\n  EXPIRED = 'EXPIRED',\n  /** Payment method not supported. */\n  NOT_SUPPORTED = 'NOT_SUPPORTED',\n  /** Payment not found. */\n  NOT_FOUND = 'NOT_FOUND',\n  /** Payment made offline. */\n  OFFLINE = 'OFFLINE',\n  /** Refund requires interaction with card reader. */\n  REQUIRES_CARD_READER = 'REQUIRES_CARD_READER',\n}\n\n/** @enumType */\nexport type ManuallyRefundableReasonWithLiterals =\n  | ManuallyRefundableReason\n  | 'EXPIRED'\n  | 'NOT_SUPPORTED'\n  | 'NOT_FOUND'\n  | 'OFFLINE'\n  | 'REQUIRES_CARD_READER';\n\nexport interface ListInvoicesForSingleOrderRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface ListInvoicesForSingleOrderResponse {\n  /** List of invoices. */\n  invoices?: InvoiceInfo[];\n}\n\nexport interface InvoiceInfo {\n  /** Invoice ID. */\n  _id?: string;\n  /** ID of the app that set the invoice. */\n  appId?: string;\n  /**\n   * Invoice URL.\n   * @deprecated\n   */\n  url?: string | null;\n  /**\n   * Invoice creation date and time.\n   * @deprecated\n   */\n  _createdDate?: Date | null;\n}\n\nexport interface ListInvoicesForMultipleOrdersRequest {\n  /**\n   * Order IDs for which to retrieve invoices.\n   * @maxSize 300\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderIds?: string[];\n}\n\nexport interface ListInvoicesForMultipleOrdersResponse {\n  /** List of order IDs and their associated invoices. */\n  invoicesForOrder?: InvoicesForOrder[];\n}\n\nexport interface InvoicesForOrder {\n  /** Order ID. */\n  orderId?: string;\n  /** Invoices info. */\n  invoicesInfo?: InvoiceInfo[];\n}\n\nexport interface GenerateInvoiceRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n}\n\nexport interface GenerateInvoiceResponse {\n  /** Invoice ID. */\n  invoiceId?: string;\n}\n\nexport interface BulkGenerateInvoicesRequest {\n  /**\n   * Order IDs.\n   * @minSize 1\n   * @maxSize 100\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderIds?: string[];\n}\n\nexport interface BulkGenerateInvoicesResponse {\n  results?: BulkInvoiceResult[];\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkInvoiceResult {\n  itemMetadata?: ItemMetadata;\n  item?: InvoiceForOrder;\n}\n\nexport interface InvoiceForOrder {\n  /** Order ID. */\n  orderId?: string;\n  /** Invoice ID. */\n  invoiceId?: string;\n}\n\nexport interface AddInvoiceToOrderRequest {\n  /**\n   * Order ID.\n   * @minLength 1\n   * @maxLength 100\n   */\n  orderId?: string;\n  /** Invoice info. */\n  invoiceInfo?: InvoiceInfo;\n}\n\nexport interface AddInvoiceToOrderResponse {\n  /** List of order invoices. */\n  orderInvoices?: InvoiceInfo[];\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n/** @docsIgnore */\nexport type UpdateRefundTransactionApplicationErrors =\n  | {\n      code?: 'ORDER_TRANSACTIONS_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'REFUND_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'REFUND_TRANSACTION_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    };\n/** @docsIgnore */\nexport type UpdatePaymentsApplicationErrors =\n  | {\n      code?: 'ORDER_TRANSACTIONS_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    }\n  | {\n      code?: 'PAYMENT_NOT_FOUND';\n      description?: string;\n      data?: Record<string, any>;\n    };\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface OrderTransactionsDetailsUpdatedEnvelope {\n  data: PaymentDetailsUpdated;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a payment or refund is added to an order, or when an existing payment is updated.\n *\n * Contains the ID of the updated order and details of its associated transactions,\n * as well as IDs of the updated payments and refunds.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_TRANSACTIONS\n * @webhook\n * @eventType wix.ecom.v1.order_transactions_details_updated\n * @slug details_updated\n */\nexport declare function onOrderTransactionsDetailsUpdated(\n  handler: (\n    event: OrderTransactionsDetailsUpdatedEnvelope\n  ) => void | Promise<void>\n): void;\n\nexport interface OrderTransactionsRefundCompletedEnvelope {\n  data: RefundCompleted;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a refund has been fully processed and completed.\n *\n * This event is fired once when all refund transactions within a refund have reached\n * their final state (either `SUCCEEDED` or `FAILED`). Contains the order ID, completed\n * refund details, any side effects (such as inventory restocking or email notifications),\n * and the updated order transaction state.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_TRANSACTIONS\n * @webhook\n * @eventType wix.ecom.v1.order_transactions_refund_completed\n * @slug refund_completed\n */\nexport declare function onOrderTransactionsRefundCompleted(\n  handler: (\n    event: OrderTransactionsRefundCompletedEnvelope\n  ) => void | Promise<void>\n): void;\n\nexport interface OrderTransactionsUpdatedEnvelope {\n  data: PaymentsUpdated;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a payment or refund is added to an order, or when an existing payment is updated.\n *\n * Contains the ID of the updated order and details of its associated transactions,\n * as well as IDs of the updated payments and refunds.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read eCommerce - all read permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM\n * @permissionScope Read Orders\n * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Manage eCommerce - all permissions\n * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId ECOM.READ_TRANSACTIONS\n * @webhook\n * @eventType wix.ecom.v1.order_transactions_updated\n * @slug updated\n * @deprecated\n * @replacedBy com.wix.ecom.orders.payments.v1.Payments.details_updated\n * @targetRemovalDate 2025-11-30\n */\nexport declare function onOrderTransactionsUpdated(\n  handler: (event: OrderTransactionsUpdatedEnvelope) => void | Promise<void>\n): void;\n\n/**\n * Retrieves information about payments and refunds associated with a specified order.\n *\n *\n * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.\n * @param orderId - Order ID.\n * @public\n * @requiredField orderId\n * @permissionId ECOM.READ_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForSingleOrder\n */\nexport async function listTransactionsForSingleOrder(\n  orderId: string\n): Promise<\n  NonNullablePaths<\n    ListTransactionsForSingleOrderResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderTransactions.listTransactionsForSingleOrder(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves information about payments and refunds associated with all specified orders.\n *\n *\n * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.\n * @param orderIds - Order IDs for which to retrieve transactions.\n * @public\n * @requiredField orderIds\n * @permissionId ECOM.READ_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForMultipleOrders\n */\nexport async function listTransactionsForMultipleOrders(\n  orderIds: string[]\n): Promise<\n  NonNullablePaths<\n    ListTransactionsForMultipleOrdersResponse,\n    `orderTransactions` | `orderTransactions.${number}.orderId`,\n    4\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ orderIds: orderIds });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderTransactions.listTransactionsForMultipleOrders(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Adds up to 50 payment records to an order.\n *\n *\n * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.\n *\n * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.\n * @param orderId - Order ID.\n * @param payments - Payments to be added to order.\n * @public\n * @requiredField orderId\n * @requiredField payments\n * @requiredField payments.amount\n * @requiredField payments.paymentDetails\n * @requiredField payments.paymentDetails.giftcardPaymentDetails.giftCardPaymentId\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.AddPayments\n */\nexport async function addPayments(\n  orderId: string,\n  payments: NonNullablePaths<\n    Payment,\n    `amount` | `giftcardPaymentDetails.giftCardPaymentId`,\n    3\n  >[]\n): Promise<\n  NonNullablePaths<\n    AddPaymentsResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`\n    | `paymentsIds`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    orderId: orderId,\n    payments: payments,\n  });\n\n  const reqOpts = ambassadorWixEcomV1OrderTransactions.addPayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { orderId: '$[0]', payments: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['orderId', 'payments']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates the status of an order's payment.\n *\n *\n * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.\n * @public\n * @requiredField identifiers\n * @requiredField identifiers.orderId\n * @requiredField identifiers.paymentId\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.UpdatePaymentStatus\n */\nexport async function updatePaymentStatus(\n  identifiers: NonNullablePaths<\n    UpdatePaymentStatusIdentifiers,\n    `orderId` | `paymentId`,\n    2\n  >,\n  options?: UpdatePaymentStatusOptions\n): Promise<\n  NonNullablePaths<\n    UpdatePaymentStatusResponse,\n    | `orderTransactions.orderId`\n    | `orderTransactions.payments`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.offlinePayment`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.status`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.savedPaymentMethod`\n    | `orderTransactions.payments.${number}.regularPaymentDetails.authorizationDetails.delayedCapture`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.giftCardPaymentId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.appId`\n    | `orderTransactions.payments.${number}.giftcardPaymentDetails.voided`\n    | `orderTransactions.payments.${number}.amount.amount`\n    | `orderTransactions.payments.${number}.amount.formattedAmount`\n    | `orderTransactions.payments.${number}.refundDisabled`\n    | `orderTransactions.refunds`\n    | `orderTransactions.refunds.${number}._id`\n    | `orderTransactions.refunds.${number}.details.shippingIncluded`\n    | `orderTransactions.refunds.${number}.summary.pending`,\n    7\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    paymentId: identifiers?.paymentId,\n    orderId: identifiers?.orderId,\n    status: options?.status,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderTransactions.updatePaymentStatus(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          paymentId: '$[0].paymentId',\n          orderId: '$[0].orderId',\n          status: '$[1].status',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['identifiers', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdatePaymentStatusIdentifiers {\n  /**\n   * Payment ID.\n   * @format GUID\n   */\n  paymentId: string;\n  /**\n   * Order ID.\n   * @format GUID\n   */\n  orderId: string;\n}\n\nexport interface UpdatePaymentStatusOptions {\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n}\n\n/**\n * Updates multiple order payments with a specified status.\n *\n *\n * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.\n * @param paymentAndOrderIds - Order and payment IDs for which to update payment status.\n * @public\n * @requiredField paymentAndOrderIds\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.BulkUpdatePaymentStatuses\n */\nexport async function bulkUpdatePaymentStatuses(\n  paymentAndOrderIds: PaymentAndOrderId[],\n  options?: BulkUpdatePaymentStatusesOptions\n): Promise<\n  NonNullablePaths<\n    BulkUpdatePaymentStatusesResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `results.${number}.item.regularPaymentDetails.offlinePayment`\n    | `results.${number}.item.regularPaymentDetails.status`\n    | `results.${number}.item.regularPaymentDetails.savedPaymentMethod`\n    | `results.${number}.item.giftcardPaymentDetails.giftCardPaymentId`\n    | `results.${number}.item.giftcardPaymentDetails.appId`\n    | `results.${number}.item.giftcardPaymentDetails.voided`\n    | `results.${number}.item.amount.amount`\n    | `results.${number}.item.amount.formattedAmount`\n    | `results.${number}.item.refundDisabled`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`,\n    6\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    paymentAndOrderIds: paymentAndOrderIds,\n    returnFullEntity: options?.returnFullEntity,\n    status: options?.status,\n  });\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderTransactions.bulkUpdatePaymentStatuses(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          paymentAndOrderIds: '$[0]',\n          returnFullEntity: '$[1].returnFullEntity',\n          status: '$[1].status',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['paymentAndOrderIds', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkUpdatePaymentStatusesOptions {\n  /** Whether to return the full payment entity (`results.item`) in the response. */\n  returnFullEntity?: boolean;\n  /** Payment status. */\n  status?: TransactionStatusWithLiterals;\n}\n\n/**\n * Updates OrderTransactions.refunds.transactions properties\n * @internal\n * @documentationMaturity preview\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.UpdateRefundTransaction\n */\nexport async function updateRefundTransaction(): Promise<\n  void & {\n    __applicationErrorsType?: UpdateRefundTransactionApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts =\n    ambassadorWixEcomV1OrderTransactions.updateRefundTransaction(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates properties of payments associated to order.\n *\n * Currently, the following fields can be updated:\n * + `payment.payment_details.regular_payment_details.provider_transaction_id`\n * + `payment.payment_details.regular_payment_details.status`\n * + `payment.payment_details.regular_payment_details.payment_method_details.credit_card_details`\n * + `payment.payment_details.regular_payment_details.authorization_details`\n * + `payment.payment_details.regular_payment_details.authorization_details.scheduled_action`\n * + `payment.payment_details.regular_payment_details.authorization_details.authorized_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.status`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.created_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.failure_details`\n * + `payment.payment_details.regular_payment_details.authorization_details.void`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.status`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.voided_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.reason`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.failure_details`\n * + `payment.receipt_info`\n * + `payment.receipt_info.wix_receipt`\n * + `payment.receipt_info.wix_receipt.receipt_id`\n * + `payment.receipt_info.wix_receipt.display_number`\n * + `payment.receipt_info.external_receipt`\n * + `payment.receipt_info.external_receipt.receipt_id`\n * + `payment.receipt_info.external_receipt.display_number`\n * + `payment.receipt_info.external_receipt.app_id`\n *\n * To update a field's value, include the new value in the `payment` object in the body params.\n *\n * > **Note:** Removing fields value results in an error.\n * @internal\n * @documentationMaturity preview\n * @permissionId ECOM.MODIFY_TRANSACTIONS\n * @applicableIdentity APP\n * @fqn com.wix.ecom.orders.payments.v1.Payments.UpdatePayments\n */\nexport async function updatePayments(): Promise<\n  void & {\n    __applicationErrorsType?: UpdatePaymentsApplicationErrors;\n  }\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts = ambassadorWixEcomV1OrderTransactions.updatePayments(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixEcomOrdersPaymentsV1PaymentsUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    _: [\n      {\n        srcPath: '/_api/ecom-payments',\n        destPath: '',\n      },\n      {\n        srcPath: '/_api/payments',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/bulk/payments',\n        destPath: '/v1/bulk/payments',\n      },\n      {\n        srcPath: '/ecom/v1/bulk/invoices',\n        destPath: '/v1/bulk/invoices',\n      },\n      {\n        srcPath: '/ecom/v1/payments',\n        destPath: '/v1/payments',\n      },\n      {\n        srcPath: '/ecom/v1/invoices',\n        destPath: '/v1/invoices',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/ecom-payments',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_order-transactions';\n\n/**\n * Retrieves information about payments and refunds associated with a specified order.\n *\n *\n * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.\n */\nexport function listTransactionsForSingleOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listTransactionsForSingleOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForSingleOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listTransactionsForSingleOrder;\n}\n\n/**\n * Retrieves information about payments and refunds associated with all specified orders.\n *\n *\n * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.\n */\nexport function listTransactionsForMultipleOrders(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listTransactionsForMultipleOrders({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForMultipleOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/list-by-ids',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listTransactionsForMultipleOrders;\n}\n\n/**\n * Adds up to 50 payment records to an order.\n *\n *\n * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.\n *\n * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.\n */\nexport function addPayments(payload: object): RequestOptionsFactory<any> {\n  function __addPayments({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'payments.createdDate' },\n          { path: 'payments.updatedDate' },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n          },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n          },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n          },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n          },\n          { path: 'payments.regularPaymentDetails.chargebacks.createdDate' },\n          { path: 'payments.regularPaymentDetails.chargebacks.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.AddPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}/add-payment',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __addPayments;\n}\n\n/**\n * Updates the status of an order's payment.\n *\n *\n * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.\n */\nexport function updatePaymentStatus(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updatePaymentStatus({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'statusUpdatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdatePaymentStatus',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath:\n          '/v1/payments/{paymentId}/orders/{orderId}/update-payment-transaction-status',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updatePaymentStatus;\n}\n\n/**\n * Updates multiple order payments with a specified status.\n *\n *\n * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.\n */\nexport function bulkUpdatePaymentStatuses(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkUpdatePaymentStatuses({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'statusUpdatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.BulkUpdatePaymentStatuses',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/bulk/payments/update-payment-transaction-status',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.chargebacks.updatedDate',\n              },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkUpdatePaymentStatuses;\n}\n\n/** Updates OrderTransactions.refunds.transactions properties */\nexport function updateRefundTransaction(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updateRefundTransaction({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.UpdateRefundTransaction',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}/update-refund-transaction',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateRefundTransaction;\n}\n\n/**\n * Updates properties of payments associated to order.\n *\n * Currently, the following fields can be updated:\n * + `payment.payment_details.regular_payment_details.provider_transaction_id`\n * + `payment.payment_details.regular_payment_details.status`\n * + `payment.payment_details.regular_payment_details.payment_method_details.credit_card_details`\n * + `payment.payment_details.regular_payment_details.authorization_details`\n * + `payment.payment_details.regular_payment_details.authorization_details.scheduled_action`\n * + `payment.payment_details.regular_payment_details.authorization_details.authorized_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.status`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.created_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.failure_details`\n * + `payment.payment_details.regular_payment_details.authorization_details.void`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.status`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.voided_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.reason`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.failure_details`\n * + `payment.receipt_info`\n * + `payment.receipt_info.wix_receipt`\n * + `payment.receipt_info.wix_receipt.receipt_id`\n * + `payment.receipt_info.wix_receipt.display_number`\n * + `payment.receipt_info.external_receipt`\n * + `payment.receipt_info.external_receipt.receipt_id`\n * + `payment.receipt_info.external_receipt.display_number`\n * + `payment.receipt_info.external_receipt.app_id`\n *\n * To update a field's value, include the new value in the `payment` object in the body params.\n *\n * > **Note:** Removing fields value results in an error.\n */\nexport function updatePayments(payload: object): RequestOptionsFactory<any> {\n  function __updatePayments({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'payments.fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'payments.statusUpdatedDate' },\n          { path: 'payments.payment.createdDate' },\n          { path: 'payments.payment.updatedDate' },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.authorizedDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.captures.createdDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.void.voidedDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.chargebacks.createdDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.chargebacks.updatedDate',\n          },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdatePayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}/update-payments',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updatePayments;\n}\n"],"mappings":"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","names":["addPayments","bulkUpdatePaymentStatuses","listTransactionsForMultipleOrders","listTransactionsForSingleOrder","updatePaymentStatus","updatePayments","updateRefundTransaction","import_timestamp","import_rest_modules","payload","TransactionStatus","AuthorizationCaptureStatus","AuthorizationVoidStatus","Reason","ActionType","ChargebackStatus","MembershipPaymentStatus","RefundStatus","IdentityType","WeightUnit","VatType","PaymentStatus","FulfillmentStatus","LineItemType","MediaItemType","ActivityType","InvoiceSource","ChannelType","EnteredByIdentityType","SubscriptionFrequency","RestockType","SortOrder","RefundableStatus","NonRefundableReason","ManuallyRefundableReason","WebhookIdentityType","listTransactionsForSingleOrder","sdkTransformError","listTransactionsForMultipleOrders","addPayments","updatePaymentStatus","bulkUpdatePaymentStatuses","updateRefundTransaction","updatePayments"]}