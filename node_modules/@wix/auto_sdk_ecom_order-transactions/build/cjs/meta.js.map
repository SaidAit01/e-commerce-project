{"version":3,"sources":["../../meta.ts","../../src/ecom-v1-order-transactions-order-transactions.http.ts","../../src/ecom-v1-order-transactions-order-transactions.meta.ts"],"sourcesContent":["export * from './src/ecom-v1-order-transactions-order-transactions.meta.js';\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixEcomOrdersPaymentsV1PaymentsUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    _: [\n      {\n        srcPath: '/_api/ecom-payments',\n        destPath: '',\n      },\n      {\n        srcPath: '/_api/payments',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/ecom/v1/bulk/payments',\n        destPath: '/v1/bulk/payments',\n      },\n      {\n        srcPath: '/ecom/v1/bulk/invoices',\n        destPath: '/v1/bulk/invoices',\n      },\n      {\n        srcPath: '/ecom/v1/payments',\n        destPath: '/v1/payments',\n      },\n      {\n        srcPath: '/ecom/v1/invoices',\n        destPath: '/v1/invoices',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/ecom-payments',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_ecom_order-transactions';\n\n/**\n * Retrieves information about payments and refunds associated with a specified order.\n *\n *\n * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.\n */\nexport function listTransactionsForSingleOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listTransactionsForSingleOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForSingleOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listTransactionsForSingleOrder;\n}\n\n/**\n * Retrieves information about payments and refunds associated with all specified orders.\n *\n *\n * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.\n */\nexport function listTransactionsForMultipleOrders(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listTransactionsForMultipleOrders({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForMultipleOrders',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/list-by-ids',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listTransactionsForMultipleOrders;\n}\n\n/**\n * Adds up to 50 payment records to an order.\n *\n *\n * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.\n *\n * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.\n */\nexport function addPayments(payload: object): RequestOptionsFactory<any> {\n  function __addPayments({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'payments.createdDate' },\n          { path: 'payments.updatedDate' },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n          },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n          },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n          },\n          {\n            path: 'payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n          },\n          { path: 'payments.regularPaymentDetails.chargebacks.createdDate' },\n          { path: 'payments.regularPaymentDetails.chargebacks.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.AddPayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}/add-payment',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __addPayments;\n}\n\n/**\n * Updates the status of an order's payment.\n *\n *\n * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.\n */\nexport function updatePaymentStatus(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updatePaymentStatus({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'statusUpdatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdatePaymentStatus',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath:\n          '/v1/payments/{paymentId}/orders/{orderId}/update-payment-transaction-status',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updatePaymentStatus;\n}\n\n/**\n * Updates multiple order payments with a specified status.\n *\n *\n * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.\n */\nexport function bulkUpdatePaymentStatuses(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkUpdatePaymentStatuses({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'statusUpdatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.BulkUpdatePaymentStatuses',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/bulk/payments/update-payment-transaction-status',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'results.item.regularPaymentDetails.chargebacks.updatedDate',\n              },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkUpdatePaymentStatuses;\n}\n\n/** Updates OrderTransactions.refunds.transactions properties */\nexport function updateRefundTransaction(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updateRefundTransaction({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.ecom.orders.payments.v1.Payments.UpdateRefundTransaction',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}/update-refund-transaction',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateRefundTransaction;\n}\n\n/**\n * Updates properties of payments associated to order.\n *\n * Currently, the following fields can be updated:\n * + `payment.payment_details.regular_payment_details.provider_transaction_id`\n * + `payment.payment_details.regular_payment_details.status`\n * + `payment.payment_details.regular_payment_details.payment_method_details.credit_card_details`\n * + `payment.payment_details.regular_payment_details.authorization_details`\n * + `payment.payment_details.regular_payment_details.authorization_details.scheduled_action`\n * + `payment.payment_details.regular_payment_details.authorization_details.authorized_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.status`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.created_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.captures.failure_details`\n * + `payment.payment_details.regular_payment_details.authorization_details.void`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.status`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.voided_date`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.reason`\n * + `payment.payment_details.regular_payment_details.authorization_details.void.failure_details`\n * + `payment.receipt_info`\n * + `payment.receipt_info.wix_receipt`\n * + `payment.receipt_info.wix_receipt.receipt_id`\n * + `payment.receipt_info.wix_receipt.display_number`\n * + `payment.receipt_info.external_receipt`\n * + `payment.receipt_info.external_receipt.receipt_id`\n * + `payment.receipt_info.external_receipt.display_number`\n * + `payment.receipt_info.external_receipt.app_id`\n *\n * To update a field's value, include the new value in the `payment` object in the body params.\n *\n * > **Note:** Removing fields value results in an error.\n */\nexport function updatePayments(payload: object): RequestOptionsFactory<any> {\n  function __updatePayments({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'payments.fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'payments.statusUpdatedDate' },\n          { path: 'payments.payment.createdDate' },\n          { path: 'payments.payment.updatedDate' },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.authorizedDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.captures.createdDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.void.voidedDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.chargebacks.createdDate',\n          },\n          {\n            path: 'payments.payment.regularPaymentDetails.chargebacks.updatedDate',\n          },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.ecom.v1.order_transactions',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdatePayments',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({\n        protoPath: '/v1/payments/orders/{orderId}/update-payments',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'orderTransactions.payments.createdDate' },\n              { path: 'orderTransactions.payments.updatedDate' },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.createdDate',\n              },\n              {\n                path: 'orderTransactions.payments.regularPaymentDetails.chargebacks.updatedDate',\n              },\n              { path: 'orderTransactions.refunds.createdDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updatePayments;\n}\n","import * as ambassadorWixEcomV1OrderTransactions from './ecom-v1-order-transactions-order-transactions.http.js';\nimport * as ambassadorWixEcomV1OrderTransactionsTypes from './ecom-v1-order-transactions-order-transactions.types.js';\nimport * as ambassadorWixEcomV1OrderTransactionsUniversalTypes from './ecom-v1-order-transactions-order-transactions.universal.js';\n\nexport type __PublicMethodMetaInfo<\n  K = string,\n  M = unknown,\n  T = unknown,\n  S = unknown,\n  Q = unknown,\n  R = unknown\n> = {\n  getUrl: (context: any) => string;\n  httpMethod: K;\n  path: string;\n  pathParams: M;\n  __requestType: T;\n  __originalRequestType: S;\n  __responseType: Q;\n  __originalResponseType: R;\n};\n\nexport function listTransactionsForSingleOrder(): __PublicMethodMetaInfo<\n  'GET',\n  { orderId: string },\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.ListTransactionsForSingleOrderRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.ListTransactionsForSingleOrderRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.ListTransactionsForSingleOrderResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.ListTransactionsForSingleOrderResponse\n> {\n  const payload = { orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.listTransactionsForSingleOrder(\n      payload\n    );\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v1/payments/orders/{orderId}',\n    pathParams: { orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function listTransactionsForMultipleOrders(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.ListTransactionsForMultipleOrdersRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.ListTransactionsForMultipleOrdersRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.ListTransactionsForMultipleOrdersResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.ListTransactionsForMultipleOrdersResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.listTransactionsForMultipleOrders(\n      payload\n    );\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/payments/list-by-ids',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function addPayments(): __PublicMethodMetaInfo<\n  'POST',\n  { orderId: string },\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.AddPaymentsRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.AddPaymentsRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.AddPaymentsResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.AddPaymentsResponse\n> {\n  const payload = { orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.addPayments(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/payments/orders/{orderId}/add-payment',\n    pathParams: { orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updatePaymentStatus(): __PublicMethodMetaInfo<\n  'POST',\n  { paymentId: string; orderId: string },\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.UpdatePaymentStatusRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.UpdatePaymentStatusRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.UpdatePaymentStatusResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.UpdatePaymentStatusResponse\n> {\n  const payload = { paymentId: ':paymentId', orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.updatePaymentStatus(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/payments/{paymentId}/orders/{orderId}/update-payment-transaction-status',\n    pathParams: { paymentId: 'paymentId', orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function bulkUpdatePaymentStatuses(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.BulkUpdatePaymentStatusesRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.BulkUpdatePaymentStatusesRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.BulkUpdatePaymentStatusesResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.BulkUpdatePaymentStatusesResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.bulkUpdatePaymentStatuses(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/bulk/payments/update-payment-transaction-status',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updateRefundTransaction(): __PublicMethodMetaInfo<\n  'POST',\n  { orderId: string },\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.UpdateRefundTransactionRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.UpdateRefundTransactionRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.UpdateRefundTransactionResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.UpdateRefundTransactionResponse\n> {\n  const payload = { orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.updateRefundTransaction(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/payments/orders/{orderId}/update-refund-transaction',\n    pathParams: { orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updatePayments(): __PublicMethodMetaInfo<\n  'POST',\n  { orderId: string },\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.UpdatePaymentsRequest,\n  ambassadorWixEcomV1OrderTransactionsTypes.UpdatePaymentsRequest,\n  ambassadorWixEcomV1OrderTransactionsUniversalTypes.UpdatePaymentsResponse,\n  ambassadorWixEcomV1OrderTransactionsTypes.UpdatePaymentsResponse\n> {\n  const payload = { orderId: ':orderId' } as any;\n\n  const getRequestOptions =\n    ambassadorWixEcomV1OrderTransactions.updatePayments(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v1/payments/orders/{orderId}/update-payments',\n    pathParams: { orderId: 'orderId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n"],"mappings":"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","names":["addPayments","bulkUpdatePaymentStatuses","listTransactionsForMultipleOrders","listTransactionsForSingleOrder","updatePaymentStatus","updatePayments","updateRefundTransaction","import_timestamp","import_rest_modules","payload","listTransactionsForSingleOrder","listTransactionsForMultipleOrders","addPayments","updatePaymentStatus","bulkUpdatePaymentStatuses","updateRefundTransaction","updatePayments"]}