import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { ShippoConfiguration, CreateShippoConfigurationOptions, UpdateShippoConfiguration, ShippoConfigurationsQueryBuilder, UpdateExtendedFieldsOptions, UpdateExtendedFieldsResponse, AddDeliveryRegionOptions, AddDeliveryRegionResponse, RemoveDeliveryRegionIdentifiers, RemoveDeliveryRegionOptions, RemoveDeliveryRegionResponse, ShippoConfigurationCreatedEnvelope, ShippoConfigurationDeletedEnvelope, ShippoConfigurationUpdatedEnvelope } from './index.typings.mjs';
export { ActionEvent, AddDeliveryRegionRequest, Address, AddressLocation, BaseEventMetadata, CalculationType, CalculationTypeWithLiterals, CreateShippoConfigurationRequest, CreateShippoConfigurationResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteShippoConfigurationRequest, DeleteShippoConfigurationResponse, DomainEvent, DomainEventBodyOneOf, DomesticService, DomesticServiceSettings, DomesticServiceWithLiterals, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, GetShippoConfigurationRequest, GetShippoConfigurationResponse, HandlingFee, IdentificationData, IdentificationDataIdOneOf, InternationalService, InternationalServiceSettings, InternationalServiceWithLiterals, MessageEnvelope, PackageDetails, PackageDimensions, PackageType, PackageTypeWithLiterals, QueryShippoConfigurationsRequest, QueryShippoConfigurationsResponse, RemoveDeliveryRegionRequest, RestoreInfo, ServiceSettings, ShippoConfigurationsQueryResult, SortOrder, SortOrderWithLiterals, Sorting, StreetAddress, UpdateExtendedFieldsRequest, UpdateShippoConfigurationRequest, UpdateShippoConfigurationResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function createShippoConfiguration$1(httpClient: HttpClient): CreateShippoConfigurationSignature;
interface CreateShippoConfigurationSignature {
    /**
     * Creates a ShippoConfiguration.
     * @param - ShippoConfiguration to be created.
     * @returns The created ShippoConfiguration.
     */
    (shippoConfiguration: NonNullablePaths<ShippoConfiguration, `deliveryRegionId` | `osLocationId` | `packageDetails` | `packageDetails.dimensions.height` | `packageDetails.dimensions.length` | `packageDetails.dimensions.width` | `packageType`, 4>, options?: CreateShippoConfigurationOptions): Promise<NonNullablePaths<ShippoConfiguration, `domesticServices` | `domesticServices.${number}.service` | `domesticServices.${number}.serviceSettings.handlingFee.value` | `domesticServices.${number}.serviceSettings.handlingFee.calculationType` | `internationalServices` | `internationalServices.${number}.service` | `packageType` | `packageDetails.dimensions.length` | `packageDetails.dimensions.width` | `packageDetails.dimensions.height` | `shipFromAddress.streetAddress.number` | `shipFromAddress.streetAddress.name` | `deliveryRegionIds`, 6>>;
}
declare function getShippoConfiguration$1(httpClient: HttpClient): GetShippoConfigurationSignature;
interface GetShippoConfigurationSignature {
    /**
     * Retrieves a ShippoConfiguration.
     * @param - ID of the ShippoConfiguration to retrieve.
     * @returns The requested ShippoConfiguration.
     */
    (shippoConfigurationId: string): Promise<NonNullablePaths<ShippoConfiguration, `domesticServices` | `domesticServices.${number}.service` | `domesticServices.${number}.serviceSettings.handlingFee.value` | `domesticServices.${number}.serviceSettings.handlingFee.calculationType` | `internationalServices` | `internationalServices.${number}.service` | `packageType` | `packageDetails.dimensions.length` | `packageDetails.dimensions.width` | `packageDetails.dimensions.height` | `shipFromAddress.streetAddress.number` | `shipFromAddress.streetAddress.name` | `deliveryRegionIds`, 6>>;
}
declare function updateShippoConfiguration$1(httpClient: HttpClient): UpdateShippoConfigurationSignature;
interface UpdateShippoConfigurationSignature {
    /**
     * Updates a ShippoConfiguration.
     * @param - ShippoConfiguration ID.
     * @returns Updated ShippoConfiguration.
     */
    (_id: string, shippoConfiguration: NonNullablePaths<UpdateShippoConfiguration, `revision`, 2>): Promise<NonNullablePaths<ShippoConfiguration, `domesticServices` | `domesticServices.${number}.service` | `domesticServices.${number}.serviceSettings.handlingFee.value` | `domesticServices.${number}.serviceSettings.handlingFee.calculationType` | `internationalServices` | `internationalServices.${number}.service` | `packageType` | `packageDetails.dimensions.length` | `packageDetails.dimensions.width` | `packageDetails.dimensions.height` | `shipFromAddress.streetAddress.number` | `shipFromAddress.streetAddress.name` | `deliveryRegionIds`, 6>>;
}
declare function deleteShippoConfiguration$1(httpClient: HttpClient): DeleteShippoConfigurationSignature;
interface DeleteShippoConfigurationSignature {
    /**
     * Deletes a ShippoConfiguration.
     * @param - ID of the ShippoConfiguration to delete.
     */
    (shippoConfigurationId: string): Promise<void>;
}
declare function queryShippoConfigurations$1(httpClient: HttpClient): QueryShippoConfigurationsSignature;
interface QueryShippoConfigurationsSignature {
    /**
     * Retrieves a list of ShippoConfigurations, given the provided [paging, filtering, and sorting][1].
     *
     * Up to 1,000 ShippoConfigurations can be returned per request.
     *
     * To learn how to query ShippoConfigurations, see [API Query Language][2].
     *
     * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
     * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
     */
    (): ShippoConfigurationsQueryBuilder;
}
declare function updateExtendedFields$1(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates extended fields of a ShippoConfiguration without incrementing revision
     * @param - ID of the entity to update.
     * @param - Identifier for the app whose extended fields are being updated.
     */
    (_id: string, namespace: string, options: NonNullablePaths<UpdateExtendedFieldsOptions, `namespaceData`, 2>): Promise<NonNullablePaths<UpdateExtendedFieldsResponse, `shippoConfiguration.domesticServices` | `shippoConfiguration.domesticServices.${number}.service` | `shippoConfiguration.domesticServices.${number}.serviceSettings.handlingFee.value` | `shippoConfiguration.domesticServices.${number}.serviceSettings.handlingFee.calculationType` | `shippoConfiguration.internationalServices` | `shippoConfiguration.internationalServices.${number}.service` | `shippoConfiguration.packageType` | `shippoConfiguration.packageDetails.dimensions.length` | `shippoConfiguration.packageDetails.dimensions.width` | `shippoConfiguration.packageDetails.dimensions.height` | `shippoConfiguration.shipFromAddress.streetAddress.number` | `shippoConfiguration.shipFromAddress.streetAddress.name` | `shippoConfiguration.deliveryRegionIds`, 7>>;
}
declare function addDeliveryRegion$1(httpClient: HttpClient): AddDeliveryRegionSignature;
interface AddDeliveryRegionSignature {
    /**
     * Adds a delivery region to a Shippo configuration.
     * @param - ID of the ShippoConfiguration to add the delivery region to.
     * @param - ID of the delivery region to add.
     */
    (shippoConfigurationId: string, deliveryRegionId: string, options?: AddDeliveryRegionOptions): Promise<NonNullablePaths<AddDeliveryRegionResponse, `shippoConfiguration.domesticServices` | `shippoConfiguration.domesticServices.${number}.service` | `shippoConfiguration.domesticServices.${number}.serviceSettings.handlingFee.value` | `shippoConfiguration.domesticServices.${number}.serviceSettings.handlingFee.calculationType` | `shippoConfiguration.internationalServices` | `shippoConfiguration.internationalServices.${number}.service` | `shippoConfiguration.packageType` | `shippoConfiguration.packageDetails.dimensions.length` | `shippoConfiguration.packageDetails.dimensions.width` | `shippoConfiguration.packageDetails.dimensions.height` | `shippoConfiguration.shipFromAddress.streetAddress.number` | `shippoConfiguration.shipFromAddress.streetAddress.name` | `shippoConfiguration.deliveryRegionIds`, 7>>;
}
declare function removeDeliveryRegion$1(httpClient: HttpClient): RemoveDeliveryRegionSignature;
interface RemoveDeliveryRegionSignature {
    /**
     * Removes a delivery region from a Shippo configuration.
     * When passing the ID of the only existing delivery region, removing it will delete the Shippo configuration.
     */
    (identifiers: NonNullablePaths<RemoveDeliveryRegionIdentifiers, `deliveryRegionId` | `shippoConfigurationId`, 2>, options?: RemoveDeliveryRegionOptions): Promise<NonNullablePaths<RemoveDeliveryRegionResponse, `shippoConfiguration.domesticServices` | `shippoConfiguration.domesticServices.${number}.service` | `shippoConfiguration.domesticServices.${number}.serviceSettings.handlingFee.value` | `shippoConfiguration.domesticServices.${number}.serviceSettings.handlingFee.calculationType` | `shippoConfiguration.internationalServices` | `shippoConfiguration.internationalServices.${number}.service` | `shippoConfiguration.packageType` | `shippoConfiguration.packageDetails.dimensions.length` | `shippoConfiguration.packageDetails.dimensions.width` | `shippoConfiguration.packageDetails.dimensions.height` | `shippoConfiguration.shipFromAddress.streetAddress.number` | `shippoConfiguration.shipFromAddress.streetAddress.name` | `shippoConfiguration.deliveryRegionIds`, 7>>;
}
declare const onShippoConfigurationCreated$1: EventDefinition<ShippoConfigurationCreatedEnvelope, "wix.ecom.v1.shippo_configuration_created">;
declare const onShippoConfigurationDeleted$1: EventDefinition<ShippoConfigurationDeletedEnvelope, "wix.ecom.v1.shippo_configuration_deleted">;
declare const onShippoConfigurationUpdated$1: EventDefinition<ShippoConfigurationUpdatedEnvelope, "wix.ecom.v1.shippo_configuration_updated">;

declare const createShippoConfiguration: MaybeContext<BuildRESTFunction<typeof createShippoConfiguration$1> & typeof createShippoConfiguration$1>;
declare const getShippoConfiguration: MaybeContext<BuildRESTFunction<typeof getShippoConfiguration$1> & typeof getShippoConfiguration$1>;
declare const updateShippoConfiguration: MaybeContext<BuildRESTFunction<typeof updateShippoConfiguration$1> & typeof updateShippoConfiguration$1>;
declare const deleteShippoConfiguration: MaybeContext<BuildRESTFunction<typeof deleteShippoConfiguration$1> & typeof deleteShippoConfiguration$1>;
declare const queryShippoConfigurations: MaybeContext<BuildRESTFunction<typeof queryShippoConfigurations$1> & typeof queryShippoConfigurations$1>;
declare const updateExtendedFields: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$1> & typeof updateExtendedFields$1>;
declare const addDeliveryRegion: MaybeContext<BuildRESTFunction<typeof addDeliveryRegion$1> & typeof addDeliveryRegion$1>;
declare const removeDeliveryRegion: MaybeContext<BuildRESTFunction<typeof removeDeliveryRegion$1> & typeof removeDeliveryRegion$1>;
/**
 * Triggered when a shipping option is created.
 */
declare const onShippoConfigurationCreated: BuildEventDefinition<typeof onShippoConfigurationCreated$1> & typeof onShippoConfigurationCreated$1;
/**
 * Triggered when a shipping option is deleted.
 */
declare const onShippoConfigurationDeleted: BuildEventDefinition<typeof onShippoConfigurationDeleted$1> & typeof onShippoConfigurationDeleted$1;
/**
 * Triggered when a shipping option is updated.
 */
declare const onShippoConfigurationUpdated: BuildEventDefinition<typeof onShippoConfigurationUpdated$1> & typeof onShippoConfigurationUpdated$1;

export { AddDeliveryRegionOptions, AddDeliveryRegionResponse, CreateShippoConfigurationOptions, RemoveDeliveryRegionIdentifiers, RemoveDeliveryRegionOptions, RemoveDeliveryRegionResponse, ShippoConfiguration, ShippoConfigurationCreatedEnvelope, ShippoConfigurationDeletedEnvelope, ShippoConfigurationUpdatedEnvelope, ShippoConfigurationsQueryBuilder, UpdateExtendedFieldsOptions, UpdateExtendedFieldsResponse, UpdateShippoConfiguration, addDeliveryRegion, createShippoConfiguration, deleteShippoConfiguration, getShippoConfiguration, onShippoConfigurationCreated, onShippoConfigurationDeleted, onShippoConfigurationUpdated, queryShippoConfigurations, removeDeliveryRegion, updateExtendedFields, updateShippoConfiguration };
