"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  CalculationType: () => CalculationType,
  DomesticService: () => DomesticService,
  InternationalService: () => InternationalService,
  PackageType: () => PackageType,
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  addDeliveryRegion: () => addDeliveryRegion4,
  createShippoConfiguration: () => createShippoConfiguration4,
  deleteShippoConfiguration: () => deleteShippoConfiguration4,
  getShippoConfiguration: () => getShippoConfiguration4,
  onShippoConfigurationCreated: () => onShippoConfigurationCreated2,
  onShippoConfigurationDeleted: () => onShippoConfigurationDeleted2,
  onShippoConfigurationUpdated: () => onShippoConfigurationUpdated2,
  queryShippoConfigurations: () => queryShippoConfigurations4,
  removeDeliveryRegion: () => removeDeliveryRegion4,
  updateExtendedFields: () => updateExtendedFields4,
  updateShippoConfiguration: () => updateShippoConfiguration4
});
module.exports = __toCommonJS(index_exports);

// src/ecom-v1-shippo-configuration-shippo-configurations.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_address3 = require("@wix/sdk-runtime/transformations/address");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/ecom-v1-shippo-configuration-shippo-configurations.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/ecom-v1-shippo-configuration-shippo-configurations.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcomDeliveryV1ShippoServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/shippo-service",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/ecom/v1/shippo-configurations",
        destPath: "/v1/shippo-configurations"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_shippo-configurations";
function createShippoConfiguration(payload) {
  function __createShippoConfiguration({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "shippoConfiguration.createdDate" },
          { path: "shippoConfiguration.updatedDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
          { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.CreateShippoConfiguration",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfiguration.createdDate" },
            { path: "shippoConfiguration.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
            { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createShippoConfiguration;
}
function getShippoConfiguration(payload) {
  function __getShippoConfiguration({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "GET",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.GetShippoConfiguration",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/{shippoConfigurationId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfiguration.createdDate" },
            { path: "shippoConfiguration.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
            { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getShippoConfiguration;
}
function updateShippoConfiguration(payload) {
  function __updateShippoConfiguration({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "shippoConfiguration.createdDate" },
          { path: "shippoConfiguration.updatedDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
          { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "PATCH",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.UpdateShippoConfiguration",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/{shippoConfiguration.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfiguration.createdDate" },
            { path: "shippoConfiguration.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
            { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateShippoConfiguration;
}
function deleteShippoConfiguration(payload) {
  function __deleteShippoConfiguration({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "DELETE",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.DeleteShippoConfiguration",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/{shippoConfigurationId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteShippoConfiguration;
}
function queryShippoConfigurations(payload) {
  function __queryShippoConfigurations({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "GET",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.QueryShippoConfigurations",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/query",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfigurations.createdDate" },
            { path: "shippoConfigurations.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfigurations.shipFromAddress.geocode.latitude" },
            {
              path: "shippoConfigurations.shipFromAddress.geocode.longitude"
            }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixEcomDeliveryV1ShippoServiceUrl({
            protoPath: "/v1/shippo-configurations/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryShippoConfigurations;
}
function updateExtendedFields(payload) {
  function __updateExtendedFields({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.UpdateExtendedFields",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/{id}/update-extended-fields",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfiguration.createdDate" },
            { path: "shippoConfiguration.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
            { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateExtendedFields;
}
function addDeliveryRegion(payload) {
  function __addDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "POST",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.AddDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/{shippoConfigurationId}/delivery-regions",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfiguration.createdDate" },
            { path: "shippoConfiguration.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
            { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __addDeliveryRegion;
}
function removeDeliveryRegion(payload) {
  function __removeDeliveryRegion({ host }) {
    const metadata = {
      entityFqdn: "wix.ecom.v1.shippo_configuration",
      method: "DELETE",
      methodFqn: "wix.ecom.delivery.v1.ShippoService.RemoveDeliveryRegion",
      packageName: PACKAGE_NAME,
      url: resolveWixEcomDeliveryV1ShippoServiceUrl({
        protoPath: "/v1/shippo-configurations/{shippoConfigurationId}/delivery-regions/{deliveryRegionId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "shippoConfiguration.createdDate" },
            { path: "shippoConfiguration.updatedDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "shippoConfiguration.shipFromAddress.geocode.latitude" },
            { path: "shippoConfiguration.shipFromAddress.geocode.longitude" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __removeDeliveryRegion;
}

// src/ecom-v1-shippo-configuration-shippo-configurations.universal.ts
var import_address = require("@wix/sdk-runtime/transformations/address");
var import_address2 = require("@wix/sdk-runtime/transformations/address");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var DomesticService = /* @__PURE__ */ ((DomesticService2) => {
  DomesticService2["UNKNOWN_DOMESTIC_SERVICE"] = "UNKNOWN_DOMESTIC_SERVICE";
  DomesticService2["GROUND_ADVANTAGE"] = "GROUND_ADVANTAGE";
  DomesticService2["PRIORITY_MAIL"] = "PRIORITY_MAIL";
  DomesticService2["PRIORITY_MAIL_EXPRESS"] = "PRIORITY_MAIL_EXPRESS";
  return DomesticService2;
})(DomesticService || {});
var CalculationType = /* @__PURE__ */ ((CalculationType2) => {
  CalculationType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  CalculationType2["FIXED"] = "FIXED";
  CalculationType2["PERCENTAGE"] = "PERCENTAGE";
  return CalculationType2;
})(CalculationType || {});
var InternationalService = /* @__PURE__ */ ((InternationalService2) => {
  InternationalService2["UNKNOWN_INTERNATIONAL_SERVICE"] = "UNKNOWN_INTERNATIONAL_SERVICE";
  InternationalService2["FIRST_CLASS_PACKAGE_INTERNATIONAL"] = "FIRST_CLASS_PACKAGE_INTERNATIONAL";
  InternationalService2["PRIORITY_MAIL_INTERNATIONAL"] = "PRIORITY_MAIL_INTERNATIONAL";
  InternationalService2["PRIORITY_MAIL_EXPRESS_INTERNATIONAL"] = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL";
  return InternationalService2;
})(InternationalService || {});
var PackageType = /* @__PURE__ */ ((PackageType2) => {
  PackageType2["UNKNOWN_PACKAGE_TYPE"] = "UNKNOWN_PACKAGE_TYPE";
  PackageType2["CUSTOM"] = "CUSTOM";
  PackageType2["FLAT_RATE_ENVELOPE"] = "FLAT_RATE_ENVELOPE";
  PackageType2["PADDED_FLAT_RATE_ENVELOPE"] = "PADDED_FLAT_RATE_ENVELOPE";
  PackageType2["SMALL_FLAT_RATE_BOX"] = "SMALL_FLAT_RATE_BOX";
  PackageType2["MEDIUM_FLAT_RATE_BOX_1"] = "MEDIUM_FLAT_RATE_BOX_1";
  PackageType2["MEDIUM_FLAT_RATE_BOX_2"] = "MEDIUM_FLAT_RATE_BOX_2";
  PackageType2["LARGE_FLAT_RATE_BOX"] = "LARGE_FLAT_RATE_BOX";
  return PackageType2;
})(PackageType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createShippoConfiguration2(shippoConfiguration, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      shippoConfiguration,
      backupRate: options?.backupRate
    }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "shippoConfiguration.shipFromAddress" }]
      }
    ]
  );
  const reqOpts = createShippoConfiguration(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "shippoConfiguration.shipFromAddress" }]
        }
      ])
    )?.shippoConfiguration;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          shippoConfiguration: "$[0]",
          backupRate: "$[1].backupRate"
        },
        singleArgumentUnchanged: false
      },
      ["shippoConfiguration", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getShippoConfiguration2(shippoConfigurationId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    shippoConfigurationId
  });
  const reqOpts = getShippoConfiguration(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "shippoConfiguration.shipFromAddress" }]
        }
      ])
    )?.shippoConfiguration;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shippoConfigurationId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["shippoConfigurationId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateShippoConfiguration2(_id, shippoConfiguration) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      shippoConfiguration: { ...shippoConfiguration, id: _id }
    }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "shippoConfiguration.shipFromAddress" }]
      }
    ]
  );
  const reqOpts = updateShippoConfiguration(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "shippoConfiguration.shipFromAddress" }]
        }
      ])
    )?.shippoConfiguration;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { shippoConfiguration: "$[1]" },
        explicitPathsToArguments: { "shippoConfiguration.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "shippoConfiguration"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteShippoConfiguration2(shippoConfigurationId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    shippoConfigurationId
  });
  const reqOpts = deleteShippoConfiguration(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shippoConfigurationId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["shippoConfigurationId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryShippoConfigurations2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryShippoConfigurations(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [
          {
            transformFn: import_address2.transformRESTAddressToSDKAddress,
            paths: [{ path: "shippoConfigurations.shipFromAddress" }]
          }
        ])
      );
      return {
        items: transformedData?.shippoConfigurations,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function updateExtendedFields2(_id, namespace, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    namespace,
    namespaceData: options?.namespaceData
  });
  const reqOpts = updateExtendedFields(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "shippoConfiguration.shipFromAddress" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          namespace: "$[1]",
          namespaceData: "$[2].namespaceData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "namespace", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addDeliveryRegion2(shippoConfigurationId, deliveryRegionId, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    shippoConfigurationId,
    deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = addDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "shippoConfiguration.shipFromAddress" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          shippoConfigurationId: "$[0]",
          deliveryRegionId: "$[1]",
          revision: "$[2].revision"
        },
        singleArgumentUnchanged: false
      },
      ["shippoConfigurationId", "deliveryRegionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeDeliveryRegion2(identifiers, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    shippoConfigurationId: identifiers?.shippoConfigurationId,
    deliveryRegionId: identifiers?.deliveryRegionId,
    revision: options?.revision
  });
  const reqOpts = removeDeliveryRegion(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "shippoConfiguration.shipFromAddress" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          shippoConfigurationId: "$[0].shippoConfigurationId",
          deliveryRegionId: "$[0].deliveryRegionId",
          revision: "$[1].revision"
        },
        singleArgumentUnchanged: false
      },
      ["identifiers", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/ecom-v1-shippo-configuration-shippo-configurations.public.ts
function createShippoConfiguration3(httpClient) {
  return (shippoConfiguration, options) => createShippoConfiguration2(
    shippoConfiguration,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getShippoConfiguration3(httpClient) {
  return (shippoConfigurationId) => getShippoConfiguration2(
    shippoConfigurationId,
    // @ts-ignore
    { httpClient }
  );
}
function updateShippoConfiguration3(httpClient) {
  return (_id, shippoConfiguration) => updateShippoConfiguration2(
    _id,
    shippoConfiguration,
    // @ts-ignore
    { httpClient }
  );
}
function deleteShippoConfiguration3(httpClient) {
  return (shippoConfigurationId) => deleteShippoConfiguration2(
    shippoConfigurationId,
    // @ts-ignore
    { httpClient }
  );
}
function queryShippoConfigurations3(httpClient) {
  return () => queryShippoConfigurations2(
    // @ts-ignore
    { httpClient }
  );
}
function updateExtendedFields3(httpClient) {
  return (_id, namespace, options) => updateExtendedFields2(
    _id,
    namespace,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function addDeliveryRegion3(httpClient) {
  return (shippoConfigurationId, deliveryRegionId, options) => addDeliveryRegion2(
    shippoConfigurationId,
    deliveryRegionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function removeDeliveryRegion3(httpClient) {
  return (identifiers, options) => removeDeliveryRegion2(
    identifiers,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onShippoConfigurationCreated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.shippo_configuration_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [{ path: "entity.shipFromAddress" }]
      }
    ])
  )
)();
var onShippoConfigurationDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.shippo_configuration_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [{ path: "entity.shipFromAddress" }]
      }
    ])
  )
)();
var onShippoConfigurationUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.ecom.v1.shippo_configuration_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_address3.transformRESTAddressToSDKAddress,
        paths: [{ path: "entity.shipFromAddress" }]
      }
    ])
  )
)();

// src/ecom-v1-shippo-configuration-shippo-configurations.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createShippoConfiguration4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createShippoConfiguration3);
var getShippoConfiguration4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getShippoConfiguration3);
var updateShippoConfiguration4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateShippoConfiguration3);
var deleteShippoConfiguration4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteShippoConfiguration3);
var queryShippoConfigurations4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryShippoConfigurations3);
var updateExtendedFields4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateExtendedFields3);
var addDeliveryRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addDeliveryRegion3);
var removeDeliveryRegion4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeDeliveryRegion3);
var onShippoConfigurationCreated2 = (0, import_event_definition_modules.createEventModule)(
  onShippoConfigurationCreated
);
var onShippoConfigurationDeleted2 = (0, import_event_definition_modules.createEventModule)(
  onShippoConfigurationDeleted
);
var onShippoConfigurationUpdated2 = (0, import_event_definition_modules.createEventModule)(
  onShippoConfigurationUpdated
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CalculationType,
  DomesticService,
  InternationalService,
  PackageType,
  SortOrder,
  WebhookIdentityType,
  addDeliveryRegion,
  createShippoConfiguration,
  deleteShippoConfiguration,
  getShippoConfiguration,
  onShippoConfigurationCreated,
  onShippoConfigurationDeleted,
  onShippoConfigurationUpdated,
  queryShippoConfigurations,
  removeDeliveryRegion,
  updateExtendedFields,
  updateShippoConfiguration
});
//# sourceMappingURL=index.js.map