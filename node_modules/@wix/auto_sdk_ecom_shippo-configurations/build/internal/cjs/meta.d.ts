import { CreateShippoConfigurationRequest as CreateShippoConfigurationRequest$1, CreateShippoConfigurationResponse as CreateShippoConfigurationResponse$1, GetShippoConfigurationRequest as GetShippoConfigurationRequest$1, GetShippoConfigurationResponse as GetShippoConfigurationResponse$1, UpdateShippoConfigurationRequest as UpdateShippoConfigurationRequest$1, UpdateShippoConfigurationResponse as UpdateShippoConfigurationResponse$1, DeleteShippoConfigurationRequest as DeleteShippoConfigurationRequest$1, DeleteShippoConfigurationResponse as DeleteShippoConfigurationResponse$1, QueryShippoConfigurationsRequest as QueryShippoConfigurationsRequest$1, QueryShippoConfigurationsResponse as QueryShippoConfigurationsResponse$1, UpdateExtendedFieldsRequest as UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsResponse as UpdateExtendedFieldsResponse$1, AddDeliveryRegionRequest as AddDeliveryRegionRequest$1, AddDeliveryRegionResponse as AddDeliveryRegionResponse$1, RemoveDeliveryRegionRequest as RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionResponse as RemoveDeliveryRegionResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

interface ShippoConfiguration {
    /**
     * ShippoConfiguration ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /** @readonly */
    revision?: string | null;
    /**
     * Date and time the ShippoConfiguration was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ShippoConfiguration was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Associated delivery region ID.
     * @format GUID
     * @immutable
     * @deprecated Associated delivery region ID.
     * @replacedBy delivery_region_ids
     * @targetRemovalDate 2025-06-01
     */
    deliveryRegionId?: string | null;
    /**
     * Settings of USPS domestic services.
     * @maxSize 3
     */
    domesticServices?: DomesticServiceSettings[];
    /**
     * Settings of USPS international services.
     * @maxSize 3
     */
    internationalServices?: InternationalServiceSettings[];
    /** Package type. */
    packageType?: PackageTypeWithLiterals;
    /** Package details. */
    packageDetails?: PackageDetails;
    /**
     * Location ID from OS location service.
     * @format GUID
     */
    osLocationId?: string | null;
    /**
     * Ship from address materialized from OS location.
     * @readonly
     */
    shipFromAddress?: Address;
    /**
     * This shippo configuration is active for the following delivery regions.
     * @maxSize 50
     * @format GUID
     * @immutable
     */
    deliveryRegionIds?: string[];
    /**
     * Backup weight.
     * @decimalValue options { gte:0, maxScale:5 }
     */
    backupWeight?: string | null;
    /** Data extensions. */
    extendedFields?: ExtendedFields;
}
interface DomesticServiceSettings {
    /**
     * DomesticServiceSettings ID.
     * @format GUID
     */
    id?: string | null;
    /** USPS domestic service. */
    service?: DomesticServiceWithLiterals;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum DomesticService {
    UNKNOWN_DOMESTIC_SERVICE = "UNKNOWN_DOMESTIC_SERVICE",
    GROUND_ADVANTAGE = "GROUND_ADVANTAGE",
    PRIORITY_MAIL = "PRIORITY_MAIL",
    PRIORITY_MAIL_EXPRESS = "PRIORITY_MAIL_EXPRESS"
}
/** @enumType */
type DomesticServiceWithLiterals = DomesticService | 'UNKNOWN_DOMESTIC_SERVICE' | 'GROUND_ADVANTAGE' | 'PRIORITY_MAIL' | 'PRIORITY_MAIL_EXPRESS';
interface ServiceSettings {
    /**
     * Estimated delivery time.
     * @maxLength 500
     */
    estimatedDeliveryTime?: string | null;
    /** Handling fee. */
    handlingFee?: HandlingFee;
    /**
     * Amount above which free delivery is offered.
     * @decimalValue options { gte:0, maxScale:6 }
     */
    freeDeliveryMinimumAmount?: string | null;
}
interface HandlingFee {
    /**
     * Value that will be used to calculate the fee. For example, percentage fee with value 5% to calculate the fee.
     * @decimalValue options { gte:0, maxScale:4 }
     */
    value?: string;
    /** How to calculate the fee: fixed amount or by percentage. */
    calculationType?: CalculationTypeWithLiterals;
}
declare enum CalculationType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    FIXED = "FIXED",
    PERCENTAGE = "PERCENTAGE"
}
/** @enumType */
type CalculationTypeWithLiterals = CalculationType | 'UNKNOWN_TYPE' | 'FIXED' | 'PERCENTAGE';
interface InternationalServiceSettings {
    /**
     * InternationalServiceSettings ID.
     * @format GUID
     */
    id?: string | null;
    /** USPS international service. */
    service?: InternationalServiceWithLiterals;
    /** Service settings. */
    serviceSettings?: ServiceSettings;
}
declare enum InternationalService {
    UNKNOWN_INTERNATIONAL_SERVICE = "UNKNOWN_INTERNATIONAL_SERVICE",
    FIRST_CLASS_PACKAGE_INTERNATIONAL = "FIRST_CLASS_PACKAGE_INTERNATIONAL",
    PRIORITY_MAIL_INTERNATIONAL = "PRIORITY_MAIL_INTERNATIONAL",
    PRIORITY_MAIL_EXPRESS_INTERNATIONAL = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL"
}
/** @enumType */
type InternationalServiceWithLiterals = InternationalService | 'UNKNOWN_INTERNATIONAL_SERVICE' | 'FIRST_CLASS_PACKAGE_INTERNATIONAL' | 'PRIORITY_MAIL_INTERNATIONAL' | 'PRIORITY_MAIL_EXPRESS_INTERNATIONAL';
declare enum PackageType {
    UNKNOWN_PACKAGE_TYPE = "UNKNOWN_PACKAGE_TYPE",
    CUSTOM = "CUSTOM",
    FLAT_RATE_ENVELOPE = "FLAT_RATE_ENVELOPE",
    PADDED_FLAT_RATE_ENVELOPE = "PADDED_FLAT_RATE_ENVELOPE",
    SMALL_FLAT_RATE_BOX = "SMALL_FLAT_RATE_BOX",
    MEDIUM_FLAT_RATE_BOX_1 = "MEDIUM_FLAT_RATE_BOX_1",
    MEDIUM_FLAT_RATE_BOX_2 = "MEDIUM_FLAT_RATE_BOX_2",
    LARGE_FLAT_RATE_BOX = "LARGE_FLAT_RATE_BOX"
}
/** @enumType */
type PackageTypeWithLiterals = PackageType | 'UNKNOWN_PACKAGE_TYPE' | 'CUSTOM' | 'FLAT_RATE_ENVELOPE' | 'PADDED_FLAT_RATE_ENVELOPE' | 'SMALL_FLAT_RATE_BOX' | 'MEDIUM_FLAT_RATE_BOX_1' | 'MEDIUM_FLAT_RATE_BOX_2' | 'LARGE_FLAT_RATE_BOX';
interface PackageDetails {
    /**
     * Package name. Must be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     * @maxLength 255
     */
    name?: string | null;
    /**
     * Package dimensions. Can only be set when package type is CUSTOM.
     * For other package types, it is read-only, and an exception will be thrown
     * if it set when creating a ShippoConfiguration.
     */
    dimensions?: PackageDimensions;
    /**
     * Maximum number of products. Must be set when package type is NOT CUSTOM.
     * Otherwise, if the package type is CUSTOM, this field cannot be set and an
     * exception will be thrown if it is set when creating a ShippoConfiguration.
     */
    maxNumberOfProducts?: string | null;
}
interface PackageDimensions {
    /**
     * Package length.
     * @decimalValue options { gte:0, maxScale:3 }
     */
    length?: string;
    /**
     * Package width.
     * @decimalValue options { gte:0, maxScale:3 }
     */
    width?: string;
    /**
     * Package height.
     * @decimalValue options { gte:0, maxScale:3 }
     */
    height?: string;
}
/** Physical address */
interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateShippoConfigurationRequest {
    /** ShippoConfiguration to be created. */
    shippoConfiguration: ShippoConfiguration;
    /** @decimalValue options { gte:0, maxScale:6 } */
    backupRate?: string | null;
}
interface CreateShippoConfigurationResponse {
    /** The created ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface GetShippoConfigurationRequest {
    /**
     * ID of the ShippoConfiguration to retrieve.
     * @format GUID
     */
    shippoConfigurationId: string;
}
interface GetShippoConfigurationResponse {
    /** The requested ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface UpdateShippoConfigurationRequest {
    /** ShippoConfiguration to be updated, may be partial. */
    shippoConfiguration: ShippoConfiguration;
}
interface UpdateShippoConfigurationResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface DeleteShippoConfigurationRequest {
    /**
     * ID of the ShippoConfiguration to delete.
     * @format GUID
     */
    shippoConfigurationId: string;
}
interface DeleteShippoConfigurationResponse {
}
interface QueryShippoConfigurationsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryShippoConfigurationsResponse {
    /** List of ShippoConfigurations. */
    shippoConfigurations?: ShippoConfiguration[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
interface UpdateExtendedFieldsResponse {
    /** Updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface AddDeliveryRegionRequest {
    /**
     * ID of the ShippoConfiguration to add the delivery region to.
     * @format GUID
     */
    shippoConfigurationId: string;
    /**
     * ID of the delivery region to add.
     * @format GUID
     */
    deliveryRegionId: string;
    /** Revision of the ShippoConfiguration. */
    revision?: string | null;
}
interface AddDeliveryRegionResponse {
    /** The updated ShippoConfiguration. */
    shippoConfiguration?: ShippoConfiguration;
}
interface RemoveDeliveryRegionRequest {
    /**
     * ID of the ShippoConfiguration to remove the delivery region from.
     * @format GUID
     */
    shippoConfigurationId: string;
    /**
     * ID of the delivery region to remove.
     * @format GUID
     */
    deliveryRegionId: string;
    /** Revision of the ShippoConfiguration. */
    revision?: string | null;
}
interface RemoveDeliveryRegionResponse {
    /** The updated ShippoConfiguration, or empty if the ShippoConfiguration was deleted. */
    shippoConfiguration?: ShippoConfiguration;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createShippoConfiguration(): __PublicMethodMetaInfo<'POST', {}, CreateShippoConfigurationRequest$1, CreateShippoConfigurationRequest, CreateShippoConfigurationResponse$1, CreateShippoConfigurationResponse>;
declare function getShippoConfiguration(): __PublicMethodMetaInfo<'GET', {
    shippoConfigurationId: string;
}, GetShippoConfigurationRequest$1, GetShippoConfigurationRequest, GetShippoConfigurationResponse$1, GetShippoConfigurationResponse>;
declare function updateShippoConfiguration(): __PublicMethodMetaInfo<'PATCH', {
    shippoConfigurationId: string;
}, UpdateShippoConfigurationRequest$1, UpdateShippoConfigurationRequest, UpdateShippoConfigurationResponse$1, UpdateShippoConfigurationResponse>;
declare function deleteShippoConfiguration(): __PublicMethodMetaInfo<'DELETE', {
    shippoConfigurationId: string;
}, DeleteShippoConfigurationRequest$1, DeleteShippoConfigurationRequest, DeleteShippoConfigurationResponse$1, DeleteShippoConfigurationResponse>;
declare function queryShippoConfigurations(): __PublicMethodMetaInfo<'GET', {}, QueryShippoConfigurationsRequest$1, QueryShippoConfigurationsRequest, QueryShippoConfigurationsResponse$1, QueryShippoConfigurationsResponse>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, UpdateExtendedFieldsRequest$1, UpdateExtendedFieldsRequest, UpdateExtendedFieldsResponse$1, UpdateExtendedFieldsResponse>;
declare function addDeliveryRegion(): __PublicMethodMetaInfo<'POST', {
    shippoConfigurationId: string;
}, AddDeliveryRegionRequest$1, AddDeliveryRegionRequest, AddDeliveryRegionResponse$1, AddDeliveryRegionResponse>;
declare function removeDeliveryRegion(): __PublicMethodMetaInfo<'DELETE', {
    shippoConfigurationId: string;
    deliveryRegionId: string;
}, RemoveDeliveryRegionRequest$1, RemoveDeliveryRegionRequest, RemoveDeliveryRegionResponse$1, RemoveDeliveryRegionResponse>;

export { type __PublicMethodMetaInfo, addDeliveryRegion, createShippoConfiguration, deleteShippoConfiguration, getShippoConfiguration, queryShippoConfigurations, removeDeliveryRegion, updateExtendedFields, updateShippoConfiguration };
