export type ReadOnlySignal<T> = {
    get: () => T;
    peek: () => T;
};
export type Signal<T> = ReadOnlySignal<T> & {
    set: (newValue: T) => void;
};
export declare const SignalsServiceDefinition: string & {
    __api: {
        signal: <T>(initialValue: T) => Signal<T>;
        computed: <T>(fn: () => T) => ReadOnlySignal<T>;
        effect: (fn: () => void) => () => void;
    };
    __config: {};
    isServiceDefinition?: boolean;
} & {
    signal: <T>(initialValue: T) => Signal<T>;
    computed: <T>(fn: () => T) => ReadOnlySignal<T>;
    effect: (fn: () => void) => () => void;
};
