// src/service-plugins-types.ts
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNKNOWN"] = "UNKNOWN";
  IdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["WIX_USER"] = "WIX_USER";
  IdentityType2["APP"] = "APP";
  return IdentityType2;
})(IdentityType || {});

// src/interfaces-ecom-v1-gift-card-provider-entity.public.ts
import { ServicePluginDefinition } from "@wix/sdk-types";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";
var provideHandlers = ServicePluginDefinition("GIFT_CARDS_PROVIDER", [
  {
    name: "getBalance",
    primaryHttpMappingPath: "/v1/balance",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = transformPaths(payload, [
          {
            transformFn: transformSDKFloatToRESTFloat,
            paths: [{ path: "balance" }]
          }
        ]);
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "redeem",
    primaryHttpMappingPath: "/v1/redeem",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = transformPaths(payload, [
          {
            transformFn: transformSDKFloatToRESTFloat,
            paths: [{ path: "remainingBalance" }]
          }
        ]);
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = transformPaths(payload, [
          {
            transformFn: transformRESTFloatToSDKFloat,
            paths: [{ path: "request.amount" }]
          }
        ]);
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "_void",
    primaryHttpMappingPath: "/v1/void",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = transformPaths(payload, [
          {
            transformFn: transformSDKFloatToRESTFloat,
            paths: [{ path: "remainingBalance" }]
          }
        ]);
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  }
]);

// src/interfaces-ecom-v1-gift-card-provider-entity.context.ts
import { createServicePluginModule } from "@wix/sdk-runtime/service-plugin-modules";
var provideHandlers2 = createServicePluginModule(
  provideHandlers
);

// src/service-plugins-error-classes.ts
var GiftCardNotFoundWixError = class extends Error {
  constructor() {
    super("GiftCardNotFound");
    this.httpCode = 404;
    this.statusCode = "NOT_FOUND";
    this.applicationCode = "GIFT_CARD_NOT_FOUND";
    this.name = "GiftCardNotFound";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "GiftCardNotFound",
      applicationCode: "GIFT_CARD_NOT_FOUND"
    };
  }
};
/** @hidden */
GiftCardNotFoundWixError.__type = "wix_spi_error";
var GiftCardDisabledWixError = class extends Error {
  constructor() {
    super("GiftCardDisabled");
    this.httpCode = 428;
    this.statusCode = "FAILED_PRECONDITION";
    this.applicationCode = "GIFT_CARD_DISABLED";
    this.name = "GiftCardDisabled";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "GiftCardDisabled",
      applicationCode: "GIFT_CARD_DISABLED"
    };
  }
};
/** @hidden */
GiftCardDisabledWixError.__type = "wix_spi_error";
var GiftCardExpiredWixError = class extends Error {
  constructor() {
    super("GiftCardExpired");
    this.httpCode = 428;
    this.statusCode = "FAILED_PRECONDITION";
    this.applicationCode = "GIFT_CARD_EXPIRED";
    this.name = "GiftCardExpired";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "GiftCardExpired",
      applicationCode: "GIFT_CARD_EXPIRED"
    };
  }
};
/** @hidden */
GiftCardExpiredWixError.__type = "wix_spi_error";
var InsufficientFundsWixError = class extends Error {
  constructor() {
    super("InsufficientFunds");
    this.httpCode = 428;
    this.statusCode = "FAILED_PRECONDITION";
    this.applicationCode = "INSUFFICIENT_FUNDS";
    this.name = "InsufficientFunds";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "InsufficientFunds",
      applicationCode: "INSUFFICIENT_FUNDS"
    };
  }
};
/** @hidden */
InsufficientFundsWixError.__type = "wix_spi_error";
var AlreadyRedeemedWixError = class extends Error {
  constructor() {
    super("AlreadyRedeemed");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "ALREADY_REDEEMED";
    this.name = "AlreadyRedeemed";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "AlreadyRedeemed",
      applicationCode: "ALREADY_REDEEMED"
    };
  }
};
/** @hidden */
AlreadyRedeemedWixError.__type = "wix_spi_error";
var CurrencyNotSupportedWixError = class extends Error {
  constructor() {
    super("CurrencyNotSupported");
    this.httpCode = 400;
    this.statusCode = "INVALID_ARGUMENT";
    this.applicationCode = "CURRENCY_NOT_SUPPORTED";
    this.name = "CurrencyNotSupported";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "CurrencyNotSupported",
      applicationCode: "CURRENCY_NOT_SUPPORTED"
    };
  }
};
/** @hidden */
CurrencyNotSupportedWixError.__type = "wix_spi_error";
var TransactionNotFoundWixError = class extends Error {
  constructor() {
    super("TransactionNotFound");
    this.httpCode = 404;
    this.statusCode = "NOT_FOUND";
    this.applicationCode = "TRANSACTION_NOT_FOUND";
    this.name = "TransactionNotFound";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "TransactionNotFound",
      applicationCode: "TRANSACTION_NOT_FOUND"
    };
  }
};
/** @hidden */
TransactionNotFoundWixError.__type = "wix_spi_error";
var AlreadyVoidedWixError = class extends Error {
  constructor() {
    super("AlreadyVoided");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "ALREADY_VOIDED";
    this.name = "AlreadyVoided";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "AlreadyVoided",
      applicationCode: "ALREADY_VOIDED"
    };
  }
};
/** @hidden */
AlreadyVoidedWixError.__type = "wix_spi_error";
export {
  AlreadyRedeemedWixError,
  AlreadyVoidedWixError,
  CurrencyNotSupportedWixError,
  GiftCardDisabledWixError,
  GiftCardExpiredWixError,
  GiftCardNotFoundWixError,
  IdentityType,
  InsufficientFundsWixError,
  TransactionNotFoundWixError,
  provideHandlers2 as provideHandlers,
  provideHandlers as publicProvideHandlers
};
//# sourceMappingURL=index.mjs.map