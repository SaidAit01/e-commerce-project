// src/billing-v1-tax-group-tax-groups.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/billing-v1-tax-group-tax-groups.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/billing-v1-tax-group-tax-groups.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixBillingV1TaxGroupsUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/billing/v1/tax-groups",
        destPath: "/v1/tax-groups"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/billing/v1/tax-groups",
        destPath: "/v1/tax-groups"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tax-groups";
function createTaxGroup(payload) {
  function __createTaxGroup({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxGroup.createdDate" },
          { path: "taxGroup.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxGroups.CreateTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroup.createdDate" },
            { path: "taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createTaxGroup;
}
function getTaxGroup(payload) {
  function __getTaxGroup({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "GET",
      methodFqn: "wix.billing.v1.TaxGroups.GetTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/{taxGroupId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroup.createdDate" },
            { path: "taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTaxGroup;
}
function updateTaxGroup(payload) {
  function __updateTaxGroup({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxGroup.createdDate" },
          { path: "taxGroup.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "PATCH",
      methodFqn: "wix.billing.v1.TaxGroups.UpdateTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/{taxGroup.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroup.createdDate" },
            { path: "taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateTaxGroup;
}
function deleteTaxGroup(payload) {
  function __deleteTaxGroup({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "DELETE",
      methodFqn: "wix.billing.v1.TaxGroups.DeleteTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/{taxGroupId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteTaxGroup;
}
function queryTaxGroups(payload) {
  function __queryTaxGroups({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxGroups.QueryTaxGroups",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroups.createdDate" },
            { path: "taxGroups.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryTaxGroups;
}
function listDefaultTaxGroups(payload) {
  function __listDefaultTaxGroups({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "GET",
      methodFqn: "wix.billing.v1.TaxGroups.ListDefaultTaxGroups",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/default-tax-groups",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroups.createdDate" },
            { path: "taxGroups.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listDefaultTaxGroups;
}
function listDefaultTaxGroupsByAppIds(payload) {
  function __listDefaultTaxGroupsByAppIds({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxGroups.ListDefaultTaxGroupsByAppIds",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/list-default-tax-groups-by-app-ids",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.taxGroup.createdDate" },
            { path: "results.taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listDefaultTaxGroupsByAppIds;
}

// src/billing-v1-tax-group-tax-groups.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createTaxGroup2(taxGroup) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ taxGroup });
  const reqOpts = createTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxGroup;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxGroup: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxGroup"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTaxGroup2(taxGroupId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxGroupId
  });
  const reqOpts = getTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxGroup;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxGroupId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxGroupId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateTaxGroup2(_id, taxGroup) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxGroup: { ...taxGroup, id: _id }
  });
  const reqOpts = updateTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxGroup;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { taxGroup: "$[1]" },
        explicitPathsToArguments: { "taxGroup.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "taxGroup"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteTaxGroup2(taxGroupId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    taxGroupId
  });
  const reqOpts = deleteTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxGroupId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxGroupId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryTaxGroups2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryTaxGroups(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.taxGroups,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function listDefaultTaxGroups2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = listDefaultTaxGroups(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listDefaultTaxGroupsByAppIds2(appIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ appIds });
  const reqOpts = listDefaultTaxGroupsByAppIds(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { appIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["appIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/billing-v1-tax-group-tax-groups.public.ts
function createTaxGroup3(httpClient) {
  return (taxGroup) => createTaxGroup2(
    taxGroup,
    // @ts-ignore
    { httpClient }
  );
}
function getTaxGroup3(httpClient) {
  return (taxGroupId) => getTaxGroup2(
    taxGroupId,
    // @ts-ignore
    { httpClient }
  );
}
function updateTaxGroup3(httpClient) {
  return (_id, taxGroup) => updateTaxGroup2(
    _id,
    taxGroup,
    // @ts-ignore
    { httpClient }
  );
}
function deleteTaxGroup3(httpClient) {
  return (taxGroupId) => deleteTaxGroup2(
    taxGroupId,
    // @ts-ignore
    { httpClient }
  );
}
function queryTaxGroups3(httpClient) {
  return () => queryTaxGroups2(
    // @ts-ignore
    { httpClient }
  );
}
function listDefaultTaxGroups3(httpClient) {
  return () => listDefaultTaxGroups2(
    // @ts-ignore
    { httpClient }
  );
}
function listDefaultTaxGroupsByAppIds3(httpClient) {
  return (appIds) => listDefaultTaxGroupsByAppIds2(
    appIds,
    // @ts-ignore
    { httpClient }
  );
}
var onTaxGroupCreated = EventDefinition(
  "wix.billing.v1.tax_group_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onTaxGroupDeleted = EventDefinition(
  "wix.billing.v1.tax_group_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onTaxGroupUpdated = EventDefinition(
  "wix.billing.v1.tax_group_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/billing-v1-tax-group-tax-groups.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createTaxGroup4 = /* @__PURE__ */ createRESTModule(createTaxGroup3);
var getTaxGroup4 = /* @__PURE__ */ createRESTModule(getTaxGroup3);
var updateTaxGroup4 = /* @__PURE__ */ createRESTModule(updateTaxGroup3);
var deleteTaxGroup4 = /* @__PURE__ */ createRESTModule(deleteTaxGroup3);
var queryTaxGroups4 = /* @__PURE__ */ createRESTModule(queryTaxGroups3);
var listDefaultTaxGroups4 = /* @__PURE__ */ createRESTModule(listDefaultTaxGroups3);
var listDefaultTaxGroupsByAppIds4 = /* @__PURE__ */ createRESTModule(listDefaultTaxGroupsByAppIds3);
var onTaxGroupCreated2 = createEventModule(onTaxGroupCreated);
var onTaxGroupDeleted2 = createEventModule(onTaxGroupDeleted);
var onTaxGroupUpdated2 = createEventModule(onTaxGroupUpdated);
export {
  SortOrder,
  WebhookIdentityType,
  createTaxGroup4 as createTaxGroup,
  deleteTaxGroup4 as deleteTaxGroup,
  getTaxGroup4 as getTaxGroup,
  listDefaultTaxGroups4 as listDefaultTaxGroups,
  listDefaultTaxGroupsByAppIds4 as listDefaultTaxGroupsByAppIds,
  onTaxGroupCreated2 as onTaxGroupCreated,
  onTaxGroupDeleted2 as onTaxGroupDeleted,
  onTaxGroupUpdated2 as onTaxGroupUpdated,
  queryTaxGroups4 as queryTaxGroups,
  updateTaxGroup4 as updateTaxGroup
};
//# sourceMappingURL=index.mjs.map