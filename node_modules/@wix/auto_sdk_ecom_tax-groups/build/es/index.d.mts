import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { TaxGroup, UpdateTaxGroup, UpdateTaxGroupApplicationErrors, TaxGroupsQueryBuilder, ListDefaultTaxGroupsResponse, ListDefaultTaxGroupsByAppIdsResponse, TaxGroupCreatedEnvelope, TaxGroupDeletedEnvelope, TaxGroupUpdatedEnvelope } from './index.typings.mjs';
export { ActionEvent, ApplicationError, BaseEventMetadata, BulkActionMetadata, CreateTaxGroupRequest, CreateTaxGroupResponse, CursorPaging, CursorPagingMetadata, Cursors, DeleteTaxGroupRequest, DeleteTaxGroupResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, GetTaxGroupRequest, GetTaxGroupResponse, IdentificationData, IdentificationDataIdOneOf, ItemMetadata, ListDefaultTaxGroupsByAppIdsRequest, ListDefaultTaxGroupsByAppIdsResult, ListDefaultTaxGroupsRequest, MessageEnvelope, Paging, QueryTaxGroupsRequest, QueryTaxGroupsResponse, QueryV2, QueryV2PagingMethodOneOf, RestoreInfo, SortOrder, SortOrderWithLiterals, Sorting, TaxGroupsQueryResult, UpdateTaxGroupRequest, UpdateTaxGroupResponse, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.mjs';

declare function createTaxGroup$1(httpClient: HttpClient): CreateTaxGroupSignature;
interface CreateTaxGroupSignature {
    /**
     * Creates a tax group.
     *
     * Call Stores Update Product to add the `taxGroupId` to specific products to categorize as a group based on distinct tax treatment.
     * Wix uses tax groups to calculate tax.
     *
     * In addition to tax groups you create, default tax groups are already included in all Wix catalogs.
     * Call List Default Tax Groups to retrieve them. You can also use the Tax Groups Integration service plugin (REST only)
     * to create new default tax groups that can be applied directly to an entire catalog of products.
     * @param - Tax group to create.
     * @returns Created tax group.
     */
    (taxGroup: NonNullablePaths<TaxGroup, `name`, 2>): Promise<NonNullablePaths<TaxGroup, `name`, 2>>;
}
declare function getTaxGroup$1(httpClient: HttpClient): GetTaxGroupSignature;
interface GetTaxGroupSignature {
    /**
     * Retrieves a tax group.
     * @param - ID of the tax group to retrieve.
     * @returns Retrieved tax group.
     */
    (taxGroupId: string): Promise<NonNullablePaths<TaxGroup, `name`, 2>>;
}
declare function updateTaxGroup$1(httpClient: HttpClient): UpdateTaxGroupSignature;
interface UpdateTaxGroupSignature {
    /**
     * Updates a tax group.
     *
     * Each time the tax group is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the tax group.
     * This ensures you're working with the latest tax group and prevents
     * unintended overwrites.
     * @param - Tax group ID.
     * @param - Tax group info.
     * @returns Updated tax group.
     */
    (_id: string, taxGroup: NonNullablePaths<UpdateTaxGroup, `name` | `revision`, 2>): Promise<NonNullablePaths<TaxGroup, `name`, 2> & {
        __applicationErrorsType?: UpdateTaxGroupApplicationErrors;
    }>;
}
declare function deleteTaxGroup$1(httpClient: HttpClient): DeleteTaxGroupSignature;
interface DeleteTaxGroupSignature {
    /**
     * Deletes a tax group.
     *
     * If a tax group is deleted but the `taxGroupId` is still assigned to a product (see Stores Products API) then the default tax group is used to calculate tax.
     * @param - ID of the tax group to delete.
     */
    (taxGroupId: string): Promise<void>;
}
declare function queryTaxGroups$1(httpClient: HttpClient): QueryTaxGroupsSignature;
interface QueryTaxGroupsSignature {
    /**
     * Creates a query to retrieve a list of tax groups.
     *
     * The `queryTaxGroups()` function builds a query to retrieve a list of tax groups and returns a `TaxGroupsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `TaxGroupsQueryBuilder` functions onto the query. `TaxGroupsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxGroups()` returns.
     *
     * `queryTaxGroups()` runs with the following `TaxGroupsQueryBuilder` default that you can override:
     * + `ascending("_id")`
     *
     * The functions that are chained to `queryTaxGroups()` are applied in the order they are called. For example, if you apply `ascending("name")` and then `ascending("_createdDate")`, the results are sorted first by the `"name"`, and then, if there are multiple results with the same `"name"`, the items are sorted by `"_createdDate"`.
     *
     * The following `TaxGroupsQueryBuilder` functions are supported for the `queryTaxGroups()` function. For a full description of the tax group object, see the object returned for the `items` property in `TaxGroupsQueryResult`.
     */
    (): TaxGroupsQueryBuilder;
}
declare function listDefaultTaxGroups$1(httpClient: HttpClient): ListDefaultTaxGroupsSignature;
interface ListDefaultTaxGroupsSignature {
    /**
     * Retrieves a list of default tax groups.
     *
     * The default tax groups for a site are inherited by the apps installed on the site.
     * For example, the Wix Stores app includes a `"Products"` tax group by default.
     *
     * Add additional default tax groups with the Tax Groups Integration service plugin (REST only).
     */
    (): Promise<NonNullablePaths<ListDefaultTaxGroupsResponse, `taxGroups` | `taxGroups.${number}.name`, 4>>;
}
declare function listDefaultTaxGroupsByAppIds$1(httpClient: HttpClient): ListDefaultTaxGroupsByAppIdsSignature;
interface ListDefaultTaxGroupsByAppIdsSignature {
    /**
     * Retrieves default tax groups for specific apps.
     * @param - App IDs to retrieve default tax groups for.
     */
    (appIds: string[]): Promise<NonNullablePaths<ListDefaultTaxGroupsByAppIdsResponse, `results` | `results.${number}.taxGroupMetadata.originalIndex` | `results.${number}.taxGroupMetadata.success` | `results.${number}.taxGroupMetadata.error.code` | `results.${number}.taxGroupMetadata.error.description` | `results.${number}.taxGroup.name` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onTaxGroupCreated$1: EventDefinition<TaxGroupCreatedEnvelope, "wix.billing.v1.tax_group_created">;
declare const onTaxGroupDeleted$1: EventDefinition<TaxGroupDeletedEnvelope, "wix.billing.v1.tax_group_deleted">;
declare const onTaxGroupUpdated$1: EventDefinition<TaxGroupUpdatedEnvelope, "wix.billing.v1.tax_group_updated">;

declare const createTaxGroup: MaybeContext<BuildRESTFunction<typeof createTaxGroup$1> & typeof createTaxGroup$1>;
declare const getTaxGroup: MaybeContext<BuildRESTFunction<typeof getTaxGroup$1> & typeof getTaxGroup$1>;
declare const updateTaxGroup: MaybeContext<BuildRESTFunction<typeof updateTaxGroup$1> & typeof updateTaxGroup$1>;
declare const deleteTaxGroup: MaybeContext<BuildRESTFunction<typeof deleteTaxGroup$1> & typeof deleteTaxGroup$1>;
declare const queryTaxGroups: MaybeContext<BuildRESTFunction<typeof queryTaxGroups$1> & typeof queryTaxGroups$1>;
declare const listDefaultTaxGroups: MaybeContext<BuildRESTFunction<typeof listDefaultTaxGroups$1> & typeof listDefaultTaxGroups$1>;
declare const listDefaultTaxGroupsByAppIds: MaybeContext<BuildRESTFunction<typeof listDefaultTaxGroupsByAppIds$1> & typeof listDefaultTaxGroupsByAppIds$1>;
/**
 * Triggered when a tax group is created.
 */
declare const onTaxGroupCreated: BuildEventDefinition<typeof onTaxGroupCreated$1> & typeof onTaxGroupCreated$1;
/**
 * Triggered when a tax group is deleted.
 */
declare const onTaxGroupDeleted: BuildEventDefinition<typeof onTaxGroupDeleted$1> & typeof onTaxGroupDeleted$1;
/**
 * Triggered when a tax group is updated.
 */
declare const onTaxGroupUpdated: BuildEventDefinition<typeof onTaxGroupUpdated$1> & typeof onTaxGroupUpdated$1;

export { ListDefaultTaxGroupsByAppIdsResponse, ListDefaultTaxGroupsResponse, TaxGroup, TaxGroupCreatedEnvelope, TaxGroupDeletedEnvelope, TaxGroupUpdatedEnvelope, TaxGroupsQueryBuilder, UpdateTaxGroup, UpdateTaxGroupApplicationErrors, createTaxGroup, deleteTaxGroup, getTaxGroup, listDefaultTaxGroups, listDefaultTaxGroupsByAppIds, onTaxGroupCreated, onTaxGroupDeleted, onTaxGroupUpdated, queryTaxGroups, updateTaxGroup };
