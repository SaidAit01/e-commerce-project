"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  createTaxGroup: () => createTaxGroup4,
  deleteTaxGroup: () => deleteTaxGroup4,
  getTaxGroup: () => getTaxGroup4,
  listDefaultTaxGroups: () => listDefaultTaxGroups4,
  listDefaultTaxGroupsByAppIds: () => listDefaultTaxGroupsByAppIds4,
  onTaxGroupCreated: () => onTaxGroupCreated2,
  onTaxGroupDeleted: () => onTaxGroupDeleted2,
  onTaxGroupUpdated: () => onTaxGroupUpdated2,
  queryTaxGroups: () => queryTaxGroups4,
  updateTaxGroup: () => updateTaxGroup4
});
module.exports = __toCommonJS(index_exports);

// src/billing-v1-tax-group-tax-groups.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/billing-v1-tax-group-tax-groups.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/billing-v1-tax-group-tax-groups.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixBillingV1TaxGroupsUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/billing/v1/tax-groups",
        destPath: "/v1/tax-groups"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/billing/v1/tax-groups",
        destPath: "/v1/tax-groups"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_ecom_tax-groups";
function createTaxGroup(payload) {
  function __createTaxGroup({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxGroup.createdDate" },
          { path: "taxGroup.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxGroups.CreateTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroup.createdDate" },
            { path: "taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createTaxGroup;
}
function getTaxGroup(payload) {
  function __getTaxGroup({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "GET",
      methodFqn: "wix.billing.v1.TaxGroups.GetTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/{taxGroupId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroup.createdDate" },
            { path: "taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTaxGroup;
}
function updateTaxGroup(payload) {
  function __updateTaxGroup({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "taxGroup.createdDate" },
          { path: "taxGroup.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "PATCH",
      methodFqn: "wix.billing.v1.TaxGroups.UpdateTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/{taxGroup.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroup.createdDate" },
            { path: "taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateTaxGroup;
}
function deleteTaxGroup(payload) {
  function __deleteTaxGroup({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "DELETE",
      methodFqn: "wix.billing.v1.TaxGroups.DeleteTaxGroup",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/{taxGroupId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteTaxGroup;
}
function queryTaxGroups(payload) {
  function __queryTaxGroups({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxGroups.QueryTaxGroups",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroups.createdDate" },
            { path: "taxGroups.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryTaxGroups;
}
function listDefaultTaxGroups(payload) {
  function __listDefaultTaxGroups({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "GET",
      methodFqn: "wix.billing.v1.TaxGroups.ListDefaultTaxGroups",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/default-tax-groups",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "taxGroups.createdDate" },
            { path: "taxGroups.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listDefaultTaxGroups;
}
function listDefaultTaxGroupsByAppIds(payload) {
  function __listDefaultTaxGroupsByAppIds({ host }) {
    const metadata = {
      entityFqdn: "wix.billing.v1.tax_group",
      method: "POST",
      methodFqn: "wix.billing.v1.TaxGroups.ListDefaultTaxGroupsByAppIds",
      packageName: PACKAGE_NAME,
      url: resolveWixBillingV1TaxGroupsUrl({
        protoPath: "/v1/tax-groups/list-default-tax-groups-by-app-ids",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.taxGroup.createdDate" },
            { path: "results.taxGroup.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listDefaultTaxGroupsByAppIds;
}

// src/billing-v1-tax-group-tax-groups.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createTaxGroup2(taxGroup) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ taxGroup });
  const reqOpts = createTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxGroup;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxGroup: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxGroup"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTaxGroup2(taxGroupId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxGroupId
  });
  const reqOpts = getTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxGroup;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxGroupId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxGroupId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateTaxGroup2(_id, taxGroup) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxGroup: { ...taxGroup, id: _id }
  });
  const reqOpts = updateTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxGroup;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { taxGroup: "$[1]" },
        explicitPathsToArguments: { "taxGroup.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "taxGroup"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteTaxGroup2(taxGroupId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    taxGroupId
  });
  const reqOpts = deleteTaxGroup(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taxGroupId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taxGroupId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryTaxGroups2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryTaxGroups(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.taxGroups,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function listDefaultTaxGroups2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = listDefaultTaxGroups(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listDefaultTaxGroupsByAppIds2(appIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ appIds });
  const reqOpts = listDefaultTaxGroupsByAppIds(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { appIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["appIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/billing-v1-tax-group-tax-groups.public.ts
function createTaxGroup3(httpClient) {
  return (taxGroup) => createTaxGroup2(
    taxGroup,
    // @ts-ignore
    { httpClient }
  );
}
function getTaxGroup3(httpClient) {
  return (taxGroupId) => getTaxGroup2(
    taxGroupId,
    // @ts-ignore
    { httpClient }
  );
}
function updateTaxGroup3(httpClient) {
  return (_id, taxGroup) => updateTaxGroup2(
    _id,
    taxGroup,
    // @ts-ignore
    { httpClient }
  );
}
function deleteTaxGroup3(httpClient) {
  return (taxGroupId) => deleteTaxGroup2(
    taxGroupId,
    // @ts-ignore
    { httpClient }
  );
}
function queryTaxGroups3(httpClient) {
  return () => queryTaxGroups2(
    // @ts-ignore
    { httpClient }
  );
}
function listDefaultTaxGroups3(httpClient) {
  return () => listDefaultTaxGroups2(
    // @ts-ignore
    { httpClient }
  );
}
function listDefaultTaxGroupsByAppIds3(httpClient) {
  return (appIds) => listDefaultTaxGroupsByAppIds2(
    appIds,
    // @ts-ignore
    { httpClient }
  );
}
var onTaxGroupCreated = (0, import_sdk_types.EventDefinition)(
  "wix.billing.v1.tax_group_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onTaxGroupDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.billing.v1.tax_group_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onTaxGroupUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.billing.v1.tax_group_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/billing-v1-tax-group-tax-groups.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createTaxGroup4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createTaxGroup3);
var getTaxGroup4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getTaxGroup3);
var updateTaxGroup4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateTaxGroup3);
var deleteTaxGroup4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteTaxGroup3);
var queryTaxGroups4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryTaxGroups3);
var listDefaultTaxGroups4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listDefaultTaxGroups3);
var listDefaultTaxGroupsByAppIds4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listDefaultTaxGroupsByAppIds3);
var onTaxGroupCreated2 = (0, import_event_definition_modules.createEventModule)(onTaxGroupCreated);
var onTaxGroupDeleted2 = (0, import_event_definition_modules.createEventModule)(onTaxGroupDeleted);
var onTaxGroupUpdated2 = (0, import_event_definition_modules.createEventModule)(onTaxGroupUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SortOrder,
  WebhookIdentityType,
  createTaxGroup,
  deleteTaxGroup,
  getTaxGroup,
  listDefaultTaxGroups,
  listDefaultTaxGroupsByAppIds,
  onTaxGroupCreated,
  onTaxGroupDeleted,
  onTaxGroupUpdated,
  queryTaxGroups,
  updateTaxGroup
});
//# sourceMappingURL=index.js.map