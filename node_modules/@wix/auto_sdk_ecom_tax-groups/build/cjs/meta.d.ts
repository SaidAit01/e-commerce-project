import { CreateTaxGroupRequest as CreateTaxGroupRequest$1, CreateTaxGroupResponse as CreateTaxGroupResponse$1, GetTaxGroupRequest as GetTaxGroupRequest$1, GetTaxGroupResponse as GetTaxGroupResponse$1, UpdateTaxGroupRequest as UpdateTaxGroupRequest$1, UpdateTaxGroupResponse as UpdateTaxGroupResponse$1, DeleteTaxGroupRequest as DeleteTaxGroupRequest$1, DeleteTaxGroupResponse as DeleteTaxGroupResponse$1, QueryTaxGroupsRequest as QueryTaxGroupsRequest$1, QueryTaxGroupsResponse as QueryTaxGroupsResponse$1, ListDefaultTaxGroupsRequest as ListDefaultTaxGroupsRequest$1, ListDefaultTaxGroupsResponse as ListDefaultTaxGroupsResponse$1, ListDefaultTaxGroupsByAppIdsRequest as ListDefaultTaxGroupsByAppIdsRequest$1, ListDefaultTaxGroupsByAppIdsResponse as ListDefaultTaxGroupsByAppIdsResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

/**
 * A tax group is a category of specific line items grouped together based on their tax treatment.
 * You can create new tax groups to apply distinct tax rates and rules.
 */
interface TaxGroup {
    /**
     * Tax group ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Tax group name.
     * @minLength 1
     * @maxLength 200
     */
    name?: string;
    /**
     * Revision number, which increments by 1 each time the tax group is updated. To prevent conflicting changes,
     * the current revision must be passed when updating the tax group.
     *
     * Ignored when creating a tax group.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tax group was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the tax group was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface CreateTaxGroupRequest {
    /** Tax group to create. */
    taxGroup: TaxGroup;
}
interface CreateTaxGroupResponse {
    /** Created tax group. */
    taxGroup?: TaxGroup;
}
interface GetTaxGroupRequest {
    /**
     * ID of the tax group to retrieve.
     * @format GUID
     */
    taxGroupId: string;
}
interface GetTaxGroupResponse {
    /** Retrieved tax group. */
    taxGroup?: TaxGroup;
}
interface UpdateTaxGroupRequest {
    /** Tax group info to update. */
    taxGroup: TaxGroup;
}
interface UpdateTaxGroupResponse {
    /** Updated tax group. */
    taxGroup?: TaxGroup;
}
interface DeleteTaxGroupRequest {
    /**
     * ID of the tax group to delete.
     * @format GUID
     */
    taxGroupId: string;
}
interface DeleteTaxGroupResponse {
}
interface QueryTaxGroupsRequest {
    /** Query options. */
    query: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryTaxGroupsResponse {
    /** Retrieved default tax groups. */
    taxGroups?: TaxGroup[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface ListDefaultTaxGroupsRequest {
}
interface ListDefaultTaxGroupsResponse {
    /** Retrieved default tax groups. */
    taxGroups?: TaxGroup[];
}
interface ListDefaultTaxGroupsByAppIdsRequest {
    /**
     * App IDs to retrieve default tax groups for.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     */
    appIds: string[];
}
interface ListDefaultTaxGroupsByAppIdsResponse {
    /**
     * Retrieved default tax groups.
     * @minSize 1
     * @maxSize 300
     */
    results?: ListDefaultTaxGroupsByAppIdsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface ListDefaultTaxGroupsByAppIdsResult {
    /** Information about success or failure to retrieve default tax groups. */
    taxGroupMetadata?: ItemMetadata;
    /** Retrieved default tax groups. */
    taxGroup?: TaxGroup;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createTaxGroup(): __PublicMethodMetaInfo<'POST', {}, CreateTaxGroupRequest$1, CreateTaxGroupRequest, CreateTaxGroupResponse$1, CreateTaxGroupResponse>;
declare function getTaxGroup(): __PublicMethodMetaInfo<'GET', {
    taxGroupId: string;
}, GetTaxGroupRequest$1, GetTaxGroupRequest, GetTaxGroupResponse$1, GetTaxGroupResponse>;
declare function updateTaxGroup(): __PublicMethodMetaInfo<'PATCH', {
    taxGroupId: string;
}, UpdateTaxGroupRequest$1, UpdateTaxGroupRequest, UpdateTaxGroupResponse$1, UpdateTaxGroupResponse>;
declare function deleteTaxGroup(): __PublicMethodMetaInfo<'DELETE', {
    taxGroupId: string;
}, DeleteTaxGroupRequest$1, DeleteTaxGroupRequest, DeleteTaxGroupResponse$1, DeleteTaxGroupResponse>;
declare function queryTaxGroups(): __PublicMethodMetaInfo<'POST', {}, QueryTaxGroupsRequest$1, QueryTaxGroupsRequest, QueryTaxGroupsResponse$1, QueryTaxGroupsResponse>;
declare function listDefaultTaxGroups(): __PublicMethodMetaInfo<'GET', {}, ListDefaultTaxGroupsRequest$1, ListDefaultTaxGroupsRequest, ListDefaultTaxGroupsResponse$1, ListDefaultTaxGroupsResponse>;
declare function listDefaultTaxGroupsByAppIds(): __PublicMethodMetaInfo<'POST', {}, ListDefaultTaxGroupsByAppIdsRequest$1, ListDefaultTaxGroupsByAppIdsRequest, ListDefaultTaxGroupsByAppIdsResponse$1, ListDefaultTaxGroupsByAppIdsResponse>;

export { type __PublicMethodMetaInfo, createTaxGroup, deleteTaxGroup, getTaxGroup, listDefaultTaxGroups, listDefaultTaxGroupsByAppIds, queryTaxGroups, updateTaxGroup };
