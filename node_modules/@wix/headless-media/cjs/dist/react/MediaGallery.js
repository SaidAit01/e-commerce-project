import { useService } from "@wix/services-manager-react";
import { MediaGalleryServiceDefinition } from "../services/index.js";
/**
 * Headless component for displaying the main viewport media
 */
export const Viewport = (props) => {
    const mediaService = useService(MediaGalleryServiceDefinition);
    const currentIndex = mediaService.selectedMediaIndex.get();
    const mediaToDisplay = mediaService.mediaToDisplay.get();
    if (mediaToDisplay.length === 0) {
        return null;
    }
    // Get the current media from the relevant media array
    const src = mediaToDisplay[currentIndex].image;
    const alt = mediaToDisplay[currentIndex].altText;
    return props.children({
        src,
        alt,
    });
};
/**
 * Headless component for managing a list of thumbnails
 */
export const ThumbnailList = (props) => {
    const mediaService = useService(MediaGalleryServiceDefinition);
    const mediaToDisplay = mediaService.mediaToDisplay.get();
    if (mediaToDisplay.length <= 1) {
        return null;
    }
    return props.children({
        items: mediaToDisplay,
    });
};
/**
 * Headless component for individual media thumbnail
 */
export const ThumbnailItem = (props) => {
    const mediaService = useService(MediaGalleryServiceDefinition);
    const currentIndex = mediaService.selectedMediaIndex.get();
    const mediaToDisplay = mediaService.mediaToDisplay.get();
    if (mediaToDisplay.length === 0) {
        return null;
    }
    // Get the image source from the centralized relevant images
    const src = mediaToDisplay[props.index].image;
    const alt = mediaToDisplay[props.index].altText;
    const isActive = currentIndex === props.index;
    const onSelect = () => {
        mediaService.setSelectedMediaIndex(props.index);
    };
    return props.children({
        item: mediaToDisplay[props.index],
        src,
        isActive,
        onSelect,
        index: props.index,
        alt,
    });
};
/**
 * Headless component for next media navigation
 */
export const Next = (props) => {
    const mediaService = useService(MediaGalleryServiceDefinition);
    const currentIndex = mediaService.selectedMediaIndex.get();
    const totalMedia = mediaService.totalMedia.get();
    const canGoNext = currentIndex < totalMedia - 1;
    if (totalMedia <= 1) {
        return null;
    }
    return props.children({
        onNext: mediaService.nextMedia,
        canGoNext,
    });
};
/**
 * Headless component for previous media navigation
 */
export const Previous = (props) => {
    const mediaService = useService(MediaGalleryServiceDefinition);
    const currentIndex = mediaService.selectedMediaIndex.get();
    const totalMedia = mediaService.totalMedia.get();
    const canGoPrevious = currentIndex > 0;
    if (totalMedia <= 1) {
        return null;
    }
    return props.children({
        onPrevious: mediaService.previousMedia,
        canGoPrevious,
    });
};
/**
 * Headless component for media gallery indicator/counter
 */
export const Indicator = (props) => {
    const mediaService = useService(MediaGalleryServiceDefinition);
    const currentIndex = mediaService.selectedMediaIndex.get();
    const totalMedia = mediaService.totalMedia.get();
    if (totalMedia <= 1) {
        return null;
    }
    return props.children({
        current: currentIndex + 1,
        total: totalMedia,
    });
};
