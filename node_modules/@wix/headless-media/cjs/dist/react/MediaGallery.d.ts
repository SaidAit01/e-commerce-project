/**
 * Props for Viewport headless component
 */
export interface ViewportProps {
    /** Render prop function that receives viewport data */
    children: (props: ViewportRenderProps) => React.ReactNode;
}
/**
 * Render props for Viewport component
 */
export interface ViewportRenderProps {
    /** Media URL */
    src: string | null;
    /** Alt text for media */
    alt: string;
}
/**
 * Headless component for displaying the main viewport media
 */
export declare const Viewport: (props: ViewportProps) => import("react").ReactNode;
/**
 * Props for ThumbnailList headless component
 */
export interface ThumbnailListProps {
    /** Render prop function that receives thumbnail list data */
    children: (props: ThumbnailListRenderProps) => React.ReactNode;
}
/**
 * Render props for ThumbnailList component
 */
export interface ThumbnailListRenderProps {
    /** Array of media items */
    items: any[];
}
/**
 * Headless component for managing a list of thumbnails
 */
export declare const ThumbnailList: (props: ThumbnailListProps) => import("react").ReactNode;
/**
 * Props for ThumbnailItem headless component
 */
export interface ThumbnailItemProps {
    /** Index of the media item */
    index: number;
    /** Render prop function that receives thumbnail data */
    children: (props: ThumbnailItemRenderProps) => React.ReactNode;
}
/**
 * Render props for ThumbnailItem component
 */
export interface ThumbnailItemRenderProps {
    /** Media item data */
    item: any | null;
    /** Thumbnail image URL */
    src: string | null;
    /** Whether this thumbnail is currently active */
    isActive: boolean;
    /** Function to select this media */
    onSelect: () => void;
    /** Index of this thumbnail */
    index: number;
    /** Alt text for thumbnail */
    alt: string;
}
/**
 * Headless component for individual media thumbnail
 */
export declare const ThumbnailItem: (props: ThumbnailItemProps) => import("react").ReactNode;
/**
 * Props for Next headless component
 */
export interface NextProps {
    /** Render prop function that receives next navigation data */
    children: (props: NextRenderProps) => React.ReactNode;
}
/**
 * Render props for Next component
 */
export interface NextRenderProps {
    /** Function to go to next media */
    onNext: () => void;
    /** Whether there is a next media available */
    canGoNext: boolean;
}
/**
 * Headless component for next media navigation
 */
export declare const Next: (props: NextProps) => import("react").ReactNode;
/**
 * Props for Previous headless component
 */
export interface PreviousProps {
    /** Render prop function that receives previous navigation data */
    children: (props: PreviousRenderProps) => React.ReactNode;
}
/**
 * Render props for Previous component
 */
export interface PreviousRenderProps {
    /** Function to go to previous media */
    onPrevious: () => void;
    /** Whether there is a previous media available */
    canGoPrevious: boolean;
}
/**
 * Headless component for previous media navigation
 */
export declare const Previous: (props: PreviousProps) => import("react").ReactNode;
/**
 * Props for Indicator headless component
 */
export interface IndicatorProps {
    /** Render prop function that receives indicator data */
    children: (props: IndicatorRenderProps) => React.ReactNode;
}
/**
 * Render props for Indicator component
 */
export interface IndicatorRenderProps {
    /** Current media index (1-based for display) */
    current: number;
    /** Total number of media */
    total: number;
}
/**
 * Headless component for media gallery indicator/counter
 */
export declare const Indicator: (props: IndicatorProps) => import("react").ReactNode;
