import { type ServiceFactoryConfig } from '@wix/services-definitions';
import type { Signal } from '@wix/services-definitions/core-services/signals';
export interface UploadState {
    type: 'idle' | 'loading' | 'success' | 'error';
    message: string;
    progress?: number;
}
export interface FileValidationRules {
    maxFileSize?: number;
    allowedTypes?: string[];
    allowedExtensions?: string[];
}
export interface FileUploadServiceAPI {
    selectedFile: Signal<File | null>;
    uploadState: Signal<UploadState>;
    dragOver: Signal<boolean>;
    previewUrl: Signal<string | null>;
    validationRules: FileValidationRules;
    selectFile: (file: File) => void;
    clearFile: () => void;
    uploadFile: () => Promise<void>;
    setDragOver: (isDragOver: boolean) => void;
    validateFile: (file: File) => {
        isValid: boolean;
        error?: string;
    };
    canPreview: (file: File) => boolean;
}
export declare const FileUploadServiceDefinition: string & {
    __api: FileUploadServiceAPI;
    __config: {};
    isServiceDefinition?: boolean;
} & FileUploadServiceAPI;
export declare const FileUploadService: import("@wix/services-definitions").ServiceFactory<string & {
    __api: FileUploadServiceAPI;
    __config: {};
    isServiceDefinition?: boolean;
} & FileUploadServiceAPI, {
    maxFileSize?: number;
    allowedTypes?: string[];
    allowedExtensions?: string[];
    uploadAction: (file: File) => Promise<any>;
    onUploadSuccess?: (result: any) => Promise<void> | void;
    onUploadError?: (error: any) => Promise<void> | void;
}>;
export declare function loadFileUploadServiceConfig(): Promise<Omit<ServiceFactoryConfig<typeof FileUploadService>, 'uploadAction' | 'onUploadSuccess' | 'onUploadError'>>;
