import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { ProductsQueryBuilder, GetProductOptions, GetProductResponse, GetCollectionBySlugResponse, ProductOptionsAvailabilityResponse, QueryProductVariantsOptions, QueryProductVariantsResponse, PlatformQuery, QueryStoreVariantsResponse, GetStoreVariantResponse, Product, CreateProductResponse, UpdateProduct, UpdateProductResponse, VariantOverride, UpdateVariantsResponse, MediaDataForWrite, MediaAssignmentToChoice, Collection, CreateCollectionResponse, UpdateCollection, UpdateCollectionResponse, SetValue, BulkUpdateProductsResponse, AdjustValue, BulkAdjustProductPropertiesResponse, ProductCollectionChangedEnvelope, ProductCollectionCreatedEnvelope, ProductCollectionDeletedEnvelope, ProductChangedEnvelope, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductVariantsChangedEnvelope } from './index.typings.js';
export { AddProductMediaRequest, AddProductMediaResponse, AddProductMediaToChoicesRequest, AddProductMediaToChoicesResponse, AddProductsToCollectionRequest, AddProductsToCollectionResponse, AdditionalInfoSection, AdjustValueValueOneOf, AggregateProductsRequest, AggregateProductsResponse, AllowedProductsCountLimitExceededErrorData, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkAdjustProductPropertiesByFilterSyncRequest, BulkAdjustProductPropertiesByFilterSyncResponse, BulkAdjustProductPropertiesRequest, BulkDeleteProductsRequest, BulkDeleteProductsResponse, BulkProductResult, BulkQueryCustomFieldsRequest, BulkQueryCustomFieldsResponse, BulkRemoveCustomFieldsRequest, BulkRemoveCustomFieldsResponse, BulkSetCustomFieldsRequest, BulkSetCustomFieldsResponse, BulkUpdateProductsByFilterSyncRequest, BulkUpdateProductsByFilterSyncResponse, BulkUpdateProductsRequest, Choice, CollectionChanged, CollectionCreated, CollectionDeleted, CostAndProfitData, CreateCollectionRequest, CreateDigitalProductRequest, CreateDigitalProductResponse, CreateProductPlatformizedRequest, CreateProductPlatformizedResponse, CreateProductRequest, CursorPaging, Cursors, CustomFieldsContainer, CustomTextField, DeleteCollectionRequest, DeleteCollectionResponse, DeleteProductOptionsRequest, DeleteProductOptionsResponse, DeleteProductPlatformizedRequest, DeleteProductPlatformizedResponse, DeleteProductRequest, DeleteProductResponse, Discount, DiscountType, DiscountTypeWithLiterals, FileType, FileTypeWithLiterals, FocalPoint, FormattedPrice, GetCollectionBySlugRequest, GetCollectionRequest, GetCollectionResponse, GetProductPlatformizedRequest, GetProductPlatformizedResponse, GetProductRequest, GetProductsRequest, GetProductsResponse, GetStoreVariantRequest, IdentificationData, IdentificationDataIdOneOf, InventoryStatus, InventoryStatusWithLiterals, ItemMetadata, Keyword, MeasurementUnit, MeasurementUnitWithLiterals, Media, MediaDataForWriteMediaSourceOneOf, MediaItem, MediaItemItemOneOf, MediaItemType, MediaItemTypeWithLiterals, MediaItemUrlAndSize, MediaItemVideo, MessageEnvelope, NumericPropertyRange, OptionAndChoice, OptionType, OptionTypeWithLiterals, PageUrl, Paging, PagingMetadata, PagingWithBigLimit, PercentageData, PlatformMedia, PlatformMediaMediaOneOf, PlatformPaging, PlatformPagingMetadata, PlatformQueryPagingMethodOneOf, PreorderInfo, PriceData, PricePerUnitData, ProductChanged, ProductCreated, ProductDeleted, ProductOption, ProductOptionsAvailabilityRequest, ProductType, ProductTypeWithLiterals, ProductsQueryResult, PropertyAdjustmentData, PropertyAdjustmentDataByOneOf, Query, QueryCollectionsPlatformizedRequest, QueryCollectionsPlatformizedResponse, QueryCollectionsRequest, QueryCollectionsResponse, QueryCustomFieldsRequest, QueryCustomFieldsResponse, QueryProductVariantsRequest, QueryProductsPlatformizedRequest, QueryProductsPlatformizedResponse, QueryProductsRequest, QueryProductsResponse, QueryProductsWithBigPageLimitRequest, QueryStoreVariantsRequest, QueryStoreVariantsWithBigLimitRequest, QueryWithBigPageLimit, ReCloneStoreRequest, ReCloneStoreResponse, RemoveCustomFieldsRequest, RemoveCustomFieldsResponse, RemoveProductBrandRequest, RemoveProductBrandResponse, RemoveProductMediaFromChoicesRequest, RemoveProductMediaFromChoicesResponse, RemoveProductMediaRequest, RemoveProductMediaResponse, RemoveProductRibbonRequest, RemoveProductRibbonResponse, RemoveProductsFromCollectionRequest, RemoveProductsFromCollectionResponse, ResetAllVariantDataRequest, ResetAllVariantDataResponse, Ribbon, SecuredMedia, SeoSchema, SetCustomFieldsRequest, SetCustomFieldsResponse, SetValueValueOneOf, Settings, SortOrder, SortOrderWithLiterals, Sorting, Stock, StoreVariant, Tag, UnlimitedPlatformCursorPaging, UnlimitedPlatformPaging, UnlimitedPlatformQuery, UnlimitedPlatformQueryPagingMethodOneOf, UpdateCollectionRequest, UpdateProductPlatformizedRequest, UpdateProductPlatformizedResponse, UpdateProductRequest, UpdateVariantsRequest, V1CreateProductPlatformizedRequest, V1CreateProductPlatformizedResponse, V1DeleteProductPlatformizedRequest, V1DeleteProductPlatformizedResponse, V1UpdateProductPlatformizedRequest, V1UpdateProductPlatformizedResponse, Variant, VariantChanged, VariantData, VariantDataWithNoStock, VariantStock, VariantsChanged, Version, VersionWithLiterals, VideoResolution, WebhookIdentityType, WebhookIdentityTypeWithLiterals } from './index.typings.js';

declare function queryProducts$1(httpClient: HttpClient): QueryProductsSignature;
interface QueryProductsSignature {
    /**
     * Returns a list of up to 100 products, given the provided paging, sorting and filtering.
     */
    (): ProductsQueryBuilder;
}
declare function getProduct$1(httpClient: HttpClient): GetProductSignature;
interface GetProductSignature {
    /**
     * Retrieves a product with the provided ID.
     * @param - Requested product ID.
     */
    (_id: string, options?: GetProductOptions): Promise<NonNullablePaths<GetProductResponse, `product._id` | `product.slug` | `product.productType` | `product.weightRange.minValue` | `product.weightRange.maxValue` | `product.stock.trackInventory` | `product.stock.inStock` | `product.stock.inventoryStatus` | `product.price.currency` | `product.price.discountedPrice` | `product.price.formatted.price` | `product.price.formatted.discountedPrice` | `product.costAndProfitData.formattedItemCost` | `product.costAndProfitData.profit` | `product.costAndProfitData.formattedProfit` | `product.costAndProfitData.profitMargin` | `product.pricePerUnitData.totalQuantity` | `product.pricePerUnitData.totalMeasurementUnit` | `product.pricePerUnitData.baseQuantity` | `product.pricePerUnitData.baseMeasurementUnit` | `product.additionalInfoSections` | `product.additionalInfoSections.${number}.title` | `product.additionalInfoSections.${number}.description` | `product.ribbons` | `product.ribbons.${number}.text` | `product.media.mainMedia.image.url` | `product.media.mainMedia.image.width` | `product.media.mainMedia.image.height` | `product.media.mainMedia.video.files` | `product.media.mainMedia.video.stillFrameMediaId` | `product.media.mainMedia.mediaType` | `product.media.mainMedia.title` | `product.media.mainMedia._id` | `product.media.items` | `product.customTextFields` | `product.customTextFields.${number}.title` | `product.customTextFields.${number}.maxLength` | `product.customTextFields.${number}.mandatory` | `product.productOptions` | `product.productOptions.${number}.optionType` | `product.productOptions.${number}.name` | `product.productPageUrl.base` | `product.productPageUrl.path` | `product.numericId` | `product.inventoryItemId` | `product.discount.type` | `product.discount.value` | `product.collectionIds` | `product.variants` | `product.variants.${number}._id` | `product.variants.${number}.variant.weight` | `product.variants.${number}.variant.sku` | `product.variants.${number}.variant.visible` | `product.variants.${number}.stock.trackQuantity` | `product.variants.${number}.stock.inStock` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain`, 7>>;
}
declare function getCollectionBySlug$1(httpClient: HttpClient): GetCollectionBySlugSignature;
interface GetCollectionBySlugSignature {
    /**
     * Retrieves a collection with the provided slug.
     * @param - Slug of the collection to retrieve.
     */
    (slug: string): Promise<NonNullablePaths<GetCollectionBySlugResponse, `collection.media.mainMedia.image.url` | `collection.media.mainMedia.image.width` | `collection.media.mainMedia.image.height` | `collection.media.mainMedia.video.files` | `collection.media.mainMedia.video.stillFrameMediaId` | `collection.media.mainMedia.mediaType` | `collection.media.mainMedia.title` | `collection.media.mainMedia._id` | `collection.media.items` | `collection.numberOfProducts`, 6>>;
}
declare function getProductOptionsAvailability$1(httpClient: HttpClient): GetProductOptionsAvailabilitySignature;
interface GetProductOptionsAvailabilitySignature {
    /**
     * Gets the availability of relevant product variants based on the product ID and selections provided. See [Use Cases](https://dev.wix.com/api/rest/wix-stores/catalog/use-cases) for an example.
     * @param - Requested product ID.
     * @param - Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`.
     */
    (_id: string, options: Record<string, string>): Promise<NonNullablePaths<ProductOptionsAvailabilityResponse, `selectedVariant.price.currency` | `selectedVariant.price.discountedPrice` | `selectedVariant.price.formatted.price` | `selectedVariant.price.formatted.discountedPrice` | `selectedVariant.sku` | `selectedVariant.inStock` | `selectedVariant.visible` | `media.mainMedia.image.url` | `media.mainMedia.image.width` | `media.mainMedia.image.height` | `media.mainMedia.video.files` | `media.mainMedia.video.stillFrameMediaId` | `media.mainMedia.mediaType` | `media.mainMedia.title` | `media.mainMedia._id` | `media.items` | `productOptions` | `productOptions.${number}.optionType` | `productOptions.${number}.name` | `availableForPurchase`, 5>>;
}
declare function queryProductVariants$1(httpClient: HttpClient): QueryProductVariantsSignature;
interface QueryProductVariantsSignature {
    /**
     * Retrieves product variants, based on either choices (option-choice key-value pairs) or variant IDs.
     * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
     * @param - Requested product ID.
     */
    (_id: string, options?: QueryProductVariantsOptions): Promise<NonNullablePaths<QueryProductVariantsResponse, `variants` | `variants.${number}._id` | `variants.${number}.variant.priceData.currency` | `variants.${number}.variant.priceData.discountedPrice` | `variants.${number}.variant.costAndProfitData.formattedItemCost` | `variants.${number}.variant.costAndProfitData.profit` | `variants.${number}.variant.costAndProfitData.formattedProfit` | `variants.${number}.variant.costAndProfitData.profitMargin` | `variants.${number}.variant.weight` | `variants.${number}.variant.sku` | `variants.${number}.variant.visible` | `variants.${number}.stock.trackQuantity` | `variants.${number}.stock.inStock` | `metadata.items` | `metadata.offset` | `totalResults`, 6>>;
}
declare function queryStoreVariants$1(httpClient: HttpClient): QueryStoreVariantsSignature;
interface QueryStoreVariantsSignature {
    /**
     * Retrieves up to 100 store variants, given the provided paging, filtering, and sorting.
     * @param - Query options.
     */
    (query: PlatformQuery): Promise<NonNullablePaths<QueryStoreVariantsResponse, `variants` | `variants.${number}._id` | `variants.${number}.variantId` | `variants.${number}.productId` | `variants.${number}.variantName` | `variants.${number}.productName` | `variants.${number}.managedVariant` | `variants.${number}.sku` | `variants.${number}.stock.trackQuantity` | `variants.${number}.stock.inStock` | `variants.${number}.preorderInfo.enabled`, 5>>;
}
declare function getStoreVariant$1(httpClient: HttpClient): GetStoreVariantSignature;
interface GetStoreVariantSignature {
    /**
     * Retrieves a store variant with the provided ID.
     * @param - Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`.
     */
    (_id: string): Promise<NonNullablePaths<GetStoreVariantResponse, `variant._id` | `variant.variantId` | `variant.productId` | `variant.variantName` | `variant.productName` | `variant.managedVariant` | `variant.sku` | `variant.stock.trackQuantity` | `variant.stock.inStock` | `variant.collectionIds` | `variant.preorderInfo.enabled`, 4>>;
}
declare function createProduct$1(httpClient: HttpClient): CreateProductSignature;
interface CreateProductSignature {
    /**
     * Creates a new product.
     * @param - Product information.
     */
    (product: NonNullablePaths<Product, `costAndProfitData.itemCost` | `name` | `priceData` | `priceData.price`, 3>): Promise<NonNullablePaths<CreateProductResponse, `product._id` | `product.slug` | `product.productType` | `product.weightRange.minValue` | `product.weightRange.maxValue` | `product.stock.trackInventory` | `product.stock.inStock` | `product.stock.inventoryStatus` | `product.price.currency` | `product.price.discountedPrice` | `product.price.formatted.price` | `product.price.formatted.discountedPrice` | `product.costAndProfitData.formattedItemCost` | `product.costAndProfitData.profit` | `product.costAndProfitData.formattedProfit` | `product.costAndProfitData.profitMargin` | `product.pricePerUnitData.totalQuantity` | `product.pricePerUnitData.totalMeasurementUnit` | `product.pricePerUnitData.baseQuantity` | `product.pricePerUnitData.baseMeasurementUnit` | `product.additionalInfoSections` | `product.additionalInfoSections.${number}.title` | `product.additionalInfoSections.${number}.description` | `product.ribbons` | `product.ribbons.${number}.text` | `product.media.mainMedia.image.url` | `product.media.mainMedia.image.width` | `product.media.mainMedia.image.height` | `product.media.mainMedia.video.files` | `product.media.mainMedia.video.stillFrameMediaId` | `product.media.mainMedia.mediaType` | `product.media.mainMedia.title` | `product.media.mainMedia._id` | `product.media.items` | `product.customTextFields` | `product.customTextFields.${number}.title` | `product.customTextFields.${number}.maxLength` | `product.customTextFields.${number}.mandatory` | `product.productOptions` | `product.productOptions.${number}.optionType` | `product.productOptions.${number}.name` | `product.productPageUrl.base` | `product.productPageUrl.path` | `product.numericId` | `product.inventoryItemId` | `product.discount.type` | `product.discount.value` | `product.collectionIds` | `product.variants` | `product.variants.${number}._id` | `product.variants.${number}.variant.weight` | `product.variants.${number}.variant.sku` | `product.variants.${number}.variant.visible` | `product.variants.${number}.stock.trackQuantity` | `product.variants.${number}.stock.inStock` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain`, 7>>;
}
declare function updateProduct$1(httpClient: HttpClient): UpdateProductSignature;
interface UpdateProductSignature {
    /**
     * Updates specified fields in a product.
     *
     * To update a single field across multiple products, use [Bulk Update Product Property](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/bulk-update-product-property).
     * @param - Product ID (generated automatically by the catalog).
     * @param - Product info to update.
     */
    (_id: string, product: UpdateProduct): Promise<NonNullablePaths<UpdateProductResponse, `product._id` | `product.slug` | `product.productType` | `product.weightRange.minValue` | `product.weightRange.maxValue` | `product.stock.trackInventory` | `product.stock.inStock` | `product.stock.inventoryStatus` | `product.price.currency` | `product.price.discountedPrice` | `product.price.formatted.price` | `product.price.formatted.discountedPrice` | `product.costAndProfitData.formattedItemCost` | `product.costAndProfitData.profit` | `product.costAndProfitData.formattedProfit` | `product.costAndProfitData.profitMargin` | `product.pricePerUnitData.totalQuantity` | `product.pricePerUnitData.totalMeasurementUnit` | `product.pricePerUnitData.baseQuantity` | `product.pricePerUnitData.baseMeasurementUnit` | `product.additionalInfoSections` | `product.additionalInfoSections.${number}.title` | `product.additionalInfoSections.${number}.description` | `product.ribbons` | `product.ribbons.${number}.text` | `product.media.mainMedia.image.url` | `product.media.mainMedia.image.width` | `product.media.mainMedia.image.height` | `product.media.mainMedia.video.files` | `product.media.mainMedia.video.stillFrameMediaId` | `product.media.mainMedia.mediaType` | `product.media.mainMedia.title` | `product.media.mainMedia._id` | `product.media.items` | `product.customTextFields` | `product.customTextFields.${number}.title` | `product.customTextFields.${number}.maxLength` | `product.customTextFields.${number}.mandatory` | `product.productOptions` | `product.productOptions.${number}.optionType` | `product.productOptions.${number}.name` | `product.productPageUrl.base` | `product.productPageUrl.path` | `product.numericId` | `product.inventoryItemId` | `product.discount.type` | `product.discount.value` | `product.collectionIds` | `product.variants` | `product.variants.${number}._id` | `product.variants.${number}.variant.weight` | `product.variants.${number}.variant.sku` | `product.variants.${number}.variant.visible` | `product.variants.${number}.stock.trackQuantity` | `product.variants.${number}.stock.inStock` | `product.seoData.tags` | `product.seoData.tags.${number}.type` | `product.seoData.tags.${number}.children` | `product.seoData.tags.${number}.custom` | `product.seoData.tags.${number}.disabled` | `product.seoData.settings.preventAutoRedirect` | `product.seoData.settings.keywords` | `product.seoData.settings.keywords.${number}.term` | `product.seoData.settings.keywords.${number}.isMain`, 7>>;
}
declare function deleteProduct$1(httpClient: HttpClient): DeleteProductSignature;
interface DeleteProductSignature {
    /**
     * Deletes a product.
     * @param - ID of the product to delete.
     */
    (_id: string): Promise<void>;
}
declare function updateProductVariants$1(httpClient: HttpClient): UpdateProductVariantsSignature;
interface UpdateProductVariantsSignature {
    /**
     * Updates variants of a specified product.
     * @param - ID of the product with managed variants.
     * @param - Variant info to update.
     */
    (_id: string, variants: VariantOverride[]): Promise<NonNullablePaths<UpdateVariantsResponse, `variants` | `variants.${number}._id` | `variants.${number}.variant.priceData.currency` | `variants.${number}.variant.priceData.discountedPrice` | `variants.${number}.variant.costAndProfitData.formattedItemCost` | `variants.${number}.variant.costAndProfitData.profit` | `variants.${number}.variant.costAndProfitData.formattedProfit` | `variants.${number}.variant.costAndProfitData.profitMargin` | `variants.${number}.variant.weight` | `variants.${number}.variant.sku` | `variants.${number}.variant.visible` | `variants.${number}.stock.trackQuantity` | `variants.${number}.stock.inStock`, 6>>;
}
declare function resetAllProductVariantData$1(httpClient: HttpClient): ResetAllProductVariantDataSignature;
interface ResetAllProductVariantDataSignature {
    /**
     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
declare function addProductsToCollection$1(httpClient: HttpClient): AddProductsToCollectionSignature;
interface AddProductsToCollectionSignature {
    /**
     * Adds products to a specified collection.
     * @param - Collection ID.
     * @param - IDs of the products to add to the collection, separated by commas.
     */
    (_id: string, productIds: string[]): Promise<void>;
}
declare function removeProductsFromCollection$1(httpClient: HttpClient): RemoveProductsFromCollectionSignature;
interface RemoveProductsFromCollectionSignature {
    /**
     * Deletes products from a specified collection.
     * @param - ID of the collection from which to remove products.
     * @param - IDs of the products to remove from the collection.
     */
    (_id: string, productIds: string[]): Promise<void>;
}
declare function addProductMedia$1(httpClient: HttpClient): AddProductMediaSignature;
interface AddProductMediaSignature {
    /**
     * Adds media items to a specified product, either via URL or existing media ID.
     *
     * > **NOTE:** The URL is not validated and no event is triggered to indicate if the media was added successfully.
     * @param - Product ID.
     * @param - Sources of media items already uploaded to the Wix site.
     */
    (_id: string, media: MediaDataForWrite[]): Promise<void>;
}
declare function removeProductMedia$1(httpClient: HttpClient): RemoveProductMediaSignature;
interface RemoveProductMediaSignature {
    /**
     * Removes specified media items from a product.
     * Pass an empty array to remove all media items.
     * @param - Product ID.
     * @param - List of media IDs to remove. Pass an empty array to delete all media items for the product.
     */
    (_id: string, mediaIds: string[]): Promise<void>;
}
declare function addProductMediaToChoices$1(httpClient: HttpClient): AddProductMediaToChoicesSignature;
interface AddProductMediaToChoicesSignature {
    /**
     * Links media items that are already associated with a specific product to a choice within the same product.
     *
     * Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).
     *
     * To remove all existing media items, call the [Remove Product Media From Choices](https://dev.wix.com/api/rest/wix-stores/catalog/products/remove-product-media-from-choices) endpoint.
     * @param - Product ID.
     * @param - Product media items and the choices to add the media to.
     */
    (_id: string, media: NonNullablePaths<MediaAssignmentToChoice, `choice` | `option`, 2>[]): Promise<void>;
}
declare function removeProductMediaFromChoices$1(httpClient: HttpClient): RemoveProductMediaFromChoicesSignature;
interface RemoveProductMediaFromChoicesSignature {
    /**
     * Removes media items from all or some of a product's choices.
     * (Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).)
     * @param - Product ID from whose choices to remove media items.
     * @param - Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product.
     */
    (_id: string, media: MediaAssignmentToChoice[]): Promise<void>;
}
declare function deleteProductOptions$1(httpClient: HttpClient): DeleteProductOptionsSignature;
interface DeleteProductOptionsSignature {
    /**
     * Delete all options from a specific product. Only available when [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is disabled.
     * @param - ID of the product with options to delete.
     */
    (_id: string): Promise<void>;
}
declare function removeBrand$1(httpClient: HttpClient): RemoveBrandSignature;
interface RemoveBrandSignature {
    /**
     * Deletes a product's brand.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
declare function createCollection$1(httpClient: HttpClient): CreateCollectionSignature;
interface CreateCollectionSignature {
    /**
     * Creates a new collection.
     * @param - Collection info.
     */
    (collection: NonNullablePaths<Collection, `name`, 2>): Promise<NonNullablePaths<CreateCollectionResponse, `collection.media.mainMedia.image.url` | `collection.media.mainMedia.image.width` | `collection.media.mainMedia.image.height` | `collection.media.mainMedia.video.files` | `collection.media.mainMedia.video.stillFrameMediaId` | `collection.media.mainMedia.mediaType` | `collection.media.mainMedia.title` | `collection.media.mainMedia._id` | `collection.media.items` | `collection.numberOfProducts`, 6>>;
}
declare function updateCollection$1(httpClient: HttpClient): UpdateCollectionSignature;
interface UpdateCollectionSignature {
    /**
     * Updates specified properties of a collection. To add products to a collection, call the [addProductsToCollection](#addproductstocollection) function.
     * @param - Collection ID (generated automatically by the catalog).
     * @param - Collection info to update.
     */
    (_id: string, collection: UpdateCollection): Promise<NonNullablePaths<UpdateCollectionResponse, `collection.media.mainMedia.image.url` | `collection.media.mainMedia.image.width` | `collection.media.mainMedia.image.height` | `collection.media.mainMedia.video.files` | `collection.media.mainMedia.video.stillFrameMediaId` | `collection.media.mainMedia.mediaType` | `collection.media.mainMedia.title` | `collection.media.mainMedia._id` | `collection.media.items` | `collection.numberOfProducts`, 6>>;
}
declare function deleteCollection$1(httpClient: HttpClient): DeleteCollectionSignature;
interface DeleteCollectionSignature {
    /**
     * Deletes a collection.
     * @param - ID of the collection to delete.
     */
    (_id: string): Promise<void>;
}
declare function removeRibbon$1(httpClient: HttpClient): RemoveRibbonSignature;
interface RemoveRibbonSignature {
    /**
     * Deletes a product's ribbon.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
declare function bulkUpdateProductsProperty$1(httpClient: HttpClient): BulkUpdateProductsPropertySignature;
interface BulkUpdateProductsPropertySignature {
    /**
     * Updates a specified property for up to 100 products at a time.
     * @param - Product IDs.
     * @param - Field to update.
     */
    (ids: string[], set: SetValue): Promise<NonNullablePaths<BulkUpdateProductsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare function bulkAdjustProductProperty$1(httpClient: HttpClient): BulkAdjustProductPropertySignature;
interface BulkAdjustProductPropertySignature {
    /**
     * Adjusts a specified numerical property for up to 100 products at a time.
     * The property can be increased or decreased either by percentage or amount.
     * @param - Numerical property to adjust.
     * @param - Product IDs.
     */
    (adjust: AdjustValue, ids: string[]): Promise<NonNullablePaths<BulkAdjustProductPropertiesResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`, 6>>;
}
declare const onProductCollectionChanged$1: EventDefinition<ProductCollectionChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionChanged">;
declare const onProductCollectionCreated$1: EventDefinition<ProductCollectionCreatedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionCreated">;
declare const onProductCollectionDeleted$1: EventDefinition<ProductCollectionDeletedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionDeleted">;
declare const onProductChanged$1: EventDefinition<ProductChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductChanged">;
declare const onProductCreated$1: EventDefinition<ProductCreatedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductCreated">;
declare const onProductDeleted$1: EventDefinition<ProductDeletedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductDeleted">;
declare const onProductVariantsChanged$1: EventDefinition<ProductVariantsChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.VariantsChanged">;

declare const queryProducts: MaybeContext<BuildRESTFunction<typeof queryProducts$1> & typeof queryProducts$1>;
declare const getProduct: MaybeContext<BuildRESTFunction<typeof getProduct$1> & typeof getProduct$1>;
declare const getCollectionBySlug: MaybeContext<BuildRESTFunction<typeof getCollectionBySlug$1> & typeof getCollectionBySlug$1>;
declare const getProductOptionsAvailability: MaybeContext<BuildRESTFunction<typeof getProductOptionsAvailability$1> & typeof getProductOptionsAvailability$1>;
declare const queryProductVariants: MaybeContext<BuildRESTFunction<typeof queryProductVariants$1> & typeof queryProductVariants$1>;
declare const queryStoreVariants: MaybeContext<BuildRESTFunction<typeof queryStoreVariants$1> & typeof queryStoreVariants$1>;
declare const getStoreVariant: MaybeContext<BuildRESTFunction<typeof getStoreVariant$1> & typeof getStoreVariant$1>;
declare const createProduct: MaybeContext<BuildRESTFunction<typeof createProduct$1> & typeof createProduct$1>;
declare const updateProduct: MaybeContext<BuildRESTFunction<typeof updateProduct$1> & typeof updateProduct$1>;
declare const deleteProduct: MaybeContext<BuildRESTFunction<typeof deleteProduct$1> & typeof deleteProduct$1>;
declare const updateProductVariants: MaybeContext<BuildRESTFunction<typeof updateProductVariants$1> & typeof updateProductVariants$1>;
declare const resetAllProductVariantData: MaybeContext<BuildRESTFunction<typeof resetAllProductVariantData$1> & typeof resetAllProductVariantData$1>;
declare const addProductsToCollection: MaybeContext<BuildRESTFunction<typeof addProductsToCollection$1> & typeof addProductsToCollection$1>;
declare const removeProductsFromCollection: MaybeContext<BuildRESTFunction<typeof removeProductsFromCollection$1> & typeof removeProductsFromCollection$1>;
declare const addProductMedia: MaybeContext<BuildRESTFunction<typeof addProductMedia$1> & typeof addProductMedia$1>;
declare const removeProductMedia: MaybeContext<BuildRESTFunction<typeof removeProductMedia$1> & typeof removeProductMedia$1>;
declare const addProductMediaToChoices: MaybeContext<BuildRESTFunction<typeof addProductMediaToChoices$1> & typeof addProductMediaToChoices$1>;
declare const removeProductMediaFromChoices: MaybeContext<BuildRESTFunction<typeof removeProductMediaFromChoices$1> & typeof removeProductMediaFromChoices$1>;
declare const deleteProductOptions: MaybeContext<BuildRESTFunction<typeof deleteProductOptions$1> & typeof deleteProductOptions$1>;
declare const removeBrand: MaybeContext<BuildRESTFunction<typeof removeBrand$1> & typeof removeBrand$1>;
declare const createCollection: MaybeContext<BuildRESTFunction<typeof createCollection$1> & typeof createCollection$1>;
declare const updateCollection: MaybeContext<BuildRESTFunction<typeof updateCollection$1> & typeof updateCollection$1>;
declare const deleteCollection: MaybeContext<BuildRESTFunction<typeof deleteCollection$1> & typeof deleteCollection$1>;
declare const removeRibbon: MaybeContext<BuildRESTFunction<typeof removeRibbon$1> & typeof removeRibbon$1>;
declare const bulkUpdateProductsProperty: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsProperty$1> & typeof bulkUpdateProductsProperty$1>;
declare const bulkAdjustProductProperty: MaybeContext<BuildRESTFunction<typeof bulkAdjustProductProperty$1> & typeof bulkAdjustProductProperty$1>;
/**
 * Triggered when a collection is changed.
 */
declare const onProductCollectionChanged: BuildEventDefinition<typeof onProductCollectionChanged$1> & typeof onProductCollectionChanged$1;
/**
 * Triggered when a collection is created.
 */
declare const onProductCollectionCreated: BuildEventDefinition<typeof onProductCollectionCreated$1> & typeof onProductCollectionCreated$1;
/**
 * Triggered when a collection is deleted.
 */
declare const onProductCollectionDeleted: BuildEventDefinition<typeof onProductCollectionDeleted$1> & typeof onProductCollectionDeleted$1;
/**
 * Triggered when a product is changed.
 */
declare const onProductChanged: BuildEventDefinition<typeof onProductChanged$1> & typeof onProductChanged$1;
/**
 * Triggered when a product is created.
 */
declare const onProductCreated: BuildEventDefinition<typeof onProductCreated$1> & typeof onProductCreated$1;
/**
 * Triggered when a product is deleted.
 */
declare const onProductDeleted: BuildEventDefinition<typeof onProductDeleted$1> & typeof onProductDeleted$1;
/**
 * Triggered when a product variant is changed.
 */
declare const onProductVariantsChanged: BuildEventDefinition<typeof onProductVariantsChanged$1> & typeof onProductVariantsChanged$1;

export { AdjustValue, BulkAdjustProductPropertiesResponse, BulkUpdateProductsResponse, Collection, CreateCollectionResponse, CreateProductResponse, GetCollectionBySlugResponse, GetProductOptions, GetProductResponse, GetStoreVariantResponse, MediaAssignmentToChoice, MediaDataForWrite, PlatformQuery, Product, ProductChangedEnvelope, ProductCollectionChangedEnvelope, ProductCollectionCreatedEnvelope, ProductCollectionDeletedEnvelope, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductOptionsAvailabilityResponse, ProductVariantsChangedEnvelope, ProductsQueryBuilder, QueryProductVariantsOptions, QueryProductVariantsResponse, QueryStoreVariantsResponse, SetValue, UpdateCollection, UpdateCollectionResponse, UpdateProduct, UpdateProductResponse, UpdateVariantsResponse, VariantOverride, addProductMedia, addProductMediaToChoices, addProductsToCollection, bulkAdjustProductProperty, bulkUpdateProductsProperty, createCollection, createProduct, deleteCollection, deleteProduct, deleteProductOptions, getCollectionBySlug, getProduct, getProductOptionsAvailability, getStoreVariant, onProductChanged, onProductCollectionChanged, onProductCollectionCreated, onProductCollectionDeleted, onProductCreated, onProductDeleted, onProductVariantsChanged, queryProductVariants, queryProducts, queryStoreVariants, removeBrand, removeProductMedia, removeProductMediaFromChoices, removeProductsFromCollection, removeRibbon, resetAllProductVariantData, updateCollection, updateProduct, updateProductVariants };
